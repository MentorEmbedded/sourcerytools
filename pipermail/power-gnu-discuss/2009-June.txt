From david at westcontrol.com  Mon Jun  1 21:25:13 2009
From: david at westcontrol.com (David Brown)
Date: Mon, 01 Jun 2009 23:25:13 +0200
Subject: Support for the MPC5554 (e200z6 core)
Message-ID: <4A244739.10509@westcontrol.com>

Hi,

I have a customer who is looking at using a Freescale MPC5554 in an 
application, and is looking for appropriate tools.  I've been having a 
look at the Lite edition of the CodeSourcery PPC gcc toolset. 
Unfortunately, I've run into a big problem.

The MPC5554 uses the e200z6 core, which is fairly similar to the e300c2 
core supported by the "-mcpu=e300c2" flag.  The problem with both these 
cores is that they support hardware floating point for single precision 
arithmetic using the "SPE" (Signal Processing Extension) instructions, 
with the floating point data held in general purpose registers - they do 
not support the Book E floating point registers and instructions.  My 
problem is that I cannot get gcc to generate spe instructions for 
hardware floating point code.

Does anyone know if current gcc versions support using spe instructions 
for hardware floating point, or if there is likely to be any support 
soon?  If I can't find a way to generate the spe instructions from gcc, 
I'm going to have to recommend my customer buys Code Worrier...

mvh.,

David Brown
WesControl a.s
Norway.


From andrewd.lists at gmail.com  Mon Jun  1 22:53:10 2009
From: andrewd.lists at gmail.com (Andrew Dennison)
Date: Tue, 2 Jun 2009 08:53:10 +1000
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <4A244739.10509@westcontrol.com>
References: <4A244739.10509@westcontrol.com>
Message-ID: <54823def0906011553y70e668ffy11a275db333aa580@mail.gmail.com>

On Tue, Jun 2, 2009 at 7:25 AM, David Brown <david at westcontrol.com> wrote:
> Hi,
>
> I have a customer who is looking at using a Freescale MPC5554 in an
> application, and is looking for appropriate tools. ?I've been having a look
> at the Lite edition of the CodeSourcery PPC gcc toolset. Unfortunately, I've
> run into a big problem.
>
> The MPC5554 uses the e200z6 core, which is fairly similar to the e300c2 core
> supported by the "-mcpu=e300c2" flag. ?The problem with both these cores is
> that they support hardware floating point for single precision arithmetic
> using the "SPE" (Signal Processing Extension) instructions, with the
> floating point data held in general purpose registers - they do not support
> the Book E floating point registers and instructions. ?My problem is that I
> cannot get gcc to generate spe instructions for hardware floating point
> code.
>
> Does anyone know if current gcc versions support using spe instructions for
> hardware floating point, or if there is likely to be any support soon? ?If I
> can't find a way to generate the spe instructions from gcc, I'm going to
> have to recommend my customer buys Code Worrier...

-fshort-double triggers gcc to emit the single precision floating
point instructions.


From david at westcontrol.com  Mon Jun  1 23:18:06 2009
From: david at westcontrol.com (David Brown)
Date: Tue, 02 Jun 2009 01:18:06 +0200
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <54823def0906011553y70e668ffy11a275db333aa580@mail.gmail.com>
References: <4A244739.10509@westcontrol.com> <54823def0906011553y70e668ffy11a275db333aa580@mail.gmail.com>
Message-ID: <4A2461AE.4000102@westcontrol.com>

Andrew Dennison wrote:
> On Tue, Jun 2, 2009 at 7:25 AM, David Brown <david at westcontrol.com> wrote:
>> Hi,
>>
>> I have a customer who is looking at using a Freescale MPC5554 in an
>> application, and is looking for appropriate tools.  I've been having a look
>> at the Lite edition of the CodeSourcery PPC gcc toolset. Unfortunately, I've
>> run into a big problem.
>>
>> The MPC5554 uses the e200z6 core, which is fairly similar to the e300c2 core
>> supported by the "-mcpu=e300c2" flag.  The problem with both these cores is
>> that they support hardware floating point for single precision arithmetic
>> using the "SPE" (Signal Processing Extension) instructions, with the
>> floating point data held in general purpose registers - they do not support
>> the Book E floating point registers and instructions.  My problem is that I
>> cannot get gcc to generate spe instructions for hardware floating point
>> code.
>>
>> Does anyone know if current gcc versions support using spe instructions for
>> hardware floating point, or if there is likely to be any support soon?  If I
>> can't find a way to generate the spe instructions from gcc, I'm going to
>> have to recommend my customer buys Code Worrier...
> 
> -fshort-double triggers gcc to emit the single precision floating
> point instructions.
> 

Yes, I've thought of that.  It could be useful if I were converting old 
code that used doubles, and wanted only single precision code, but it 
doesn't help here.

mvh.,

David


From andrewd.lists at gmail.com  Tue Jun  2 01:07:01 2009
From: andrewd.lists at gmail.com (Andrew Dennison)
Date: Tue, 2 Jun 2009 11:07:01 +1000
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <4A2461AE.4000102@westcontrol.com>
References: <4A244739.10509@westcontrol.com>
	 <54823def0906011553y70e668ffy11a275db333aa580@mail.gmail.com>
	 <4A2461AE.4000102@westcontrol.com>
Message-ID: <54823def0906011807v3bd8891ex7a1dc63952cee87d@mail.gmail.com>

On Tue, Jun 2, 2009 at 9:18 AM, David Brown <david at westcontrol.com> wrote:
> Andrew Dennison wrote:
>>
>> -fshort-double triggers gcc to emit the single precision floating
>> point instructions.
>>
>
> Yes, I've thought of that. ?It could be useful if I were converting old code
> that used doubles, and wanted only single precision code, but it doesn't
> help here.

Works for my 5554 code.


From david at westcontrol.com  Tue Jun  2 06:44:42 2009
From: david at westcontrol.com (David Brown)
Date: Tue, 02 Jun 2009 08:44:42 +0200
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <54823def0906011807v3bd8891ex7a1dc63952cee87d@mail.gmail.com>
References: <4A244739.10509@westcontrol.com>	 <54823def0906011553y70e668ffy11a275db333aa580@mail.gmail.com>	 <4A2461AE.4000102@westcontrol.com> <54823def0906011807v3bd8891ex7a1dc63952cee87d@mail.gmail.com>
Message-ID: <4A24CA5A.4070304@westcontrol.com>

Andrew Dennison wrote:
> On Tue, Jun 2, 2009 at 9:18 AM, David Brown <david at westcontrol.com> wrote:
>> Andrew Dennison wrote:
>>> -fshort-double triggers gcc to emit the single precision floating
>>> point instructions.
>>>
>> Yes, I've thought of that.  It could be useful if I were converting old code
>> that used doubles, and wanted only single precision code, but it doesn't
>> help here.
> 
> Works for my 5554 code.
> 

What -mcpu flag (and any other -m flags) do you use?  I can't find any 
that cause gcc (latest 4.3.3 version) to generate SPE instructions for 
single precision floating point.  It's easy to get the compiler to 
generate standard "book E" floating point instructions (fmuls, etc.), 
but those don't work on the 5554 as far as I understand.

mvh.,

David


From andrewd.lists at gmail.com  Tue Jun  2 11:37:56 2009
From: andrewd.lists at gmail.com (Andrew Dennison)
Date: Tue, 2 Jun 2009 21:37:56 +1000
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <4A24CA5A.4070304@westcontrol.com>
References: <4A244739.10509@westcontrol.com>
	 <54823def0906011553y70e668ffy11a275db333aa580@mail.gmail.com>
	 <4A2461AE.4000102@westcontrol.com>
	 <54823def0906011807v3bd8891ex7a1dc63952cee87d@mail.gmail.com>
	 <4A24CA5A.4070304@westcontrol.com>
Message-ID: <54823def0906020437xdc2a918n70521a4c6ea05d74@mail.gmail.com>

On Tue, Jun 2, 2009 at 4:44 PM, David Brown <david at westcontrol.com> wrote:
> Andrew Dennison wrote:
>>
>> Works for my 5554 code.
>>
>
> What -mcpu flag (and any other -m flags) do you use? ?I can't find any that
> cause gcc (latest 4.3.3 version) to generate SPE instructions for single
> precision floating point. ?It's easy to get the compiler to generate
> standard "book E" floating point instructions (fmuls, etc.), but those don't
> work on the 5554 as far as I understand.

David,

No other flags have been necessary (for floating point anyway), but
from memory powerpc-eabi-spe defaults to 8540 (e500). There are some
other issues where altivec instructions were generated in some cases!!
Another switch cleans this up. Embedded powerpc can be fun...

Earlier on (4.0, 4.1) I was using -fsingle-precision-constants (or
something like that) and this also triggered the spe single precision
instruction generation. However when I wanted to use VARGS I found
they were still promoted to double (normal c abi). The short-double
switch fixed this. We have had to browse gcc source on occasion to try
to work out how the options really work.

We are now using 4.4.0 but have used various versions of 4.0, 4.1, 4.2
and 4.3 along the way.

Hope this helps

Andrew


From david at westcontrol.com  Tue Jun  2 12:41:49 2009
From: david at westcontrol.com (David Brown)
Date: Tue, 02 Jun 2009 14:41:49 +0200
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <54823def0906020437xdc2a918n70521a4c6ea05d74@mail.gmail.com>
References: <4A244739.10509@westcontrol.com>	 <54823def0906011553y70e668ffy11a275db333aa580@mail.gmail.com>	 <4A2461AE.4000102@westcontrol.com>	 <54823def0906011807v3bd8891ex7a1dc63952cee87d@mail.gmail.com>	 <4A24CA5A.4070304@westcontrol.com> <54823def0906020437xdc2a918n70521a4c6ea05d74@mail.gmail.com>
Message-ID: <4A251E0D.90401@westcontrol.com>

Andrew Dennison wrote:
> On Tue, Jun 2, 2009 at 4:44 PM, David Brown <david at westcontrol.com> wrote:
>> Andrew Dennison wrote:
>>> Works for my 5554 code.
>>>
>> What -mcpu flag (and any other -m flags) do you use?  I can't find any that
>> cause gcc (latest 4.3.3 version) to generate SPE instructions for single
>> precision floating point.  It's easy to get the compiler to generate
>> standard "book E" floating point instructions (fmuls, etc.), but those don't
>> work on the 5554 as far as I understand.
> 
> David,
> 
> No other flags have been necessary (for floating point anyway), but
> from memory powerpc-eabi-spe defaults to 8540 (e500). There are some
> other issues where altivec instructions were generated in some cases!!
> Another switch cleans this up. Embedded powerpc can be fun...
> 
> Earlier on (4.0, 4.1) I was using -fsingle-precision-constants (or
> something like that) and this also triggered the spe single precision
> instruction generation. However when I wanted to use VARGS I found
> they were still promoted to double (normal c abi). The short-double
> switch fixed this. We have had to browse gcc source on occasion to try
> to work out how the options really work.
> 
> We are now using 4.4.0 but have used various versions of 4.0, 4.1, 4.2
> and 4.3 along the way.
> 
> Hope this helps
> 
> Andrew
> 

Did you build your own gcc?  So far I've just tried using CodeSourcery's 
"lite" download, which is 4.3.2.  If you've built your own version 
(which the "powerpc-eabi-spi-" prefix suggests - the CodeSourcery build 
I tried has simply powerpc-eabi- prefix, and IIRC has -mcpu=603 as 
default), then perhaps the build I have is not configured to support SPE 
instructions properly.  Compilation with -mcpu=8540 failed entirely (I 
can't remember the error message - I'm at a different computer at the 
moment), while using -mcpu=e500 (again, I don't have the details on 
hand) gave either pure software floating point, or "book E" hardware 
floating point.

It looks like we will be going for Code Worrier on this project - the 
nature of the customer and his project make it difficult to recommend a 
"home-built" version of gcc (though a pre-built and supported version 
from CodeSourcery would be fine), and Code Worrier's status as the 
"standard" toolchain for these devices trumps gcc's other advantages 
(open source, familiarity, etc.).  However, I'd still like to get to the 
bottom of this, both for my own curiosity, and for the possibility of 
using gcc with the MPC5554 on other projects.

Thanks for your help so far,

mvh.,

David



From froydnj at codesourcery.com  Tue Jun  2 13:34:21 2009
From: froydnj at codesourcery.com (Nathan Froyd)
Date: Tue, 2 Jun 2009 06:34:21 -0700
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <4A244739.10509@westcontrol.com>
References: <4A244739.10509@westcontrol.com>
Message-ID: <20090602133421.GD11209@codesourcery.com>

On Mon, Jun 01, 2009 at 11:25:13PM +0200, David Brown wrote:
> Does anyone know if current gcc versions support using spe instructions 
> for hardware floating point, or if there is likely to be any support 
> soon?  If I can't find a way to generate the spe instructions from gcc, 
> I'm going to have to recommend my customer buys Code Worrier...

GCC does support generating SPE instructions for hardware floating
point.  You need to compile with the "-te500v1" flag, which enables the
compiler to use single-precision floating-point SPE instructions.  You
should not use additional "-mcpu=" flags on the command-line along with
"-te500v1".

-Nathan


From david at westcontrol.com  Tue Jun  2 21:59:02 2009
From: david at westcontrol.com (David Brown)
Date: Tue, 02 Jun 2009 23:59:02 +0200
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <20090602133421.GD11209@codesourcery.com>
References: <4A244739.10509@westcontrol.com> <20090602133421.GD11209@codesourcery.com>
Message-ID: <4A25A0A6.40500@westcontrol.com>

Nathan Froyd wrote:
> On Mon, Jun 01, 2009 at 11:25:13PM +0200, David Brown wrote:
>> Does anyone know if current gcc versions support using spe instructions 
>> for hardware floating point, or if there is likely to be any support 
>> soon?  If I can't find a way to generate the spe instructions from gcc, 
>> I'm going to have to recommend my customer buys Code Worrier...
> 
> GCC does support generating SPE instructions for hardware floating
> point.  You need to compile with the "-te500v1" flag, which enables the
> compiler to use single-precision floating-point SPE instructions.  You
> should not use additional "-mcpu=" flags on the command-line along with
> "-te500v1".
> 
> -Nathan
> 

Marvellous!  This looks like gcc is now generating exactly the code I 
want - SPE instructions for single precision, and library code for 
double precision (unless -fshort-double is in effect).

I can't see the -te500v1 flag documented anywhere - is it a new flag 
that hasn't yet made it into the documentation?

Many thanks,

David



From froydnj at codesourcery.com  Wed Jun  3 02:32:00 2009
From: froydnj at codesourcery.com (Nathan Froyd)
Date: Tue, 2 Jun 2009 19:32:00 -0700
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <4A25A0A6.40500@westcontrol.com>
References: <4A244739.10509@westcontrol.com> <20090602133421.GD11209@codesourcery.com> <4A25A0A6.40500@westcontrol.com>
Message-ID: <20090603023200.GD21107@codesourcery.com>

On Tue, Jun 02, 2009 at 11:59:02PM +0200, David Brown wrote:
> Nathan Froyd wrote:
> >GCC does support generating SPE instructions for hardware floating
> >point.  You need to compile with the "-te500v1" flag, which enables the
> >compiler to use single-precision floating-point SPE instructions.  You
> >should not use additional "-mcpu=" flags on the command-line along with
> >"-te500v1".
> 
> Marvellous!  This looks like gcc is now generating exactly the code I 
> want - SPE instructions for single precision, and library code for 
> double precision (unless -fshort-double is in effect).

Glad to hear it.

> I can't see the -te500v1 flag documented anywhere - is it a new flag 
> that hasn't yet made it into the documentation?

The flag is at least mentioned in the Getting Started Guide that comes
with each release, although I see that the documentation for the option
is rather sparse (e.g. no mention is made of generating SPE instructions
for -te500v1).  We'll work on fixing that.

-Nathan


From david at westcontrol.com  Wed Jun  3 06:48:30 2009
From: david at westcontrol.com (David Brown)
Date: Wed, 03 Jun 2009 08:48:30 +0200
Subject: [power-gnu-discuss] Support for the MPC5554 (e200z6 core)
In-Reply-To: <20090603023200.GD21107@codesourcery.com>
References: <4A244739.10509@westcontrol.com> <20090602133421.GD11209@codesourcery.com> <4A25A0A6.40500@westcontrol.com> <20090603023200.GD21107@codesourcery.com>
Message-ID: <4A261CBE.1080006@westcontrol.com>

Nathan Froyd wrote:
> On Tue, Jun 02, 2009 at 11:59:02PM +0200, David Brown wrote:
>> Nathan Froyd wrote:
>>> GCC does support generating SPE instructions for hardware floating
>>> point.  You need to compile with the "-te500v1" flag, which enables the
>>> compiler to use single-precision floating-point SPE instructions.  You
>>> should not use additional "-mcpu=" flags on the command-line along with
>>> "-te500v1".
>> Marvellous!  This looks like gcc is now generating exactly the code I 
>> want - SPE instructions for single precision, and library code for 
>> double precision (unless -fshort-double is in effect).
> 
> Glad to hear it.
> 
>> I can't see the -te500v1 flag documented anywhere - is it a new flag 
>> that hasn't yet made it into the documentation?
> 
> The flag is at least mentioned in the Getting Started Guide that comes
> with each release, although I see that the documentation for the option
> is rather sparse (e.g. no mention is made of generating SPE instructions
> for -te500v1).  We'll work on fixing that.
> 

Yes, I see it now in section "3.1 library configurations".  As you say, 
it's a little sparse.  I can't see it anywhere in the gcc documentation 
itself (the usual reference for flags).  If it's practical, it could be 
extremely useful if you were able to make a list of PowerPC devices and 
the appropriate flags to match these cores.  It's not always easy to 
tell from the Freescale webpages what core each device has, and what the 
difference is, and to then match it up with appropriate compiler flags 
(especially if they are not standard "-mcpu=" flags, and barely 
documented!).  It doesn't help that Freescale gives different cores what 
appear to be a minor revision change (like e300c2 and ec300c3), yet 
there are huge differences in the core features.

Ideally, of course, there should be a lot more -mcpu= choices to cover 
all the devices.  But I'd imagine a list of devices, cores, and flags 
would be faster to write and easier to maintain, and give users all the 
information they need.

Many thanks,

David



From david at westcontrol.com  Wed Jun  3 11:39:22 2009
From: david at westcontrol.com (David Brown)
Date: Wed, 03 Jun 2009 13:39:22 +0200
Subject: Debugger hardware for for the MPC5554 (e200z6 core)
In-Reply-To: <4A261CBE.1080006@westcontrol.com>
References: <4A244739.10509@westcontrol.com> <20090602133421.GD11209@codesourcery.com> <4A25A0A6.40500@westcontrol.com> <20090603023200.GD21107@codesourcery.com> <4A261CBE.1080006@westcontrol.com>
Message-ID: <4A2660EA.80709@westcontrol.com>

We are also looking at debugger hardware for the MPC5554.  At the 
moment, the most promising low-cost device we have seen is this:

USB-ML-PPCNEXUS from P&E Micro:
<http://www.pemicro.com/products/product_view.cfm?product_ID=15320021>

Is this supported by the CodeSourcery tools?  And if so, is it supported 
in the Lite version as well as the Personal and Professional versions? 
If the customer ends up using gcc as for their application development, 
they will probably buy the Personal subscription, but during evaluation 
it's nice if things work with the Lite version.

Thanks,

David


From froydnj at codesourcery.com  Thu Jun  4 14:39:11 2009
From: froydnj at codesourcery.com (Nathan Froyd)
Date: Thu, 4 Jun 2009 07:39:11 -0700
Subject: Debugger hardware for for the MPC5554 (e200z6 core)
In-Reply-To: <4A2660EA.80709@westcontrol.com>
References: <4A244739.10509@westcontrol.com> <20090602133421.GD11209@codesourcery.com> <4A25A0A6.40500@westcontrol.com> <20090603023200.GD21107@codesourcery.com> <4A261CBE.1080006@westcontrol.com> <4A2660EA.80709@westcontrol.com>
Message-ID: <20090604143911.GI21107@codesourcery.com>

On Wed, Jun 03, 2009 at 01:39:22PM +0200, David Brown wrote:
> We are also looking at debugger hardware for the MPC5554.  At the 
> moment, the most promising low-cost device we have seen is this:
> 
> USB-ML-PPCNEXUS from P&E Micro:
> <http://www.pemicro.com/products/product_view.cfm?product_ID=15320021>
> 
> Is this supported by the CodeSourcery tools?

This debug interface is not supported by our tools.  Unfortunately, we
do not have a good low-cost device supported by our PowerPC toolchains
at the moment.

-Nathan


From david at westcontrol.com  Thu Jun  4 19:36:57 2009
From: david at westcontrol.com (David Brown)
Date: Thu, 04 Jun 2009 21:36:57 +0200
Subject: Debugger hardware for for the MPC5554 (e200z6 core)
In-Reply-To: <20090604143911.GI21107@codesourcery.com>
References: <4A244739.10509@westcontrol.com> <20090602133421.GD11209@codesourcery.com> <4A25A0A6.40500@westcontrol.com> <20090603023200.GD21107@codesourcery.com> <4A261CBE.1080006@westcontrol.com> <4A2660EA.80709@westcontrol.com> <20090604143911.GI21107@codesourcery.com>
Message-ID: <4A282259.6000904@westcontrol.com>

Nathan Froyd wrote:
> On Wed, Jun 03, 2009 at 01:39:22PM +0200, David Brown wrote:
>> We are also looking at debugger hardware for the MPC5554.  At the 
>> moment, the most promising low-cost device we have seen is this:
>>
>> USB-ML-PPCNEXUS from P&E Micro:
>> <http://www.pemicro.com/products/product_view.cfm?product_ID=15320021>
>>
>> Is this supported by the CodeSourcery tools?
> 
> This debug interface is not supported by our tools.  Unfortunately, we
> do not have a good low-cost device supported by our PowerPC toolchains
> at the moment.
> 
> -Nathan
> 

OK - it's not quite the answer I was hoping for, but it's good to have 
an answer anyway!

I note that P&E's development kit supports the debugger (not surprising, 
really).  I don't know if that support is only with their own debugger 
software, or with gdb - they certainly supply gcc as the compiler 
toolchain, but I don't know about gdb.  If they support gdb, then that 
may be a way to get your gdb builds working with their debugger - and it 
might give you starting point for supporting the debugger.

Once we have the debugger and an evaluation board, I'll be trying out 
various toolchains (CodeWarrior, Code Sourcery gcc, and P&E's 
development bundle).  This could mean I'll have to use a different 
debugger, such as P&E's or CodeWarrior, while testing the Code Sourcery 
gcc - I'm sure I'll get something working.

I'll post a comment here when (if!) I've got things working, in the hope 
that it helps CodeSourcery (or other CodeSourcery users) get your tools 
working with this debugger.

mvh.,

David


From andrewd.lists at gmail.com  Thu Jun  4 23:10:36 2009
From: andrewd.lists at gmail.com (Andrew Dennison)
Date: Fri, 5 Jun 2009 09:10:36 +1000
Subject: [power-gnu-discuss] Debugger hardware for for the MPC5554 (e200z6 
	core)
In-Reply-To: <4A2660EA.80709@westcontrol.com>
References: <4A244739.10509@westcontrol.com>
	 <20090602133421.GD11209@codesourcery.com>
	 <4A25A0A6.40500@westcontrol.com>
	 <20090603023200.GD21107@codesourcery.com>
	 <4A261CBE.1080006@westcontrol.com> <4A2660EA.80709@westcontrol.com>
Message-ID: <54823def0906041610p5b552481of0eccd5043446f19@mail.gmail.com>

On Wed, Jun 3, 2009 at 9:39 PM, David Brown<david at westcontrol.com> wrote:
> We are also looking at debugger hardware for the MPC5554. ?At the moment,
> the most promising low-cost device we have seen is this:
>
> USB-ML-PPCNEXUS from P&E Micro:
> <http://www.pemicro.com/products/product_view.cfm?product_ID=15320021>

I have a P&E Interface. Very slow and no gdb support.

The Macraigor usbWiggler works quite well. See:

http://www.macraigor.com/usbWiggler.htm

They provide "ocdremote", a gdb stub that runs on very old versions of
Fedora and under cygwin on Windows. Ocdremote has some limitations but
if you contact them with issues they do eventually fix them.

We now have several usbWigglers. Our P&E interfaces are sitting in a drawer...

Andrew


From andrewd.lists at gmail.com  Thu Jun  4 23:16:21 2009
From: andrewd.lists at gmail.com (Andrew Dennison)
Date: Fri, 5 Jun 2009 09:16:21 +1000
Subject: [power-gnu-discuss] Debugger hardware for for the MPC5554 (e200z6 
	core)
In-Reply-To: <54823def0906041610p5b552481of0eccd5043446f19@mail.gmail.com>
References: <4A244739.10509@westcontrol.com>
	 <20090602133421.GD11209@codesourcery.com>
	 <4A25A0A6.40500@westcontrol.com>
	 <20090603023200.GD21107@codesourcery.com>
	 <4A261CBE.1080006@westcontrol.com> <4A2660EA.80709@westcontrol.com>
	 <54823def0906041610p5b552481of0eccd5043446f19@mail.gmail.com>
Message-ID: <54823def0906041616qee6ddf8p32be8780215e6f60@mail.gmail.com>

On Fri, Jun 5, 2009 at 9:10 AM, Andrew Dennison<andrewd.lists at gmail.com> wrote:
> On Wed, Jun 3, 2009 at 9:39 PM, David Brown<david at westcontrol.com> wrote:
>> We are also looking at debugger hardware for the MPC5554. ?At the moment,
>> the most promising low-cost device we have seen is this:
>>
>> USB-ML-PPCNEXUS from P&E Micro:
>> <http://www.pemicro.com/products/product_view.cfm?product_ID=15320021>
>
> I have a P&E Interface. Very slow and no gdb support.
>
> The Macraigor usbWiggler works quite well. See:
>
> http://www.macraigor.com/usbWiggler.htm
>
> They provide "ocdremote", a gdb stub that runs on very old versions of
> Fedora and under cygwin on Windows. Ocdremote has some limitations but
> if you contact them with issues they do eventually fix them.
>
> We now have several usbWigglers. Our P&E interfaces are sitting in a drawer...

ps: One nice thing about the P&E interface is that it comes with tools
that can program the 5554 internal flash. We used them just for this
task for a while - very useful in early development.

We eventually wrote our own flash programming app that we load into
ram with gdb, just because the Macraigor interface is so much faster.


From david at westcontrol.com  Fri Jun  5 06:45:29 2009
From: david at westcontrol.com (David Brown)
Date: Fri, 05 Jun 2009 08:45:29 +0200
Subject: [power-gnu-discuss] Debugger hardware for for the MPC5554 (e200z6
 core)
In-Reply-To: <54823def0906041616qee6ddf8p32be8780215e6f60@mail.gmail.com>
References: <4A244739.10509@westcontrol.com>	 <20090602133421.GD11209@codesourcery.com>	 <4A25A0A6.40500@westcontrol.com>	 <20090603023200.GD21107@codesourcery.com>	 <4A261CBE.1080006@westcontrol.com> <4A2660EA.80709@westcontrol.com>	 <54823def0906041610p5b552481of0eccd5043446f19@mail.gmail.com> <54823def0906041616qee6ddf8p32be8780215e6f60@mail.gmail.com>
Message-ID: <4A28BF09.6060302@westcontrol.com>

Andrew Dennison wrote:
> On Fri, Jun 5, 2009 at 9:10 AM, Andrew Dennison<andrewd.lists at gmail.com> wrote:
>> On Wed, Jun 3, 2009 at 9:39 PM, David Brown<david at westcontrol.com> wrote:
>>> We are also looking at debugger hardware for the MPC5554.  At the moment,
>>> the most promising low-cost device we have seen is this:
>>>
>>> USB-ML-PPCNEXUS from P&E Micro:
>>> <http://www.pemicro.com/products/product_view.cfm?product_ID=15320021>
>> I have a P&E Interface. Very slow and no gdb support.
>>
>> The Macraigor usbWiggler works quite well. See:
>>
>> http://www.macraigor.com/usbWiggler.htm
>>
>> They provide "ocdremote", a gdb stub that runs on very old versions of
>> Fedora and under cygwin on Windows. Ocdremote has some limitations but
>> if you contact them with issues they do eventually fix them.
>>
>> We now have several usbWigglers. Our P&E interfaces are sitting in a drawer...
> 
> ps: One nice thing about the P&E interface is that it comes with tools
> that can program the 5554 internal flash. We used them just for this
> task for a while - very useful in early development.
> 
> We eventually wrote our own flash programming app that we load into
> ram with gdb, just because the Macraigor interface is so much faster.
> 

The trouble with the usbWigglers is that they don't work with 
CodeWarrior - we are trying to test out both!  We've ordered one of the 
P&E debuggers, so we'll see how it goes.  After checking that we've got 
an appropriate chip for the project, we can decide which toolchain to 
use (CodeSourcery or CodeWarrior), then if necessary buy a better and 
faster debugger.

Thanks for you advice,

David



From Harry.He at freescale.com  Wed Jun 10 07:24:06 2009
From: Harry.He at freescale.com (He Yunlong-B20256)
Date: Wed, 10 Jun 2009 15:24:06 +0800
Subject: About test cases for powerpc linux cross toolchain
Message-ID: <6368A20E269B6B4CA5ABB15E14F34C82726BDF@zch01exm22.fsl.freescale.net>

Hi,  Experts,
 
    I am maintaining powerpc linux cross toolchain now, occasionally, we
have some changes to toolchain itself, then we want to run full test
cases for regression, but I didn't found test cases within the toolchain
packages, could you tell me where to find the test suits for glibc and
gcc?
 
Thanks
Harry
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/power-gnu-discuss/attachments/20090610/ea0f705f/attachment.html>

