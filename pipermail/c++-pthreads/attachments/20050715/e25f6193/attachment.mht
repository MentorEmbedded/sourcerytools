[From nobody Thu Mar  8 00:03:49 2012
X-MIMEOLE: Produced By Microsoft Exchange V6.5.6944.0
Received: from commvault.com ([172.19.59.5]) by EXCHANGE.gp.cv.commvault.com
	with Microsoft SMTPSVC(6.0.3790.0); Fri, 25 Jun 2004 17:50:10 -0400
MIME-Version: 1.0
Content-Type: text/plain;
	charset=&quot;iso-8859-1&quot;
Content-Transfer-Encoding: quoted-printable
Received: from cvmg06.commvault.com by commvault.com (SMI-8.6/SMI-SVR4) id
	RAA22605; Fri, 25 Jun 2004 17:50:09 -0400
Received: from mail.codesourcery.com (voldemort.codesourcery.com
	[65.74.133.5]) by cvmg06.commvault.com (BorderWare MXtreme Mail
	Firewall) with ESMTP id 1638532047 for &lt;gshiman@commvault.com&gt;;
	Fri, 25 Jun 2004 17:50:07 -0400 (EDT)
Received: (qmail 26740 invoked by alias); 25 Jun 2004 21:49:28 -0000
Content-class: urn:content-classes:message
Subject: [c++-pthreads] Complete fix to cancellation/stack unwinding problem
	of deferred Posix threads
Date: Fri, 25 Jun 2004 17:49:12 -0400
Message-ID: &lt;52CA6BC0D0E9EE4E93208DB39A3218FE24097F@EXCHANGE.gp.cv.commvault.com&gt;
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: Complete fix to cancellation/stack unwinding problem of deferred
	Posix threads
Thread-Index: AcRa/kBt8TJZSpyCRuO/bAkt3o9BFw==
List-Help: &lt;mailto:c++-pthreads-help@codesourcery.com&gt;
List-Subscribe: &lt;mailto:c++-pthreads-subscribe@codesourcery.com&gt;
List-Unsubscribe: &lt;mailto:c++-pthreads-unsubscribe@codesourcery.com&gt;
From: &quot;George Shimanovich&quot; &lt;gshiman@commvault.com&gt;
To: &lt;c++-pthreads@codesourcery.com&gt;

Before going into specifics I post the question:
Are there plans to fix terminal bugs with cancellation/stack unwinding
of deferred Posix threads?

My test program attempted to cancel deferred thread whose cancellation
state is enabled before call to pthread_canceltest and is disabled
immediately afterwards.

When such thread is being cancelled on 2.4 kernel with gcc 3.2.3 the
test program crashes with 'FATAL: exception not rethrown'. Rethrowing
system (catch ...) exception made no difference.

Same test program does not crash when build and run on 2.6 kernel with
gcc 3.3.3 but instead it deadlocks with corrupted stack soon (~2 sec)
after call to pthread_cancel:
	(gdb) where
	#0  0xffffe415 in ?? ()
	#1  0xbfffdf2c in ?? ()
	#2  0x00000002 in ?? ()
	#3  0x00000000 in ?? ()
	#4  0x4035ebfe in __lll_mutex_lock_wait () from
/lib/tls/libpthread.so.0
	#5  0x4035bc00 in _L_mutex_lock_33 () from
/lib/tls/libpthread.so.0
	#6  0x00001000 in ?? ()
	#7  0x40349bd0 in
__elf_set___libc_thread_subfreeres_element___rpc_thread_destroy__ ()
	   from /lib/tls/libc.so.6
	#8  0x40c62360 in ?? ()
	#9  0xbfffe454 in ?? ()
	#10 0xbfffdfa4 in ?? ()
	#11 0x40c669f9 in _nss_files_gethostbyname_r () from
/lib/libnss_files.so.2
	Previous frame identical to this frame (corrupt stack?)
I see two problems:
1) pthread_cancel() cancels thread before reaching cancellation point in
pthread_testcancel()
2) stack gets corrupted during unwind.

Since the behavior changed, - from crash to deadlock (an improvement in
a way :), - I want to ask what thread cancellation bugs were fixed on
2.6 kernel + gcc 3.3.3, and, more importantly, when the patch with
complete fix (no stack corruption, no crash) will become available.

I realize that the above details should be posted on bugzilla but wanted
to asked my question here. I was referred to this list by an owner of
bug 111548 who indicated that the decision of when and if the fix will
be made rests with some members of C++-pthreads:
http://bugzilla.redhat.com/bugzilla/long_list.cgi?buglist=3D111548

It is pity that so complete pthreads implementation is not fully usable
in spite the fact that thread cancellation/stack unwinding problems are
known for some time (I've read relevant discussion threads of this
group).

    George



]