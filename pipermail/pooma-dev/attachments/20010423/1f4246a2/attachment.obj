Index: DynamicArray.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/DynamicArray/DynamicArray.h,v
retrieving revision 1.29
diff -c -p -r1.29 DynamicArray.h
*** DynamicArray.h	2001/04/12 16:07:52	1.29
--- DynamicArray.h	2001/04/23 18:55:34
*************** public:
*** 480,504 ****
      engine().destroy(killlist, method);
    }
  
    template<class Dom>
    inline void destroy(const Dom &killlist)
    {
!     engine().destroy(killlist, BackFill());
    }
  
    // Versions that take a pair of random-access iterators. 
  
    template <class Iter, class DeleteMethod>
!   inline void destroy(Iter begin, Iter end, const DeleteMethod &method)
    {
      Pooma::IteratorPairDomain<Iter> dom(begin, end);
      engine().destroy(dom, method);
    }
  
    template <class Iter>
!   inline void destroy(Iter begin, Iter end)
    {
!     IteratorPairDomain<Iter> dom(begin, end);
      engine().destroy(dom);
    }
  
--- 480,507 ----
      engine().destroy(killlist, method);
    }
  
+   // Use the default destroy method, BackFill.
+ 
    template<class Dom>
    inline void destroy(const Dom &killlist)
    {
!     engine().destroy(killlist);
    }
  
    // Versions that take a pair of random-access iterators. 
  
    template <class Iter, class DeleteMethod>
!   inline void destroy(const Iter &begin, const Iter &end, 
!                       const DeleteMethod &method)
    {
      Pooma::IteratorPairDomain<Iter> dom(begin, end);
      engine().destroy(dom, method);
    }
  
    template <class Iter>
!   inline void destroy(const Iter &begin, const Iter &end)
    {
!     Pooma::IteratorPairDomain<Iter> dom(begin, end);
      engine().destroy(dom);
    }
  
*************** public:
*** 510,523 ****
    // use the form where you do not specify a local patch number.
  
    template<class Dom, class DeleteMethod>
!   inline void destroy(const Dom &killlist, PatchID_t frompatch,
  		      const DeleteMethod &method)
    {
      engine().destroy(killlist, frompatch, method);
    }
  
    template<class Dom>
!   inline void destroy(const Dom &killlist, PatchID_t frompatch)
    {
      engine().destroy(killlist, frompatch, BackFill());
    }
--- 513,526 ----
    // use the form where you do not specify a local patch number.
  
    template<class Dom, class DeleteMethod>
!   inline void destroy(const Dom &killlist, const PatchID_t &frompatch,
  		      const DeleteMethod &method)
    {
      engine().destroy(killlist, frompatch, method);
    }
  
    template<class Dom>
!   inline void destroy(const Dom &killlist, const PatchID_t &frompatch)
    {
      engine().destroy(killlist, frompatch, BackFill());
    }
*************** public:
*** 527,534 ****
    // which the underlying DynamicEventDomain objects are specialized.
  
    template <class Iter, class DeleteMethod>
!   inline void destroy(Iter begin, Iter end, 
!                       PatchID_t frompatch,
                        const DeleteMethod &method)
    {
      Pooma::IteratorPairDomain<const int *> dom(begin, end);
--- 530,537 ----
    // which the underlying DynamicEventDomain objects are specialized.
  
    template <class Iter, class DeleteMethod>
!   inline void destroy(const Iter &begin, const Iter &end, 
!                       const PatchID_t &frompatch,
                        const DeleteMethod &method)
    {
      Pooma::IteratorPairDomain<const int *> dom(begin, end);
*************** public:
*** 536,545 ****
    }
  
    template <class Iter>
!   inline void destroy(Iter begin, Iter end, PatchID_t frompatch)
    {
      Pooma::IteratorPairDomain<const int *> dom(begin, end);
!     engine().destroy(dom, frompatch);
    }
  
    // Copy all elements of domain n to the end of the last patch or
--- 539,549 ----
    }
  
    template <class Iter>
!   inline void destroy(const Iter &begin, const Iter &end, 
!                       const PatchID_t &frompatch)
    {
      Pooma::IteratorPairDomain<const int *> dom(begin, end);
!     engine().destroy(dom, frompatch, BackFill());
    }
  
    // Copy all elements of domain n to the end of the last patch or
