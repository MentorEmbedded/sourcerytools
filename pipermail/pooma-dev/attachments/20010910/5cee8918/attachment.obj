Index: Field/FieldEngine/FieldEngine.ExprEngine.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/Field/FieldEngine/FieldEngine.ExprEngine.h,v
retrieving revision 1.1
diff -c -p -r1.1 FieldEngine.ExprEngine.h
*** Field/FieldEngine/FieldEngine.ExprEngine.h	2001/08/30 01:15:10	1.1
--- Field/FieldEngine/FieldEngine.ExprEngine.h	2001/09/10 21:21:06
*************** public:
*** 270,275 ****
--- 270,280 ----
        return engine_m;
      }
  
+   inline Engine_t &engine()
+     {
+       return engine_m;
+     }
+ 
    const ReferenceField_t &referenceField() const
    {
      return referenceField_m;
Index: Field/tests/FieldOffset.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/Field/tests/FieldOffset.cpp,v
retrieving revision 1.1
diff -c -p -r1.1 FieldOffset.cpp
*** Field/tests/FieldOffset.cpp	2001/08/30 01:15:18	1.1
--- Field/tests/FieldOffset.cpp	2001/09/10 21:21:06
*************** int main(int argc, char *argv[])
*** 56,61 ****
--- 56,63 ----
    
    f[0].all() = 2.0; f[0] = -1.0;
    f[1].all() = 3.0; f[1] = -2.0;
+ 
+   Pooma::blockAndEvaluate();
    
    // Test a field with subfields.
  
*************** int main(int argc, char *argv[])
*** 97,102 ****
--- 99,107 ----
    h(FieldOffset<Dim>(Loc<Dim>(0,0)), Loc<Dim>(0,1)) = 2.3;
    h(FieldOffset<Dim>(Loc<Dim>(0,0)), Loc<Dim>(1,0)) = 2.8;
    h(FieldOffset<Dim>(Loc<Dim>(1,0)), Loc<Dim>(0,1)) = 3.3;
+ 
+   Pooma::blockAndEvaluate();
+   
    tester.check("h(0,0)",
  	       h(FieldOffset<Dim>(Loc<Dim>(-1,-1)), Loc<Dim>(1,1)),
  	       1.3, 1.0e-08);
Index: Field/tests/LocalPatch.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/Field/tests/LocalPatch.cpp,v
retrieving revision 1.1
diff -c -p -r1.1 LocalPatch.cpp
*** Field/tests/LocalPatch.cpp	2001/08/30 01:15:18	1.1
--- Field/tests/LocalPatch.cpp	2001/09/10 21:21:06
*************** int main(int argc, char *argv[])
*** 87,92 ****
--- 87,93 ----
    Field_t b0(cell, layout1, origin, spacings);
    Field_t b1(vert, layout1, origin, spacings);
    Field_t b2(yedge, layout1, origin, spacings);
+   Field_t b3(yedge, layout1, origin, spacings);
    Field_t bb0(cell, layout0, origin, spacings);
    Field_t bb1(vert, layout0, origin, spacings);
    Field_t bb2(yedge, layout0, origin, spacings);
*************** int main(int argc, char *argv[])
*** 360,365 ****
--- 361,388 ----
    }
        
    tester.out() << "cb0.all()" << std::endl << cb0 << std::endl;
+ 
+   b2 = positions(b2).comp(0);
+ 
+   RefCountedBlockPtr<double> block = pack(b2);
+ 
+   // The following functions give you access to the raw data from pack.
+   // Note that the lifetime of the data is managed by the RefCountedBlockPtr,
+   // so when "block" goes out of scope, the data goes away.  (i.e. Don't write
+   // a function where you return block.beginPointer().)
+ 
+   double *start = block.beginPointer();  // start of the data
+   double *end = block.endPointer();      // one past the end
+   int size = block.size();               // size of the data
+ 
+   std::cout << Pooma::context() << ":" << block.size() << std::endl;
+ 
+   unpack(b3, block);
+ 
+   tester.out() << "b2" << std::endl << b2 << std::endl;
+   tester.out() << "b3" << std::endl << b3 << std::endl;
+ 
+   tester.check("pack, unpack", all(b2 == b3));
  
    int ret = tester.results("LocalPatch");
    Pooma::finalize();
Index: Functions/PackUnpack.h
===================================================================
RCS file: PackUnpack.h
diff -N PackUnpack.h
*** /dev/null	Tue May  5 14:32:27 1998
--- PackUnpack.h	Mon Sep 10 15:21:06 2001
***************
*** 0 ****
--- 1,232 ----
+ // -*- C++ -*-
+ // ACL:license
+ // ----------------------------------------------------------------------
+ // This software and ancillary information (herein called "SOFTWARE")
+ // called POOMA (Parallel Object-Oriented Methods and Applications) is
+ // made available under the terms described here.  The SOFTWARE has been
+ // approved for release with associated LA-CC Number LA-CC-98-65.
+ // 
+ // Unless otherwise indicated, this SOFTWARE has been authored by an
+ // employee or employees of the University of California, operator of the
+ // Los Alamos National Laboratory under Contract No. W-7405-ENG-36 with
+ // the U.S. Department of Energy.  The U.S. Government has rights to use,
+ // reproduce, and distribute this SOFTWARE. The public may copy, distribute,
+ // prepare derivative works and publicly display this SOFTWARE without 
+ // charge, provided that this Notice and any statement of authorship are 
+ // reproduced on all copies.  Neither the Government nor the University 
+ // makes any warranty, express or implied, or assumes any liability or 
+ // responsibility for the use of this SOFTWARE.
+ // 
+ // If SOFTWARE is modified to produce derivative works, such modified
+ // SOFTWARE should be clearly marked, so as not to confuse it with the
+ // version available from LANL.
+ // 
+ // For more information about POOMA, send e-mail to pooma@acl.lanl.gov,
+ // or visit the POOMA web page at http://www.acl.lanl.gov/pooma/.
+ // ----------------------------------------------------------------------
+ // ACL:license
+ 
+ //-----------------------------------------------------------------------------
+ // functions: 
+ //   pack
+ //   unpack
+ //-----------------------------------------------------------------------------
+ 
+ #ifndef POOMA_FUNCTIONS_PACK_UNPACK_H
+ #define POOMA_FUNCTIONS_PACK_UNPACK_H
+ 
+ //-----------------------------------------------------------------------------
+ // Overview: 
+ // 
+ // pack(field) and unpack(field, rcbp) are used to provide the user with a
+ // local 1D view of all the data in a field not including guard layers that
+ // belongs to the local processor.
+ //
+ // The local data is returned from pack() in a RefCountedBlockPtr which
+ // can provide raw pointers to the data via the beginPointer member function.
+ // Currently pack and unpack copy the data to and from a separate block of
+ // memory.  If we need to later, we can perform various optimizations under
+ // the hood.  For example, if there is only one local patch, and the domain
+ // is correct (no guards and it doesn't have unused points because of the
+ // centering), we could return the RefCountedBlockPtr to the underlying brick
+ // data.  Given that this function will typically be applied to compressed
+ // data, which we would need to uncompress anyway, the copy is probably not
+ // going to be expensive.
+ //
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // Includes:
+ //-----------------------------------------------------------------------------
+ 
+ #include "Utilities/RefCountedBlockPtr.h"
+ #include "Pooma/Pooma.h"
+ 
+ //-----------------------------------------------------------------------------
+ // Forward declarations:
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // Full Description of pack/unpack.
+ //
+ // RefCountedBlockPtr<T> pack(Field<Mesh, T, Eng> f)
+ //   - copy all the data from f (excluding guard layers) that belongs to this
+ //     processor into a block and return a ref-counted pointer to the data.
+ // 
+ // unpack(Field<Mesh, T, Eng> f, RefCountedBlockPtr<T>)
+ //   - copy the packed data from the ref-counted block back into the field.
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // pack
+ //
+ // PackLocalPatches
+ //   - functor that gets handed to LoopApplyEvaluator to copy the data
+ //
+ // pack()
+ //   - loops through local patches, computes the total size, allocates a
+ //     ref-counted block and loops again to copy the local patches into the
+ //     block.
+ //-----------------------------------------------------------------------------
+ 
+ template<class InputField>
+ struct PackLocalPatches
+ {
+   typedef typename InputField::Element_t Element_t;
+ 
+   PackLocalPatches(const InputField &field,
+                    RefCountedBlockPtr<Element_t> block)
+     : field_m(field), block_m(block)
+   {
+   }
+ 
+   void operator()(int i0)
+   {
+     *block_m = field_m.read(i0);
+     ++block_m;
+   }
+ 
+   void operator()(int i0, int i1)
+   {
+     *block_m = field_m.read(i0, i1);
+     ++block_m;
+   }
+ 
+   void operator()(int i0, int i1, int i2)
+   {
+     *block_m = field_m.read(i0, i1, i2);
+     ++block_m;
+   }
+ 
+   void operator()(int i0, int i1, int i2, int i3)
+   {
+     *block_m = field_m.read(i0, i1, i2, i3);
+     ++block_m;
+   }
+ 
+   InputField field_m;
+   RefCountedBlockPtr<Element_t> block_m;
+ };
+ 
+ template<class InputField>
+ RefCountedBlockPtr<typename InputField::Element_t>
+ pack(const InputField &field)
+ {
+   Pooma::blockAndEvaluate();
+ 
+   typedef typename InputField::Element_t Element_t;
+ 
+   int size, i;
+   size = 0;
+   for (i = 0; i < field.numPatchesLocal(); ++i)
+   {
+     size += field.patchLocal(i).domain().size();
+   }
+ 
+   RefCountedBlockPtr<Element_t> ret(size);
+   RefCountedBlockPtr<Element_t> current = ret;
+ 
+   for (i = 0; i < field.numPatchesLocal(); ++i)
+   {
+     typedef Patch<InputField>::Type_t PatchField_t;
+     PatchField_t patch = field.patchLocal(i);
+     LoopApplyEvaluator::evaluate(PackLocalPatches<PatchField_t>(patch, current),
+                                  patch.domain());
+     current += patch.domain().size();
+   }
+ 
+   return ret;
+ }
+ 
+ //-----------------------------------------------------------------------------
+ // unpack
+ //
+ // opposite of pack.
+ //-----------------------------------------------------------------------------
+ 
+ template<class InputField>
+ struct UnPackLocalPatches
+ {
+   typedef typename InputField::Element_t Element_t;
+ 
+   UnPackLocalPatches(const InputField &field,
+                      RefCountedBlockPtr<Element_t> block)
+     : field_m(field), block_m(block)
+   {
+   }
+ 
+   void operator()(int i0)
+   {
+     field_m(i0) = *block_m;
+     ++block_m;
+   }
+ 
+   void operator()(int i0, int i1)
+   {
+     field_m(i0, i1) = *block_m;
+     ++block_m;
+   }
+ 
+   void operator()(int i0, int i1, int i2)
+   {
+     field_m(i0, i1, i2) = *block_m;
+     ++block_m;
+   }
+ 
+   void operator()(int i0, int i1, int i2, int i3)
+   {
+     field_m(i0, i1, i2, i3) = *block_m;
+     ++block_m;
+   }
+ 
+   InputField field_m;
+   RefCountedBlockPtr<Element_t> block_m;
+ };
+ 
+ template<class InputField, class T>
+ void
+ unpack(const InputField &field, RefCountedBlockPtr<T> block)
+ {
+   int i;
+ 
+   RefCountedBlockPtr<T> current = block;
+ 
+   for (i = 0; i < field.numPatchesLocal(); ++i)
+   {
+     typedef Patch<InputField>::Type_t PatchField_t;
+     PatchField_t patch = field.patchLocal(i);
+     LoopApplyEvaluator::evaluate(UnPackLocalPatches<PatchField_t>(patch, current),
+                                  patch.physicalDomain());
+     current += patch.physicalDomain().size();
+   }
+ }
+ 
+ 
+ #endif // POOMA_FUNCTIONS_PACK_UNPACK_H
+ 
+ // ACL:rcsinfo
+ // ----------------------------------------------------------------------
+ // $RCSfile: FieldCentering.h,v $   $Author: oldham $
+ // $Revision: 1.2 $   $Date: 2001/08/30 19:02:36 $
+ // ----------------------------------------------------------------------
+ // ACL:rcsinfo
Index: Pooma/Arrays.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/Pooma/Arrays.h,v
retrieving revision 1.15
diff -c -p -r1.15 Arrays.h
*** Pooma/Arrays.h	2000/09/28 20:33:03	1.15
--- Pooma/Arrays.h	2001/09/10 21:21:06
***************
*** 49,54 ****
--- 49,56 ----
  
  #include "Evaluator/ScalarCode.h"
  
+ #include "Functions/PackUnpack.h"
+ 
  #include <complex.h>
  
  #endif
