Index: NewField/Field.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/Field.h,v
retrieving revision 1.15.2.6
diff -c -p -r1.15.2.6 Field.h
*** NewField/Field.h	2001/08/04 00:12:42	1.15.2.6
--- NewField/Field.h	2001/08/06 16:53:58
*************** struct View1<Field<GeometryTag, T, Engin
*** 578,585 ****
  };
  
  
- // FIXME: Add specializations for FieldOffset<dimensions>.
- 
  //-----------------------------------------------------------------------------
  // AltView1 avoids an instantiation problem that arises when two
  // classes use each other.  This class's definition should be exactly
--- 578,583 ----
Index: NewField/DiffOps/FieldShiftEngine.h
===================================================================
RCS file: FieldShiftEngine.h
diff -N FieldShiftEngine.h
*** /dev/null	Tue May  5 14:32:27 1998
--- FieldShiftEngine.h	Mon Aug  6 10:53:58 2001
***************
*** 0 ****
--- 1,694 ----
+ // -*- C++ -*-
+ // ACL:license
+ // ----------------------------------------------------------------------
+ // This software and ancillary information (herein called "SOFTWARE")
+ // called POOMA (Parallel Object-Oriented Methods and Applications) is
+ // made available under the terms described here.  The SOFTWARE has been
+ // approved for release with associated LA-CC Number LA-CC-98-65.
+ // 
+ // Unless otherwise indicated, this SOFTWARE has been authored by an
+ // employee or employees of the University of California, operator of the
+ // Los Alamos National Laboratory under Contract No. W-7405-ENG-36 with
+ // the U.S. Department of Energy.  The U.S. Government has rights to use,
+ // reproduce, and distribute this SOFTWARE. The public may copy, distribute,
+ // prepare derivative works and publicly display this SOFTWARE without 
+ // charge, provided that this Notice and any statement of authorship are 
+ // reproduced on all copies.  Neither the Government nor the University 
+ // makes any warranty, express or implied, or assumes any liability or 
+ // responsibility for the use of this SOFTWARE.
+ // 
+ // If SOFTWARE is modified to produce derivative works, such modified
+ // SOFTWARE should be clearly marked, so as not to confuse it with the
+ // version available from LANL.
+ // 
+ // For more information about POOMA, send e-mail to pooma@acl.lanl.gov,
+ // or visit the POOMA web page at http://www.acl.lanl.gov/pooma/.
+ // ----------------------------------------------------------------------
+ // ACL:license
+ 
+ //-----------------------------------------------------------------------------
+ // Classes: 
+ //   FieldShift     - Tag class for defining an engine capable of
+ //                    shifting the contents of a field.
+ //   Engine          - Specialization for FieldShift
+ //   NewEngine       - Specializations for FieldShift
+ //-----------------------------------------------------------------------------
+ 
+ #ifndef POOMA_NEWFIELD_DIFFOPS_FIELDSHIFTENGINE_H
+ #define POOMA_NEWFIELD_DIFFOPS_FIELDSHIFTENGINE_H
+ 
+ //-----------------------------------------------------------------------------
+ // Overview:
+ //
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // Includes:
+ //-----------------------------------------------------------------------------
+ 
+ #include "Domain/Interval.h"
+ #include "Engine/Engine.h"
+ #include "Layout/INode.h"
+ #include "Layout/Node.h"
+ #include "PETE/ErrorType.h"
+ 
+ //-----------------------------------------------------------------------------
+ // Forward declarations
+ //-----------------------------------------------------------------------------
+ 
+ template <int Dim>
+ class DomainLayout;
+ 
+ template<class Functor> class FieldShift;
+ 
+ //-----------------------------------------------------------------------------
+ // Full Description:
+ // 
+ // FieldShift is just a tag class for the field-stencil-application
+ // engine.
+ //-----------------------------------------------------------------------------
+ 
+ template <class Expression>
+ struct FieldShift;
+ 
+ //-----------------------------------------------------------------------------
+ // Full Description:
+ // 
+ // Engine<Dim, T, FieldShift<Expression> > is a specialization
+ // of Engine for FieldShift<Expression>.
+ // It makes an offset view of the input expression.
+ //-----------------------------------------------------------------------------
+ 
+ template<int Dim, class T, class Expression>
+ class Engine<Dim, T, FieldShift<Expression> >
+ {
+ public:
+ 
+   //---------------------------------------------------------------------------
+   // Exported typedefs and constants
+ 
+   typedef FieldShift<Expression>   Tag_t;
+   typedef Expression                               Expression_t;
+   typedef Engine<Dim, T, Tag_t>                    This_t;
+   typedef This_t                                   Engine_t;
+   typedef Interval<Dim>                            Domain_t;
+   typedef T                                        Element_t;
+   typedef ErrorType                                ElementRef_t;
+   typedef typename Expression_t::Engine_t          ExprEngine_t;
+   typedef DomainLayout<Dim>                        Layout_t;
+ 
+   enum { dimensions = Dim };
+   enum { hasDataObject = ExprEngine_t::hasDataObject };
+   enum { dynamic = false };
+   enum { zeroBased = false };
+   enum { multiPatch = ExprEngine_t::multiPatch };
+ 
+   //---------------------------------------------------------------------------
+   // Construct uninitialized Field stencil objects.  It's an error to use an
+   // uninitialized engine, but we need to be able to create uninitialized
+   // engines as placeholders to enable deferred initialization of fields.
+ 
+   Engine()
+     : domain_m(noInit), exprEngine_m()
+   {
+   }
+ 
+   explicit Engine(const Pooma::NoInit &noInit)
+     : domain_m(noInit), exprEngine_m()
+   {
+   }
+ 
+   //---------------------------------------------------------------------------
+   // Construct from a given field and an offset.
+ 
+   Engine(const Expression_t &f, const Loc<Dim> &offset, Domain_t domain)
+     : domain_m(domain),
+       offset_m(offset),
+       exprEngine_m(f)
+   {
+   }
+ 
+   //---------------------------------------------------------------------------
+   // Copy constructor.
+ 
+   Engine(const This_t &model)
+     : domain_m(model.domain()),
+       offset_m(model.offset_m),
+       exprEngine_m(model.exprEngine())
+   {
+   }    
+ 
+   //---------------------------------------------------------------------------
+   // Shallow assignment.
+   
+   This_t &operator=(const This_t &model)
+   {
+     domain_m = model.domain();
+     offset_m = model.offset_m;
+     exprEngine_m = model.exprEngine();
+ 
+     return *this;
+   }    
+ 
+   //---------------------------------------------------------------------------
+   // Element access via ints for speed.
+ 
+   inline Element_t read(int i) const 
+   {
+     return exprEngine()(i + offset_m[0].first());
+   }
+ 
+   inline Element_t read(int i, int j) const 
+   {
+     return exprEngine()(i + offset_m[0].first(),
+                         j + offset_m[1].first());
+   }
+ 
+   inline Element_t read(int i, int j, int k) const 
+   {
+     return exprEngine()(i + offset_m[0].first(),
+                         j + offset_m[1].first(),
+                         k + offset_m[2].first());
+   }
+ 
+   inline Element_t read(const Loc<Dim> &loc) const 
+   {
+     return exprEngine()(loc + offset_m);
+   }
+ 
+   inline Element_t operator()(int i) const 
+   {
+     return read(i);
+   }
+ 
+   inline Element_t operator()(int i, int j) const 
+   {
+     return read(i, j);
+   }
+ 
+   inline Element_t operator()(int i, int j, int k) const 
+   {
+     return read(i, j, k);
+   }
+ 
+   inline Element_t operator()(const Loc<Dim> &loc) const 
+   {
+     return read(loc);
+   }
+ 
+   //---------------------------------------------------------------------------
+   // Return the domain.
+ 
+   inline const Domain_t &domain() const { return domain_m; }
+ 
+   //---------------------------------------------------------------------------
+   // 
+   
+   inline Loc<Dim> offset() const
+   {
+     return offset_m;
+   }
+   
+   //---------------------------------------------------------------------------
+   // Accessors.
+ 
+   inline const Expression_t &exprEngine() const { return exprEngine_m; }
+ 
+   //---------------------------------------------------------------------------
+   // Need to pass lock requests to the contained engine.
+ 
+   template<class RequestType>
+   inline
+   typename DataObjectRequest<RequestType>::Type_t
+   dataObjectRequest(const DataObjectRequest<RequestType> &req) const
+   {
+     return exprEngine().engine().dataObjectRequest(req);
+   }
+ 
+   //---------------------------------------------------------------------------
+   // viewDomain() gives the region of the expression needed to compute a given
+   // region of the shift-engine.
+   //---------------------------------------------------------------------------
+ 
+   inline
+   Interval<Dim> viewDomain(const Interval<Dim> &domain) const
+   {
+     Interval<Dim> ret;
+     int d;
+     for (d = 0; d < Dim; ++d)
+     {
+       ret[d] =
+ 	Interval<1>(
+ 		    domain[d].first() + offset_m[d].first(),
+ 		    domain[d].last() + offset_m[d].first()
+ 		    );
+     }
+     return ret;
+   }
+ 
+   inline
+   INode<Dim> viewDomain(const INode<Dim> &inode) const
+   {
+     return INode<Dim>(inode, viewDomain(inode.domain()));
+   }
+ 
+   inline
+   Interval<Dim> intersectDomain() const
+   {
+     Interval<Dim> ret;
+     int d;
+     for (d = 0; d < Dim; ++d)
+     {
+       ret[d] =
+ 	Interval<1>(
+ 		    domain_m[d].first() + offset_m[d].first(),
+                     domain_m[d].last() + offset_m[d].first()
+ 		    );
+     }
+     return ret;
+   }
+ 
+ private:
+ 
+   Interval<Dim> domain_m;
+   Loc<Dim> offset_m;
+   Expression_t exprEngine_m;
+ };
+ 
+ //-----------------------------------------------------------------------------
+ // Full Description:
+ // NewEngine<Engine,SubDomain>
+ //
+ // Specializations of NewEngine for subsetting a constant-function-engine with
+ // an arbitrary domain. 
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // FIXME:We should consider making NewEngine a functor rather than using engine
+ // constructors to initialize engine views. NewEngineEngine and NewEngineDomain
+ // were introduced because a given engine doesn't know about all the engines
+ // that can return a view implemented by that engine.  (For example, Brick
+ // shouldn't know about MultiPatch, but MultiPatch<Brick> can return a view
+ // of one of its patches via an INode<> view.)  Forwarding requests now
+ // requires specializing 3 structs because of the constructor paradigm of
+ // Engine(otherEngine, domain).
+ 
+ template <int Dim, class T, class E>
+ struct NewEngine<Engine<Dim, T, FieldShift<E> >, Interval<Dim> >
+ {
+   typedef typename NewEngine<E, Interval<Dim> >::Type_t Type_t;
+ };
+ 
+ template <int Dim, class T, class E>
+ struct NewEngineEngine<Engine<Dim, T, FieldShift<E> >, Interval<Dim> >
+ {
+   typedef typename NewEngineEngine<E, Interval<Dim> >::Type_t Type_t;
+   static inline
+   Type_t apply(const Engine<Dim, T, FieldShift<E> > &e, const Interval<Dim> &d)
+   {
+     return NewEngineEngine<E, Interval<Dim> >::apply(e.exprEngine(),
+                                                      e.viewDomain(d));
+   }
+ };
+ 
+ template <int Dim, class T, class E>
+ struct NewEngineDomain<Engine<Dim, T, FieldShift<E> >, Interval<Dim> >
+ {
+   typedef typename NewEngineDomain<E, Interval<Dim> >::Type_t Type_t;
+   static inline
+   Type_t apply(const Engine<Dim, T, FieldShift<E> > &e, const Interval<Dim> &d)
+   {
+     return NewEngineDomain<E, Interval<Dim> >::apply(e.exprEngine(),
+                                                      e.viewDomain(d));
+   }
+ };
+ 
+ template <int Dim, class T, class E>
+ struct NewEngine<Engine<Dim, T, FieldShift<E> >, INode<Dim> >
+ {
+   typedef typename NewEngine<E, INode<Dim> >::Type_t Type_t;
+ };
+ 
+ template <int Dim, class T, class E>
+ struct NewEngineEngine<Engine<Dim, T, FieldShift<E> >, INode<Dim> >
+ {
+   typedef typename NewEngineEngine<E, INode<Dim> >::Type_t Type_t;
+   static inline
+   Type_t apply(const Engine<Dim, T, FieldShift<E> > &e, const INode<Dim> &d)
+   {
+     return NewEngineEngine<E, INode<Dim> >::apply(e.exprEngine(),
+                                                   e.viewDomain(d));
+   }
+ };
+ 
+ template <int Dim, class T, class E>
+ struct NewEngineDomain<Engine<Dim, T, FieldShift<E> >, INode<Dim> >
+ {
+   typedef typename NewEngineDomain<E, INode<Dim> >::Type_t Type_t;
+   static inline
+   Type_t apply(const Engine<Dim, T, FieldShift<E> > &e, const INode<Dim> &d)
+   {
+     return NewEngineDomain<E, INode<Dim> >::apply(e.exprEngine(),
+                                                   e.viewDomain(d));
+   }
+ };
+ 
+ //-----------------------------------------------------------------------------
+ // FieldShiftSimple<Expression>
+ //
+ // There are potentially many ways to construct field stencils.
+ // FieldShiftSimple assumes that you just need to construct the output field
+ // and stick ONE stencil engine into it.  Maybe this class can be generalized
+ // for fields that contain multiple stencil engines.
+ //-----------------------------------------------------------------------------
+ 
+ template<class Expression>
+ struct FieldShiftSimple
+ {
+   typedef typename Expression::GeometryTag_t GeometryTag_t;
+   typedef typename Expression::Element_t OutputElement_t;
+   enum { outputDim = Expression::dimensions };
+ 
+   typedef typename Expression::Engine_t InputEngine_t;
+   typedef FieldShift<InputEngine_t> OutputEngineTag_t;
+ 
+   typedef Field<GeometryTag_t, OutputElement_t, OutputEngineTag_t> Type_t;
+ 
+   typedef Engine<outputDim, OutputElement_t, OutputEngineTag_t> SEngine_t;
+ 
+   static inline
+   Type_t make(const Expression &f, const Loc<outputDim> &offset,
+               const Centering<outputDim> &centering)
+   {
+     // This should be h(centering, f.mesh(), f.layout())
+     // (Ideally centering would come out of offset.)
+ 
+     Type_t h(f, centering);
+ 
+     // Could change this to loop over centerings.
+ 
+     GuardLayers<outputDim> og(f.fieldEngine().guardLayers());
+     for (int d = 0; d < outputDim; d++)
+     {
+       og.lower(d) += offset[d].first();
+       og.upper(d) -= offset[d].first();
+     }
+ 
+     // need to set domain???
+     h.fieldEngine().guardLayers() = og;
+     h.fieldEngine().engine() = SEngine_t(f.engine(), offset, f.domain());
+ 
+     return h;
+   }
+ };
+ 
+ //-----------------------------------------------------------------------------
+ // Specializations for selecting the appropriate evaluator for the Stencil
+ // engine.  We just get the appropriate types from the Expression's engine.
+ //-----------------------------------------------------------------------------
+ 
+ template<class Expression>
+ struct EvaluatorEngineTraits<FieldShift<Expression> >
+ {
+   typedef typename CreateLeaf<Expression>::Leaf_t Expr_t;
+   typedef typename
+     ForEach<Expr_t, EvaluatorTypeTag, EvaluatorCombineTag>::Type_t
+       Evaluator_t;
+ };
+ 
+ 
+ //-----------------------------------------------------------------------------
+ // FieldShiftIntersector is a special intersector that gets used when we come
+ // across a stencil object in an expression.
+ //-----------------------------------------------------------------------------
+ 
+ template<int Dim, class Intersect>
+ class FieldShiftIntersector
+ {
+ public:
+ 
+   //---------------------------------------------------------------------------
+   // Exported typedefs and constants
+ 
+   typedef typename Intersect::IntersectorData_t         IntersectorData_t;
+   typedef FieldShiftIntersector<Dim, Intersect>       This_t;
+   typedef typename IntersectorData_t::const_iterator    const_iterator;
+   typedef RefCountedPtr<IntersectorData_t>              DataPtr_t;
+   typedef Interval<Dim>                                 Domain_t;
+   
+   enum { dimensions = Intersect::dimensions };
+   
+   //---------------------------------------------------------------------------
+   // Constructors
+ 
+   FieldShiftIntersector(const This_t &model)
+     : domain_m(model.domain_m), intersector_m(model.intersector_m)
+   { }
+ 
+   FieldShiftIntersector(const Domain_t &dom, const Intersect &intersect)
+     : domain_m(dom), intersector_m(intersect)
+   { }
+ 
+   This_t &operator=(const This_t &model)
+   {
+     if (this != &model)
+     {
+       domain_m = model.domain_m;
+       intersector_m = model.intersector_m;
+     }
+   }
+ 
+   ~FieldShiftIntersector() { }
+ 
+   inline DataPtr_t &data() { return intersector_m.data(); }
+   inline const DataPtr_t &data() const { return intersector_m.data(); }
+ 
+   //---------------------------------------------------------------------------
+   // Accessors
+ 
+   // STL iterator support.
+   
+   inline const_iterator begin() const { return data()->inodes_m.begin(); }
+   inline const_iterator end() const { return data()->inodes_m.end(); }
+ 
+   //---------------------------------------------------------------------------
+   // Intersect routines
+ 
+   // All domains.
+   
+   template<class Engine>
+   inline void intersect(const Engine &engine) 
+   {
+     typedef typename NewEngine<Engine, Interval<Dim> >::Type_t NewEngine_t;
+ 
+     NewEngine_t newEngine(engine, domain_m);
+ 
+     intersector_m.intersect(newEngine);
+ 
+     data()->shared(engine.layout().ID(), newEngine.layout().ID());
+   }
+ 
+   template<class Engine, int Dim2>
+   inline bool intersect(const Engine &engine, const GuardLayers<Dim2> &) 
+   {
+     intersect(engine);
+     return true;
+   }
+ 
+ private:
+ 
+   
+   Interval<Dim> domain_m;
+   Intersect     intersector_m;
+ };
+ 
+ 
+ //-----------------------------------------------------------------------------
+ // IntersectEngine specialization
+ //-----------------------------------------------------------------------------
+ 
+ template <int Dim, class T, class Expression, class Intersect>
+ struct LeafFunctor<Engine<Dim, T, FieldShift<Expression> >,
+   ExpressionApply<IntersectorTag<Intersect> > >
+ {
+   typedef int Type_t;
+ 
+   static
+   int apply(const Engine<Dim, T, FieldShift<Expression> > 
+ 	    &engine, const ExpressionApply<IntersectorTag<Intersect> > &tag)
+   {
+     // We offset the domain to get a domain in the viewed engine that
+     // the stencil looks at.  The intersection is performed with a view
+     // of the contained engine over this domain.  The resulting answer works
+     // even though the stencil looks beyond this domain, because the viewed
+     // field guarantees enough guard layers for the stencil to work.
+     // (Presently this assumption isn't checked anywhere, so a lack of guard
+     // cells results in an error in the multipatch inode view.)
+ 
+     typedef FieldShiftIntersector<Dim, Intersect> NewIntersector_t;
+     NewIntersector_t newIntersector(engine.intersectDomain(),
+ 				    tag.tag().intersector_m);
+ 
+     expressionApply(engine.field(),
+ 		    IntersectorTag<NewIntersector_t>(newIntersector));
+ 
+     return 0;
+   }
+ };
+ 
+ //---------------------------------------------------------------------------
+ // Specialization of  DataObjectRequest engineFunctor to pass the request to
+ // the contained engine.
+ //---------------------------------------------------------------------------
+ 
+ template<class RequestType> class DataObjectRequest;
+ 
+ template <int Dim, class T, class Expression, class RequestType>
+ struct EngineFunctor<Engine<Dim, T, FieldShift<Expression> >,
+   DataObjectRequest<RequestType> >
+ {
+   typedef typename DataObjectRequest<RequestType>::Type_t Type_t;
+ 
+   static Type_t
+   apply(const Engine<Dim, T, FieldShift<Expression> > &engine,
+ 	const DataObjectRequest<RequestType> &tag)
+   {
+     return engineFunctor(engine.field().engine(), tag);
+   }
+ };
+ 
+ //-----------------------------------------------------------------------------
+ //
+ // The generic version of EngineView just accesses the contained engine and
+ // applies EngineView to it.
+ //
+ // The default version doesn't fiddle with the domain, since it is assumed
+ // that the typical view doesn't need to.  Specializations will be required
+ // for INode views etc...  Probably we should come up with a generic approach.
+ //
+ //-----------------------------------------------------------------------------
+ 
+ template <int Dim, class T, class Expression, class Tag>
+ struct LeafFunctor<Engine<Dim, T, FieldShift<Expression> >,
+   EngineView<Tag> >
+ {
+   typedef LeafFunctor<Expression, EngineView<Tag> > LeafFunctor_t;
+   typedef typename LeafFunctor_t::Type_t NewViewed_t;
+   typedef Engine<Dim, T, FieldShift<NewViewed_t> > Type_t;
+ 
+   static
+   Type_t apply(const Engine<Dim, T,
+ 	       FieldShift<Expression> > &engine,
+ 	       const EngineView<Tag> &tag)
+   {
+     return Type_t(LeafFunctor_t::apply(engine.field(), tag), engine);
+   }
+ };
+ 
+ template <int Dim, class T, class Expression, class Tag>
+ struct LeafFunctor<Engine<Dim, T, FieldShift<Expression> >,
+                    ExpressionApply<Tag> >
+ {
+   typedef LeafFunctor<Expression, ExpressionApply<Tag> > LeafFunctor_t;
+   typedef int Type_t;
+ 
+   static
+   Type_t apply(const Engine<Dim, T,
+ 	       FieldShift<Expression> > &engine,
+ 	       const ExpressionApply<Tag> &tag)
+   {
+     return LeafFunctor_t::apply(engine.field(), tag);
+   }
+ };
+ 
+ //-----------------------------------------------------------------------------
+ // View1<Field, FieldOffset> specialization for indexing a field with a
+ // FieldOffset.
+ //-----------------------------------------------------------------------------
+ 
+ template<class GeometryTag, class T, class EngineTag, int Dim>
+ struct View2<Field<GeometryTag, T, EngineTag>, FieldOffset<Dim>, Centering<Dim> >
+ {
+   // Convenience typedef for the thing we're taking a view of.
+   
+   typedef Field<GeometryTag, T, EngineTag> Subject_t;
+   typedef typename Subject_t::Engine_t Engine_t;
+ 
+   // The return types.
+ 
+   typedef Field<GeometryTag, T, FieldShift<Engine_t> > ReadType_t;
+   typedef Field<GeometryTag, T, FieldShift<Engine_t> > Type_t;
+ 
+   // The functions that do the indexing.
+ 
+   inline static
+   Type_t make(const Subject_t &f, const FieldOffset<Dim> &s1,
+               const Centering<Dim> &c)
+   {
+     CTAssert(Dim == Subject_t::dimensions);
+ 
+     if (f.numSubFields() > 0)
+     {
+ #   if POOMA_BOUNDS_CHECK
+       PInsist((s1.subFieldNumber() < f.numSubFields()) &&
+               (s1.subFieldNumber() >= 0),
+               "subField bounds error");
+       PInsist(contains(f[s1.subFieldNumber()].totalDomain(),
+                        f[s1.subFieldNumber()].domain() + s1.cellOffset()),
+               "Field operator()(FieldOffset) bounds error");
+ #   endif
+       return FieldShiftSimple<Subject_t>::make(f[s1.subFieldNumber()],
+                                                s1.cellOffset(), c);
+     }
+     else
+     {
+ #   if POOMA_BOUNDS_CHECK
+       PInsist(s1.subFieldNumber() == 0,
+               "subField bounds error");
+       PInsist(contains(f.totalDomain(), f.domain() + s1.cellOffset()),
+               "Field operator()(FieldOffset) bounds error");
+ #   endif
+       return FieldShiftSimple<Subject_t>::make(f, s1.cellOffset(), c);
+     }
+   }
+ 
+   inline static
+   ReadType_t makeRead(const Subject_t &f, const FieldOffset<Dim> &s1,
+                       const Centering<Dim> &c)
+   {
+     CTAssert(Dim == Subject_t::dimensions);
+ 
+     if (f.numSubFields() > 0)
+     {
+ #   if POOMA_BOUNDS_CHECK
+       PInsist((s1.subFieldNumber() < f.numSubFields()) &&
+               (s1.subFieldNumber() >= 0),
+               "subField bounds error");
+       PInsist(contains(f[s1.subFieldNumber()].totalDomain(),
+                        f[s1.subFieldNumber()].domain() + s1.cellOffset()),
+               "Field operator()(FieldOffset) bounds error");
+ #   endif
+       return FieldShiftSimple<Subject_t>::make(f[s1.subFieldNumber()],
+                                                s1.cellOffset(), c);
+     }
+     else
+     {
+ #   if POOMA_BOUNDS_CHECK
+       PInsist(s1.subFieldNumber() == 0,
+               "subField bounds error");
+       PInsist(contains(f.totalDomain(), f.domain() + s1.cellOffset()),
+               "Field operator()(FieldOffset) bounds error");
+ #   endif
+       return FieldShiftSimple<Subject_t>::make(f, s1.cellOffset(), c);
+     }
+   }
+ };
+ 
+ #endif // POOMA_NEWFIELD_DIFFOPS_FIELDSHIFTENGINE_H
+ 
+ // ACL:rcsinfo
+ // ----------------------------------------------------------------------
+ // $RCSfile: FieldShift.h,v $   $Author: oldham $
+ // $Revision: 1.5 $   $Date: 2001/04/11 21:39:28 $
+ // ----------------------------------------------------------------------
+ // ACL:rcsinfo
Index: NewField/tests/CrossBox.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/CrossBox.cpp,v
retrieving revision 1.1
diff -c -p -r1.1 CrossBox.cpp
*** NewField/tests/CrossBox.cpp	2000/12/15 00:34:34	1.1
--- NewField/tests/CrossBox.cpp	2001/08/06 16:53:58
*************** int main(int argc, char *argv[])
*** 80,86 ****
    
    // Now, we can declare a field.
  
!   AllFace allFace;
  
    typedef UniformRectilinear<2> Geometry_t;
    typedef MultiPatch<UniformTag, Remote<Brick> > EngineTag_t;
--- 80,86 ----
    
    // Now, we can declare a field.
  
!   Centering<2> allFace = canonicalCentering<2>(FaceType, Continuous);
  
    typedef UniformRectilinear<2> Geometry_t;
    typedef MultiPatch<UniformTag, Remote<Brick> > EngineTag_t;
*************** int main(int argc, char *argv[])
*** 118,124 ****
    tester.check("sum a[1]*x[1](0)", sum(a[1] * x[1].comp(0)), 2161.5);
    tester.check("sum a[1]*x[1](1)", sum(a[1] * x[1].comp(1)), 1990.5);
  
!   int ret = tester.results("WhereTest");
    Pooma::finalize();
    return ret;
  }
--- 118,124 ----
    tester.check("sum a[1]*x[1](0)", sum(a[1] * x[1].comp(0)), 2161.5);
    tester.check("sum a[1]*x[1](1)", sum(a[1] * x[1].comp(1)), 1990.5);
  
!   int ret = tester.results("CrossBox");
    Pooma::finalize();
    return ret;
  }
Index: NewField/tests/ExpressionTest.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/ExpressionTest.cpp,v
retrieving revision 1.2.2.1
diff -c -p -r1.2.2.1 ExpressionTest.cpp
*** NewField/tests/ExpressionTest.cpp	2001/08/03 16:07:13	1.2.2.1
--- NewField/tests/ExpressionTest.cpp	2001/08/06 16:53:58
*************** int main(int argc, char *argv[])
*** 448,454 ****
    //  test4(tester, 4, ca1, ca2, ca3, ca4, cinit, cellInterior);
  
  
!   int ret = tester.results("ScalarCode");
    Pooma::finalize();
    return ret;
  }
--- 448,454 ----
    //  test4(tester, 4, ca1, ca2, ca3, ca4, cinit, cellInterior);
  
  
!   int ret = tester.results("ExpressionTest");
    Pooma::finalize();
    return ret;
  }
Index: NewField/tests/FieldOffset.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/Attic/FieldOffset.cpp,v
retrieving revision 1.1.2.2
diff -c -p -r1.1.2.2 FieldOffset.cpp
*** NewField/tests/FieldOffset.cpp	2001/08/02 22:36:56	1.1.2.2
--- NewField/tests/FieldOffset.cpp	2001/08/06 16:53:58
*************** int main(int argc, char *argv[])
*** 42,51 ****
--- 42,55 ----
    Centering<Dim> edges
      = canonicalCentering<Dim>(EdgeType, Continuous, XDim | YDim);
  
+   Centering<Dim> cell
+     = canonicalCentering<Dim>(CellType, Continuous);
+ 
    Interval<Dim> physicalVertexDomain(4, 4);
    DomainLayout<Dim> layout(physicalVertexDomain, GuardLayers<Dim>(1));
    typedef Field<UniformRectilinear<Dim>, double, Brick> Field_t;
    Field_t f(edges, layout, Vector<Dim>(0.0), Vector<Dim>(1.0, 2.0));
+   Field_t fS(cell, layout, Vector<Dim>(0.0), Vector<Dim>(1.0, 2.0));
    Field_t g(3, edges, layout, Vector<Dim>(0.0), Vector<Dim>(1.0, 2.0));
  
    // Set some data in the field.
*************** int main(int argc, char *argv[])
*** 111,116 ****
--- 115,136 ----
    tester.check("h.read(1,1)",
  	       h.read(FieldOffset<Dim>(Loc<Dim>(0,0)), Loc<Dim>(1,1)),
  	       3.3, 1.0e-08);
+ 
+   f[0] = iota(f[0].domain()).comp(1) * iota(f[0].domain()).comp(1);
+   f[1] = iota(f[1].domain()).comp(0) * iota(f[1].domain()).comp(0);
+ 
+   FieldOffset<2> lowerXEdge(Loc<2>(0, 0), 0), upperXEdge(Loc<2>(0, 1), 0);
+   FieldOffset<2>  leftYEdge(Loc<2>(0, 0), 1), rightYEdge(Loc<2>(1, 0), 1);
+ 
+   tester.out() << f[0].fieldEngine().centering() << std::endl;
+   tester.out() << f(upperXEdge, cell).physicalDomain() << std::endl;
+   tester.out() << f(upperXEdge, cell) << std::endl;
+ 
+   fS = (f(upperXEdge, cell) - f(lowerXEdge, cell))
+     * (f(rightYEdge, cell) - f(leftYEdge, cell));
+ 
+   tester.out() << "f" << std::endl << f << std::endl;
+   tester.out() << "fS" << std::endl << fS << std::endl;
  
    int ret = tester.results("FieldOffset");
    Pooma::finalize();
Index: NewField/tests/makefile
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/makefile,v
retrieving revision 1.11.2.4
diff -c -p -r1.11.2.4 makefile
*** NewField/tests/makefile	2001/08/02 22:36:56	1.11.2.4
--- NewField/tests/makefile	2001/08/06 16:53:58
*************** run: run_tests
*** 47,68 ****
  run_tests: tests
  	$(ODIR)/BasicTest1 $(TSTOPTS) 1>BasicTest1.out 2>&1
  	$(ODIR)/BasicTest2 $(TSTOPTS) 1>BasicTest2.out 2>&1
  	$(ODIR)/FieldTour1 $(TSTOPTS) 1>FieldTour1.out 2>&1
  	$(ODIR)/FieldTour2 $(TSTOPTS) 1>FieldTour2.out 2>&1
! 	$(ODIR)/WhereTest $(TSTOPTS) 1>WhereTest.out 2>&1
! 	$(ODIR)/VectorTest $(TSTOPTS) 1>VectorTest.out 2>&1
  	$(ODIR)/ScalarCode $(TSTOPTS) 1>ScalarCode.out 2>&1
  	$(ODIR)/StencilTests $(TSTOPTS) 1>StencilTests.out 2>&1
! 	$(ODIR)/ExpressionTest $(TSTOPTS) 1>ExpressionTest.out 2>&1
  
  field_tests:: $(ODIR)/BasicTest1 $(ODIR)/BasicTest2 \
  	$(ODIR)/FieldTour1 $(ODIR)/FieldTour2 \
  	$(ODIR)/FieldTour3 \
! 	$(ODIR)/WhereTest $(ODIR)/VectorTest \
  	$(ODIR)/ScalarCode $(ODIR)/StencilTests \
!         $(ODIR)/ExpressionTest $(ODIR)/Centerings \
! 	$(ODIR)/FieldOffset $(ODIR)/FieldReductions \
! 	$(ODIR)/NearestNeighbors
  
  ###########################
  
--- 47,73 ----
  run_tests: tests
  	$(ODIR)/BasicTest1 $(TSTOPTS) 1>BasicTest1.out 2>&1
  	$(ODIR)/BasicTest2 $(TSTOPTS) 1>BasicTest2.out 2>&1
+ 	$(ODIR)/Centerings $(TSTOPTS) 1>Centerings.out 2>&1
+ 	$(ODIR)/ExpressionTest $(TSTOPTS) 1>ExpressionTest.out 2>&1
+ 	$(ODIR)/FieldOffset $(TSTOPTS) 1>FieldOffset.out 2>&1
+ 	$(ODIR)/FieldReductions $(TSTOPTS) 1>FieldReductions.out 2>&1
  	$(ODIR)/FieldTour1 $(TSTOPTS) 1>FieldTour1.out 2>&1
  	$(ODIR)/FieldTour2 $(TSTOPTS) 1>FieldTour2.out 2>&1
! 	$(ODIR)/FieldTour3 $(TSTOPTS) 1>FieldTour3.out 2>&1
! 	$(ODIR)/NearestNeighbors $(TSTOPTS) 1>NearestNeighbors.out 2>&1
  	$(ODIR)/ScalarCode $(TSTOPTS) 1>ScalarCode.out 2>&1
  	$(ODIR)/StencilTests $(TSTOPTS) 1>StencilTests.out 2>&1
! 	$(ODIR)/VectorTest $(TSTOPTS) 1>VectorTest.out 2>&1
! 	$(ODIR)/WhereTest $(TSTOPTS) 1>WhereTest.out 2>&1
  
  field_tests:: $(ODIR)/BasicTest1 $(ODIR)/BasicTest2 \
+         $(ODIR)/Centerings $(ODIR)/ExpressionTest \
+ 	$(ODIR)/FieldOffset $(ODIR)/FieldReductions \
  	$(ODIR)/FieldTour1 $(ODIR)/FieldTour2 \
  	$(ODIR)/FieldTour3 \
! 	$(ODIR)/NearestNeighbors \
  	$(ODIR)/ScalarCode $(ODIR)/StencilTests \
! 	$(ODIR)/VectorTest $(ODIR)/WhereTest
  
  ###########################
  
*************** BasicTest2: $(ODIR)/BasicTest2
*** 79,104 ****
  
  $(ODIR)/BasicTest2: $(ODIR)/BasicTest2.o
  	$(LinkToSuite)
- 
- .PHONY: FieldTour1
- 
- FieldTour1: $(ODIR)/FieldTour1
- 
- $(ODIR)/FieldTour1: $(ODIR)/FieldTour1.o
- 	$(LinkToSuite)
  
! .PHONY: FieldTour2
  
! FieldTour2: $(ODIR)/FieldTour2
  
! $(ODIR)/FieldTour2: $(ODIR)/FieldTour2.o
  	$(LinkToSuite)
  
! .PHONY: Positions
  
! Positions: $(ODIR)/Positions
  
! $(ODIR)/Positions: $(ODIR)/Positions.o
  	$(LinkToSuite)
  
  .PHONY: ExpressionTest
--- 84,102 ----
  
  $(ODIR)/BasicTest2: $(ODIR)/BasicTest2.o
  	$(LinkToSuite)
  
! .PHONY: Centerings
  
! Centerings: $(ODIR)/Centerings
  
! $(ODIR)/Centerings: $(ODIR)/Centerings.o
  	$(LinkToSuite)
  
! .PHONY: CrossBox
  
! CrossBox: $(ODIR)/CrossBox
  
! $(ODIR)/CrossBox: $(ODIR)/CrossBox.o
  	$(LinkToSuite)
  
  .PHONY: ExpressionTest
*************** ExpressionTest: $(ODIR)/ExpressionTest
*** 108,184 ****
  $(ODIR)/ExpressionTest: $(ODIR)/ExpressionTest.o
  	$(LinkToSuite)
  
! .PHONY: WhereTest
  
! WhereTest: $(ODIR)/WhereTest
  
! $(ODIR)/WhereTest: $(ODIR)/WhereTest.o
  	$(LinkToSuite)
  
! .PHONY: VectorTest
  
! VectorTest: $(ODIR)/VectorTest
  
! $(ODIR)/VectorTest: $(ODIR)/VectorTest.o
  	$(LinkToSuite)
  
! .PHONY: CrossBox
  
! CrossBox: $(ODIR)/CrossBox
  
! $(ODIR)/CrossBox: $(ODIR)/CrossBox.o
  	$(LinkToSuite)
  
! .PHONY: ScalarCode
  
! ScalarCode: $(ODIR)/ScalarCode
  
! $(ODIR)/ScalarCode: $(ODIR)/ScalarCode.o
  	$(LinkToSuite)
  
! .PHONY: StencilTests
  
! StencilTests: $(ODIR)/StencilTests
  
! $(ODIR)/StencilTests: $(ODIR)/StencilTests.o
  	$(LinkToSuite)
  
  
! ###########################
  
! .PHONY: Centerings
  
! Centerings: $(ODIR)/Centerings
  
! $(ODIR)/Centerings: $(ODIR)/Centerings.o
  	$(LinkToSuite)
  
! .PHONY: FieldOffset
  
! FieldOffset: $(ODIR)/FieldOffset
  
! $(ODIR)/FieldOffset: $(ODIR)/FieldOffset.o
  	$(LinkToSuite)
  
! .PHONY: FieldReductions
  
! FieldReductions: $(ODIR)/FieldReductions
  
! $(ODIR)/FieldReductions: $(ODIR)/FieldReductions.o
  	$(LinkToSuite)
  
! .PHONY: FieldTour3
  
! FieldTour3: $(ODIR)/FieldTour3
  
! $(ODIR)/FieldTour3: $(ODIR)/FieldTour3.o
  	$(LinkToSuite)
  
! .PHONY: NearestNeighbors
  
! NearestNeighbors: $(ODIR)/NearestNeighbors
  
! $(ODIR)/NearestNeighbors: $(ODIR)/NearestNeighbors.o
  	$(LinkToSuite)
  
  
--- 106,186 ----
  $(ODIR)/ExpressionTest: $(ODIR)/ExpressionTest.o
  	$(LinkToSuite)
  
! .PHONY: FieldOffset
  
! FieldOffset: $(ODIR)/FieldOffset
  
! $(ODIR)/FieldOffset: $(ODIR)/FieldOffset.o
  	$(LinkToSuite)
  
! .PHONY: FieldReductions
  
! FieldReductions: $(ODIR)/FieldReductions
  
! $(ODIR)/FieldReductions: $(ODIR)/FieldReductions.o
  	$(LinkToSuite)
  
! .PHONY: FieldTour1
  
! FieldTour1: $(ODIR)/FieldTour1
  
! $(ODIR)/FieldTour1: $(ODIR)/FieldTour1.o
  	$(LinkToSuite)
  
! .PHONY: FieldTour2
  
! FieldTour2: $(ODIR)/FieldTour2
  
! $(ODIR)/FieldTour2: $(ODIR)/FieldTour2.o
  	$(LinkToSuite)
  
! .PHONY: FieldTour3
  
! FieldTour3: $(ODIR)/FieldTour3
  
! $(ODIR)/FieldTour3: $(ODIR)/FieldTour3.o
  	$(LinkToSuite)
  
+ .PHONY: NearestNeighbors
  
! NearestNeighbors: $(ODIR)/NearestNeighbors
  
! $(ODIR)/NearestNeighbors: $(ODIR)/NearestNeighbors.o
! 	$(LinkToSuite)
  
! .PHONY: Positions
  
! Positions: $(ODIR)/Positions
! 
! $(ODIR)/Positions: $(ODIR)/Positions.o
  	$(LinkToSuite)
  
! .PHONY: ScalarCode
  
! ScalarCode: $(ODIR)/ScalarCode
  
! $(ODIR)/ScalarCode: $(ODIR)/ScalarCode.o
  	$(LinkToSuite)
  
! .PHONY: StencilTests
  
! StencilTests: $(ODIR)/StencilTests
  
! $(ODIR)/StencilTests: $(ODIR)/StencilTests.o
  	$(LinkToSuite)
  
! .PHONY: VectorTest
  
! VectorTest: $(ODIR)/VectorTest
  
! $(ODIR)/VectorTest: $(ODIR)/VectorTest.o
  	$(LinkToSuite)
  
! .PHONY: WhereTest
  
! WhereTest: $(ODIR)/WhereTest
  
! $(ODIR)/WhereTest: $(ODIR)/WhereTest.o
  	$(LinkToSuite)
  
  
Index: Pooma/NewFields.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/Pooma/NewFields.h,v
retrieving revision 1.5.2.1
diff -c -p -r1.5.2.1 NewFields.h
*** Pooma/NewFields.h	2001/08/03 19:02:09	1.5.2.1
--- Pooma/NewFields.h	2001/08/06 16:53:58
***************
*** 67,72 ****
--- 67,76 ----
  
  #include "NewField/Mesh/PositionFunctions.h"
  
+ // Field offsets:
+ 
+ #include "NewField/DiffOps/FieldShiftEngine.h"
+ 
  #endif // POOMA_POOMA_NEWFIELDS_H
  
  // ACL:rcsinfo
