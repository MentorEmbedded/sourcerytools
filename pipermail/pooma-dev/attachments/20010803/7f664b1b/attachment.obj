Index: Field.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/Field.h,v
retrieving revision 1.15.2.4
diff -c -p -r1.15.2.4 Field.h
*** Field.h	2001/08/02 22:36:55	1.15.2.4
--- Field.h	2001/08/03 15:49:34
*************** public:
*** 1131,1147 ****
    : fieldEngine_m(model.fieldEngine(), i)
      { }
  
-   // Centering-Model constructor. This version differs from the one above
-   // in that it constructs a field with uninitialized engines with a new
-   // centering.  The new field gets its mesh and domain information from
-   // the model field.
- 
-   template<class Centering, class GT2, class T2, class ET2>
-   Field(const Centering &baseInit, const Field<GT2, T2, ET2> &model)
-     : fieldEngine_m(baseInit, model.fieldEngine())
-   { }
- 
- 
    //---------------------------------------------------------------------------
    // Empty destructor is fine for us.
    
--- 1131,1136 ----
*************** public:
*** 1206,1211 ****
--- 1195,1204 ----
        return fieldEngine_m.physicalDomain();
      }
  
+   const Centering<dimensions> &centering()
+   {
+     return fieldEngine().centering();
+   }
  
    //---------------------------------------------------------------------------
    // Instruct the field to make its own copy of its data.
Index: DiffOps/Div.UR.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/DiffOps/Div.UR.h,v
retrieving revision 1.5
diff -c -p -r1.5 Div.UR.h
*** DiffOps/Div.UR.h	2001/06/22 22:49:34	1.5
--- DiffOps/Div.UR.h	2001/08/03 15:49:35
*************** public:
*** 143,151 ****
  
    typedef T2   OutputElement_t;
  
!   Cell outputCentering() const
    {
!     return Cell();
    }
  
    Loc<Dim> inputOffsets() const
--- 143,151 ----
  
    typedef T2   OutputElement_t;
  
!   Centering<Dim> outputCentering() const
    {
!     return canonicalCentering<Dim>(CellType, Continuous);
    }
  
    Loc<Dim> inputOffsets() const
*************** private:
*** 242,260 ****
    Vector<Dim, TM> fact_m;
  };
  
! template<class T2, class Mesh, class OC>
  class DivSameToSame;
  
! template<class T2, int Dim, class TM, class CS, class OC>
  class DivSameToSame<Vector<Dim, T2>, UniformRectilinear<Dim, TM, CS>, OC>
  {
  public:
  
    typedef T2   OutputElement_t;
  
!   OC outputCentering() const
    {
!     return OC();
    }
  
    Loc<Dim> inputOffsets() const
--- 242,260 ----
    Vector<Dim, TM> fact_m;
  };
  
! template<class T2, class Mesh, int OC>
  class DivSameToSame;
  
! template<class T2, int Dim, class TM, class CS, int OC>
  class DivSameToSame<Vector<Dim, T2>, UniformRectilinear<Dim, TM, CS>, OC>
  {
  public:
  
    typedef T2   OutputElement_t;
  
!   Centering<Dim> outputCentering() const
    {
!     return canonicalCentering<Dim>(OC, Continuous);
    }
  
    Loc<Dim> inputOffsets() const
Index: DiffOps/Div.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/DiffOps/Div.h,v
retrieving revision 1.3
diff -c -p -r1.3 Div.h
*** DiffOps/Div.h	2001/04/11 21:39:28	1.3
--- DiffOps/Div.h	2001/08/03 15:49:35
***************
*** 63,68 ****
--- 63,69 ----
  //-----------------------------------------------------------------------------
  
  #include "NewField/Field.h"
+ #include "NewField/FieldCentering.h"
  #include "NewField/FieldInitializers.h"
  #include "NewField/DiffOps/FieldStencil.h"
  
*************** class DivCellToVert;
*** 107,113 ****
  template<class T2, class Geometry>
  class DivVertToCell;
  
! template<class T2, class Geometry, class OC>
  class DivSameToSame;
  
  
--- 108,114 ----
  template<class T2, class Geometry>
  class DivVertToCell;
  
! template<class T2, class Geometry, int OC>
  class DivSameToSame;
  
  
*************** class DivSameToSame;
*** 121,131 ****
  
  template<class Geometry, class T, class EngineTag>
  typename
! FieldStencilSimple<DivSameToSame<T, Geometry, Cell>,
    Field<Geometry, T, EngineTag> >::Type_t
  divCellToCell(const Field<Geometry, T, EngineTag> &f)
  {
!   typedef DivSameToSame<T, Geometry, Cell> Div_t;
    typedef FieldStencilSimple<Div_t, Field<Geometry, T, EngineTag> > Ret_t;
    return Ret_t::make(Div_t(f.fieldEngine()), f);
  }
--- 122,132 ----
  
  template<class Geometry, class T, class EngineTag>
  typename
! FieldStencilSimple<DivSameToSame<T, Geometry, CellType>,
    Field<Geometry, T, EngineTag> >::Type_t
  divCellToCell(const Field<Geometry, T, EngineTag> &f)
  {
!   typedef DivSameToSame<T, Geometry, CellType> Div_t;
    typedef FieldStencilSimple<Div_t, Field<Geometry, T, EngineTag> > Ret_t;
    return Ret_t::make(Div_t(f.fieldEngine()), f);
  }
*************** divCellToVert(const Field<Geometry, T, E
*** 154,164 ****
  
  template<class Geometry, class T, class EngineTag>
  typename
! FieldStencilSimple<DivSameToSame<T, Geometry, Vert>,
    Field<Geometry, T, EngineTag> >::Type_t
  divVertToVert(const Field<Geometry, T, EngineTag> &f)
  {
!   typedef DivSameToSame<T, Geometry, Vert> Div_t;
    typedef FieldStencilSimple<Div_t, Field<Geometry, T, EngineTag> > Ret_t;
    return Ret_t::make(Div_t(f.fieldEngine()), f);
  }
--- 155,165 ----
  
  template<class Geometry, class T, class EngineTag>
  typename
! FieldStencilSimple<DivSameToSame<T, Geometry, VertexType>,
    Field<Geometry, T, EngineTag> >::Type_t
  divVertToVert(const Field<Geometry, T, EngineTag> &f)
  {
!   typedef DivSameToSame<T, Geometry, VertexType> Div_t;
    typedef FieldStencilSimple<Div_t, Field<Geometry, T, EngineTag> > Ret_t;
    return Ret_t::make(Div_t(f.fieldEngine()), f);
  }
Index: DiffOps/FieldStencil.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/DiffOps/FieldStencil.h,v
retrieving revision 1.5
diff -c -p -r1.5 FieldStencil.h
*** DiffOps/FieldStencil.h	2001/04/11 21:39:28	1.5
--- DiffOps/FieldStencil.h	2001/08/03 15:49:35
*************** struct FieldStencilSimple
*** 426,432 ****
    static inline
    Type_t make(const Functor &stencil, const Expression &f)
    {
!     Type_t h(stencil.outputCentering(), f);
  
      Loc<outputDim> inputOffsets = f.fieldEngine().offsets();
      PAssert(inputOffsets == stencil.inputOffsets());
--- 426,432 ----
    static inline
    Type_t make(const Functor &stencil, const Expression &f)
    {
!     Type_t h(f, stencil.outputCentering());
  
      Loc<outputDim> inputOffsets = f.fieldEngine().offsets();
      PAssert(inputOffsets == stencil.inputOffsets());
Index: FieldEngine/FieldEngine.UR.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/FieldEngine/FieldEngine.UR.h,v
retrieving revision 1.7.2.1
diff -c -p -r1.7.2.1 FieldEngine.UR.h
*** FieldEngine/FieldEngine.UR.h	2001/07/17 23:14:27	1.7.2.1
--- FieldEngine/FieldEngine.UR.h	2001/08/03 15:49:35
*************** public:
*** 171,188 ****
      spacings_m(spacings)
      { }
  
-   // Version that constructs a field with a new centering but based on the
-   // same geometry.
- 
-   template<class BaseInitializer, class T2, class ET2>  
-   FieldEngine(const BaseInitializer &baseInit,
- 	      const FieldEngine<GeometryTag_t, T2, ET2> &model)
-   : Base_t(baseInit, model),
-     origin_m(model.origin()),
-     spacings_m(model.spacings())
-     {
-     }
-     
    // Copy constructor.
    
    FieldEngine(const This_t &model)
--- 171,176 ----
*************** public:
*** 282,287 ****
--- 270,286 ----
      spacings_m(model.spacings())
      { }
  
+   // Model/Centering constructor used by stencils.
+   // Eventually to be axed and replaced with mesh/centering
+ 
+   template<class T2, class ET2>
+   FieldEngine(const FieldEngine<GeometryTag_t, T2, ET2> &model, 
+               const Centering<Dim> &centering)
+     : Base_t(centering, model),
+       origin_m(model.origin()),
+       spacings_m(model.spacings())
+   {
+   }
  
    //---------------------------------------------------------------------------
    // Copy assignment operator (shallow).
*************** public:
*** 307,389 ****
    inline const PointType_t &spacings() const { return spacings_m; }
  
  
-   //---------------------------------------------------------------------------
-   // Return an index-function-engine-based array that can return the positions
-   // of the geometric center of a cell's faces. 
-   
-   class FaceCenterFunctor
-   {
-     public:
-     
-       FaceCenterFunctor() { }
-       
-       FaceCenterFunctor(const PointType_t &origin, const PointType_t &spacings,
-                         const Domain_t &pcd, int orientation)
-       : origin_m(origin), spacings_m(spacings)
-         {
-           for (int i = 0; i < PointType_t::dimensions; i++)
-             {
-               if (i != orientation)
-                 origin_m(i) += 0.5 * spacings_m(i);
-               origin_m(i) -= pcd[i].first() * spacings_m(i);
-             }
-         }
-       
-       PointType_t operator()(int i0) const
-         {
-           return origin_m + PointType_t(i0) * spacings_m;
-         }
-       
-       PointType_t operator()(int i0, int i1) const
-         {
-           return origin_m + PointType_t(i0, i1) * spacings_m;
-         }
- 
-         PointType_t operator()(int i0, int i1, int i2) const
-         {
-           return origin_m + PointType_t(i0, i1, i3) * spacings_m;
-         }
- 
-     private:
-     
-       PointType_t origin_m, spacings_m;
-   };
-     
-   typedef Array<Dim, PointType_t, IndexFunction<FaceCenterFunctor> > 
-     FaceCentersArray_t;
- 
-   FaceCentersArray_t faceCenters(int orientation, const Domain_t &d) const;
-   
  private:
  
    PointType_t origin_m, spacings_m;
  
  };
  
- 
- ///////////////////////////////////////////////////////////////////////////////
- //
- // Non-inline members.
- //
- ///////////////////////////////////////////////////////////////////////////////
- 
- //-----------------------------------------------------------------------------
- // Return the face centers.
- //-----------------------------------------------------------------------------
- 
- template <int Dim, class TM, class CoordinateSystem, class T, class EngineTag>
- typename 
-   FieldEngine<UniformRectilinear<Dim, TM, CoordinateSystem>, T, EngineTag>::
-     FaceCentersArray_t 
- FieldEngine<UniformRectilinear<Dim, TM, CoordinateSystem>, T, EngineTag>::
- faceCenters(int orientation, const Domain_t &d) const
- {
-   FaceCentersArray_t array(d);
-   FaceCenterFunctor functor(origin_m, spacings_m, physicalCellDomain(),
-     orientation);
-   array.engine().setFunctor(functor);
-   return array;
- }
  
  #endif // POOMA_NEWFIELD_FIELDENGINE_UR_H
  
--- 306,317 ----
Index: FieldEngine/FieldEngineBase.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/FieldEngine/FieldEngineBase.h,v
retrieving revision 1.13.2.1
diff -c -p -r1.13.2.1 FieldEngineBase.h
*** FieldEngine/FieldEngineBase.h	2001/07/17 23:14:27	1.13.2.1
--- FieldEngine/FieldEngineBase.h	2001/08/03 15:49:35
*************** public:
*** 151,180 ****
      guards_m(0)
      { }
    
!   // Layout constructor. Takes a layout appropriate for the contained
!   // engines and, based on the logic contained in the InitFunctor, sets
!   // up centering information and the engines.
!     
!   template<class InitFunctor>
!   FieldEngineBase(const InitFunctor &f, const Layout_t &layout)
!   : physicalCellDomain_m(layout.domain()),
!     guards_m(layout.externalGuards())
!     {
!       shrinkInPlace(physicalCellDomain_m, guards_m);
!       shrinkRightInPlace(physicalCellDomain_m, 1);
!       f.initialize(*this, layout);
!     }
! 
    // Initialize with a new centering from a model.
  
!   template<class InitFunctor, class T2, class ET2>
!   FieldEngineBase(const InitFunctor &f,
  		  const FieldEngineBase<Dim, T2, ET2> &model)
!   : physicalCellDomain_m(model.physicalCellDomain()),
!     guards_m(model.guardLayers())
      {
!       f.initialize(*this, Pooma::NoInit());
      }
  
    // Centering versions. These construct sub-fields based on a
    // centering.
--- 151,185 ----
      guards_m(0)
      { }
    
!   // -----------------------------------------------
    // Initialize with a new centering from a model.
+   // This will be unnecessary when we have a mesh,
+   // but the above version will become centering, layout.
  
!   template<class T2, class ET2>
!   FieldEngineBase(const Centering<Dim> &centering,
  		  const FieldEngineBase<Dim, T2, ET2> &model)
!     : physicalCellDomain_m(model.physicalCellDomain()),
!       guards_m(model.guardLayers()),
!       centering_m(centering)
!   {
!     if (centering.size() > 1)
      {
!       addSubFields(centering.size());
!       for (int c = 0; c < centering.size(); ++ c)
!       {
!         Loc<Dim> offset(1);
!         offset -= centering.orientations()[c];
!         subField(c).data_m = new Data_t(offset, Pooma::NoInit());
!       }
!     }
!     else
!     {
!       Loc<Dim> offset(1);
!       offset -= centering.orientations()[0];
!       data_m = new Data_t(offset, Pooma::NoInit());
      }
+   }
  
    // Centering versions. These construct sub-fields based on a
    // centering.
*************** public:
*** 237,242 ****
--- 242,248 ----
    : subFields_m(model.subFields_m),
      data_m(model.data_m),
      physicalCellDomain_m(model.physicalCellDomain_m),
+     centering_m(model.centering_m),
      guards_m(model.guards_m)
      { }
  
*************** public:
*** 247,252 ****
--- 253,259 ----
    : subFields_m(model.subFields_m[iSubField].subFields_m),
      data_m(model.subFields_m[iSubField].data_m),
      physicalCellDomain_m(model.physicalCellDomain_m),
+     centering_m(model.subFields_m[iSubField].centering_m),
      guards_m(model.guards_m)
      { }  
  
*************** public:
*** 254,260 ****
    
    template<int Dim2, class T2, class EngineTag2, class Initializer>
    FieldEngineBase(const FieldEngineBase<Dim2, T2, EngineTag2> &model, 
!     const Initializer &i)
      {
        initialize(*this, model, i); 
      }  
--- 261,267 ----
    
    template<int Dim2, class T2, class EngineTag2, class Initializer>
    FieldEngineBase(const FieldEngineBase<Dim2, T2, EngineTag2> &model, 
!                   const Initializer &i)
      {
        initialize(*this, model, i); 
      }  
*************** public:
*** 287,292 ****
--- 294,300 ----
      subFields_m = model.subFields_m;
      data_m = model.data_m;
      physicalCellDomain_m = model.physicalCellDomain_m;
+     centering_m = model.centering_m;
      guards_m = model.guards_m;
    }
  
*************** public:
*** 423,429 ****
          {
            subFields_m[i].physicalCellDomain_m = physicalCellDomain_m;
            subFields_m[i].guards_m = guards_m;
!           // centering???
          }
      }
      
--- 431,437 ----
          {
            subFields_m[i].physicalCellDomain_m = physicalCellDomain_m;
            subFields_m[i].guards_m = guards_m;
!           subFields_m[i].centering_m = centering_m[i];
          }
      }
      
Index: tests/BasicTest1.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/BasicTest1.cpp,v
retrieving revision 1.2
diff -c -p -r1.2 BasicTest1.cpp
*** tests/BasicTest1.cpp	2000/07/25 01:14:31	1.2
--- tests/BasicTest1.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 108,114 ****
    // Make a Brick-Engine-based field.
  
    DomainLayout<2> layout1(physicalVertexDomain, GuardLayers<2>(1));
!   Cell cell;
    
    Field<UniformRectilinear<2>, double, Brick> 
      f(cell, layout1, origin, spacings);
--- 108,114 ----
    // Make a Brick-Engine-based field.
  
    DomainLayout<2> layout1(physicalVertexDomain, GuardLayers<2>(1));
!   Centering<2> cell = canonicalCentering<2>(CellType, Continuous);
    
    Field<UniformRectilinear<2>, double, Brick> 
      f(cell, layout1, origin, spacings);
Index: tests/BasicTest2.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/BasicTest2.cpp,v
retrieving revision 1.1
diff -c -p -r1.1 BasicTest2.cpp
*** tests/BasicTest2.cpp	2000/07/25 01:11:03	1.1
--- tests/BasicTest2.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 63,69 ****
      }
  
    DomainLayout<2> layout1(Interval<2>(I, J), GuardLayers<2>(1));
!   Vert vert;
    
    Field<UniformRectilinear<2>, double, Brick> 
      f(vert, layout1, origin, spacings),
--- 63,69 ----
      }
  
    DomainLayout<2> layout1(Interval<2>(I, J), GuardLayers<2>(1));
!   Centering<2> vert = canonicalCentering<2>(VertexType, Continuous);
    
    Field<UniformRectilinear<2>, double, Brick> 
      f(vert, layout1, origin, spacings),
Index: tests/ExpressionTest.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/ExpressionTest.cpp,v
retrieving revision 1.2
diff -c -p -r1.2 ExpressionTest.cpp
*** tests/ExpressionTest.cpp	2001/04/10 23:13:25	1.2
--- tests/ExpressionTest.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 394,400 ****
    
    // Now, we can declare a field.
  
!   Cell cell;
  
    typedef 
      Field<UniformRectilinear<1>, double, MultiPatch<UniformTag, BrickTag_t> >
--- 394,400 ----
    
    // Now, we can declare a field.
  
!   Centering<1> cell = canonicalCentering<1>(CellType, Continuous);
  
    typedef 
      Field<UniformRectilinear<1>, double, MultiPatch<UniformTag, BrickTag_t> >
Index: tests/FieldTour1.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/FieldTour1.cpp,v
retrieving revision 1.5
diff -c -p -r1.5 FieldTour1.cpp
*** tests/FieldTour1.cpp	2001/05/04 15:41:28	1.5
--- tests/FieldTour1.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 62,74 ****
    
    // Now, we can declare a field.
  
!   AllFace allFace;
  
    typedef 
      Field<UniformRectilinear<2>, double,
      MultiPatch<UniformTag, BrickTag_t> > Field_t;
    Field_t f(allFace, layout, Vector<2>(0.0), Vector<2>(1.0, 2.0));
  
    // Ask for the field's physical cell domain.
    
    std::cout << f.physicalCellDomain() << std::endl;
--- 62,78 ----
    
    // Now, we can declare a field.
  
!   Centering<2> allFace = canonicalCentering<2>(FaceType, Continuous);
  
    typedef 
      Field<UniformRectilinear<2>, double,
      MultiPatch<UniformTag, BrickTag_t> > Field_t;
    Field_t f(allFace, layout, Vector<2>(0.0), Vector<2>(1.0, 2.0));
  
+   std::cout << f.centering() << std::endl;
+   std::cout << f[0].centering() << std::endl;
+   std::cout << f[1].centering() << std::endl;
+ 
    // Ask for the field's physical cell domain.
    
    std::cout << f.physicalCellDomain() << std::endl;
*************** int main(int argc, char *argv[])
*** 129,135 ****
    // Declare another field. Note how we can reuse the layout for a field
    // with a different centering.
  
!   Face face1(1);
    
    Field_t g(face1, layout, Vector<2>(0.0), Vector<2>(1.0, 2.0));
  
--- 133,139 ----
    // Declare another field. Note how we can reuse the layout for a field
    // with a different centering.
  
!   Centering<2> face1 = canonicalCentering<2>(FaceType, Continuous, YDim);
    
    Field_t g(face1, layout, Vector<2>(0.0), Vector<2>(1.0, 2.0));
  
Index: tests/FieldTour2.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/FieldTour2.cpp,v
retrieving revision 1.2
diff -c -p -r1.2 FieldTour2.cpp
*** tests/FieldTour2.cpp	2001/05/04 15:41:29	1.2
--- tests/FieldTour2.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 48,57 ****
    // Now, we can declare a field. Let's make this a multi-material
    // field with cell centering.
  
    typedef Field<UniformRectilinear<2>, double, Brick> Field_t;
!   Field_t f(ReplicateSubFields<Cell>(3), layout, // 3 fields each Cell-centered
      Vector<2>(0.0), Vector<2>(1.0, 2.0));
-   // are composable
  
    // Set some data in the field.
    
--- 48,58 ----
    // Now, we can declare a field. Let's make this a multi-material
    // field with cell centering.
  
+   Centering<2> cell = canonicalCentering<2>(CellType, Continuous);
+ 
    typedef Field<UniformRectilinear<2>, double, Brick> Field_t;
!   Field_t f(3, cell, layout, // 3 fields each Cell-centered
      Vector<2>(0.0), Vector<2>(1.0, 2.0));
  
    // Set some data in the field.
    
Index: tests/Positions.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/Positions.cpp,v
retrieving revision 1.2
diff -c -p -r1.2 Positions.cpp
*** tests/Positions.cpp	2000/12/13 18:59:38	1.2
--- tests/Positions.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 64,72 ****
    // Make a Brick-Engine-based field.
  
    DomainLayout<2> layout1(physicalVertexDomain, GuardLayers<2>(1));
!   Cell cell;
!   Vert vert;
!   AllFace allFace;
  
    typedef UniformRectilinear<2> Geometry_t;
    typedef Field<Geometry_t, double, Brick> Field_t;
--- 64,73 ----
    // Make a Brick-Engine-based field.
  
    DomainLayout<2> layout1(physicalVertexDomain, GuardLayers<2>(1));
! 
!   Centering<2> cell = canonicalCentering<2>(CellType, Continuous);
!   Centering<2> vert = canonicalCentering<2>(VertexType, Continuous);
!   Centering<2> allFace = canonicalCentering<2>(FaceType, Continuous);
  
    typedef UniformRectilinear<2> Geometry_t;
    typedef Field<Geometry_t, double, Brick> Field_t;
Index: tests/ScalarCode.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/ScalarCode.cpp,v
retrieving revision 1.7
diff -c -p -r1.7 ScalarCode.cpp
*** tests/ScalarCode.cpp	2001/05/04 15:41:29	1.7
--- tests/ScalarCode.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 321,328 ****
    typedef Field<UniformRectilinear<dim>, double, MP2_t> Field_t;
    typedef Field<UniformRectilinear<dim>, Vector<dim>, MP2_t> FieldV_t;
  
!   Cell cell;
!   AllFace allFace;
  
    FieldBrick_t f(allFace, layout1, origin, spacings);
    f.addUpdaters(AllConstantFaceBC<double>(4.0, true));
--- 321,328 ----
    typedef Field<UniformRectilinear<dim>, double, MP2_t> Field_t;
    typedef Field<UniformRectilinear<dim>, Vector<dim>, MP2_t> FieldV_t;
  
!   Centering<dim> cell = canonicalCentering<dim>(CellType, Continuous);
!   Centering<dim> allFace = canonicalCentering<dim>(FaceType, Continuous);
  
    FieldBrick_t f(allFace, layout1, origin, spacings);
    f.addUpdaters(AllConstantFaceBC<double>(4.0, true));
*************** int main(int argc, char *argv[])
*** 377,384 ****
  			  GuardLayers<dim>(1), GuardLayers<dim>(1),
  			  LayoutTag_t());
  
!   Edge edge(dim - 1);
! 
    Field_t EdgeQPressure(edge, layout3, origin, spacings);
    Field_t EdgeGammaConstant(edge, layout3, origin, spacings);
    Field_t EdgeSoundSpeed(edge, layout3, origin, spacings);
--- 377,383 ----
  			  GuardLayers<dim>(1), GuardLayers<dim>(1),
  			  LayoutTag_t());
  
!   Centering<dim> edge = canonicalCentering<dim>(EdgeType, Continuous, YDim);
    Field_t EdgeQPressure(edge, layout3, origin, spacings);
    Field_t EdgeGammaConstant(edge, layout3, origin, spacings);
    Field_t EdgeSoundSpeed(edge, layout3, origin, spacings);
*************** int main(int argc, char *argv[])
*** 409,416 ****
    tester.out() << "EdgePsi" << EdgePsiLimiter << std::endl;
  
    // 2) scalar code with extents (lower extent in particular)
  
-   Edge edgeX(1);
    Field_t edgeValues(edgeX, layout3, origin, spacings);
    Field_t cellValues(cell, layout3, origin, spacings);
  
--- 408,416 ----
    tester.out() << "EdgePsi" << EdgePsiLimiter << std::endl;
  
    // 2) scalar code with extents (lower extent in particular)
+ 
+   Centering<dim> edgeX = canonicalCentering<dim>(EdgeType, Continuous, XDim);
  
    Field_t edgeValues(edgeX, layout3, origin, spacings);
    Field_t cellValues(cell, layout3, origin, spacings);
  
Index: tests/StencilTests.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/StencilTests.cpp,v
retrieving revision 1.1
diff -c -p -r1.1 StencilTests.cpp
*** tests/StencilTests.cpp	2001/05/14 21:11:24	1.1
--- tests/StencilTests.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 80,88 ****
    
    // Now, we can declare fields.
  
!   AllFace allFace;
!   Cell    cell;
!   Vert    vertex;
  
    typedef UniformRectilinear<2> Geometry_t;
  
--- 80,88 ----
    
    // Now, we can declare fields.
  
!   Centering<2> cell = canonicalCentering<2>(CellType, Continuous);
!   Centering<2> vertex = canonicalCentering<2>(VertexType, Continuous);
!   Centering<2> allFace = canonicalCentering<2>(FaceType, Continuous);
  
    typedef UniformRectilinear<2> Geometry_t;
  
Index: tests/VectorTest.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/VectorTest.cpp,v
retrieving revision 1.3
diff -c -p -r1.3 VectorTest.cpp
*** tests/VectorTest.cpp	2001/04/10 23:13:25	1.3
--- tests/VectorTest.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 87,93 ****
    
    // Now, we can declare a field.
  
!   AllFace allFace;
  
    typedef UniformRectilinear<2> Geometry_t;
    typedef MultiPatch<UniformTag, BrickTag_t> EngineTag_t;
--- 87,93 ----
    
    // Now, we can declare a field.
  
!   Centering<2> allFace = canonicalCentering<2>(FaceType, Continuous);
  
    typedef UniformRectilinear<2> Geometry_t;
    typedef MultiPatch<UniformTag, BrickTag_t> EngineTag_t;
Index: tests/WhereTest.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/WhereTest.cpp,v
retrieving revision 1.3
diff -c -p -r1.3 WhereTest.cpp
*** tests/WhereTest.cpp	2001/04/10 23:13:25	1.3
--- tests/WhereTest.cpp	2001/08/03 15:49:35
*************** int main(int argc, char *argv[])
*** 85,91 ****
    
    // Now, we can declare a field.
  
!   AllFace allFace;
  
    typedef UniformRectilinear<2> Geometry_t;
  
--- 85,91 ----
    
    // Now, we can declare a field.
  
!   Centering<2> allFace = canonicalCentering<2>(FaceType, Continuous);
  
    typedef UniformRectilinear<2> Geometry_t;
  
