<excerpt>

<smaller>Of course, in multiple dimensions you generally don't want
internal guards on anything that you're not going to stencil, so in
practice it isn't clear how often this practice will really pay off.
(Internal guards can consume a lot of memory in 3D.)</smaller>


        <smaller>Jim</smaller>

</excerpt>

Jim, et. al.:

In practice, this (calculating internal/external guard cells instead
of communicating) would be one of the biggest optimizations possible.
Especially when you introduce the concept of dependent and independent
fields. Usually only the independent fields need to communicate to
fill their guard cells. The dependent fields can just calculate their
guards and move on as pretty as you please.


Because of the limitations on scalar coding right now, once you start
using guard cells, pretty much every field ends up requiring them also
(this has to do with alignment issues and all patches starting their
coordinate indexing at (0,0,0)). The devil is of course in the
details, but, you can't generally get away with mixing and matching
fields with and without guard cells right now except in the simple
case of all SIMD syntax (which of course is what you were referring
to).


I've got the GCC work back online. Mark's contract is extended through
next year. Hopefully, we can soon get back to thinking about these
other exciting issues.


Regards,

John


