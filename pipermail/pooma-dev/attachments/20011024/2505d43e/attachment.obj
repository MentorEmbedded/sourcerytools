Index: BrickEngine.cpp
===================================================================
RCS file: /home/pooma/Repository/r2/src/Engine/BrickEngine.cpp,v
retrieving revision 1.75
diff -c -p -r1.75 BrickEngine.cpp
*** BrickEngine.cpp	2001/08/30 01:15:03	1.75
--- BrickEngine.cpp	2001/10/17 01:26:26
***************
*** 57,80 ****
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const Domain_t &dom)
!   : Base_t(dom), data_m(dom.size())
  { }
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const Node<Domain_t> &node)
    : Base_t(node),
!     data_m(node.allocated().size(), node.affinity(), 
!            DataBlockPtr<T>::WithAffinity_t())
  { }
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const Layout_t &layout)
!   : Base_t(layout), data_m(layout.domain().size())
  { }
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const Domain_t &dom, const T& model)
!   : Base_t(dom), data_m(dom.size(), model)
  { }
  
  //-----------------------------------------------------------------------------
--- 57,83 ----
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const Domain_t &dom)
!   : Base_t(dom), dataBlock_m(dom.size()), data_m(dataBlock_m.currentPointer())
  { }
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const Node<Domain_t> &node)
    : Base_t(node),
!     dataBlock_m(node.allocated().size(), node.affinity(), 
!            DataBlockPtr<T>::WithAffinity_t()),
!     data_m(dataBlock_m.currentPointer())
  { }
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const Layout_t &layout)
!   : Base_t(layout), dataBlock_m(layout.domain().size()),
!     data_m(dataBlock_m.currentPointer())
  { }
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const Domain_t &dom, const T& model)
!   : Base_t(dom), dataBlock_m(dom.size(), model),
!     data_m(dataBlock_m.currentPointer())
  { }
  
  //-----------------------------------------------------------------------------
*************** Engine<Dim,T,Brick>::Engine(const Domain
*** 89,95 ****
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(T * foreignData, const Domain_t &dom)
!   : Base_t(dom), data_m(foreignData, dom.size())
  { }
  
  //-----------------------------------------------------------------------------
--- 92,99 ----
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(T * foreignData, const Domain_t &dom)
!   : Base_t(dom), dataBlock_m(foreignData, dom.size()),
!     data_m(dataBlock_m.currentPointer())
  { }
  
  //-----------------------------------------------------------------------------
*************** Engine<Dim,T,Brick>::Engine(T * foreignD
*** 102,108 ****
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const This_t &modelEngine)
!   : Base_t(modelEngine), data_m(modelEngine.data_m)
  { }
  
  //-----------------------------------------------------------------------------
--- 106,113 ----
  
  template <int Dim, class T>
  Engine<Dim,T,Brick>::Engine(const This_t &modelEngine)
!   : Base_t(modelEngine), dataBlock_m(modelEngine.dataBlock_m),
!     data_m(modelEngine.data_m)
  { }
  
  //-----------------------------------------------------------------------------
*************** Engine<Dim,T,Brick> & Engine<Dim,T,Brick
*** 123,130 ****
    // Copy the base and the data block
    
    Base_t::operator=(modelEngine);
    data_m = modelEngine.data_m;
!   PAssert(data_m.isAtBeginning());
    return *this;
  }
  
--- 128,136 ----
    // Copy the base and the data block
    
    Base_t::operator=(modelEngine);
+   dataBlock_m = modelEngine.dataBlock_m;
    data_m = modelEngine.data_m;
!   PAssert(dataBlock_m.isAtBeginning());
    return *this;
  }
  
*************** template <int Dim, class T> Engine<Dim,T
*** 150,159 ****
  template <int Dim, class T>
  Engine<Dim,T,Brick> &Engine<Dim,T,Brick>::makeOwnCopy()
  {
!   if (data_m.isValid() && data_m.count() > 1) 
      {
!       PAssert(data_m.isAtBeginning());
!       data_m.makeOwnCopy();
      }
  
    return *this;
--- 156,166 ----
  template <int Dim, class T>
  Engine<Dim,T,Brick> &Engine<Dim,T,Brick>::makeOwnCopy()
  {
!   if (dataBlock_m.isValid() && dataBlock_m.count() > 1) 
      {
!       PAssert(dataBlock_m.isAtBeginning());
!       dataBlock_m.makeOwnCopy();
!       data_m = dataBlock_m.currentPointer();
      }
  
    return *this;
*************** Engine<Dim,T,Brick> &Engine<Dim,T,Brick>
*** 172,178 ****
  template <int Dim, class T>
  Engine<Dim,T,BrickView>::
  Engine()
!   : Base_t(), data_m()
  { }
  
  //-----------------------------------------------------------------------------
--- 179,185 ----
  template <int Dim, class T>
  Engine<Dim,T,BrickView>::
  Engine()
!   : Base_t(), dataBlock_m(), data_m(0)
  { }
  
  //-----------------------------------------------------------------------------
*************** Engine<Dim,T,BrickView>::~Engine() { }
*** 197,203 ****
  template <int Dim, class T>
  Engine<Dim,T,BrickView>::
  Engine(const This_t &modelEngine)
!   : Base_t(modelEngine), data_m(modelEngine.data_m)
  { }
  
  // What is this for again???
--- 204,210 ----
  template <int Dim, class T>
  Engine<Dim,T,BrickView>::
  Engine(const This_t &modelEngine)
!   : Base_t(modelEngine), dataBlock_m(modelEngine.dataBlock_m), data_m(dataBlock_m.currentPointer())
  { }
  
  // What is this for again???
*************** Engine(const This_t &modelEngine)
*** 205,211 ****
  template <int Dim, class T>
  Engine<Dim,T,BrickView>::
  Engine(const This_t &modelEngine, const EngineConstructTag &)
!   : Base_t(modelEngine), data_m(modelEngine.data_m)
  { }
  
  //-----------------------------------------------------------------------------
--- 212,218 ----
  template <int Dim, class T>
  Engine<Dim,T,BrickView>::
  Engine(const This_t &modelEngine, const EngineConstructTag &)
!   : Base_t(modelEngine), dataBlock_m(modelEngine.dataBlock_m), data_m(dataBlock_m.currentPointer())
  { }
  
  //-----------------------------------------------------------------------------
*************** Engine<Dim,T,BrickView>::operator=(const
*** 222,227 ****
--- 229,235 ----
  {
    if (this == &modelEngine) return *this;
    Base_t::operator=(modelEngine);
+   dataBlock_m = modelEngine.dataBlock_m;
    data_m = modelEngine.data_m;
    return *this;
  }
*************** Engine<Dim,T,BrickView>::
*** 241,247 ****
  Engine(const Engine<Dim,T,CompressibleBrick> &model)
    : Base_t(model, false)
  {
!   data_m = DataBlockPtr<T>(model.dataBlock(),baseOffset());
  }
  
  //-----------------------------------------------------------------------------
--- 249,256 ----
  Engine(const Engine<Dim,T,CompressibleBrick> &model)
    : Base_t(model, false)
  {
!   dataBlock_m = DataBlockPtr<T>(model.dataBlock(),baseOffset());
!   data_m = dataBlock_m.currentPointer();
  }
  
  //-----------------------------------------------------------------------------
*************** Engine<Dim,T,BrickView>::
*** 257,263 ****
  Engine(const Engine<Dim,T,CompressibleBrickView> &model)
    : Base_t(model, false)
  {
!   data_m = DataBlockPtr<T>(model.dataBlock(),baseOffset());
  }
  
  // ACL:rcsinfo
--- 266,273 ----
  Engine(const Engine<Dim,T,CompressibleBrickView> &model)
    : Base_t(model, false)
  {
!   dataBlock_m = DataBlockPtr<T>(model.dataBlock(),baseOffset());
!   data_m = dataBlock_m.currentPointer();
  }
  
  // ACL:rcsinfo
Index: BrickEngine.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/Engine/BrickEngine.h,v
retrieving revision 1.130
diff -c -p -r1.130 BrickEngine.h
*** BrickEngine.h	2001/08/30 01:15:04	1.130
--- BrickEngine.h	2001/10/17 01:26:27
*************** public:
*** 251,270 ****
    // Provide access to the data object. 
  
    inline
!   Pooma::DataObject_t *dataObject() const { return data_m.dataObject(); }
  
    // Return access to our internal data block.  
    // This is ref-counted, so a copy is fine.  But you should really 
    // know what you're doing if you call this method.
    // (cbrick's value version is const - why isn't this???)
    
!   DataBlockPtr<T> dataBlock()               { return data_m; }
!   const DataBlockPtr<T> & dataBlock() const { return data_m; }
  
    // Return whether the block controlled by this engine is shared.
    // (Is this used??? CompressibleBrick didn't have one!!!)
    
!   bool isShared() const { return data_m.isValid() && data_m.count() > 1; }
  
  private:
  
--- 251,270 ----
    // Provide access to the data object. 
  
    inline
!   Pooma::DataObject_t *dataObject() const { return dataBlock_m.dataObject(); }
  
    // Return access to our internal data block.  
    // This is ref-counted, so a copy is fine.  But you should really 
    // know what you're doing if you call this method.
    // (cbrick's value version is const - why isn't this???)
    
!   DataBlockPtr<T> dataBlock()               { return dataBlock_m; }
!   const DataBlockPtr<T> & dataBlock() const { return dataBlock_m; }
  
    // Return whether the block controlled by this engine is shared.
    // (Is this used??? CompressibleBrick didn't have one!!!)
    
!   bool isShared() const { return dataBlock_m.isValid() && dataBlock_m.count() > 1; }
  
  private:
  
*************** private:
*** 277,284 ****
    // Smart-pointer to Block-controller that manages the data
    // and the Smarts DataObject. 
  
!   DataBlockPtr<T> data_m;
  
  };
  
  
--- 277,285 ----
    // Smart-pointer to Block-controller that manages the data
    // and the Smarts DataObject. 
  
!   DataBlockPtr<T> dataBlock_m;
  
+   T *data_m;
  };
  
  
*************** public:
*** 359,365 ****
    
    template <class ETag, class DT>
    Engine(const Engine<Dim,T,ETag> &e, const Domain<Dim, DT> &dom)
!   : Base_t(e, dom.unwrap()), data_m(e.dataBlock(), e.offset(dom.unwrap()))
    { 
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
--- 360,367 ----
    
    template <class ETag, class DT>
    Engine(const Engine<Dim,T,ETag> &e, const Domain<Dim, DT> &dom)
!   : Base_t(e, dom.unwrap()), dataBlock_m(e.dataBlock(), e.offset(dom.unwrap())),
!     data_m(dataBlock_m.currentPointer())
    { 
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
*************** public:
*** 369,375 ****
  
    template<int Dim2>
    Engine(const Engine<Dim2,T,Brick> &e, const SliceRange<Dim2,Dim> &dom)
!   : Base_t(e, dom), data_m(e.dataBlock(), e.offset(dom.totalDomain()))
    {    
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
--- 371,378 ----
  
    template<int Dim2>
    Engine(const Engine<Dim2,T,Brick> &e, const SliceRange<Dim2,Dim> &dom)
!     : Base_t(e, dom), dataBlock_m(e.dataBlock(), e.offset(dom.totalDomain())),
!     data_m(dataBlock_m.currentPointer())
    {    
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
*************** public:
*** 377,392 ****
    
    template<int Dim2>
    Engine(const Engine<Dim2,T,Brick> &e, const SliceInterval<Dim2,Dim> &dom)
!   : Base_t(e, dom), data_m(e.dataBlock(), e.offset(dom.totalDomain()))
    {    
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
    }
    
  #if 0
    template <int ODim, class ETag>
    Engine(const Engine<ODim,T,ETag> &e, const SliceRange<ODim,Dim> &dom)
!   : Base_t(e, dom), data_m(e.dataBlock(), e.offset(dom.totalDomain()))
    {    
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
--- 380,398 ----
    
    template<int Dim2>
    Engine(const Engine<Dim2,T,Brick> &e, const SliceInterval<Dim2,Dim> &dom)
!     : Base_t(e, dom), dataBlock_m(e.dataBlock(), e.offset(dom.totalDomain())),
!     data_m(dataBlock_m.currentPointer())
    {    
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
    }
    
+   // what is this #if???
  #if 0
    template <int ODim, class ETag>
    Engine(const Engine<ODim,T,ETag> &e, const SliceRange<ODim,Dim> &dom)
!     : Base_t(e, dom), dataBlock_m(e.dataBlock(), e.offset(dom.totalDomain())),
!     data_m(dataBlock_m.currentPointer())
    {    
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
*************** public:
*** 395,401 ****
  
    template <int ODim, class ETag>
    Engine(const Engine<ODim,T,ETag> &e, const SliceInterval<ODim,Dim> &dom)
!   : Base_t(e, dom), data_m(e.dataBlock(), e.offset(dom.totalDomain()))
    {    
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
--- 401,408 ----
  
    template <int ODim, class ETag>
    Engine(const Engine<ODim,T,ETag> &e, const SliceInterval<ODim,Dim> &dom)
!     : Base_t(e, dom), dataBlock_m(e.dataBlock(), e.offset(dom.totalDomain())),
!     data_m(dataBlock_m.currentPointer())
    {    
      // The engine's data pointer should be at the beginning.
      PAssert(e.dataBlock().isAtBeginning());
*************** public:
*** 408,420 ****
  
    template <class DT>
    Engine(const This_t &e, const Domain<Dim, DT> &d)
!   : Base_t(e, d.unwrap()), data_m(e.dataBlock(), e.offset(d.unwrap()))
    { }
  
    // Build a BrickView from another BrickView and an INode.
  
    Engine(const This_t &e, const INode<Dim> &inode)
!   : Base_t(e,inode.domain()), data_m(e.dataBlock(), e.offset(inode.domain()))
    { }
    
    // Build a BrickView from another BrickView and a SliceRange<ODim,Dim>.
--- 415,429 ----
  
    template <class DT>
    Engine(const This_t &e, const Domain<Dim, DT> &d)
!     : Base_t(e, d.unwrap()), dataBlock_m(e.dataBlock(), e.offset(d.unwrap())),
!     data_m(dataBlock_m.currentPointer())
    { }
  
    // Build a BrickView from another BrickView and an INode.
  
    Engine(const This_t &e, const INode<Dim> &inode)
!     : Base_t(e,inode.domain()), dataBlock_m(e.dataBlock(), e.offset(inode.domain())),
!     data_m(dataBlock_m.currentPointer())
    { }
    
    // Build a BrickView from another BrickView and a SliceRange<ODim,Dim>.
*************** public:
*** 422,428 ****
    template <int ODim>
    Engine(const Engine<ODim,T,BrickView> &e, 
           const SliceRange<ODim,Dim> &dom)
!   : Base_t(e, dom), data_m(e.dataBlock(), e.offset(dom.totalDomain()))
    { }
  
    // Build a BrickView from another BrickView and a SliceRange<ODim,Dim>.
--- 431,438 ----
    template <int ODim>
    Engine(const Engine<ODim,T,BrickView> &e, 
           const SliceRange<ODim,Dim> &dom)
!     : Base_t(e, dom), dataBlock_m(e.dataBlock(), e.offset(dom.totalDomain())),
!     data_m(dataBlock_m.currentPointer())
    { }
  
    // Build a BrickView from another BrickView and a SliceRange<ODim,Dim>.
*************** public:
*** 430,436 ****
    template <int ODim>
    Engine(const Engine<ODim,T,BrickView> &e, 
      const SliceInterval<ODim,Dim> &dom)
!   : Base_t(e, dom), data_m(e.dataBlock(), e.offset(dom.totalDomain()))
    { }
  
    // Build a BrickView-Engine from a compressible brick.
--- 440,447 ----
    template <int ODim>
    Engine(const Engine<ODim,T,BrickView> &e, 
      const SliceInterval<ODim,Dim> &dom)
!     : Base_t(e, dom), dataBlock_m(e.dataBlock(), e.offset(dom.totalDomain())),
!     data_m(dataBlock_m.currentPointer())
    { }
  
    // Build a BrickView-Engine from a compressible brick.
*************** public:
*** 481,494 ****
  
    // Return the DataBlockPtr. See comments in BrickEngine above.
    
!   DataBlockPtr<T> dataBlock()              { return data_m; }
!   const DataBlockPtr<T> &dataBlock() const { return data_m; }
  
    // Provide access to the data object.  This should really be
    // a reference instead of a pointer.
    
    inline 
!   Pooma::DataObject_t *dataObject() const { return data_m.dataObject(); }
  
  private:
  
--- 492,505 ----
  
    // Return the DataBlockPtr. See comments in BrickEngine above.
    
!   DataBlockPtr<T> dataBlock()              { return dataBlock_m; }
!   const DataBlockPtr<T> &dataBlock() const { return dataBlock_m; }
  
    // Provide access to the data object.  This should really be
    // a reference instead of a pointer.
    
    inline 
!   Pooma::DataObject_t *dataObject() const { return dataBlock_m.dataObject(); }
  
  private:
  
*************** private:
*** 500,507 ****
  
    // We just have a pointer to our data block.
    
!   DataBlockPtr<T> data_m;
  
  };
  
  //-----------------------------------------------------------------------------
--- 511,519 ----
  
    // We just have a pointer to our data block.
    
!   DataBlockPtr<T> dataBlock_m;
  
+   T *data_m;
  };
  
  //-----------------------------------------------------------------------------
