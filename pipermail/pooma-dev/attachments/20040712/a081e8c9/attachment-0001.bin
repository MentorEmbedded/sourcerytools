// -*- C++ -*-
// ACL:license
// ----------------------------------------------------------------------
// This software and ancillary information (herein called "SOFTWARE")
// called POOMA (Parallel Object-Oriented Methods and Applications) is
// made available under the terms described here.  The SOFTWARE has been
// approved for release with associated LA-CC Number LA-CC-98-65.
// 
// Unless otherwise indicated, this SOFTWARE has been authored by an
// employee or employees of the University of California, operator of the
// Los Alamos National Laboratory under Contract No. W-7405-ENG-36 with
// the U.S. Department of Energy.  The U.S. Government has rights to use,
// reproduce, and distribute this SOFTWARE. The public may copy, distribute,
// prepare derivative works and publicly display this SOFTWARE without 
// charge, provided that this Notice and any statement of authorship are 
// reproduced on all copies.  Neither the Government nor the University 
// makes any warranty, express or implied, or assumes any liability or 
// responsibility for the use of this SOFTWARE.
// 
// If SOFTWARE is modified to produce derivative works, such modified
// SOFTWARE should be clearly marked, so as not to confuse it with the
// version available from LANL.
// 
// For more information about POOMA, send e-mail to pooma@acl.lanl.gov,
// or visit the POOMA web page at http://www.acl.lanl.gov/pooma/.
// ----------------------------------------------------------------------
// ACL:license

//-----------------------------------------------------------------------------
// Classes:
//   Div
// Global Function Templates:
//   div
//-----------------------------------------------------------------------------

#ifndef POOMA_FIELD_DIFFOPS_GRAD_H
#define POOMA_FIELD_DIFFOPS_GRAD_H

//////////////////////////////////////////////////////////////////////

/** @file
 * @ingroup DiffOps
 * @brief
 * Divergence operator (functor) on discrete Fields.
 *
 * Wrapper function around FieldStencil<Div>::operator() . The Div
 * functors actually used are partial specializations of the generic
 * Div that come from Div.UR for example.
 *
 * Div is a functor class serving as the "Functor" template parameter for
 * FieldStencil<Functor,Expression>, which implements a discrete 
 * divergence operator.
 * Partial specializations implement various combinations of input and output
 * centerings, for specific coordinate systems, and different finite-difference
 * orders, are defined in other headers like Div.[URM,RM].h .
 * 
 * div(): Divergence. Takes a ConstField of Vectors (or Tensors) on a 
 * discrete geometry with one centering and returns a ConstField of
 * scalars (or Vectors) on a geometry that's the same except
 * (possibly) for the centering. All the work happens in the embedded
 * Div functor partial specialization, in its operator() methods.
 */

//-----------------------------------------------------------------------------
// Typedefs:
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Includes:
//-----------------------------------------------------------------------------

#include "Field/Field.h"
#include "Field/FieldCentering.h"
#include "Field/DiffOps/FieldStencil.h"

//-----------------------------------------------------------------------------
// Forward Declarations:
//-----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// General Grad template
// ----------------------------------------------------------------------------
/*
template<class T2, class Mesh>
class GradCellToVert;
*/
template<class T2, class Mesh>
class GradVertToCell;
/*
template<class T2, class Mesh, CenteringType OC>
class GradSameToSame;
*/

// ----------------------------------------------------------------------------
// 
// Global Function Templates:
//
// ----------------------------------------------------------------------------

// Gradergence.
/*
template<class Mesh, class T, class EngineTag>
typename
FieldStencilSimple<GradSameToSame<T, Mesh, CellType>,
  Field<Mesh, T, EngineTag> >::Type_t
gradCellToCell(const Field<Mesh, T, EngineTag> &f)
{
  typedef GradSameToSame<T, Mesh, CellType> Grad_t;
  typedef FieldStencilSimple<Grad_t, Field<Mesh, T, EngineTag> > Ret_t;
  return Ret_t::make(Grad_t(f.fieldEngine()), f);
}
*/
template<class Mesh, class T, class EngineTag>
typename
FieldStencilSimple<GradVertToCell<T, Mesh>,
  Field<Mesh, T, EngineTag> >::Type_t
gradVertToCell(const Field<Mesh, T, EngineTag> &f)
{
  typedef GradVertToCell<T, Mesh> Grad_t;
  typedef FieldStencilSimple<Grad_t, Field<Mesh, T, EngineTag> > Ret_t;
  return Ret_t::make(Grad_t(f.fieldEngine()), f);
}
/*
template<class Mesh, class T, class EngineTag>
typename
FieldStencilSimple<GradCellToVert<T, Mesh>,
  Field<Mesh, T, EngineTag> >::Type_t
gradCellToVert(const Field<Mesh, T, EngineTag> &f)
{
  typedef GradCellToVert<T, Mesh> Grad_t;
  typedef FieldStencilSimple<Grad_t, Field<Mesh, T, EngineTag> > Ret_t;
  return Ret_t::make(Grad_t(f.fieldEngine()), f);
}
*/
/*
template<class Mesh, class T, class EngineTag>
typename
FieldStencilSimple<GradSameToSame<T, Mesh, VertexType>,
  Field<Mesh, T, EngineTag> >::Type_t
gradVertToVert(const Field<Mesh, T, EngineTag> &f)
{
  typedef GradSameToSame<T, Mesh, VertexType> Grad_t;
  typedef FieldStencilSimple<Grad_t, Field<Mesh, T, EngineTag> > Ret_t;
  return Ret_t::make(Grad_t(f.fieldEngine()), f);
}
*/
#endif     // POOMA_FIELD_DIFFOPS_DIV_H

// ACL:rcsinfo
// ----------------------------------------------------------------------
// $RCSfile: Grad.h,v $   $Author: pooma $
// $Revision: 1.10 $   $Date: 2003/10/25 13:26:56 $
// ----------------------------------------------------------------------
// ACL:rcsinfo
