Index: FieldCentering.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/Attic/FieldCentering.h,v
retrieving revision 1.1.2.9
diff -c -p -r1.1.2.9 FieldCentering.h
*** FieldCentering.h	2001/08/14 20:24:17	1.1.2.9
--- FieldCentering.h	2001/08/21 17:03:35
*************** const Centering<3> canonicalCentering<3>
*** 550,555 ****
--- 550,599 ----
       const enum ContinuityType discontinuous,
       const int dimension);
  
+ //-----------------------------------------------------------------------------
+ //
+ // Functions for translating domains based on centerings.
+ //
+ // cellDomainToCenteringDomain(cellDom, centering, i)
+ //   -computes the domain of the i'th subfield for a field that has the given
+ //   cell domain.
+ //
+ // centeringDomainToCellDomain(cDom, centering, i)
+ //   -the inverse function.
+ //
+ //-----------------------------------------------------------------------------
+ 
+ template<int Dim>
+ inline Interval<Dim>
+ cellDomainToCenteringDomain(const Interval<Dim> &cellDom,
+                             const Centering<Dim> &centering, int i)
+ {
+   if (centering.discontinuous())
+   {
+     return cellDom;
+   }
+   else
+   {
+     return shrinkRight(growRight(cellDom, 1), centering.orientation(i));
+   }
+ }
+                                           
+ template<int Dim>
+ inline Interval<Dim>
+ centeringDomainToCellDomain(const Interval<Dim> &cDom,
+                             const Centering<Dim> &centering, int i)
+ {
+   if (centering.discontinuous())
+   {
+     return cDom;
+   }
+   else
+   {
+     return shrinkRight(growRight(cDom, centering.orientation(i)), 1);
+   }
+ }
+ 
+ 
  #endif // POOMA_NEWFIELD_CENTERING_H
  
  // ACL:rcsinfo
Index: DiffOps/FieldOffsetReduction.h
===================================================================
RCS file: FieldOffsetReduction.h
diff -N FieldOffsetReduction.h
*** /dev/null	Tue May  5 14:32:27 1998
--- FieldOffsetReduction.h	Tue Aug 21 11:03:35 2001
***************
*** 0 ****
--- 1,234 ----
+ // -*- C++ -*-
+ // ACL:license
+ // ----------------------------------------------------------------------
+ // This software and ancillary information (herein called "SOFTWARE")
+ // called POOMA (Parallel Object-Oriented Methods and Applications) is
+ // made available under the terms described here.  The SOFTWARE has been
+ // approved for release with associated LA-CC Number LA-CC-98-65.
+ // 
+ // Unless otherwise indicated, this SOFTWARE has been authored by an
+ // employee or employees of the University of California, operator of the
+ // Los Alamos National Laboratory under Contract No. W-7405-ENG-36 with
+ // the U.S. Department of Energy.  The U.S. Government has rights to use,
+ // reproduce, and distribute this SOFTWARE. The public may copy, distribute,
+ // prepare derivative works and publicly display this SOFTWARE without 
+ // charge, provided that this Notice and any statement of authorship are 
+ // reproduced on all copies.  Neither the Government nor the University 
+ // makes any warranty, express or implied, or assumes any liability or 
+ // responsibility for the use of this SOFTWARE.
+ // 
+ // If SOFTWARE is modified to produce derivative works, such modified
+ // SOFTWARE should be clearly marked, so as not to confuse it with the
+ // version available from LANL.
+ // 
+ // For more information about POOMA, send e-mail to pooma@acl.lanl.gov,
+ // or visit the POOMA web page at http://www.acl.lanl.gov/pooma/.
+ // ----------------------------------------------------------------------
+ // ACL:license
+ 
+ //-----------------------------------------------------------------------------
+ // Classes:
+ // 
+ // FieldOffsetReduction
+ //-----------------------------------------------------------------------------
+ 
+ #ifndef POOMA_NEWFIELD_DIFFOPS_FIELDOFFSETREDUCTION_H
+ #define POOMA_NEWFIELD_DIFFOPS_FIELDOFFSETREDUCTION_H
+ 
+ //-----------------------------------------------------------------------------
+ // Overview: 
+ //
+ // Support for reductions that take the result of a nearest neighbor
+ // calculation.  For example:
+ //
+ // sum(f, nearestNeighbor(f.centering(), centering2), centering2);
+ //
+ // results in a field with centering2, where values from f at the closest
+ // centering points are summed onto each centering point in the resulting
+ // field.
+ //
+ // Note that this function isn't really that general, because the nearest
+ // neighbor computation must use the input fields centering for the input
+ // centering and same output centering as the centering handed to sum.
+ // 
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // Typedefs:
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // Includes:
+ //-----------------------------------------------------------------------------
+ 
+ #include "NewField/DiffOps/FieldStencil.h"
+ 
+ //-----------------------------------------------------------------------------
+ // Forward Declarations:
+ //-----------------------------------------------------------------------------
+ 
+ // ----------------------------------------------------------------------------
+ //
+ // FieldOffsetReduction<T, Dim, Accumulate>
+ //
+ // This class is a functor object used to create a field stencil engine that
+ // accumulates values from a FieldOffsetList.  The functor is constructed with
+ // a neighbor list, output centering, input centering and a binary function.
+ //
+ // Applying the functor to a field and location will accumulate the neighbors
+ // of the field at the location using the neighbor list.
+ //
+ // ----------------------------------------------------------------------------
+ 
+ template<class T, int Dim, class Accumulate>
+ class FieldOffsetReduction
+ {
+ public:
+ 
+   //
+   // Interface required to create a field stencil object:
+   //
+ 
+   typedef T   OutputElement_t;
+ 
+   const Centering<Dim> &outputCentering() const
+   {
+     return outputputCentering_m;
+   }
+ 
+   const Centering<Dim> &inputCentering() const
+   {
+     return inputCentering_m;
+   }
+ 
+   int lowerExtent(int d) const { return lower_m[d]; }
+   int upperExtent(int d) const { return upper_m[d]; }
+       
+   // 
+   // Constructors.
+   // 
+ 
+   FieldOffsetReduction()
+   {
+   }
+ 
+   FieldOffsetReduction(const FieldOffsetList<Dim> &neighbors,
+                        const Centering<Dim> &outputCentering,
+                        const Centering<Dim> &inputCentering,
+                        Accumulate accumulate = Accumulate())
+     : neighbors_m(neighbors),
+       outputCentering_m(outputCentering),
+       inputCentering_m(inputCentering),
+       accumulate_m(accumulate)
+   {
+     PInsist(neighbors.size() > 0, "no support for empty accumulation");
+     PAssert(outputCentering.size() == 1);
+ 
+     int d, i;
+ 
+     for (d = 0; d < Dim; ++d)
+     {
+       upper_m[d] = 0;
+       lower_m[d] = 0;
+     }
+     for (i = 0; i < neighbors_m.size(); ++i)
+     {
+       for (d = 0; d < Dim; ++d)
+       {
+         if (-neighbors_m[i].cellOffset()[d].first() > lower_m[d])
+         {
+           lower_m[d] = -neighbors_m[i].cellOffset()[d].first();
+         }
+         if (neighbors_m[i].cellOffset()[d].first() > upper_m[d])
+         {
+           upper_m[d] = neighbors_m[i].cellOffset()[d].first();
+         }
+       }
+     }
+   }
+ 
+   //
+   // Stencil operations.
+   //
+ 
+   template<class F>
+   inline OutputElement_t
+   operator()(const F &f, int i1) const
+   {
+     T ret = f(neighbors_m[0], Loc<1>(i1));
+ 
+     for (int i = 1; i < neighbors_m.size(); ++i)
+     {
+       ret = accumulate_m(ret, f(neighbors_m[i], Loc<1>(i1)));
+     }
+     return ret;
+   }
+ 
+   template<class F>
+   inline OutputElement_t
+   operator()(const F &f, int i1, int i2) const
+   {
+     T ret = f(neighbors_m[0], Loc<2>(i1, i2));
+ 
+     for (int i = 1; i < neighbors_m.size(); ++i)
+     {
+       ret = accumulate_m(ret, f(neighbors_m[i], Loc<2>(i1, i2)));
+     }
+     return ret;
+   }
+ 
+   template<class F>
+   inline OutputElement_t
+   operator()(const F &f, int i1, int i2, int i3) const
+   {
+     T ret = f(neighbors_m[0], Loc<3>(i1, i2, i3));
+ 
+     for (int i = 1; i < neighbors_m.size(); ++i)
+     {
+       ret = accumulate_m(ret, f(neighbors_m[i], Loc<3>(i1, i2, i3)));
+     }
+     return ret;
+   }
+ 
+ private:
+ 
+   FieldOffsetList<Dim> neighbors_m;
+   Centering<Dim> outputCentering_m;
+   Centering<Dim> inputCentering_m;
+   Accumulate accumulate_m;
+   int lower_m[Dim];
+   int upper_m[Dim];
+ };
+ 
+ 
+ // ----------------------------------------------------------------------------
+ // Overloaded functions to perform reductions.
+ // ----------------------------------------------------------------------------
+ 
+ // ----------------------------------------------------------------------------
+ // Sum up the results from a nearest neighbor computation
+ // ----------------------------------------------------------------------------
+ 
+ template<class GeometryTag, class T, class EngineTag, int Dim>
+ typename FieldStencilSimple<FieldOffsetReduction<T, Dim, OpAdd>,
+                             Field<GeometryTag, T, EngineTag> >::Type_t
+ sum(const Field<GeometryTag, T, EngineTag> &f,
+     const std::vector<FieldOffsetList<Dim> > &nn,
+     const Centering<Dim> &outputCentering)
+ {
+   typedef FieldOffsetReduction<T, Dim, OpAdd> Functor_t;
+   typedef Field<GeometryTag, T, EngineTag> Field_t;
+ 
+   return FieldStencilSimple<Functor_t, Field_t>::make(f, nn, outputCentering,
+                                                       OpAdd());
+ }
+ 
+ 
+ #endif     // POOMA_NEWFIELD_DIFFOPS_FIELDOFFSETREDUCTION_H
+ 
+ // ACL:rcsinfo
+ // ----------------------------------------------------------------------
+ // $RCSfile: Div.UR.h,v $   $Author: oldham $
+ // $Revision: 1.5.2.2 $   $Date: 2001/08/03 19:02:09 $
+ // ----------------------------------------------------------------------
+ // ACL:rcsinfo
Index: DiffOps/FieldStencil.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/DiffOps/FieldStencil.h,v
retrieving revision 1.5.2.3
diff -c -p -r1.5.2.3 FieldStencil.h
*** DiffOps/FieldStencil.h	2001/08/13 21:14:30	1.5.2.3
--- DiffOps/FieldStencil.h	2001/08/21 17:03:35
***************
*** 54,59 ****
--- 54,60 ----
  #include "Layout/INode.h"
  #include "Layout/Node.h"
  #include "PETE/ErrorType.h"
+ #include "NewField/FieldOffset.h"
  
  //-----------------------------------------------------------------------------
  // Forward declarations
*************** struct FieldStencilSimple
*** 423,441 ****
    {
      Type_t h(f, stencil.outputCentering());
  
!     Loc<outputDim> inputOffsets = f.fieldEngine().offsets();
!     PAssert(inputOffsets == stencil.inputOffsets());
  
-     //    Loc<outputDim> outputCentering = h.fieldEngine().offsets();
      GuardLayers<outputDim> og(f.fieldEngine().guardLayers());
      for (int d = 0; d < outputDim; d++)
      {
        og.lower(d) -= stencil.lowerExtent(d);
        og.upper(d) -= stencil.upperExtent(d);
  
!       // It's not clear what to do for conversion from one centering
!       // to another.  The guard layers are based on the vertex domain
!       // anyways.
        //      if (inputCentering[d].first() == 0 &&
        //	  outputCentering[d].first() == 1)
        //	og.upper(d)++;
--- 424,442 ----
    {
      Type_t h(f, stencil.outputCentering());
  
!     // FIXME: replace the following assertion with a check on
!     // stencil.inputCentering()
!     //    Loc<outputDim> inputOffsets = f.fieldEngine().offsets();
!     //    PAssert(inputOffsets == stencil.inputOffsets());
  
      GuardLayers<outputDim> og(f.fieldEngine().guardLayers());
      for (int d = 0; d < outputDim; d++)
      {
        og.lower(d) -= stencil.lowerExtent(d);
        og.upper(d) -= stencil.upperExtent(d);
  
!       // FIXME: Need to think about adjusting the guards.  I don't
!       // believe the old version:
        //      if (inputCentering[d].first() == 0 &&
        //	  outputCentering[d].first() == 1)
        //	og.upper(d)++;
*************** struct FieldStencilSimple
*** 447,452 ****
--- 448,494 ----
  
      h.fieldEngine().guardLayers() = og;
      h.fieldEngine().engine() = SEngine_t(stencil, f, h.physicalDomain());
+ 
+     return h;
+   }
+ 
+   template<class Accumulate>
+   static inline
+   Type_t make(const Expression &f,
+               const std::vector<FieldOffsetList<outputDim> > &nn,
+               const Centering<outputDim> &outputCentering,
+               Accumulate accumulate = Accumulate())
+   {
+     PAssert(nn.size() == outputCentering.size());
+ 
+     Type_t h(f, outputCentering);
+ 
+     // FIXME: The guard layers are wrong; we need to find the maximum
+     // offsets from all the functors below.  (Should the individual
+     // sub-fields have their own guard layers???)
+ 
+     h.fieldEngine().guardLayers() = f.fieldEngine().guardLayers();
+ 
+     if (outputCentering.size() == 1)
+     {
+       h.fieldEngine().engine()
+         = SEngine_t(Functor(nn[0], outputCentering, f.centering(),
+                             accumulate),
+                     f, h.physicalDomain());
+     }
+     else
+     {
+       int oc;
+ 
+       for (oc = 0; oc < nn.size(); ++oc)
+       {
+         h[oc].fieldEngine().guardLayers() = f.fieldEngine().guardLayers();
+         h[oc].fieldEngine().engine()
+           = SEngine_t(Functor(nn[oc], outputCentering[oc], f.centering(),
+                               accumulate),
+                       f, h[oc].physicalDomain());
+       }
+     }
  
      return h;
    }
Index: FieldEngine/FieldEngineBase.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/FieldEngine/FieldEngineBase.h,v
retrieving revision 1.13.2.6
diff -c -p -r1.13.2.6 FieldEngineBase.h
*** FieldEngine/FieldEngineBase.h	2001/08/21 15:25:35	1.13.2.6
--- FieldEngine/FieldEngineBase.h	2001/08/21 17:03:36
*************** public:
*** 317,363 ****
    void initialize(This_t &s, 
  		  const FieldEngineBase<Dim2, T2, EngineTag2> &model,
  		  const Domain_t &d)
      {
!       int n = model.numSubFields();
!       s.centering_m = model.centering();
!       num_materials_m = model.numMaterials();
!       if (n == 0)
!         {
!           s.physicalCellDomain_m = shrinkRight(d - d.firsts(),
! 					       model.offsets());
!           s.initialize(model.offsets(), model.engine(), d, model.relations());
!         }
!       else
!         {
!           s.physicalCellDomain_m = d - d.firsts();
!           s.addSubFields(n);  
!           for (int i = 0; i < n; i++)
!             initialize(s.subFields_m[i], model.subField(i),
! 		       model.subField(i).translateDomain(d));
!         }
      }
  
    template<int Dim2, class T2, class EngineTag2>
    void initialize(This_t &s, 
!     const FieldEngineBase<Dim2, T2, EngineTag2> &model, const INode<Dim> &i)
    {
!       int n = model.numSubFields();
!       s.centering_m = model.centering();
!       num_materials_m = model.numMaterials();
!       if (n == 0)
!         {
! 	  s.physicalCellDomain_m = 
! 	    shrinkRight(i.domain() - i.domain().firsts(), model.offsets());
! 	  s.initialize(model.offsets(), model.engine(), i, model.relations());
!         }
!       else
!         {
! 	  s.physicalCellDomain_m = i.domain() - i.domain().firsts();
! 	  s.addSubFields(n);
! 	  for (int j = 0; j < n; j++)
! 	    initialize(s.subFields_m[j], model.subField(j),
! 		       model.subField(j).translateDomain(i));
!         }
    }
  
    template<int Dim2, class T2, class EngineTag2, class Tag>
--- 317,377 ----
    void initialize(This_t &s, 
  		  const FieldEngineBase<Dim2, T2, EngineTag2> &model,
  		  const Domain_t &d)
+   {
+     int n = model.numSubFields();
+     s.centering_m = model.centering();
+     s.num_materials_m = model.numMaterials();
+     s.physicalCellDomain_m = d - d.firsts();
+     if (n == 0)
      {
!       s.physicalCellDomain_m =
!         centeringDomainToCellDomain(s.physicalCellDomain_m, s.centering_m, 0);
!       s.initialize(model.offsets(), model.engine(), d, model.relations());
!     }
!     else
!     {
!       s.addSubFields(n);  
!       for (int i = 0; i < n; i++)
!       {
!         if (s.numMaterials() > 0)
!           initialize(s.subFields_m[i], model.subField(i), d);
!         else
!           initialize(s.subFields_m[i], model.subField(i),
!                      cellDomainToCenteringDomain(d, s.centering_m, i));
!       }
      }
+   }
  
    template<int Dim2, class T2, class EngineTag2>
    void initialize(This_t &s, 
!                   const FieldEngineBase<Dim2, T2, EngineTag2> &model,
!                   const INode<Dim> &i)
    {
!     int n = model.numSubFields();
!     s.centering_m = model.centering();
!     s.num_materials_m = model.numMaterials();
!     s.physicalCellDomain_m = i.domain() - i.domain().firsts();
!     if (n == 0)
!     {
!       s.physicalCellDomain_m = 
!         centeringDomainToCellDomain(s.physicalCellDomain_m, s.centering_m, 0);
!       s.initialize(model.offsets(), model.engine(), i, model.relations());
!     }
!     else
!     {
!       s.physicalCellDomain_m = i.domain() - i.domain().firsts();
!       s.addSubFields(n);
!       for (int j = 0; j < n; j++)
!       {
!         if (s.numMaterials() > 0)
!           initialize(s.subFields_m[j], model.subField(j), i);
!         else
!           initialize(s.subFields_m[j], model.subField(j),
!                      INode<Dim>(i, cellDomainToCenteringDomain(i.domain(),
!                                                                s.centering_m,
!                                                                j)));
!       }
!     }
    }
  
    template<int Dim2, class T2, class EngineTag2, class Tag>
*************** public:
*** 526,562 ****
    // Domain accessor functions. 
          
    inline const Domain_t physicalCellDomain() const
!     {
!       return physicalCellDomain_m;
!     }
          
    inline Domain_t totalCellDomain() const
!     {
!       return grow(physicalCellDomain_m, guards_m);
!     }
! 
!   Domain_t physicalDomain(int iSubField) const
!     {
!       return subFields_m[iSubField].
!         translateDomain(physicalCellDomain_m);
!     }
! 
!   Domain_t totalDomain(int iSubField) const
!     {
!       return subFields_m[iSubField].
!         translateDomain(totalCellDomain());
!     }
  
    Domain_t physicalDomain() const
!     {
!       return translateDomain(physicalCellDomain_m);
!     }
  
    Domain_t totalDomain() const
!     {
!       return translateDomain(totalCellDomain());
!     }
!   
    //---------------------------------------------------------------------------
    // Centering accessors.
  
--- 540,580 ----
    // Domain accessor functions. 
          
    inline const Domain_t physicalCellDomain() const
!   {
!     return physicalCellDomain_m;
!   }
          
    inline Domain_t totalCellDomain() const
!   {
!     return grow(physicalCellDomain_m, guards_m);
!   }
  
    Domain_t physicalDomain() const
!   {
!     if (centeringSize() == 1)
!       return cellDomainToCenteringDomain(physicalCellDomain_m, centering_m, 0);
!     else
!       return physicalCellDomain_m;
!   }
  
+   Domain_t physicalDomain(int i) const
+   {
+     return cellDomainToCenteringDomain(physicalCellDomain_m, centering_m, i);
+   }
+ 
    Domain_t totalDomain() const
!   {
!     if (centeringSize() == 1)
!       return cellDomainToCenteringDomain(totalCellDomain(), centering_m, 0);
!     else
!       return totalCellDomain();
!   }
! 
!   Domain_t totalDomain(int i) const
!   {
!     return cellDomainToCenteringDomain(totalCellDomain(), centering_m, i);
!   }
! 
    //---------------------------------------------------------------------------
    // Centering accessors.
  
*************** public:
*** 594,615 ****
  
    //---------------------------------------------------------------------------
    // Domain translation function. 
-   
-   inline Domain_t
-   translateDomain(const Domain_t &d) const
-     {
-       if (subFields_m.size() == 0)
-         return growRight(d, offsets());
-       else
-         return d;
-     }
    
!   inline INode<Dim>
!   translateDomain(const INode<Dim> &inode) const
!   {
!     return INode<Dim>(inode, translateDomain(inode.domain()));
!   }
!   
    inline Domain_t
    translateToVertexDomain(const Domain_t &d) const
      {
--- 612,621 ----
  
    //---------------------------------------------------------------------------
    // Domain translation function. 
    
!   // FIXME: This function should go away.  Currently it's only used by
!   // the lagrangian field engine.
! 
    inline Domain_t
    translateToVertexDomain(const Domain_t &d) const
      {
Index: tests/OffsetReduction.cpp
===================================================================
RCS file: OffsetReduction.cpp
diff -N OffsetReduction.cpp
*** /dev/null	Tue May  5 14:32:27 1998
--- OffsetReduction.cpp	Tue Aug 21 11:03:36 2001
***************
*** 0 ****
--- 1,129 ----
+ // -*- C++ -*-
+ // ACL:license
+ // ----------------------------------------------------------------------
+ // This software and ancillary information (herein called "SOFTWARE")
+ // called POOMA (Parallel Object-Oriented Methods and Applications) is
+ // made available under the terms described here.  The SOFTWARE has been
+ // approved for release with associated LA-CC Number LA-CC-98-65.
+ // 
+ // Unless otherwise indicated, this SOFTWARE has been authored by an
+ // employee or employees of the University of California, operator of the
+ // Los Alamos National Laboratory under Contract No. W-7405-ENG-36 with
+ // the U.S. Department of Energy.  The U.S. Government has rights to use,
+ // reproduce, and distribute this SOFTWARE. The public may copy, distribute,
+ // prepare derivative works and publicly display this SOFTWARE without 
+ // charge, provided that this Notice and any statement of authorship are 
+ // reproduced on all copies.  Neither the Government nor the University 
+ // makes any warranty, express or implied, or assumes any liability or 
+ // responsibility for the use of this SOFTWARE.
+ // 
+ // If SOFTWARE is modified to produce derivative works, such modified
+ // SOFTWARE should be clearly marked, so as not to confuse it with the
+ // version available from LANL.
+ // 
+ // For more information about POOMA, send e-mail to pooma@acl.lanl.gov,
+ // or visit the POOMA web page at http://www.acl.lanl.gov/pooma/.
+ // ----------------------------------------------------------------------
+ // ACL:license
+ 
+ //-----------------------------------------------------------------------------
+ // An example computing the gradient using field-offsets and the neighbor
+ // function.
+ //-----------------------------------------------------------------------------
+ 
+ //////////////////////////////////////////////////////////////////////
+ 
+ //-----------------------------------------------------------------------------
+ // Overview: 
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // Includes:
+ //-----------------------------------------------------------------------------
+ 
+ #include "Pooma/Pooma.h"
+ #include "Utilities/Tester.h"
+ #include "Pooma/NewFields.h"
+ 
+ #include "NewField/DiffOps/FieldOffsetReduction.h"
+ 
+ #include <iostream>
+ #include <cmath>
+ 
+ #if POOMA_CHEETAH
+   typedef DistributedTag LayoutTag_t;
+   typedef Remote<Brick> BrickTag_t;
+ #else
+   typedef ReplicatedTag LayoutTag_t;
+   typedef Brick BrickTag_t;
+ #endif
+ 
+ const int dim = 2;
+ 
+ int main(int argc, char *argv[])
+ {
+   Pooma::initialize(argc, argv);
+   Pooma::Tester tester(argc, argv);
+ 
+   Interval<dim> physicalVertexDomain;
+ 
+   for(int i = 0; i < dim; ++i)
+     physicalVertexDomain[i] = Interval<1>(10);
+   
+   Loc<dim> blocks(2);
+ 
+   UniformGridPartition<dim> partition(blocks, GuardLayers<dim>(1));   
+   UniformGridLayout<dim> layout(physicalVertexDomain, partition,
+                                 LayoutTag_t());
+   
+   Centering<dim> cell = canonicalCentering<dim>(CellType, Continuous, AllDim);
+   Centering<dim> vertex = canonicalCentering<dim>(VertexType, Continuous, AllDim);
+   Centering<dim> discVertex = canonicalCentering<dim>(VertexType, Discontinuous, AllDim);
+ 
+   typedef UniformRectilinear<dim> Geometry_t;
+ 
+   typedef 
+     Field<Geometry_t, double, MultiPatch<UniformTag, BrickTag_t> >
+     Field_t;
+ 
+   typedef 
+     Field<Geometry_t, Vector<dim>, MultiPatch<UniformTag, BrickTag_t> >
+     VField_t;
+ 
+   Vector<dim> origin(0.0);
+   Vector<dim> spacings(1.0);
+ 
+   Field_t cfield(cell, layout, origin, spacings);
+   Field_t r1(vertex, layout, origin, spacings);
+   Field_t r2(discVertex, layout, origin, spacings);
+ 
+   cfield.all() = iota(cfield.all().domain()).comp(0);
+   for (int i = 1; i < dim; ++i)
+   {
+     cfield.all() *= iota(cfield.all().domain()).comp(i);
+   }
+ 
+   r1 = sum(cfield, nearestNeighbors(cfield.centering(), r1.centering()), r1.centering());
+   r2 = sum(cfield, nearestNeighbors(cfield.centering(), r2.centering()), r2.centering());
+ 
+   tester.out() << "input field" << std::endl
+                << cfield.all() << std::endl;
+ 
+   tester.out() << "r1" << std::endl
+                << r1.all() << std::endl;
+ 
+   tester.out() << "r2" << std::endl
+                << r2.all() << std::endl;
+ 
+   int ret = tester.results("OffsetReduction");
+   Pooma::finalize();
+   return ret;
+ }
+ 
+ 
+ // ACL:rcsinfo
+ // ----------------------------------------------------------------------
+ // $RCSfile: Gradient.cpp,v $   $Author: sasmith $
+ // $Revision: 1.1.2.1 $   $Date: 2001/08/13 21:14:31 $
+ // ----------------------------------------------------------------------
+ // ACL:rcsinfo
Index: tests/makefile
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/makefile,v
retrieving revision 1.11.2.11
diff -c -p -r1.11.2.11 makefile
*** tests/makefile	2001/08/21 15:16:56	1.11.2.11
--- tests/makefile	2001/08/21 17:03:36
*************** run_tests: tests
*** 57,62 ****
--- 57,63 ----
  	$(ODIR)/Gradient $(TSTOPTS) 1>Gradient.out 2>&1
  	$(ODIR)/MeshTest1 $(TSTOPTS) 1>MeshTest1.out 2>&1
  	$(ODIR)/NearestNeighbors $(TSTOPTS) 1>NearestNeighbors.out 2>&1
+ 	$(ODIR)/OffsetReduction $(TSTOPTS) 1>OffsetReduction.out 2>&1
  	$(ODIR)/Replicate $(TSTOPTS) 1>Replicate.out 2>&1
  	$(ODIR)/ScalarCode $(TSTOPTS) 1>ScalarCode.out 2>&1
  	$(ODIR)/StencilTests $(TSTOPTS) 1>StencilTests.out 2>&1
*************** field_tests:: $(ODIR)/BasicTest1 $(ODIR)
*** 71,77 ****
  	$(ODIR)/FieldTour1 $(ODIR)/FieldTour2 \
  	$(ODIR)/FieldTour3 $(ODIR)/Gradient\
  	$(ODIR)/MeshTest1 $(ODIR)/NearestNeighbors \
! 	$(ODIR)/Replicate \
  	$(ODIR)/ScalarCode $(ODIR)/StencilTests \
  	$(ODIR)/TestMeshFunctors $(ODIR)/TestBasicRelations \
  	$(ODIR)/VectorTest $(ODIR)/WhereTest
--- 72,78 ----
  	$(ODIR)/FieldTour1 $(ODIR)/FieldTour2 \
  	$(ODIR)/FieldTour3 $(ODIR)/Gradient\
  	$(ODIR)/MeshTest1 $(ODIR)/NearestNeighbors \
! 	$(ODIR)/OffsetReduction $(ODIR)/Replicate \
  	$(ODIR)/ScalarCode $(ODIR)/StencilTests \
  	$(ODIR)/TestMeshFunctors $(ODIR)/TestBasicRelations \
  	$(ODIR)/VectorTest $(ODIR)/WhereTest
*************** $(ODIR)/Gradient: $(ODIR)/Gradient.o
*** 167,172 ****
--- 168,180 ----
  NearestNeighbors: $(ODIR)/NearestNeighbors
  
  $(ODIR)/NearestNeighbors: $(ODIR)/NearestNeighbors.o
+ 	$(LinkToSuite)
+ 
+ .PHONY: OffsetReduction
+ 
+ OffsetReduction: $(ODIR)/OffsetReduction
+ 
+ $(ODIR)/OffsetReduction: $(ODIR)/OffsetReduction.o
  	$(LinkToSuite)
  
  .PHONY: Positions
