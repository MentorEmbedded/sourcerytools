? KB
? KBM
? KBMK
? 26.Jun.patch
? old.patch
? 27.Jun.patchLocal.patch
? Array/tests/KB
? Array/tests/KBM
? Array/tests/KBMK
? BConds/tests/KB
? BConds/tests/KBM
? BConds/tests/KBMK
? Connect/KB
? Connect/KBM
? Connect/KBMK
? Connect/Lux/KB
? Connect/Lux/KBM
? Connect/Lux/KBMK
? Connect/Lux/tests/KB
? Connect/Lux/tests/KBM
? Connect/Lux/tests/KBMK
? Connect/Paws/KB
? Connect/Paws/KBM
? Connect/Paws/KBMK
? Connect/Paws/tests/KB
? Connect/Paws/tests/KBM
? Connect/Paws/tests/KBMK
? CoordinateSystems/tests/KB
? CoordinateSystems/tests/KBM
? CoordinateSystems/tests/KBMK
? DataBrowser/KB
? DataBrowser/KBM
? DataBrowser/KBMK
? DataBrowser/tests/KB
? DataBrowser/tests/KBM
? DataBrowser/tests/KBMK
? Domain/KB
? Domain/KBM
? Domain/KBMK
? Domain/tests/KB
? Domain/tests/KBM
? Domain/tests/KBMK
? DynamicArray/tests/KB
? DynamicArray/tests/KBM
? DynamicArray/tests/KBMK
? Engine/KB
? Engine/KBM
? Engine/KBMK
? Engine/tests/KB
? Engine/tests/KBM
? Engine/tests/KBMK
? Evaluator/tests/KB
? Evaluator/tests/KBM
? Evaluator/tests/KBMK
? Field/DiffOps/tests/KB
? Field/DiffOps/tests/KBM
? Field/DiffOps/tests/KBMK
? Field/tests/KB
? Field/tests/KBM
? Field/tests/KBMK
? Functions/tests/KB
? Functions/tests/KBM
? Functions/tests/KBMK
? Geometry/KB
? Geometry/KBM
? Geometry/KBMK
? Geometry/tests/KB
? Geometry/tests/KBM
? Geometry/tests/KBMK
? IO/KB
? IO/KBM
? IO/KBMK
? IO/tests/KB
? IO/tests/KBM
? IO/tests/KBMK
? Layout/KB
? Layout/KBM
? Layout/KBMK
? Layout/tests/KB
? Layout/tests/KBM
? Layout/tests/KBMK
? Meshes/tests/KB
? Meshes/tests/KBM
? Meshes/tests/KBMK
? NewField/tests/KBM
? NewField/tests/KB
? NewField/tests/KBMK
? NewField/tests/KB_a
? NewField/tests/KBM_a
? NewField/tests/KBM_b
? NewField/tests/KB_b
? NewField/tests/foo
? NewField/tests/foo2
? NewField/tests/foo3
? Particles/KB
? Particles/KBM
? Particles/KBMK
? Particles/tests/KB
? Particles/tests/KBM
? Particles/tests/KBMK
? Partition/KB
? Partition/KBM
? Partition/KBMK
? Partition/tests/KB
? Partition/tests/KBM
? Partition/tests/KBMK
? Pooma/KB
? Pooma/KBM
? Pooma/KBMK
? Pooma/tests/KB
? Pooma/tests/KBM
? Pooma/tests/KBMK
? Threads/KB
? Threads/KBM
? Threads/KBMK
? Threads/IterateSchedulers/KB
? Threads/IterateSchedulers/KBM
? Threads/IterateSchedulers/KBMK
? Threads/tests/KB
? Threads/tests/KBM
? Threads/tests/KBMK
? Tiny/tests/KB
? Tiny/tests/KBM
? Tiny/tests/KBMK
? Transform/tests/KB
? Transform/tests/KBM
? Transform/tests/KBMK
? Tulip/KB
? Tulip/KBM
? Tulip/KBMK
? Tulip/tests/KB
? Tulip/tests/KBM
? Tulip/tests/KBMK
? Utilities/KB
? Utilities/KBM
? Utilities/KBMK
? Utilities/tests/KB
? Utilities/tests/KBM
? Utilities/tests/KBMK
Index: NewField/Field.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/Field.h,v
retrieving revision 1.15
diff -c -p -r1.15 Field.h
*** NewField/Field.h	2001/05/29 17:29:20	1.15
--- NewField/Field.h	2001/07/27 16:43:32
***************
*** 69,74 ****
--- 69,76 ----
  
  #include "NewField/PrintField.h"
  
+ #include "NewField/FieldEngine/FieldEnginePatch.h"
+ 
  //-----------------------------------------------------------------------------
  // Forward declarations:
  //-----------------------------------------------------------------------------
*************** struct Patch<Field<GeometryTag, T, Engin
*** 848,860 ****
  
    typedef Field<GeometryTag, T, typename Engine_t::Tag_t> Type_t;
  
    inline static
    Type_t make(const Subject_t &f, int i)
!     {
!       PAssert(f.numSubFields() == 0);
  
!       return Type_t(f, EnginePatch(i));
!     }
  };
  
  
--- 850,891 ----
  
    typedef Field<GeometryTag, T, typename Engine_t::Tag_t> Type_t;
  
+   enum { dim = OldEngine_t::dimensions };
+ 
    inline static
    Type_t make(const Subject_t &f, int i)
!   {
!     PAssert(f.numSubFields() == 0);
  
!     return Type_t(f, FieldEnginePatch<dim>(i, f.physicalDomain()));
!   }
! };
! 
! template<class GeometryTag, class T, class LTag, class EngineTag>
! struct Patch<Field<GeometryTag, T, MultiPatch<LTag, EngineTag> > >
! {
!   typedef Field<GeometryTag, T, MultiPatch<LTag, EngineTag> > Subject_t;
!   typedef typename Subject_t::Engine_t OldEngine_t;
!   typedef typename EngineFunctor<OldEngine_t, EnginePatch>::Type_t Engine_t;
! 
!   // We've assumed that GeometryTag and T are the same for the patch engine.
! 
!   typedef Field<GeometryTag, T, typename Engine_t::Tag_t> Type_t;
! 
!   enum { dim = OldEngine_t::dimensions };
!   typedef typename OldEngine_t::Layout_t Layout_t;
!   typedef typename Layout_t::Value_t Node_t;
! 
!   inline static
!   Type_t make(const Subject_t &f, int i)
!   {
!     PAssert(f.numSubFields() == 0);
! 
!     Node_t *node = f.engine().layout().nodeListLocal()[i];
!     
!     return Type_t(f, FieldEnginePatch<dim>(i, intersect(f.physicalDomain(),
!                                                         node->domain())));
!   }
  };
  
  
Index: NewField/FieldEngine/FieldEngine.Lagrangian.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/FieldEngine/FieldEngine.Lagrangian.h,v
retrieving revision 1.5
diff -c -p -r1.5 FieldEngine.Lagrangian.h
*** NewField/FieldEngine/FieldEngine.Lagrangian.h	2001/04/27 22:50:18	1.5
--- NewField/FieldEngine/FieldEngine.Lagrangian.h	2001/07/27 16:43:32
*************** public:
*** 209,215 ****
  
    template<class ET2>
    FieldEngine(const FieldEngine<GeometryTag_t, T, ET2> &model, 
!     const EnginePatch &p)
    : Base_t(model, p),
      positions_m(model.vertexPositions().patchLocal(p.patch_m))
      { }
--- 209,215 ----
  
    template<class ET2>
    FieldEngine(const FieldEngine<GeometryTag_t, T, ET2> &model, 
!               const FieldEnginePatch<Dim> &p)
    : Base_t(model, p),
      positions_m(model.vertexPositions().patchLocal(p.patch_m))
      { }
Index: NewField/FieldEngine/FieldEngine.NoGeometry.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/FieldEngine/FieldEngine.NoGeometry.h,v
retrieving revision 1.5
diff -c -p -r1.5 FieldEngine.NoGeometry.h
*** NewField/FieldEngine/FieldEngine.NoGeometry.h	2001/05/14 21:11:24	1.5
--- NewField/FieldEngine/FieldEngine.NoGeometry.h	2001/07/27 16:43:32
*************** public:
*** 178,184 ****
  
    template<class ET2>
    FieldEngine(const FieldEngine<GeometryTag_t, T, ET2> &model, 
!     const EnginePatch &p)
    : engine_m(engineFunctor(model.engine(), p)),
      updaters_m(model.updaters())
      { }
--- 178,184 ----
  
    template<class ET2>
    FieldEngine(const FieldEngine<GeometryTag_t, T, ET2> &model, 
!               const FieldEnginePatch<Dim> &p)
    : engine_m(engineFunctor(model.engine(), p)),
      updaters_m(model.updaters())
      { }
Index: NewField/FieldEngine/FieldEngine.UR.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/FieldEngine/FieldEngine.UR.h,v
retrieving revision 1.7
diff -c -p -r1.7 FieldEngine.UR.h
*** NewField/FieldEngine/FieldEngine.UR.h	2001/05/04 15:41:28	1.7
--- NewField/FieldEngine/FieldEngine.UR.h	2001/07/27 16:43:32
*************** public:
*** 241,247 ****
  
    template<class ET2>
    FieldEngine(const FieldEngine<GeometryTag_t, T, ET2> &model, 
!     const EnginePatch &p)
    : Base_t(model, p),
      spacings_m(model.spacings())
      { 
--- 241,247 ----
  
    template<class ET2>
    FieldEngine(const FieldEngine<GeometryTag_t, T, ET2> &model, 
!               const FieldEnginePatch<Dim> &p)
    : Base_t(model, p),
      spacings_m(model.spacings())
      { 
Index: NewField/FieldEngine/FieldEngineBase.h
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/FieldEngine/FieldEngineBase.h,v
retrieving revision 1.13
diff -c -p -r1.13 FieldEngineBase.h
*** NewField/FieldEngine/FieldEngineBase.h	2001/06/28 19:08:11	1.13
--- NewField/FieldEngine/FieldEngineBase.h	2001/07/27 16:43:32
***************
*** 57,62 ****
--- 57,63 ----
  #include "Engine/EnginePatch.h"
  #include "Engine/EngineFunctor.h"
  #include "NewField/Updater/UpdaterList.h"
+ #include "NewField/FieldEngine/FieldEnginePatch.h"
  
  //-----------------------------------------------------------------------------
  // Forward declarations:
*************** public:
*** 304,314 ****
  
    template<class EngineTag2>
    void initialize(This_t &s, 
!     const FieldEngineBase<Dim, T, EngineTag2> &model, const EnginePatch &p)
      {
        PAssert(model.numSubFields() == 0);
!       s.initialize(model.offsets(), engineFunctor(model.engine(), p));
!       s.physicalCellDomain_m = shrinkRight(data_m->engine().domain(), 1);
      }
  
    template<int Dim2, class T2, class EngineTag2, class Components>
--- 305,318 ----
  
    template<class EngineTag2>
    void initialize(This_t &s, 
!                   const FieldEngineBase<Dim, T, EngineTag2> &model,
!                   const FieldEnginePatch<Dim> &p)
      {
        PAssert(model.numSubFields() == 0);
!       s.initialize(model.offsets(), engineFunctor(model.engine(),
!                                                   EnginePatch(p.patch_m)));
!       s.physicalCellDomain_m = shrinkRight(p.domain_m, model.offsets());
!       s.guards_m = model.guardLayers();
      }
  
    template<int Dim2, class T2, class EngineTag2, class Components>
Index: NewField/FieldEngine/FieldEnginePatch.h
===================================================================
RCS file: FieldEnginePatch.h
diff -N FieldEnginePatch.h
*** /dev/null	Tue May  5 14:32:27 1998
--- FieldEnginePatch.h	Fri Jul 27 10:43:32 2001
***************
*** 0 ****
--- 1,83 ----
+ // -*- C++ -*-
+ // ACL:license
+ // ----------------------------------------------------------------------
+ // This software and ancillary information (herein called "SOFTWARE")
+ // called POOMA (Parallel Object-Oriented Methods and Applications) is
+ // made available under the terms described here.  The SOFTWARE has been
+ // approved for release with associated LA-CC Number LA-CC-98-65.
+ // 
+ // Unless otherwise indicated, this SOFTWARE has been authored by an
+ // employee or employees of the University of California, operator of the
+ // Los Alamos National Laboratory under Contract No. W-7405-ENG-36 with
+ // the U.S. Department of Energy.  The U.S. Government has rights to use,
+ // reproduce, and distribute this SOFTWARE. The public may copy, distribute,
+ // prepare derivative works and publicly display this SOFTWARE without 
+ // charge, provided that this Notice and any statement of authorship are 
+ // reproduced on all copies.  Neither the Government nor the University 
+ // makes any warranty, express or implied, or assumes any liability or 
+ // responsibility for the use of this SOFTWARE.
+ // 
+ // If SOFTWARE is modified to produce derivative works, such modified
+ // SOFTWARE should be clearly marked, so as not to confuse it with the
+ // version available from LANL.
+ // 
+ // For more information about POOMA, send e-mail to pooma@acl.lanl.gov,
+ // or visit the POOMA web page at http://www.acl.lanl.gov/pooma/.
+ // ----------------------------------------------------------------------
+ // ACL:license
+ 
+ //-----------------------------------------------------------------------------
+ // Class:
+ // FieldEnginePatch     - functor for getting the nth patch out of a field.
+ //-----------------------------------------------------------------------------
+ 
+ #ifndef POOMA_FIELD_FIELDENGINEPATCH_H
+ #define POOMA_FIELD_FIELDENGINEPATCH_H
+ 
+ //////////////////////////////////////////////////////////////////////
+ 
+ //-----------------------------------------------------------------------------
+ // Overview: 
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // Typedefs:
+ //-----------------------------------------------------------------------------
+ 
+ //-----------------------------------------------------------------------------
+ // Includes:
+ //-----------------------------------------------------------------------------
+ 
+ #include "Engine/EnginePatch.h"
+ 
+ //-----------------------------------------------------------------------------
+ //
+ // FieldEnginePatch
+ //
+ // Fields know about two domains, a physical and total domain.  To get a patch
+ // view of a field, we need to pass the physical domain along, since the engine
+ // will typically extend beyond the domain when there are guard cells.
+ //
+ //-----------------------------------------------------------------------------
+ 
+ template<int Dim>
+ struct FieldEnginePatch
+ {
+   FieldEnginePatch(int patch, Interval<Dim> domain)
+     : patch_m(patch), domain_m(domain)
+   { }
+ 
+   int patch_m;
+   Interval<Dim> domain_m;
+ };
+ 
+ /////////////////////////////////////////////////////////////////////
+ 
+ #endif     // POOMA_FIELD_FIELDENGINEPATCH_H
+ 
+ // ACL:rcsinfo
+ // ----------------------------------------------------------------------
+ // $RCSfile: EnginePatch.h,v $   $Author: swhaney $
+ // $Revision: 1.15 $   $Date: 2000/07/20 15:41:36 $
+ // ----------------------------------------------------------------------
+ // ACL:rcsinfo
Index: NewField/tests/LocalPatch.cpp
===================================================================
RCS file: LocalPatch.cpp
diff -N LocalPatch.cpp
*** /dev/null	Tue May  5 14:32:27 1998
--- LocalPatch.cpp	Fri Jul 27 10:43:32 2001
***************
*** 0 ****
--- 1,374 ----
+ // -*- C++ -*-
+ // ACL:license
+ // ----------------------------------------------------------------------
+ // This software and ancillary information (herein called "SOFTWARE")
+ // called POOMA (Parallel Object-Oriented Methods and Applications) is
+ // made available under the terms described here.  The SOFTWARE has been
+ // approved for release with associated LA-CC Number LA-CC-98-65.
+ // 
+ // Unless otherwise indicated, this SOFTWARE has been authored by an
+ // employee or employees of the University of California, operator of the
+ // Los Alamos National Laboratory under Contract No. W-7405-ENG-36 with
+ // the U.S. Department of Energy.  The U.S. Government has rights to use,
+ // reproduce, and distribute this SOFTWARE. The public may copy, distribute,
+ // prepare derivative works and publicly display this SOFTWARE without 
+ // charge, provided that this Notice and any statement of authorship are 
+ // reproduced on all copies.  Neither the Government nor the University 
+ // makes any warranty, express or implied, or assumes any liability or 
+ // responsibility for the use of this SOFTWARE.
+ // 
+ // If SOFTWARE is modified to produce derivative works, such modified
+ // SOFTWARE should be clearly marked, so as not to confuse it with the
+ // version available from LANL.
+ // 
+ // For more information about POOMA, send e-mail to pooma@acl.lanl.gov,
+ // or visit the POOMA web page at http://www.acl.lanl.gov/pooma/.
+ // ----------------------------------------------------------------------
+ // ACL:license
+ //-----------------------------------------------------------------------------
+ // Test of the patchLocal function and demonstration of how to use it to
+ // perform local SPMD computations on fields.
+ //-----------------------------------------------------------------------------
+ 
+ #include "Pooma/NewFields.h"
+ 
+ #if POOMA_CHEETAH
+   typedef DistributedTag LayoutTag_t;
+   typedef Remote<Brick> BrickTag_t;
+   typedef Remote<CompressibleBrick> CompressibleBrickTag_t;
+ #else
+   typedef ReplicatedTag LayoutTag_t;
+   typedef Brick BrickTag_t;
+   typedef CompressibleBrick CompressibleBrickTag_t;
+ #endif
+ 
+ // perform some nonsense on some memory containing doubles.
+ 
+ void nonsense(double *data, int size)
+ {
+   for (int i = 0; i < size; ++i)
+   {
+     data[i] += i;
+   }
+ }
+ 
+ int main(int argc, char *argv[])
+ {
+   Pooma::initialize(argc, argv);
+   Pooma::Tester tester(argc, argv);
+ 
+   // To declare a field, you first need to set up a layout. This requires
+   // knowing the physical vertex-domain and the number of external guard
+   // cell layers. Vertex domains contain enough points to hold all of the
+   // rectilinear centerings that POOMA is likely to support for quite
+   // awhile. Also, it means that the same layout can be used for all
+   // fields, regardless of centering.
+   
+   Interval<2> physicalVertexDomain(14, 14);
+   Loc<2> blocks(3, 3);
+   GridLayout<2> layout1(physicalVertexDomain, blocks, GuardLayers<2>(1),
+                         LayoutTag_t());
+   GridLayout<2> layout0(physicalVertexDomain, blocks, GuardLayers<2>(0),
+                         LayoutTag_t());
+ 
+   Cell cell;
+   Vert vert;
+   Edge yedge(1);
+ 
+   Vector<2> origin(0.0);
+   Vector<2> spacings(1.0, 2.0);
+ 
+   // First basic test verifies that we're assigning to the correct areas
+   // on a brick.
+ 
+   typedef
+     Field<UniformRectilinear<2>, double,
+     MultiPatch<GridTag, BrickTag_t> > Field_t;
+   Field_t b0(cell, layout1, origin, spacings);
+   Field_t b1(vert, layout1, origin, spacings);
+   Field_t b2(yedge, layout1, origin, spacings);
+   Field_t bb0(cell, layout0, origin, spacings);
+   Field_t bb1(vert, layout0, origin, spacings);
+   Field_t bb2(yedge, layout0, origin, spacings);
+ 
+   b0.all() = 0.0;
+   b1.all() = 0.0;
+   b2.all() = 0.0;
+ 
+   b0 = 1.0;
+   b1 = 1.0;
+   b2 = 1.0;
+ 
+   bb0.all() = 0.0;
+   bb1.all() = 0.0;
+   bb2.all() = 0.0;
+ 
+   bb0 = 1.0;
+   bb1 = 1.0;
+   bb2 = 1.0;
+ 
+   // SPMD code follows.
+   // Note, SPMD code will work with the evaluator if you are careful
+   // to perform assignment on all the relevant contexts.  The patchLocal
+   // function creates a brick on the local context, so you can just perform
+   // the assignment on that context.
+ 
+   int i;
+ 
+   for (i = 0; i < b0.numPatchesLocal(); ++i)
+   {
+     Patch<Field_t>::Type_t patch = b0.patchLocal(i);
+     //    std::cout << "context " << Pooma::context() << ":  assigning to patch " << i
+     //              << " with domain " << patch.domain() << std::endl;
+     patch += 1.5;
+   }
+ 
+   // This is safe to do since b1 and b2 are built with the same layout.
+   for (i = 0; i < b1.numPatchesLocal(); ++i)
+   {
+     b1.patchLocal(i) += 1.5;
+     b2.patchLocal(i) += 1.5;
+   }
+ 
+   for (i = 0; i < bb0.numPatchesLocal(); ++i)
+   {
+     Patch<Field_t>::Type_t patch = bb0.patchLocal(i);
+     //    std::cout << "context " << Pooma::context() << ":  assigning to patch on bb0 " << i
+     //              << " with domain " << patch.domain() << std::endl;
+     patch += 1.5;
+   }
+ 
+   // This is safe to do since bb1 and bb2 are built with the same layout.
+   for (i = 0; i < bb1.numPatchesLocal(); ++i)
+   {
+     bb1.patchLocal(i) += 1.5;
+     bb2.patchLocal(i) += 1.5;
+   }
+ 
+   tester.check("cell centered field is 2.5", all(b0 == 2.5));
+   tester.check("vert centered field is 2.5", all(b1 == 2.5));
+   tester.check("edge centered field is 2.5", all(b2 == 2.5));
+ 
+   tester.out() << "b0.all():" << std::endl << b0.all() << std::endl;
+   tester.out() << "b1.all():" << std::endl << b1.all() << std::endl;
+   tester.out() << "b2.all():" << std::endl << b2.all() << std::endl;
+ 
+   tester.check("didn't write into b0 boundary",
+                sum(b0.all()) == 2.5 * b0.physicalDomain().size());
+   tester.check("didn't write into b1 boundary",
+                sum(b1.all()) == 2.5 * b1.physicalDomain().size());
+   tester.check("didn't write into b2 boundary",
+                sum(b2.all()) == 2.5 * b2.physicalDomain().size());
+ 
+   tester.check("cell centered field is 2.5", all(bb0 == 2.5));
+   tester.check("vert centered field is 2.5", all(bb1 == 2.5));
+   tester.check("edge centered field is 2.5", all(bb2 == 2.5));
+ 
+   tester.out() << "bb0:" << std::endl << bb0 << std::endl;
+   tester.out() << "bb1:" << std::endl << bb1 << std::endl;
+   tester.out() << "bb2:" << std::endl << bb2 << std::endl;
+ 
+   typedef
+     Field<UniformRectilinear<2>, double,
+     MultiPatch<GridTag, CompressibleBrickTag_t> > CField_t;
+   CField_t c0(cell, layout1, origin, spacings);
+   CField_t c1(vert, layout1, origin, spacings);
+   CField_t c2(yedge, layout1, origin, spacings);
+   CField_t cb0(cell, layout0, origin, spacings);
+   CField_t cb1(vert, layout0, origin, spacings);
+   CField_t cb2(yedge, layout0, origin, spacings);
+ 
+   c0.all() = 0.0;
+   c1.all() = 0.0;
+   c2.all() = 0.0;
+ 
+   c0 = 1.0;
+   c1 = 1.0;
+   c2 = 1.0;
+ 
+   cb0.all() = 0.0;
+   cb1.all() = 0.0;
+   cb2.all() = 0.0;
+ 
+   cb0 = 1.0;
+   cb1 = 1.0;
+   cb2 = 1.0;
+ 
+   // SPMD code follows.
+   // Note, SPMD code will work with the evaluator if you are careful
+   // to perform assignment on all the relevant contexts.  The patchLocal
+   // function creates a brick on the local context, so you can just perform
+   // the assignment on that context.
+ 
+   for (i = 0; i < c0.numPatchesLocal(); ++i)
+   {
+     Patch<CField_t>::Type_t patch = c0.patchLocal(i);
+     std::cout << "context " << Pooma::context() << ":  assigning to patch " << i
+               << " with domain " << patch.domain() << std::endl;
+     patch += 1.5;
+   }
+ 
+   // This is safe to do since c1 and c2 are built with the same layout.
+   for (i = 0; i < c1.numPatchesLocal(); ++i)
+   {
+     c1.patchLocal(i) += 1.5;
+     c2.patchLocal(i) += 1.5;
+   }
+ 
+   for (i = 0; i < cb0.numPatchesLocal(); ++i)
+   {
+     Patch<CField_t>::Type_t patch = cb0.patchLocal(i);
+     std::cout << "context " << Pooma::context() << ":  assigning to patch on cb0 " << i
+               << " with domain " << patch.domain() << std::endl;
+     patch += 1.5;
+   }
+ 
+   // This is safe to do since cb1 and cb2 are cuilt with the same layout.
+   for (i = 0; i < cb1.numPatchesLocal(); ++i)
+   {
+     cb1.patchLocal(i) += 1.5;
+     cb2.patchLocal(i) += 1.5;
+   }
+ 
+   tester.check("cell centered field is 2.5", all(c0 == 2.5));
+   tester.check("vert centered field is 2.5", all(c1 == 2.5));
+   tester.check("edge centered field is 2.5", all(c2 == 2.5));
+ 
+   tester.out() << "c0.all():" << std::endl << c0.all() << std::endl;
+   tester.out() << "c1.all():" << std::endl << c1.all() << std::endl;
+   tester.out() << "c2.all():" << std::endl << c2.all() << std::endl;
+ 
+   tester.check("didn't write into c0 boundary",
+                sum(c0.all()) == 2.5 * c0.physicalDomain().size());
+   tester.check("didn't write into c1 boundary",
+                sum(c1.all()) == 2.5 * c1.physicalDomain().size());
+   tester.check("didn't write into c2 boundary",
+                sum(c2.all()) == 2.5 * c2.physicalDomain().size());
+ 
+   tester.check("cell centered field is 2.5", all(cb0 == 2.5));
+   tester.check("vert centered field is 2.5", all(cb1 == 2.5));
+   tester.check("edge centered field is 2.5", all(cb2 == 2.5));
+ 
+   tester.out() << "cb0:" << std::endl << cb0 << std::endl;
+   tester.out() << "cb1:" << std::endl << cb1 << std::endl;
+   tester.out() << "cb2:" << std::endl << cb2 << std::endl;
+ 
+   //------------------------------------------------------------------
+   // Scalar code example:
+   //
+ 
+   c0 = iota(c0.domain()).comp(0);
+   c1 = iota(c1.domain()).comp(1);
+ 
+   // Make sure all the data-parallel are done:
+ 
+   Pooma::blockAndEvaluate();
+ 
+   for (i = 0; i < c0.numPatchesLocal(); ++i)
+   {
+     Patch<CField_t>::Type_t local0 = c0.patchLocal(i);
+     Patch<CField_t>::Type_t local1 = c1.patchLocal(i);
+     Patch<CField_t>::Type_t local2 = c2.patchLocal(i);
+ 
+     Interval<2> domain = local2.domain();  // physical domain of local y-edges
+ 
+     // --------------------------------------------------------------
+     // I believe the following is probably the most efficient approach
+     // for sparse computations.  For data-parallel computations, the
+     // evaluator will uncompress the patches and take brick views, which
+     // provide the most efficient access.  If you are only performing
+     // the computation on a small portion of cells, then the gains would
+     // be outweighed by the act of copying the compressed value to all the
+     // cells.
+     //
+     // The read function is used on the right hand side, because
+     // operator() is forced to uncompress the patch just in case you want
+     // to write to it.
+ 
+     for(Interval<2>::iterator pos = domain.begin(); pos != domain.end(); ++pos)
+     {
+       Loc<2> edge = *pos;
+       Loc<2> rightCell = edge;  // cell to right is same cell
+       Loc<2> leftCell = edge - Loc<2>(1,0);
+       Loc<2> topVert = edge + Loc<2>(0, 1);
+       Loc<2> bottomVert = edge;
+ 
+       local2(edge) =
+         local0.read(rightCell) + local0.read(leftCell) +
+         local1.read(topVert) + local1.read(bottomVert);
+     }
+ 
+     // This statement is optional, it tries to compress the patch after
+     // we're done computing on it.  Since I used .read() for the local0 and 1
+     // they remained in their original state. compress() can be expensive, so
+     // it may not be worth trying unless space is really important.
+ 
+     compress(local2);
+   }
+ 
+   tester.out() << "c0" << std::endl << c0 << std::endl;
+   tester.out() << "c1" << std::endl << c1 << std::endl;
+   tester.out() << "c2" << std::endl << c2 << std::endl;
+ 
+   //------------------------------------------------------------------
+   // Interfacing with a c-function:
+   //
+   // This example handles the corner cases, where the patches from a
+   // cell centered field with no guard layers actually contain some
+   // extra data.
+ 
+   Pooma::blockAndEvaluate();
+ 
+   for (i = 0; i < cb0.numPatchesLocal(); ++i)
+   {
+     Patch<CField_t>::Type_t local0 = cb0.patchLocal(i);
+     Interval<2> physicalDomain = local0.physicalDomain();
+     double *data;
+     int size = physicalDomain.size();
+ 
+     if (physicalDomain == local0.totalDomain())
+     {
+       uncompress(local0);
+       data = &local0(physicalDomain.firsts());
+       nonsense(data, size);
+     }
+     else
+     {
+       // In this case, the engine has extra storage even though the
+       // field has the right domain. We copy it to a brick engine,
+       // call the function and copy it back.  No uncompress is required,
+       // since the assignment will copy the compressed value into the
+       // brick.
+ 
+       // arrayView is a work-around.  Array = Field doesn't work at
+       // the moment.
+ 
+       Array<2, double, Brick> brick(physicalDomain);
+       Array<2, double, CompressibleBrick> arrayView(local0.engine());
+       brick = arrayView(physicalDomain);
+       Pooma::blockAndEvaluate();
+       data = &brick(Loc<2>(0));
+       nonsense(data, size);
+       arrayView(physicalDomain) = brick;
+ 
+       // Note that we don't need a blockAndEvaluate here, since an iterate has
+       // been spawned to perform the copy.
+     }
+ 
+     // If you want to try compress(local0) here, you should do blockAndEvaluate
+     // first in case the local0 = brick hasn't been executed yet.
+   }
+       
+   tester.out() << "cb0.all()" << std::endl << cb0 << std::endl;
+ 
+   int ret = tester.results("LocalPatch");
+   Pooma::finalize();
+   return ret;
+ }
+ 
+ // ACL:rcsinfo
+ // ----------------------------------------------------------------------
+ // $RCSfile: FieldTour2.cpp,v $   $Author: oldham $
+ // $Revision: 1.2 $   $Date: 2001/05/04 15:41:29 $
+ // ----------------------------------------------------------------------
+ // ACL:rcsinfo
Index: NewField/tests/makefile
===================================================================
RCS file: /home/pooma/Repository/r2/src/NewField/tests/makefile,v
retrieving revision 1.11
diff -c -p -r1.11 makefile
*** NewField/tests/makefile	2001/06/28 18:51:25	1.11
--- NewField/tests/makefile	2001/07/27 16:43:32
*************** run_tests: tests
*** 54,65 ****
  	$(ODIR)/ScalarCode $(TSTOPTS) 1>ScalarCode.out 2>&1
  	$(ODIR)/StencilTests $(TSTOPTS) 1>StencilTests.out 2>&1
  	$(ODIR)/ExpressionTest $(TSTOPTS) 1>ExpressionTest.out 2>&1
  
  field_tests:: $(ODIR)/BasicTest1 $(ODIR)/BasicTest2 \
  	$(ODIR)/FieldTour1 $(ODIR)/FieldTour2 \
  	$(ODIR)/WhereTest $(ODIR)/VectorTest \
  	$(ODIR)/ScalarCode $(ODIR)/StencilTests \
!         $(ODIR)/ExpressionTest
  
  
  ###########################
--- 54,66 ----
  	$(ODIR)/ScalarCode $(TSTOPTS) 1>ScalarCode.out 2>&1
  	$(ODIR)/StencilTests $(TSTOPTS) 1>StencilTests.out 2>&1
  	$(ODIR)/ExpressionTest $(TSTOPTS) 1>ExpressionTest.out 2>&1
+ 	$(ODIR)/LocalPatch $(TSTOPTS) 1>LocalPatch.out 2>&1
  
  field_tests:: $(ODIR)/BasicTest1 $(ODIR)/BasicTest2 \
  	$(ODIR)/FieldTour1 $(ODIR)/FieldTour2 \
  	$(ODIR)/WhereTest $(ODIR)/VectorTest \
  	$(ODIR)/ScalarCode $(ODIR)/StencilTests \
!         $(ODIR)/ExpressionTest $(ODIR)/LocalPatch
  
  
  ###########################
*************** $(ODIR)/ScalarCode: $(ODIR)/ScalarCode.o
*** 139,144 ****
--- 140,152 ----
  StencilTests: $(ODIR)/StencilTests
  
  $(ODIR)/StencilTests: $(ODIR)/StencilTests.o
+ 	$(LinkToSuite)
+ 
+ .PHONY: LocalPatch
+ 
+ LocalPatch: $(ODIR)/LocalPatch
+ 
+ $(ODIR)/LocalPatch: $(ODIR)/LocalPatch.o
  	$(LinkToSuite)
  
  
