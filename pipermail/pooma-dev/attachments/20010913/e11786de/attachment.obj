Index: Array/Array.h===================================================================RCS file: /home/pooma/Repository/r2/src/Array/Array.h,vretrieving revision 1.141diff -p -c -2 -r1.141 Array.h*** Array/Array.h	2001/05/25 17:42:48	1.141--- Array/Array.h	2001/09/13 20:34:54*************** elementsCompressed(const Array<Dim, T, E*** 2527,2530 ****--- 2527,2541 ----    //-----------------------------------------------------------------------------+ // Return whether or not all of the elements are currently compressed.+ //-----------------------------------------------------------------------------+ + template<int Dim, class T, class EngineTag>+ inline bool+ compressed(const Array<Dim, T, EngineTag> &a)+ {+   return compressed(a.engine());+ }+ + //-----------------------------------------------------------------------------  // (Try to) compress the array.  //-----------------------------------------------------------------------------Index: Engine/CompressedFraction.h===================================================================RCS file: /home/pooma/Repository/r2/src/Engine/CompressedFraction.h,vretrieving revision 1.4diff -p -c -2 -r1.4 CompressedFraction.h*** Engine/CompressedFraction.h	2000/06/01 00:21:08	1.4--- Engine/CompressedFraction.h	2001/09/13 20:34:55****************** 29,32 ****--- 29,33 ----  //-----------------------------------------------------------------------------  // functions:+ //   compressed()  //   compressedFraction()  //   elementsCompressed()****************** 45,48 ****--- 46,63 ----  //  //-----------------------------------------------------------------------------+ + //-----------------------------------------------------------------------------+ //+ // bool compressed()+ //+ // Return whether or not something is currently compressed.+ //+ //-----------------------------------------------------------------------------+ + template <class Expr>+ inline bool compressed(const Expr &expr)+ {+   return false;+ }    //-----------------------------------------------------------------------------Index: Engine/CompressibleBrick.h===================================================================RCS file: /home/pooma/Repository/r2/src/Engine/CompressibleBrick.h,vretrieving revision 1.71diff -p -c -2 -r1.71 CompressibleBrick.h*** Engine/CompressibleBrick.h	2001/08/30 01:15:04	1.71--- Engine/CompressibleBrick.h	2001/09/13 20:34:55*************** compressedReadWrite() const*** 999,1002 ****--- 999,1008 ----    template <int Dim, class T>+ inline bool compressed(const Engine<Dim, T, CompressibleBrick> &e)+ {+   return e.compressed();+ }+ + template <int Dim, class T>  inline long elementsCompressed(const Engine<Dim, T, CompressibleBrick> &e)  {*************** compressedReadWrite() const *** 1179,1182 ****--- 1185,1195 ----  // Free function returning compressed status.  //+ + template <int Dim, class T>+ inline + bool compressed(const Engine<Dim,T,CompressibleBrickView> &e)+ {+   return e.compressed();+ }    template <int Dim, class T>Index: Engine/MultiPatchEngine.cpp===================================================================RCS file: /home/pooma/Repository/r2/src/Engine/MultiPatchEngine.cpp,vretrieving revision 1.50diff -p -c -2 -r1.50 MultiPatchEngine.cpp*** Engine/MultiPatchEngine.cpp	2001/08/30 01:15:04	1.50--- Engine/MultiPatchEngine.cpp	2001/09/13 20:34:56*************** long elementsCompressed(const Engine<Dim*** 854,857 ****--- 854,888 ----  //-----------------------------------------------------------------------------  //+ // bool compressed()+ //+ // Compute the number of elements that are currently compressed. Compute+ // with the local patches and then do a cross-context reduction.+ //+ //-----------------------------------------------------------------------------+ + template<int Dim, class T, class LTag, class PatchTag>+ bool compressed(const Engine<Dim, T, MultiPatch<LTag, PatchTag> > &engine)+ {+   int size = engine.layout().sizeLocal();+ +   bool distributed = true;+   if (size > 0 && engine.layout().beginLocal()->context() == -1)+     distributed = false;+     +   int com = 1;+   for (int i = 0 ; i < size ; ++i )+     com &= (compressed(engine.localPatch(i)) ? 1 : 0);+   +   if (distributed)+     {+       ReduceOverContexts<int, OpBitwiseAndAssign> total(com);+       total.broadcast(com);+     }+ +   return com ? true : false;+ }+ + //-----------------------------------------------------------------------------+ //  // long elementsCompressed()  //Index: Engine/RemoteEngine.h===================================================================RCS file: /home/pooma/Repository/r2/src/Engine/RemoteEngine.h,vretrieving revision 1.33diff -p -c -2 -r1.33 RemoteEngine.h*** Engine/RemoteEngine.h	2001/05/16 21:21:06	1.33--- Engine/RemoteEngine.h	2001/09/13 20:34:56*************** void uncompress(Engine<Dim, T, Remote<Ta*** 1663,1666 ****--- 1663,1672 ----  }  + template <int Dim, class T, class Tag>+ bool compressed(const Engine<Dim, T, Remote<Tag> > &engine)+ {+   return compressed(engine.localEngine());+ }+     //-----------------------------------------------------------------------------Index: Field/Field.h===================================================================RCS file: /home/pooma/Repository/r2/src/Field/Field.h,vretrieving revision 1.70diff -p -c -2 -r1.70 Field.h*** Field/Field.h	2001/08/30 01:15:06	1.70--- Field/Field.h	2001/09/13 20:34:57*************** class RelationListItem;*** 107,111 ****  //   Field = Array  //   Field = scalar! ///  // If you wish to have Field work with other types of objects on the right-  // hand side (for example, other classes that derive from Field), define--- 107,112 ----  //   Field = Array  //   Field = scalar! //   Array = Field! //  // If you wish to have Field work with other types of objects on the right-  // hand side (for example, other classes that derive from Field), define*************** assign(const Field<Mesh, T, EngineTag> &*** 136,139 ****--- 137,145 ----         const T1 &rhs, const Op &op);  + template<class Mesh, class T, class EngineTag, +  int Dim2, class T2, class EngineTag2, class Op>+ const Array<Dim2, T2, EngineTag2> &+ assign(const Array<Dim2, T2, EngineTag2> &lhs,+        const Field<Mesh, T, EngineTag> &rhs, const Op &op);    //-----------------------------------------------------------------------------*************** assign(const Field<Mesh, T, EngineTag> &*** 2084,2089 ****      //-----------------------------------------------------------------------------! // Compute the fraction of the total domain that is currently compressed.  //  // This is only a sensible thing to do if there are no subfields, hence the--- 2090,2116 ----    + //-----------------------------------------------------------------------------+ // assign() function for Array assign-op Field.+ //-----------------------------------------------------------------------------+ + template<class Mesh, class T, class EngineTag, +  int Dim2, class T2, class EngineTag2, class Op>+ const Array<Dim2, T2, EngineTag2> &+ assign(const Array<Dim2, T2, EngineTag2> &lhs, +        const Field<Mesh, T, EngineTag> &rhs, const Op &op)+ {+   PAssert(rhs.numMaterials() == 1);+   PAssert(rhs.centeringSize() == 1);+ +   forEach(rhs, PerformUpdateTag(), NullCombine());+   +   Evaluator<MainEvaluatorTag>().evaluate(lhs, op, rhs);+         +   return lhs;+ }+ +   //-----------------------------------------------------------------------------! // Compute whether or not a Field is currently compressed.  //  // This is only a sensible thing to do if there are no subfields, hence the*************** assign(const Field<Mesh, T, EngineTag> &*** 2091,2101 ****  //-----------------------------------------------------------------------------  ! template<class Mesh, class T, class LTag>! inline double! compressedFraction(!   const Field<Mesh, T, MultiPatch<LTag,CompressibleBrick> > &f)  {    PAssert(f.numSubFields() == 0);!   return compressedFraction(f.engine());  }  --- 2118,2141 ----  //-----------------------------------------------------------------------------  ! template<class Mesh, class T, class EngineTag>! inline bool compressed(const Field<Mesh, T, EngineTag> &f)! {!   PAssert(f.numSubFields() == 0);!   return compressed(f.engine());! }! ! ! //-----------------------------------------------------------------------------! // Compute the number of elements that are currently compressed.! //! // This is only a sensible thing to do if there are no subfields, hence the! // assertion.! //-----------------------------------------------------------------------------! ! template<class Mesh, class T, class EngineTag>! inline long elementsCompressed(const Field<Mesh, T, EngineTag> &f)  {    PAssert(f.numSubFields() == 0);!   return elementsCompressed(f.engine());  }  *************** uncompress(Field<Mesh, T, MultiPatch<LTa*** 2136,2139 ****--- 2176,2231 ----      }    }+ }+ + + //-----------------------------------------------------------------------------+ // Functions for getting the number of materials for Arrays and Fields.+ //-----------------------------------------------------------------------------+ + template<int Dim, class T, class EngineTag>+ inline int numMaterials(const Array<Dim, T, EngineTag> &a)+ {+   return 1;+ }+ + template<class Mesh, class T, class EngineTag>+ inline int numMaterials(const Field<Mesh, T, EngineTag> &f)+ {+   return f.numMaterials();+ }+ + + //-----------------------------------------------------------------------------+ // Functions for getting the number of centering points for Arrays and Fields.+ //-----------------------------------------------------------------------------+ + template<int Dim, class T, class EngineTag>+ inline int centeringSize(const Array<Dim, T, EngineTag> &a)+ {+   return 1;+ }+ + template<class Mesh, class T, class EngineTag>+ inline int centeringSize(const Field<Mesh, T, EngineTag> &f)+ {+   return f.centeringSize();+ }+ + + //-----------------------------------------------------------------------------+ // Functions for taking subfield views of Arrays and Fields.+ //-----------------------------------------------------------------------------+ + template<int Dim, class T, class EngineTag>+ inline Array<Dim, T, EngineTag> &subField(Array<Dim, T, EngineTag> &a, int, int)+ {+   return a;+ }+ + template<class Mesh, class T, class EngineTag>+ inline typename SubFieldView<Field<Mesh, T, EngineTag> >::Type_t + subField(Field<Mesh, T, EngineTag> &f, int m, int c)+ {+   return f.subField(m, c);  }  Index: Tulip/Messaging.cmpl.cpp===================================================================RCS file: /home/pooma/Repository/r2/src/Tulip/Messaging.cmpl.cpp,vretrieving revision 1.5diff -p -c -2 -r1.5 Messaging.cmpl.cpp*** Tulip/Messaging.cmpl.cpp	2000/05/03 19:17:35	1.5--- Tulip/Messaging.cmpl.cpp	2001/09/13 20:35:01****************** 34,37 ****--- 34,39 ----    #include "Tulip/Messaging.h"+ + #include "Tulip/CollectFromContexts.h"  #include "Tulip/ReduceOverContexts.h"  #include "Tulip/RemoteProxy.h"****************** 39,42 ****--- 41,45 ----    int  ReduceOverContextsBase::tagBase_m = 0;+ int  CollectFromContextsBase::tagBase_m = 0;    bool RemoteProxyBase::ready_m;*************** int expectedMessages_g = 0;*** 59,62 ****--- 62,66 ----    #if POOMA_CHEETAH+ Cheetah::MatchingHandler *collectionHandler_g   = 0;  Cheetah::MatchingHandler *indexHandler_g        = 0;  Cheetah::MatchingHandler *reductionHandler_g    = 0;*************** void initializeCheetahHelpers(int contex*** 70,73 ****--- 74,78 ----    expectedMessages_g = 0;  #if POOMA_CHEETAH+   collectionHandler_g        = new Cheetah::MatchingHandler(*Pooma::controller());    indexHandler_g             = new Cheetah::MatchingHandler(*Pooma::controller());    reductionHandler_g         = new Cheetah::MatchingHandler(*Pooma::controller());*************** void finalizeCheetahHelpers()*** 82,85 ****--- 87,92 ----    PAssert(expectedMessages_g == 0);  #if POOMA_CHEETAH+   if (collectionHandler_g != 0)+     delete collectionHandler_g;    if (indexHandler_g != 0)      delete indexHandler_g;Index: Tulip/Messaging.h===================================================================RCS file: /home/pooma/Repository/r2/src/Tulip/Messaging.h,vretrieving revision 1.4diff -p -c -2 -r1.4 Messaging.h*** Tulip/Messaging.h	2000/05/03 19:01:43	1.4--- Tulip/Messaging.h	2001/09/13 20:35:01*************** extern int expectedMessages_g;*** 129,132 ****--- 129,133 ----  #if POOMA_CHEETAH  + extern Cheetah::MatchingHandler *collectionHandler_g;  extern Cheetah::MatchingHandler *indexHandler_g;  extern Cheetah::MatchingHandler *reductionHandler_g;*************** extern Cheetah::MatchingHandler *remoteE*** 134,137 ****--- 135,143 ----  extern Cheetah::MatchingHandler *particleSwapHandler_g;  + + inline Cheetah::MatchingHandler *collectionHandler()+ {+   return collectionHandler_g;+ }    inline Cheetah::MatchingHandler *indexHandler()