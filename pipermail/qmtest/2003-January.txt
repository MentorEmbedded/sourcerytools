From mark at codesourcery.com  Wed Jan  1 03:36:23 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 31 Dec 2002 19:36:23 -0800
Subject: [qmtest] GUI changes
In-Reply-To: <200212161156.44871.ghost@cs.msu.su>
Message-ID: <643340000.1041392183@warlock.codesourcery.com>



--On Monday, December 16, 2002 11:56:44 AM +0300 Vladimir Prus 
<ghost at cs.msu.su> wrote:

> Mark Mitchell wrote:
>> --On Monday, December 16, 2002 10:19:55 AM +0300 Vladimir Prus
>>
>> <ghost at cs.msu.su> wrote:
>> > I'm probably late making this comment, but recent GUI changes
>> > are probably not as good. Whenever I move a mouse over
>> > menu, it pops up. That's very annoying when I just want to click
>> > "back" or "forward" button. Somehow I use those very often.
>>
>> What about changing the menus so that you have to click on them to
>> activate them?
>>
>> We can do that easily -- by changing the "onmouseover" handler to be
>> an "onclick" handler, and perhaps fiddling some of the other stuff.
>>
>> Thoughts?
>
> This looks like a good idea!

I applied this patch to the mainline to implement this idea.

You will want to put:

  [common]

  click_menus=1

in your ~/.qmrc file.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com

2002-12-31  Mark Mitchell  <mark at codesourcery.com>

	* doc/manual/common-manual.xml: Document click_menus option.
	* qm/common.py (RcConfiguration): Derive from ConfigParser.
	(RcConfiguration.__init__): Load the configuration file.
	(RcConfiguration.Load): Do not call __Load.
	(RcConfiguration.Get): Simplify.
	(RcConfiguration.GetOptions): Likewise.
	(RcConfiguration.__Load): Remove it.
	* qm/test/share/dtml/navigation-bar.dtml: Suppose clickable menus.
	* qm/test/web/web.py (QMTestPage.GenerateStartBody): Likewise.

Index: doc/manual/common-manual.xml
===================================================================
RCS file: /home/qm/Repository/qm/doc/manual/common-manual.xml,v
retrieving revision 1.8
diff -c -p -r1.8 common-manual.xml
*** doc/manual/common-manual.xml	28 Nov 2002 23:09:59 -0000	1.8
--- doc/manual/common-manual.xml	1 Jan 2003 03:35:32 -0000
*************** browser=/usr/local/bin/mozilla
*** 84,89 ****
--- 84,119 ----

     <glossentry>
      <glossterm>
+      <property>click_menus</property>
+     </glossterm>
+     <glossdef>
+      <para>If this option is not present, or has the value
+      <literal>0</literal>, menus in the
+      GUI are activated by moving the mouse over the menu name.
+      </para>
+
+      <para>If this option has the value <literal>1</literal>, the
+      menus are activated by clicking on the menu name.
+      </para>
+     </glossdef>
+    </glossentry>
+
+    <glossentry>
+     <glossterm>
+      <property>remote_shell</property> (UNIX-like platforms only)
+     </glossterm>
+     <glossdef>
+      <para>The program used for running commands on remote computers.
+      The program must accept the same syntax as the standard
+      <filename>rsh</filename> command, and should be configured to run
+      the command remotely without any additional interaction (such as
+      requesting a password from the TTY).  The default value is
+      <filename>/usr/bin/ssh</filename>.</para>
+     </glossdef>
+    </glossentry>
+
+    <glossentry>
+     <glossterm>
       <property>script_shell</property>
      </glossterm>
      <glossdef>
*************** browser=/usr/local/bin/mozilla
*** 109,128 ****
       compatible replacement.  This program is used for sending email
       messages.  The default value is
       <filename>/usr/lib/sendmail</filename>.</para>
-     </glossdef>
-    </glossentry>
-
-    <glossentry>
-     <glossterm>
-      <property>remote_shell</property> (UNIX-like platforms only)
-     </glossterm>
-     <glossdef>
-      <para>The program used for running commands on remote computers.
-      The program must accept the same syntax as the standard
-      <filename>rsh</filename> command, and should be configured to run
-      the command remotely without any additional interaction (such as
-      requesting a password from the TTY).  The default value is
-      <filename>/usr/bin/ssh</filename>.</para>
      </glossdef>
     </glossentry>

--- 139,144 ----
Index: qm/common.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/common.py,v
retrieving revision 1.67
diff -c -p -r1.67 common.py
*** qm/common.py	11 Nov 2002 16:08:01 -0000	1.67
--- qm/common.py	1 Jan 2003 03:35:32 -0000
*************** class PythonException(QMException):
*** 128,134 ****
  # classes
  ########################################################################

! class RcConfiguration:
      """Interface object to QM configuration files.

      Configuration files are in the format parsed by the standard
--- 128,134 ----
  # classes
  ########################################################################

! class RcConfiguration(ConfigParser.ConfigParser):
      """Interface object to QM configuration files.

      Configuration files are in the format parsed by the standard
*************** class RcConfiguration:
*** 141,156 ****
      def __init__(self):
          """Create a new configuration instance."""

!         self.__parser = None


      def Load(self, section):
          """Load configuration.

          'section' -- The configuration section from which subsequent
!         varaibles are loaded."""

-         self.__parser = self.__Load()
          self.__section = section


--- 141,162 ----
      def __init__(self):
          """Create a new configuration instance."""

!         ConfigParser.ConfigParser.__init__(self)
!         if os.environ.has_key("HOME"):
!             home_directory = os.environ["HOME"]
!             rc_file = os.path.join(home_directory, self.user_rc_file_name)
!             # Note that it's OK to call 'read' even if the file doesn't
!             # exist.  In that, case the parser simply will not
!             # accumulate any data.
!             self.read(rc_file)


      def Load(self, section):
          """Load configuration.

          'section' -- The configuration section from which subsequent
!         variables are loaded."""

          self.__section = section


*************** class RcConfiguration:
*** 168,182 ****

          precondition -- The RC configuration must be loaded."""

-         if self.__parser is None:
-             # No RC file was ever loaded.  Print a warning the first
-             # time.
-             if not hasattr(self, "no_rc_loaded_warning"):
-                 sys.stderr.write("Warning: No RC configuration file 
loaded.\n")
-                 self.no_rc_loaded_warning = 1
-             # Use the default.
-             return default
-
          # Use the previously-specified default section, if one wasn't
          # specified explicitly.
          if section is None:
--- 174,179 ----
*************** class RcConfiguration:
*** 184,190 ****

          try:
              # Try to get the requested option.
!             return self.__parser.get(section, option)
          except ConfigParser.NoSectionError:
              # Couldn't find the section.
              return default
--- 181,187 ----

          try:
              # Try to get the requested option.
!             return self.get(section, option)
          except ConfigParser.NoSectionError:
              # Couldn't find the section.
              return default
*************** class RcConfiguration:
*** 206,212 ****
          if section is None:
              section = self.__section
          try:
!             options = self.__parser.options(section)
          except ConfigParser.NoSectionError:
              # Couldn't find the section.
              return []
--- 203,209 ----
          if section is None:
              section = self.__section
          try:
!             options = self.options(section)
          except ConfigParser.NoSectionError:
              # Couldn't find the section.
              return []
*************** class RcConfiguration:
*** 217,245 ****
                  options.remove("__name__")
              return options

!
!     def __Load(self):
!         """Load the configuration from the appropriate places."""
!
! 	# Create a parser.
!         parser = ConfigParser.ConfigParser()
!
!         # Construct the path to the user's rc file.
!         if os.environ.has_key("HOME"):
! 	        home_directory = os.environ["HOME"]
! 	        rc_file = os.path.join(home_directory, self.user_rc_file_name)
! 	        # Note that it's OK to call 'read' even if the file doesn't
! 		# exist.  In that, case the parser simply will not accumulate
! 		# any data.
! 	        parser.read(rc_file)
! 	else:	
! 		# If we cannot find the user's home directory, do not
! 		# even try to read the configuration.
! 		pass
!
!         return parser
!
!
  ########################################################################
  # functions
  ########################################################################
--- 214,220 ----
                  options.remove("__name__")
              return options

!
  ########################################################################
  # functions
  ########################################################################
Index: qm/test/share/dtml/navigation-bar.dtml
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/share/dtml/navigation-bar.dtml,v
retrieving revision 1.4
diff -c -p -r1.4 navigation-bar.dtml
*** qm/test/share/dtml/navigation-bar.dtml	29 Nov 2002 04:11:29 -0000	1.4
--- qm/test/share/dtml/navigation-bar.dtml	1 Jan 2003 03:35:33 -0000
***************
*** 36,47 ****
               base="name + '_base'"
               menu="name + '_menu'">
      <td width="20%" class="menu_bar">
!      <a href=""
!         id="<dtml-var base>"
!         onmouseover="show_menu(event, '<dtml-var menu>');"
!         onmouseout="hide_active_menu(event);"
!         onclick="return false;"
!         class="menu_bar"><dtml-var name capitalize></a>
      </td>
     </dtml-let>
    </dtml-in>
--- 36,55 ----
               base="name + '_base'"
               menu="name + '_menu'">
      <td width="20%" class="menu_bar">
!      <dtml-if click_menus>
!       <a href=""
!          id="<dtml-var base>"
!          onclick="show_menu(event, '<dtml-var menu>'); return false;"
!          onmouseout="hide_active_menu(event);"
!          class="menu_bar"><dtml-var name capitalize></a>
!      <dtml-else>
!       <a href=""
!          id="<dtml-var base>"
!          onmouseover="show_menu(event, '<dtml-var menu>');"
!          onmouseout="hide_active_menu(event);"
!          onclick="return false;"
!          class="menu_bar"><dtml-var name capitalize></a>
!      </dtml-if>
      </td>
     </dtml-let>
    </dtml-in>
Index: qm/test/web/web.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/web/web.py,v
retrieving revision 1.56
diff -c -p -r1.56 web.py
*** qm/test/web/web.py	18 Dec 2002 05:30:09 -0000	1.56
--- qm/test/web/web.py	1 Jan 2003 03:35:33 -0000
*************** class QMTestPage(DefaultDtmlPage):
*** 213,226 ****
              else:
                  edit_menu_items = self.edit_menu_items
                  run_menu_items = self.run_menu_items
!             # Include the navigation bar.
              navigation_bar = \
                DefaultDtmlPage(os.path.join("test", "navigation-bar.dtml"),
                                file_menu_items=self.file_menu_items,
                                edit_menu_items=edit_menu_items,
                                view_menu_items=self.view_menu_items,
                                run_menu_items=run_menu_items,
!                               help_menu_items=self.help_menu_items)
              return "<body>%s<br />" % navigation_bar(self.request)
          else:
              return "<body>"
--- 213,237 ----
              else:
                  edit_menu_items = self.edit_menu_items
                  run_menu_items = self.run_menu_items
!
!             # Figure out whether to use click-to-activate menus.
!             click_menus = 0
!             if qm.common.rc.has_option("common", "click_menus"):
!                 try:
!                     click_menus = qm.common.rc.getboolean("common",
!                                                           "click_menus")
!                 except ValueError:
!                     pass
!
!             # Generate the navigation bar.
              navigation_bar = \
                DefaultDtmlPage(os.path.join("test", "navigation-bar.dtml"),
                                file_menu_items=self.file_menu_items,
                                edit_menu_items=edit_menu_items,
                                view_menu_items=self.view_menu_items,
                                run_menu_items=run_menu_items,
!                               help_menu_items=self.help_menu_items,
!                               click_menus = click_menus)
              return "<body>%s<br />" % navigation_bar(self.request)
          else:
              return "<body>"



From njs at uclink4.berkeley.edu  Thu Jan  2 08:34:01 2003
From: njs at uclink4.berkeley.edu (Nathaniel Smith)
Date: Thu, 2 Jan 2003 00:34:01 -0800
Subject: Why is qmtest installed in such a non-standard way?
Message-ID: <20030102083401.GA20579@njs.dhis.org>

[Apologies if this is a duplicate mail; I originally sent it a few
days ago, but as far as I can tell that copy got eaten by gremlins.]

QMTest installs rather differently from every other Python library
I've used; in particular, it uses a non-standard location, and
requires some quirky environment variables to be set before it can be
used.  I find this rather frustrating --- I want to do things like
test my test classes interactively from Python's REPL, and import qm
classes from other programs (in particular, I want to be able to
programmatically manipulate my test databases by just importing
qm.test.database).  However, it seems that I have to do the following
before I can reliably use the qm modules:
 >>> import sys
 >>> sys.path += '/usr/lib/qm', '/usr/lib/qm/xmlrpc', '/usr/lib/qm/zope-dtml'
 >>> import os
 >>> os.environ["QM_HOME"] = "/usr/lib/qm"
 >>> os.environ["QM_SHARE_PATH"] = "/usr/share/qm"

Would it be possible to have the qm modules installed into the normal
Python module search path, and possibly eliminate the environment
variables through some autoconf (or whatever) magic?  Is there some
reason this wasn't done originally?

Thanks,
-- Nathaniel

-- 
Scrap books wanted for recycling. "Any old text." Pure, unadulterated
prose preferred -- separated by genre. (No need to separate
first/second/third person -- facility has magnetic sorter.)


From mark at codesourcery.com  Thu Jan  2 17:23:00 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 02 Jan 2003 09:23:00 -0800
Subject: [qmtest] Why is qmtest installed in such a non-standard way?
In-Reply-To: <20030102083401.GA20579@njs.dhis.org>
Message-ID: <17460000.1041528180@warlock.codesourcery.com>



--On Thursday, January 02, 2003 12:34:01 AM -0800 Nathaniel Smith 
<njs at uclink4.berkeley.edu> wrote:

> QMTest installs rather differently from every other Python library
> I've used; in particular, it uses a non-standard location, and
> requires some quirky environment variables to be set before it can be
> used.

That's probably a fair criticism, but QMTest is an application, not a
library.  I think it's reasonable to ask it to do a better job at being
a library.  We haven't done this because, well, it takes effort. :-)

Part of the reason for using XML as the default database format is to
allow people to build databases from any XML-generating tool -- including
ones that are *not* written in Python.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Thu Jan  2 17:31:10 2003
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 02 Jan 2003 12:31:10 -0500
Subject: [qmtest] Binary results file?
In-Reply-To: <7gwulrrz0b.fsf@pikespeak.metacarta.com>
References: <17380000.1041013443@warlock.codesourcery.com>
	<7gwulrrz0b.fsf@pikespeak.metacarta.com>
Message-ID: <7g3cobqx0h.fsf@pikespeak.metacarta.com>

It occurred to me this morning that for my testing process I want to
keep both a context and a expectations/result set in CVS; this is just
another reason I'd chose XML output, even if it meant postprocessing.
(Not trying to push for it, just adding to the set of use cases...)


From mark at codesourcery.com  Fri Jan  3 04:16:31 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 02 Jan 2003 20:16:31 -0800
Subject: [qmtest] Binary results file?
In-Reply-To: <7g3cobqx0h.fsf@pikespeak.metacarta.com>
Message-ID: <122520000.1041567391@warlock.codesourcery.com>



--On Thursday, January 02, 2003 12:31:10 PM -0500 "eichin at metacarta.com" 
<eichin at metacarta.com> wrote:

> It occurred to me this morning that for my testing process I want to
> keep both a context and a expectations/result set in CVS; this is just
> another reason I'd chose XML output, even if it meant postprocessing.
> (Not trying to push for it, just adding to the set of use cases...)

I've checked in code on the mainline to support a new --result-format
option to control whether to save results as XML or in a binary format.

This option actually enables something we've planned for sometime:
user-defined extension formats for saving results, so that you can
dump results out as a spreadsheet, graph, etc.

See the documentation for details about how this works.

Thanks,

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From njs at uclink4.berkeley.edu  Fri Jan  3 11:51:34 2003
From: njs at uclink4.berkeley.edu (Nathaniel Smith)
Date: Fri, 3 Jan 2003 03:51:34 -0800
Subject: Executable paths and working directories
Message-ID: <20030103115134.GA32731@njs.dhis.org>

In our (envisioned) setup, we have tests written in C++ that get
compiled more-or-less alongside the source code they're testing, and a
test database for the whole project that has entries to call the
executables that do the real testing.  What I'm wondering is how I
should be telling the qmtest Test objects where their executables are.
I could always hack something specific into my custom test class (by,
say, using some logic to find the root of the build tree, and
chdir()'ing there before running an executable specified by a relative
path), but it seems like there must be a better and more general
solution, and I'm wondering how it would work.

Thoughts:
  -- from looking at the ItemDescriptor code, it appears that _all_
     tests, resources, etc., can have associated working directories
     that they are run in.  However, there is no UI to set this
     information, and in fact xml_database doesn't even store it --
     rather, it just sets the working directory to be whatever
     directory in the test database happens to contain the .qmt file
     in question, which isn't very useful.
  -- so adding such a UI and a way to store the working directory
     could help some.  We'd still have to decide what the working
     directory was defined relative to -- the test db directory, I
     suppose?
  -- however, just adding a way to set the working directory on a
     per-item basis prolly isn't enough, because you might want to
     vary it between runs -- in my case, I need some way to specify
     where the build directory is, and it could be anywhere.  The
     obvious way to do this is via a special entry in the context.
     Perhaps we should have the working directory specified in the
     database undergo python % expansion against the context?
  -- I have no idea how all this would or should interact with
     targets.

-- Nathaniel

-- 
.i dei jitfa fanmo xatra

This email may be read aloud.


From mark at codesourcery.com  Fri Jan  3 21:26:33 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 03 Jan 2003 13:26:33 -0800
Subject: [qmtest] Executable paths and working directories
In-Reply-To: <20030103115134.GA32731@njs.dhis.org>
Message-ID: <180290000.1041629193@warlock.codesourcery.com>



--On Friday, January 03, 2003 03:51:34 AM -0800 Nathaniel Smith 
<njs at uclink4.berkeley.edu> wrote:

> In our (envisioned) setup, we have tests written in C++ that get
> compiled more-or-less alongside the source code they're testing, and a
> test database for the whole project that has entries to call the
> executables that do the real testing.  What I'm wondering is how I
> should be telling the qmtest Test objects where their executables are.
> I could always hack something specific into my custom test class (by,
> say, using some logic to find the root of the build tree, and
> chdir()'ing there before running an executable specified by a relative
> path), but it seems like there must be a better and more general
> solution, and I'm wondering how it would work.

The GetDatabase() method available in all test classes will let you
find the root of the database; you do:

  self.GetDatabase().GetPath()

So, one solution is to have your test class use that method to get
at the build directory.

Alternatively, you could use the context to tell you where the
executables are; that's a perfect application for the context.  (The
idea of the context is to provide information about the test environment
that might vary over different testsuite invocations.)

The working_directory support that you see littered about in the code
should actually be removed.  We originally envisioned allowing tests
to set their working directories, but then realized that does not work
when running tests in parallel -- working directories are per-process,
not per-thread.  So, that stuff will be going away as soon as I get
around to editing the files. :-)

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From njs at uclink4.berkeley.edu  Fri Jan  3 22:00:04 2003
From: njs at uclink4.berkeley.edu (Nathaniel Smith)
Date: Fri, 3 Jan 2003 14:00:04 -0800
Subject: [qmtest] Executable paths and working directories
In-Reply-To: <180290000.1041629193@warlock.codesourcery.com>
References: <20030103115134.GA32731@njs.dhis.org> <180290000.1041629193@warlock.codesourcery.com>
Message-ID: <20030103220003.GA3819@njs.dhis.org>

On Fri, Jan 03, 2003 at 01:26:33PM -0800, Mark Mitchell wrote:
> --On Friday, January 03, 2003 03:51:34 AM -0800 Nathaniel Smith 
> <njs at uclink4.berkeley.edu> wrote:
> 
> >In our (envisioned) setup, we have tests written in C++ that get
> >compiled more-or-less alongside the source code they're testing, and a
> >test database for the whole project that has entries to call the
> >executables that do the real testing.  What I'm wondering is how I
> >should be telling the qmtest Test objects where their executables are.
> >I could always hack something specific into my custom test class (by,
> >say, using some logic to find the root of the build tree, and
> >chdir()'ing there before running an executable specified by a relative
> >path), but it seems like there must be a better and more general
> >solution, and I'm wondering how it would work.
> 
> The GetDatabase() method available in all test classes will let you
> find the root of the database; you do:
> 
>  self.GetDatabase().GetPath()
> 
> So, one solution is to have your test class use that method to get
> at the build directory.

Unfortunately, since build directory != source directory in general,
knowing where the test database is stored doesn't actually help that
much :-(.

> Alternatively, you could use the context to tell you where the
> executables are; that's a perfect application for the context.  (The
> idea of the context is to provide information about the test environment
> that might vary over different testsuite invocations.)

Right, that makes sense to me too.  It still seems like there should
be some more generic way of doing this than defining a special key in
my context and then having my custom Test class look for it.

> The working_directory support that you see littered about in the code
> should actually be removed.  We originally envisioned allowing tests
> to set their working directories, but then realized that does not work
> when running tests in parallel -- working directories are per-process,
> not per-thread.  So, that stuff will be going away as soon as I get
> around to editing the files. :-)

Oo, good point.  Hmm.  So any generic working directory support should
probably be implemented in the various command tests themselves, via
the "dir" argument to Executable.Run.

I think what I'll do for now is add a some sort of "search path" or
"base directory" attribute to my Test class, and % expand it against
the context; that seems a nice balance of genericity, flexibility, and
simplicity, unless anyone can think of a problem with it...

-- Nathaniel

-- 
The Universe may  /  Be as large as they say
But it wouldn't be missed  /  If it didn't exist.
  -- Piet Hein

This email may be read aloud.


From mark at codesourcery.com  Fri Jan  3 22:04:47 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 03 Jan 2003 14:04:47 -0800
Subject: [qmtest] Executable paths and working directories
In-Reply-To: <20030103220003.GA3819@njs.dhis.org>
Message-ID: <187740000.1041631487@warlock.codesourcery.com>


>> Alternatively, you could use the context to tell you where the
>> executables are; that's a perfect application for the context.  (The
>> idea of the context is to provide information about the test environment
>> that might vary over different testsuite invocations.)
>
> Right, that makes sense to me too.  It still seems like there should
> be some more generic way of doing this than defining a special key in
> my context and then having my custom Test class look for it.

Perhaps.

The generic test class can't do it due to the thread issues.

Certainly, we'd like to have a much more extensive set of test classes,
and something along the lines of the command.py classes could definitely
provide this support.

> Oo, good point.  Hmm.  So any generic working directory support should
> probably be implemented in the various command tests themselves, via
> the "dir" argument to Executable.Run.

Exactly.  I see that I just said what you said. :-)

> I think what I'll do for now is add a some sort of "search path" or
> "base directory" attribute to my Test class, and % expand it against
> the context; that seems a nice balance of genericity, flexibility, and
> simplicity, unless anyone can think of a problem with it...

I think that's a solution most consistent with the overall paradigm.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From njs at pobox.com  Sat Jan  4 06:45:33 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 3 Jan 2003 22:45:33 -0800
Subject: [qmtest] Why is qmtest installed in such a non-standard way?
In-Reply-To: <17460000.1041528180@warlock.codesourcery.com>
References: <20030102083401.GA20579@njs.dhis.org> <17460000.1041528180@warlock.codesourcery.com>
Message-ID: <20030104064532.GE7320@WyrmWeyr.frop.org>

[Apologies again if this is a double post; I think ezmlm hates me.
But I've tweaked my mail config a bit, and perhaps that will pacify
it...]

On Thu, Jan 02, 2003 at 09:23:00AM -0800, Mark Mitchell wrote:
> --On Thursday, January 02, 2003 12:34:01 AM -0800 Nathaniel Smith 
> <njs at uclink4.berkeley.edu> wrote:
> 
> >QMTest installs rather differently from every other Python library
> >I've used; in particular, it uses a non-standard location, and
> >requires some quirky environment variables to be set before it can be
> >used.
> 
> That's probably a fair criticism, but QMTest is an application, not a
> library.  I think it's reasonable to ask it to do a better job at being
> a library.  We haven't done this because, well, it takes effort. :-)

Hopefully it doesn't take _too_ much effort though; one of the nice
things about python IMHO is that every application is also a library,
almost automatically.  The only thing preventing this happening for
QMTest is the non-standard install.

Granted, poking around a bit, the environment variables seem to have
snuck into a number of different places; I'm not sure exactly how one
would best get rid of them.  I'd be happy to spend some time working
on a patch, though, if you could provide some idea of the required
behaviour -- it seems like a lot of the quirkiness has reason to it
that I just don't understand at the moment :-).

> Part of the reason for using XML as the default database format is to
> allow people to build databases from any XML-generating tool -- including
> ones that are *not* written in Python.

Yes, I'm aware of this (in fact, I think I suggested to Zack a few
months ago that freezing and documenting the XML structure would be a
good idea); on the other hand, I'd like to be able to support any of
the alternative database implementations that you recommend people
develop, and besides.  Besides which, the advantage of XML is really
that it makes it easier to reimplement the default database class in
your language of choice; I think, though, it would be even easier than
that to just use the implementation that _already_ exists in my
language of choice :-).

And, of course, there are things besides the database code that would
be useful; qm.label comes to mind as an obvious example, as does
playing with my new test classes interactively (which desire is what
actually got me started unraveling qmtest's environment variables).

I'm probably beating a dead horse by this point, so I'll stop.
Regarding changes to the install, what needs to be done?

-- Nathaniel

-- 
The Universe may  /  Be as large as they say
But it wouldn't be missed  /  If it didn't exist.
  -- Piet Hein

This email may be read aloud.


From ghost at cs.msu.su  Sat Jan  4 06:51:53 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Sat, 04 Jan 2003 09:51:53 +0300
Subject: [qmtest] Binary results file?
In-Reply-To: <122520000.1041567391@warlock.codesourcery.com>
References: <122520000.1041567391@warlock.codesourcery.com>
Message-ID: <3E168489.7050300@cs.msu.su>

Mark Mitchell wrote:

> --On Thursday, January 02, 2003 12:31:10 PM -0500 "eichin at metacarta.com" 
> <eichin at metacarta.com> wrote:
> 
>> It occurred to me this morning that for my testing process I want to
>> keep both a context and a expectations/result set in CVS; this is just
>> another reason I'd chose XML output, even if it meant postprocessing.
>> (Not trying to push for it, just adding to the set of use cases...)
> 
> 
> I've checked in code on the mainline to support a new --result-format
> option to control whether to save results as XML or in a binary format.
> 
> This option actually enables something we've planned for sometime:
> user-defined extension formats for saving results, so that you can
> dump results out as a spreadsheet, graph, etc.
> 
> See the documentation for details about how this works.

Mark,
thanks a lot for this!

I think there's one thing missing: the "qmtest extensions" command
does not list result stream classes. Please see the attachement for
a (trivial) fix.

- Volodya
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: extensions_cmd.diff
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030104/26d910ac/attachment.ksh>

From ghost at cs.msu.su  Sat Jan  4 07:05:01 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Sat, 04 Jan 2003 10:05:01 +0300
Subject: [qmtest] GUI changes
In-Reply-To: <643340000.1041392183@warlock.codesourcery.com>
References: <643340000.1041392183@warlock.codesourcery.com>
Message-ID: <3E16879D.3000801@cs.msu.su>


Mark Mitchell wrote:

 >>> What about changing the menus so that you have to click on them to
 >>> activate them?
 >>>
 >>> We can do that easily -- by changing the "onmouseover" handler to be
 >>> an "onclick" handler, and perhaps fiddling some of the other stuff.
 >>>
 >>> Thoughts?
 >>
 >>
 >> This looks like a good idea!
 >
 >
 > I applied this patch to the mainline to implement this idea.
 >
 > You will want to put:
 >
 >  [common]
 >
 >  click_menus=1
 >
 > in your ~/.qmrc file.

Thanks again! This works nice.

You've did some good hacking during New Year holidays :-)

Thanks,
Volodya



From eichin at metacarta.com  Sun Jan  5 03:21:38 2003
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 04 Jan 2003 22:21:38 -0500
Subject: are test names really lower case?
In-Reply-To: <20030103115134.GA32731@njs.dhis.org>
Message-ID: <7gvg14l1rx.fsf@pikespeak.metacarta.com>

I just generated a large batch of tests (starting with a template test
and a word list, creating a test directory of one test per word,
trivial perl hacking [though the kind of thing that it might be useful
to be able to directly talk to the Database object for, maybe.
direct-xml-mucking works great for now, though]) and noticed that it
simply didn't run any of the tests that began with upper case
letters... I was surprised :-) and now that I try it through the GUI,
it does, in fact, object:

   The name "FRED" is not valid. Names may contain lower-case letters,
   digits, hyphens, underscores, and periods.

I suppose I can come up with some arbitrary quoting, I was just a
little surprised; where does the case-distinction come from? python culture?


From mark at codesourcery.com  Sun Jan  5 05:24:12 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Sat, 04 Jan 2003 21:24:12 -0800
Subject: [qmtest] are test names really lower case?
In-Reply-To: <7gvg14l1rx.fsf@pikespeak.metacarta.com>
Message-ID: <274460000.1041744252@warlock.codesourcery.com>


> I suppose I can come up with some arbitrary quoting, I was just a
> little surprised; where does the case-distinction come from? python
> culture?

No, actually; it came from a requirement that test databases be fully
portable across operating systems.  On Windows, upper-case names would
be the same as equivalent lower-case names, when using files to store
the tests.

Getting around this issue was why we added support for other label
classes in later versions of QMTest.  We didn't change the default
because that would have been an incompatible change, but maybe we
should.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Tue Jan 14 19:27:41 2003
From: eichin at metacarta.com (Mark Eichin)
Date: Tue, 14 Jan 2003 14:27:41 -0500 (EST)
Subject: does concurrency work anymore?
Message-ID: <20030114192741.BE417E25D4@maneki-neko>

I noticed this with a larger test using my own code, thought it might
be my own tests, but then cooked it down to this case using only the
built-in command.ExecTest and figured I should check with others:

Basically, a setting of concurrency N causes N tests to run, and then
hang things hang.  This is on Debian linux, python 2.2, qmtest 2.0x
(from CVS but most if not all of the way to 2.0.2.)  A quick strace
was unenlightening (the last thing a child does is a chdir and then:
5277  rt_sigprocmask(SIG_SETMASK, NULL, ~[KILL STOP 33], 8) = 0
5277  rt_sigsuspend(~[KILL STOP RTMIN 33] <unfinished ...>
which is something clone/thread releated.)  Does it work on other
platforms, or for other people? I've supplied below the command line
and the tests (basically, foo becomes foo1, foo2 etc to make the
concurrency-n tests distinct, but I doubt that is needed...)

maneki-neko$ qmtest run -j2 -f full concurrency-1 concurrency-2 concurrency-3 concurrency-4 concurrency-5
--- TEST RESULTS -------------------------------------------------------------

  concurrency-1                                 : PASS    

  concurrency-2                                 : PASS    


--- STATISTICS ---------------------------------------------------------------

       2        tests total
       2 (100%) tests PASS


qmtest: Interrupted.


Test concurrency-1

Class: command.ExecTest

Check a program's output and exit code.                     Help

Arguments
Program                                          echo       Help
Argument List                                    foo        Help
Standard Input                                              Help
Environment                                      None       Help
Exit Code                                        0          Help
Standard Output                                  foo        Help
Standard Error                                              Help
Target Group Pattern                             .*         Help
Prerequisite Tests                               None       Help
Resources                                        None       Help



maneki-neko$ more concurrency-?.qmt | cat
::::::::::::::
concurrency-1.qmt
::::::::::::::
<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
  'http://www.software-carpentry.com/qm/xml/extension'>
<extension class="command.ExecTest" kind="test"><argument name="environment"><set/></argument><argument name="program"><text>echo</text></argument><argument name="resources"><set/></argument><argument name="arguments"><set><text>foo</text></set></argument><argument name="stderr"><text/></argument><argument name="stdout"><text>foo
</text></argument><argument name="prerequisites"><set/></argument><argument name="stdin"><text/></argument><argument name="exit_code"><integer>0</integer></argument><argument name="target_group"><text>.*</text></argument></extension>::::::::::::::
concurrency-2.qmt
::::::::::::::
<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
  'http://www.software-carpentry.com/qm/xml/extension'>
<extension class="command.ExecTest" kind="test"><argument name="environment"><set/></argument><argument name="program"><text>echo</text></argument><argument name="resources"><set/></argument><argument name="arguments"><set><text>foo2</text></set></argument><argument name="stderr"><text/></argument><argument name="stdout"><text>foo2
</text></argument><argument name="prerequisites"><set/></argument><argument name="stdin"><text/></argument><argument name="exit_code"><integer>0</integer></argument><argument name="target_group"><text>.*</text></argument></extension>::::::::::::::
concurrency-3.qmt
::::::::::::::
<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
  'http://www.software-carpentry.com/qm/xml/extension'>
<extension class="command.ExecTest" kind="test"><argument name="environment"><set/></argument><argument name="program"><text>echo</text></argument><argument name="resources"><set/></argument><argument name="arguments"><set><text>foo3</text></set></argument><argument name="stderr"><text/></argument><argument name="stdout"><text>foo3
</text></argument><argument name="prerequisites"><set/></argument><argument name="stdin"><text/></argument><argument name="exit_code"><integer>0</integer></argument><argument name="target_group"><text>.*</text></argument></extension>::::::::::::::
concurrency-4.qmt
::::::::::::::
<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
  'http://www.software-carpentry.com/qm/xml/extension'>
<extension class="command.ExecTest" kind="test"><argument name="environment"><set/></argument><argument name="program"><text>echo</text></argument><argument name="resources"><set/></argument><argument name="arguments"><set><text>foo4</text></set></argument><argument name="stderr"><text/></argument><argument name="stdout"><text>foo4
</text></argument><argument name="prerequisites"><set/></argument><argument name="stdin"><text/></argument><argument name="exit_code"><integer>0</integer></argument><argument name="target_group"><text>.*</text></argument></extension>
::::::::::::::
concurrency-5.qmt
::::::::::::::
<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
  'http://www.software-carpentry.com/qm/xml/extension'>
<extension class="command.ExecTest" kind="test"><argument name="environment"><set/></argument><argument name="program"><text>echo</text></argument><argument name="resources"><set/></argument><argument name="arguments"><set><text>foo5</text></set></argument><argument name="stderr"><text/></argument><argument name="stdout"><text>foo5
</text></argument><argument name="prerequisites"><set/></argument><argument name="stdin"><text/></argument><argument name="exit_code"><integer>0</integer></argument><argument name="target_group"><text>.*</text></argument></extension>


From mark at codesourcery.com  Fri Jan 17 07:25:19 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 16 Jan 2003 23:25:19 -0800
Subject: [qmtest] does concurrency work anymore?
In-Reply-To: <20030114192741.BE417E25D4@maneki-neko>
Message-ID: <24400000.1042788319@warlock.codesourcery.com>



--On Tuesday, January 14, 2003 02:27:41 PM -0500 Mark Eichin 
<eichin at metacarta.com> wrote:

> I noticed this with a larger test using my own code, thought it might
> be my own tests, but then cooked it down to this case using only the
> built-in command.ExecTest and figured I should check with others:

We'll look into this tomorrow; certainly it *should* work, and we do test
with concurrent execution regularly -- but that doesn't prove that it
*does* work.  We'll see if we can replicate this on our machines.

Thanks,

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From oldham at codesourcery.com  Tue Jan 21 21:36:00 2003
From: oldham at codesourcery.com (Jeffrey Oldham)
Date: Tue, 21 Jan 2003 13:36:00 -0800
Subject: does concurrency work anymore?
Message-ID: <3E2DBD40.9070002@codesourcery.com>

On Tuesday, January 14, 2003 02:27:41 PM -0500 Mark Eichin 
<eichin at metacarta.com> wrote:

I noticed this with a larger test using my own code, thought it might
be my own tests, but then cooked it down to this case using only the
built-in command.ExecTest and figured I should check with others:

Thank you for the good bug report.  I was able to reproduce the problem 
on a uniprocessor Linux box.  The attached patch resolves the problem. 
The difficulty was that sometimes the list of available targets 
(processors) would sometimes become empty.

To access the change, check out the latest CVS sources, either from the 
head or from the 2.0 release branch (cvs update -rrelease-2-0-branch).

Thank you for using QMTest and for reporting the problem.

Thanks,
Jeffrey D. Oldham
oldham at codesourcery.com
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: concurrent.21Jan.11.5.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030121/2c24411f/attachment.ksh>

