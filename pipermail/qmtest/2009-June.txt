From nathan at auryn.com  Thu Jun 11 00:36:04 2009
From: nathan at auryn.com (nathan at auryn.com)
Date: Wed, 10 Jun 2009 17:36:04 -0700 (PDT)
Subject: Context variables for test databases
Message-ID: <1244680564.793912228@192.168.1.35>

Hi,

I'm wondering if QMTest has any way to pass context variables (or something similar) to test databases so that the test databases can use these values while figuring out what tests they contain.  Basically, I'd like to pass parameters to databases at load time rather than at creation time.

The use case I'm thinking of here is using shared libraries, which are built from my own code, as test databases (specifically, I'd like to use CppUnit test DLLs). ?The problem is that, at least in the build system I'm currently using, the shared libraries won't be in one fixed location that can be hard coded into a test database when it is created. ?Instead, they could be in pretty much arbitrary locations based on things like the build configuration, build directory location, install directory location, etc.

What I would like to be able to do is to pass something like a binary path to QMTest that test databases could use to find the shared libraries. ?However, the only way I can think of to do this right now is to use environment variables.

Is there a feature I've missed that would allow for this use case?  Or some way to achieve the same thing using a different method?

Thanks in advance,

Nathan LeZotte.




From stefan at codesourcery.com  Thu Jun 11 00:51:26 2009
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Wed, 10 Jun 2009 20:51:26 -0400
Subject: [qmtest] Context variables for test databases
In-Reply-To: <1244680564.793912228@192.168.1.35>
References: <1244680564.793912228@192.168.1.35>
Message-ID: <4A30550E.8020802@codesourcery.com>

nathan at auryn.com wrote:
> Hi,
>
> I'm wondering if QMTest has any way to pass context variables (or something similar) to test databases so that the test databases can use these values while figuring out what tests they contain.  Basically, I'd like to pass parameters to databases at load time rather than at creation time.
>   

A context is meant to be used to provide runtime information to tests. 
In contrast, the structure and content of a test database is not 
supposed to be runtime-configurable.

> The use case I'm thinking of here is using shared libraries, which are built from my own code, as test databases (specifically, I'd like to use CppUnit test DLLs).  The problem is that, at least in the build system I'm currently using, the shared libraries won't be in one fixed location that can be hard coded into a test database when it is created.  Instead, they could be in pretty much arbitrary locations based on things like the build configuration, build directory location, install directory location, etc.
>   

I haven't used CppUnit yet, and so I may misreading what you are saying. 
Specifically, I'm not sure what you mean by "using shared libraries...as 
test databases". Are you saying that the information about what tests 
exist is to be obtained by making calls into a (shared) library ?

I think I need to understand a little better what you mean in order to 
be able to suggest how to bind that to QMTest.

> What I would like to be able to do is to pass something like a binary path to QMTest that test databases could use to find the shared libraries.  However, the only way I can think of to do this right now is to use environment variables.
>   
Again, I may not understand in what way you want to use shared 
libraries. The most common case (which I have implemented already a 
couple of times with QMTest) is to have a set of tests consisting of 
source code that needs to be compiled and linked, so the test is a 
'CompilationTest', and paths to required libraries can easily be 
provided by context variables. However, none of this affects the test 
database structure itself, so only the tests themselves need to know 
about these variables.

I have also set up test databases where required variables were provided 
by the QMTest/configuration file. That file was generated via configure 
(i.e., autoconf), and so any required paths could be stored there at 
configure time.

Let me know if any of this helps, or if I misunderstand what you are 
trying to achieve.

Thanks,
       Stefan

-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718



From nathan at auryn.com  Thu Jun 11 02:37:22 2009
From: nathan at auryn.com (nathan at auryn.com)
Date: Wed, 10 Jun 2009 19:37:22 -0700 (PDT)
Subject: [qmtest] Context variables for test databases
In-Reply-To: <4A30550E.8020802@codesourcery.com>
References: <1244680564.793912228@192.168.1.35> <4A30550E.8020802@codesourcery.com>
Message-ID: <1244687842.90458033@192.168.1.35>

Hi Stefan,

Thanks for the prompt reply.

> I haven't used CppUnit yet, and so I may misreading what you are saying. 
> Specifically, I'm not sure what you mean by "using shared libraries...as 
> test databases". Are you saying that the information about what tests 
> exist is to be obtained by making calls into a (shared) library ?

I think you've got the basic idea. ?With CppUnit you can build shared libraries
that contain your compiled unit tests. ?The shared libraries expose functions
that let you query which tests are in each library, run each test, etc.

In my case, there's usually one unit test library for each normal (non-test)
library. ?It would be nice to organize this by making one QMTest test database
for each test library. ?The test databases would probably be instances of a
custom test database class that knows how to talk to test libraries and figure
out what tests are in them.

If the test libraries were always in the same location after being built, I
would just add the test library location as a parameter in the test database
class. ?However, since the test libraries could be in a variety of locations, I
need some way to pass the location to use to the test databases. ?In this case,
each test database would probably just store the name of the test library that
it is associated with. ?Each test database could then combine its test library
name with the passed in test library directory to figure out the specific
shared library to talk to.

> I have also set up test databases where required variables were provided 
> by the QMTest/configuration file. That file was generated via configure 
> (i.e., autoconf), and so any required paths could be stored there at 
> configure time.

I hadn't considered this option, but it might be workable. ?I'll look into it
and see if it can do what I want.

Regards,

Nathan.




From stefan at codesourcery.com  Thu Jun 11 03:17:13 2009
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Wed, 10 Jun 2009 23:17:13 -0400
Subject: [qmtest] Context variables for test databases
In-Reply-To: <1244687842.90458033@192.168.1.35>
References: <1244680564.793912228@192.168.1.35> <4A30550E.8020802@codesourcery.com> <1244687842.90458033@192.168.1.35>
Message-ID: <4A307739.8030209@codesourcery.com>

nathan at auryn.com wrote:

> I think you've got the basic idea.  With CppUnit you can build shared libraries
> that contain your compiled unit tests.  The shared libraries expose functions
> that let you query which tests are in each library, run each test, etc.

That sounds like you want to implement a new test database (python class 
deriving from qm.test.database), which maps the CppUnit library API to 
the test database API QMTest uses.

> In my case, there's usually one unit test library for each normal (non-test)
> library.  It would be nice to organize this by making one QMTest test database
> for each test library.  The test databases would probably be instances of a
> custom test database class that knows how to talk to test libraries and figure
> out what tests are in them.

Yes, exactly. Once you figure out how to pass the path variable to 
QMTest (using the configure trick, for example), you need to query the 
library for tests so qmtest can run them.

QMTest also has a 'MountDatabase' that allows you to bind multiple 
databases into one (mapping each 'terminal' library to a suite in the 
MountDatabase). That may be of interest, if you want to combine multiple 
test libraries, and access them uniformly, no matter their location.

Regards,
		Stefan

-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718


