From seefeld at sympatico.ca  Mon Aug 16 02:04:37 2004
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Sun, 15 Aug 2004 22:04:37 -0400
Subject: how to set up resources for tests
Message-ID: <41201635.9050606@sympatico.ca>

I'm working with a test database that uses a set
of executables to process input files. While the
test in itself is the processing of such an input
file, all these tests require the executables to
be built first.
I'm thus thinking of managing the compilation
of those executables by 'Resource' instances.
However, I can't find any documentation about
the API that I have to use in my test database
and test classes to define these resources
and the dependencies the test instances have
on them.
Could anybody help with pointers or references ?

Thanks,
		Stefan



From mark at codesourcery.com  Mon Aug 16 02:30:51 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 15 Aug 2004 19:30:51 -0700
Subject: [qmtest] how to set up resources for tests
In-Reply-To: <41201635.9050606@sympatico.ca>
References: <41201635.9050606@sympatico.ca>
Message-ID: <41201C5B.4000801@codesourcery.com>

Stefan Seefeld wrote:

> I'm working with a test database that uses a set
> of executables to process input files. While the
> test in itself is the processing of such an input
> file, all these tests require the executables to
> be built first.
> I'm thus thinking of managing the compilation
> of those executables by 'Resource' instances.
> However, I can't find any documentation about
> the API that I have to use in my test database
> and test classes to define these resources
> and the dependencies the test instances have
> on them.
> Could anybody help with pointers or references ?

A resource is definitely what you want here.  The documentation is a bit 
lacking, but a resource class is very much like a test class.    The 
temporary.TempDirectoryResource class that comes with QMTest is a good 
example of a resource class.

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From seefeld at sympatico.ca  Mon Aug 16 02:35:11 2004
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Sun, 15 Aug 2004 22:35:11 -0400
Subject: [qmtest] how to set up resources for tests
In-Reply-To: <41201C5B.4000801@codesourcery.com>
References: <41201635.9050606@sympatico.ca> <41201C5B.4000801@codesourcery.com>
Message-ID: <41201D5F.2030509@sympatico.ca>

Hi Mark,

Mark Mitchell wrote:

> A resource is definitely what you want here.  The documentation is a bit 
> lacking, but a resource class is very much like a test class.    The 
> temporary.TempDirectoryResource class that comes with QMTest is a good 
> example of a resource class.

That's good to know, thanks. Subclassing a Resource to compile me
test applet looks simple enough. My question was more aimed at how
to declare (to the database / test classes) this resource as a
dependency. (I'm using my own database / test classes, so I'd like
to know the API, not any GUI / xml way to do it).

Thanks,
		Stefan




From mark at codesourcery.com  Mon Aug 16 16:42:30 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 16 Aug 2004 09:42:30 -0700
Subject: [qmtest] how to set up resources for tests
In-Reply-To: <41201D5F.2030509@sympatico.ca>
References: <41201635.9050606@sympatico.ca> <41201C5B.4000801@codesourcery.com> <41201D5F.2030509@sympatico.ca>
Message-ID: <4120E3F6.1080307@codesourcery.com>

Stefan Seefeld wrote:

> Hi Mark,
> 
> Mark Mitchell wrote:
> 
>> A resource is definitely what you want here.  The documentation is a 
>> bit lacking, but a resource class is very much like a test class.    
>> The temporary.TempDirectoryResource class that comes with QMTest is a 
>> good example of a resource class.
> 
> 
> That's good to know, thanks. Subclassing a Resource to compile me
> test applet looks simple enough. My question was more aimed at how
> to declare (to the database / test classes) this resource as a
> dependency. (I'm using my own database / test classes, so I'd like
> to know the API, not any GUI / xml way to do it).

The TestDescriptor returned by your Database.GetTest method should have
an argument called "resources" that is a sequence of resource names, 
like [ "foo.bar", "baz" ].

You can look at XMLDatabase.__ParseTestDocument to see how that works; 
look at where it sets up arguments["resources"].

Let me know if I still didn't answer the question! :-)

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From njs at uclink.berkeley.edu  Sat Aug 21 04:48:56 2004
From: njs at uclink.berkeley.edu (Nathaniel Smith)
Date: Fri, 20 Aug 2004 21:48:56 -0700
Subject: [PATCH] Don't use elaborate configuration stuff to find library directory
Message-ID: <4130132C@bearmail.berkeley.edu>

The patch attached for review removes the 'lib_dir' configuration variable 
from everywhere it's used, and stops get_lib_directory from depending on 
qm.prefix and qm.lib_dir.

This is a little more inconsistent (get_lib_directory now works differently 
from the other get_*_directory functions), but it is simpler and more 
reliable, and, more importantly, it works even if we are not running the 
'qmtest' executable itself (which reaches into the qm namespace and defines 
qm.prefix).  Thus with this patch, it is possible to write third party scripts 
that do things like
  import qm.test.base
  results_iterator = qm.test.base.load_results(open("foo.qmr"), None)
  for result in results_iterator:
    ...

-- Nathaniel

-------------- next part --------------
A non-text attachment was scrubbed...
Name: remove-lib_dir.patch
Type: application/octet-stream
Size: 4832 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040820/d75c693e/attachment.obj>

From mark at codesourcery.com  Tue Aug 24 06:13:46 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 23 Aug 2004 23:13:46 -0700
Subject: [qmtest] [PATCH] Don't use elaborate configuration stuff to find
 library directory
In-Reply-To: <4130132C@bearmail.berkeley.edu>
References: <4130132C@bearmail.berkeley.edu>
Message-ID: <412ADC9A.80300@codesourcery.com>

Nathaniel Smith wrote:

>The patch attached for review removes the 'lib_dir' configuration variable 
>from everywhere it's used, and stops get_lib_directory from depending on 
>qm.prefix and qm.lib_dir.
>
>This is a little more inconsistent (get_lib_directory now works differently 
>from the other get_*_directory functions), but it is simpler and more 
>reliable, and, more importantly, it works even if we are not running the 
>'qmtest' executable itself (which reaches into the qm namespace and defines 
>qm.prefix).  Thus with this patch, it is possible to write third party scripts 
>that do things like
>  import qm.test.base
>  results_iterator = qm.test.base.load_results(open("foo.qmr"), None)
>  for result in results_iterator
>  
>
This is very clever.  Please check it in!

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



