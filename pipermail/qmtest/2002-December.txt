From hldnbrnd at uiuc.edu  Fri Dec  6 18:29:09 2002
From: hldnbrnd at uiuc.edu (Nicholas Hildenbrandt)
Date: Fri, 06 Dec 2002 12:29:09 -0600
Subject: How do I load a custom test class
Message-ID: <3DF0EC75.7010808@uiuc.edu>

I have a test class called SingleCTest in a file called singlesource.py. 
 How do I get this test class to load into qmtest.  I have tried setting 
the QMTEST_CLASS_PATH environment variable to singlesource.py's path, 
and tried putting the file in lib/qm/qm/test/classes with the other 
files, but it still doesn't show up in the gui.  How are you supposed to 
load it?

thanks,
Nick



From mark at codesourcery.com  Fri Dec  6 18:30:06 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 06 Dec 2002 10:30:06 -0800
Subject: [qmtest] How do I load a custom test class
In-Reply-To: <3DF0EC75.7010808@uiuc.edu>
Message-ID: <13260000.1039199406@warlock.codesourcery.com>



--On Friday, December 06, 2002 12:29:09 PM -0600 Nicholas Hildenbrandt 
<hldnbrnd at uiuc.edu> wrote:

> I have a test class called SingleCTest in a file called singlesource.py.
> How do I get this test class to load into qmtest.  I have tried setting
> the QMTEST_CLASS_PATH environment variable to singlesource.py's path, and
> tried putting the file in lib/qm/qm/test/classes with the other files,
> but it still doesn't show up in the gui.  How are you supposed to load it?

Are you using QMTest 2.0?

If so, you should do:

  qmtest register test singesource.SingleCTest

If you're using QMTest 1.1.x, you should upgrade. :-)

Thanks,

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Thu Dec 12 21:37:50 2002
From: eichin at metacarta.com (Mark Eichin)
Date: Thu, 12 Dec 2002 16:37:50 -0500 (EST)
Subject: kudos, interface, examples
Message-ID: <20021212213750.BB088E25E3@maneki-neko>

First: as someone who worked with dejagnu for years (Cygnus employee
#16 or so :-) I'm very happy to see something real in this space.
I've been encouraging my coworkers to read the qmtest manual just
because you got the *definitions* right, and have the clearest
expression of the problem that I've yet seen...

Next: Has anyone worked out tweaks to run the user interface without
javascript?  (well, really, "with lynx or w3m" -- I'm interested both
for remote use on my part [ssh lynx is easier to set up than adhoc
tunnels], and because a friend and fellow developer of mine is blind.)
It *looks* like it's just "add explicit go-buttons to the menus",
might make it a little uglier [so it should be an optional profile or
something], I just wondered if anyone else has made a start at it yet.
(It's already clear that using stunnel to point to a qmtest gui on a
fixed port will be a great way to do remote test management...)

Finally: I've got half a million years of perl experience (yes, I have
code written in perl *3* that still works with minor tweaks :-) but
I'm just starting to pick up python.  I need to build some Resource
classes, and started with a copy of classes/temporary.py to build a
MirrorResource that takes a "url" argument and calls wget -m on it to
mirror it into a temporary directory (so that the "real" test can just
declare a dependency on a resource-instance which is a mirror of a
specific url-tree.)  The problem I'm having is that qmtest conceals
some errors in resource class execution... or at least I can't find
where they go.  I'm doing separate syntax checking of the module,
classes.qmc is fine, the gui sees the class and lets me create a
resource from it, but at run time all I get is "Setup of a required
resource failed."  So: where do I look, or how do I trace (strace
wasn't informative enough) or testbench my Resource classes?

			_Mark_ <eichin at metacarta.com>


From eichin at metacarta.com  Thu Dec 12 23:29:04 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 12 Dec 2002 18:29:04 -0500
Subject: kudos, interface, examples
In-Reply-To: <20021212213750.BB088E25E3@maneki-neko>
References: <20021212213750.BB088E25E3@maneki-neko>
Message-ID: <7gpts6q0jj.fsf@pikespeak.metacarta.com>


> resource failed."  So: where do I look, or how do I trace (strace
> wasn't informative enough) or testbench my Resource classes?

Ah, it turned out to be simple: add "install pdb" to mirror.py, then
"pdb.set_trace()", run qmtest gui, and start stepping.  pdb actually
shows intermediate errors, and got things fixed.

Now to figure out how to use context info from ShellCommandTest and
I'll be all set...


From mark at codesourcery.com  Fri Dec 13 19:02:02 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 13 Dec 2002 11:02:02 -0800
Subject: [qmtest] kudos, interface, examples
In-Reply-To: <20021212213750.BB088E25E3@maneki-neko>
Message-ID: <8750000.1039806122@warlock.codesourcery.com>



--On Thursday, December 12, 2002 04:37:50 PM -0500 Mark Eichin 
<eichin at metacarta.com> wrote:

> First: as someone who worked with dejagnu for years (Cygnus employee
> #16 or so :-) I'm very happy to see something real in this space.
> I've been encouraging my coworkers to read the qmtest manual just
> because you got the *definitions* right, and have the clearest
> expression of the problem that I've yet seen...

Thanks for the compliments.

> Next: Has anyone worked out tweaks to run the user interface without
> javascript?

No -- but it shouldn't be hard.  The JavaScript isn't that sophisticated;
as you say, working out the menus is the biggest bit.  There are probably
a couple of other places where forms get filled in with some JavaScript
bits, and things like the pop-up help windows, but you could probably
get by without these.

You know the song I'm about so sing as an ex-Cygnus person, but I'll
sing it anyhow: we'd be happy to provide this or other customizations
and enhancements, provide support, or otherwise assist you in solving
your testing problems.

> where they go.  I'm doing separate syntax checking of the module,
> classes.qmc is fine, the gui sees the class and lets me create a
> resource from it, but at run time all I get is "Setup of a required
> resource failed."

When a test/resource throws an exception, the output should indicate that
and show a traceback.

I see that this works much better at the command-line than from the
GUI; in the GUI no information about the failing resource is presented.
In the command-line interface, a full trace-back is provided.  I've
added this enhancement near the top of our TODO list.  Your use of PDB
is a good work-around.

We've also found a bug in QMTest 2.0 whereby the "New Resource" command
on the GUI doesn't work; that will be corrected very shortly.  (This bug
is already fixed in CVS, but we have to respin the binaries.)

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Fri Dec 13 21:18:36 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 13 Dec 2002 16:18:36 -0500
Subject: [qmtest] kudos, interface, examples
In-Reply-To: <8750000.1039806122@warlock.codesourcery.com>
References: <8750000.1039806122@warlock.codesourcery.com>
Message-ID: <7g8yytipn7.fsf@pikespeak.metacarta.com>


> I see that this works much better at the command-line than from the
> GUI; in the GUI no information about the failing resource is presented.
> In the command-line interface, a full trace-back is provided.  I've

Ohh, yes, I see now -- "qmtest run --format full" gives a nice
"--- RESOURCES THAT DID NOT PASS ----------------------------------------------"
section.  Excellent.

Is this a good place to send code snippets?  As much for practice as
anything else, I tossed together a "URLField" derived from TextField,
so I could click on the url in a resource-instance page to check it.
"share & enjoy" :-)
			_Mark_ <eichin at metacarta.com>

import qm.common
from qm.fields import *

class URLField(TextField):
    """A text field containing a URL."""

    class_name = "url_field.URLField"

    def GetTypeDescription(self):
        return "a URL"

    def FormatValueAsHtml(self, value, style, name=None):
        if style != "new" and style != "edit":
            return '<a href="%s">%s</a>' % (value, value)
        else:
            return TextField.FormatValueAsHtml(self, value, style, name)



From mark at codesourcery.com  Fri Dec 13 23:02:05 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 13 Dec 2002 15:02:05 -0800
Subject: [qmtest] kudos, interface, examples
In-Reply-To: <7g8yytipn7.fsf@pikespeak.metacarta.com>
Message-ID: <14640000.1039820525@warlock.codesourcery.com>

> Is this a good place to send code snippets?  As much for practice as
> anything else, I tossed together a "URLField" derived from TextField,
> so I could click on the url in a resource-instance page to check it.
> "share & enjoy" :-)

Cool.

If you'd like us to include your patches in QMTest, please see:

  http://www.codesourcery.com/contributions?program=QMTest

for instructions and annoying paperwork. :-)

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From ghost at cs.msu.su  Sun Dec 15 06:41:32 2002
From: ghost at cs.msu.su (Vladimir Prus)
Date: Sun, 15 Dec 2002 09:41:32 +0300
Subject: [qmtest] kudos, interface, examples
In-Reply-To: <14640000.1039820525@warlock.codesourcery.com>
References: <14640000.1039820525@warlock.codesourcery.com>
Message-ID: <200212150941.32379.ghost@cs.msu.su>

Mark Mitchell wrote:
> > Is this a good place to send code snippets?  As much for practice as
> > anything else, I tossed together a "URLField" derived from TextField,
> > so I could click on the url in a resource-instance page to check it.
> > "share & enjoy" :-)
>
> Cool.
>
> If you'd like us to include your patches in QMTest, please see:
>
>   http://www.codesourcery.com/contributions?program=QMTest
>
> for instructions and annoying paperwork. :-)

Hmm... I'm getting a little embarassed repeating this, but what happened
with my attachement support patch? It's not applied in CVS HEAD, AFAIKT.

- Volodya



From mark at codesourcery.com  Sun Dec 15 17:45:27 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 15 Dec 2002 09:45:27 -0800
Subject: [qmtest] kudos, interface, examples
In-Reply-To: <200212150941.32379.ghost@cs.msu.su>
Message-ID: <7860000.1039974327@warlock.codesourcery.com>


> Hmm... I'm getting a little embarassed repeating this, but what happened
> with my attachement support patch? It's not applied in CVS HEAD, AFAIKT.

I embarassed too -- I don't remember that patch.

Send it to me privately, and I'll review it within a day or two.  I
promise.

Thanks,

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From ghost at cs.msu.su  Mon Dec 16 07:19:55 2002
From: ghost at cs.msu.su (Vladimir Prus)
Date: Mon, 16 Dec 2002 10:19:55 +0300
Subject: GUI changes
Message-ID: <200212161019.55826.ghost@cs.msu.su>


I'm probably late making this comment, but recent GUI changes
are probably not as good. Whenever I move a mouse over
menu, it pops up. That's very annoying when I just want to click
"back" or "forward" button. Somehow I use those very often.

Is there some solution? 

Of course, I can revert to the previous menu logic (did it already),
but that's inconvenient.

- Volodya


From eichin at metacarta.com  Mon Dec 16 07:50:23 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 16 Dec 2002 02:50:23 -0500
Subject: [qmtest] kudos, interface, examples
In-Reply-To: <14640000.1039820525@warlock.codesourcery.com>
References: <14640000.1039820525@warlock.codesourcery.com>
Message-ID: <7gy96q9zcw.fsf@pikespeak.metacarta.com>

Will do (probably via public-domain/disclaimer, but of course I have
to get someone one level up to do it.  Easy enough, once I get around
to it.)



From eichin at metacarta.com  Mon Dec 16 08:01:57 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 16 Dec 2002 03:01:57 -0500
Subject: derivation issues?
In-Reply-To: <200212161019.55826.ghost@cs.msu.su>
Message-ID: <7gu1he9ytm.fsf@pikespeak.metacarta.com>

Is there a reason I can't derive from (for example) ShellScriptTest?
(I'm constructing a SubstitutedShellScriptTest using
SubstitutionField, but it appears I can't "get at" ShellScriptTest via
a simple import.)


From mark at codesourcery.com  Mon Dec 16 08:45:11 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 16 Dec 2002 00:45:11 -0800
Subject: [qmtest] derivation issues?
In-Reply-To: <7gu1he9ytm.fsf@pikespeak.metacarta.com>
Message-ID: <93720000.1040028311@warlock.codesourcery.com>



--On Monday, December 16, 2002 03:01:57 AM -0500 "eichin at metacarta.com" 
<eichin at metacarta.com> wrote:

> Is there a reason I can't derive from (for example) ShellScriptTest?
> (I'm constructing a SubstitutedShellScriptTest using
> SubstitutionField, but it appears I can't "get at" ShellScriptTest via
> a simple import.)

I'd think you should be able to do that; what happens with:

  from command import ShellScriptTest

  class SubstitutedShellScriptTest(ShellScriptTest):
    pass

?

That should give you a new test class that actually behaves just like the
old one.

You'll have to do the "qmtest register" dance to get it recognized.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From mark at codesourcery.com  Mon Dec 16 08:46:18 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 16 Dec 2002 00:46:18 -0800
Subject: [qmtest] GUI changes
In-Reply-To: <200212161019.55826.ghost@cs.msu.su>
Message-ID: <94210000.1040028378@warlock.codesourcery.com>



--On Monday, December 16, 2002 10:19:55 AM +0300 Vladimir Prus 
<ghost at cs.msu.su> wrote:

>
> I'm probably late making this comment, but recent GUI changes
> are probably not as good. Whenever I move a mouse over
> menu, it pops up. That's very annoying when I just want to click
> "back" or "forward" button. Somehow I use those very often.

What about changing the menus so that you have to click on them to
activate them?

We can do that easily -- by changing the "onmouseover" handler to be
an "onclick" handler, and perhaps fiddling some of the other stuff.

Thoughts?

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From ghost at cs.msu.su  Mon Dec 16 08:56:44 2002
From: ghost at cs.msu.su (Vladimir Prus)
Date: Mon, 16 Dec 2002 11:56:44 +0300
Subject: [qmtest] GUI changes
In-Reply-To: <94210000.1040028378@warlock.codesourcery.com>
References: <94210000.1040028378@warlock.codesourcery.com>
Message-ID: <200212161156.44871.ghost@cs.msu.su>

Mark Mitchell wrote:
> --On Monday, December 16, 2002 10:19:55 AM +0300 Vladimir Prus
>
> <ghost at cs.msu.su> wrote:
> > I'm probably late making this comment, but recent GUI changes
> > are probably not as good. Whenever I move a mouse over
> > menu, it pops up. That's very annoying when I just want to click
> > "back" or "forward" button. Somehow I use those very often.
>
> What about changing the menus so that you have to click on them to
> activate them?
>
> We can do that easily -- by changing the "onmouseover" handler to be
> an "onclick" handler, and perhaps fiddling some of the other stuff.
>
> Thoughts?

This looks like a good idea!

- Volodya

P.S. BTW, what was the motivation for the change? I see it uses JavaScript, so
desire to eliminate JS could not be the reason. Or am I wrong?

- Volodya





From mark at codesourcery.com  Mon Dec 16 16:22:43 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 16 Dec 2002 08:22:43 -0800
Subject: [qmtest] GUI changes
In-Reply-To: <200212161156.44871.ghost@cs.msu.su>
Message-ID: <100900000.1040055763@warlock.codesourcery.com>

>> Thoughts?
>
> This looks like a good idea!

OK, we'll see about making that work.

> P.S. BTW, what was the motivation for the change? I see it uses
> JavaScript, so desire to eliminate JS could not be the reason. Or am I
> wrong?

We feel that it's OK to use JavaScript in the GUI; JavaScript (or, more
properly ECMA) is pretty universal these days and will only get more so.

Of course, it would be nice to have a non-JavaScript version too,
especially for browsers like Lynx where JavaScript doesn't really make
sense.

The motivation for the change was really aesthetics; the drop-down boxes
as menus weren't very attractive.  The new menus look more like normal
menus.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From ghost at cs.msu.su  Mon Dec 16 16:33:34 2002
From: ghost at cs.msu.su (Vladimir Prus)
Date: Mon, 16 Dec 2002 19:33:34 +0300
Subject: [qmtest] GUI changes
In-Reply-To: <100900000.1040055763@warlock.codesourcery.com>
References: <100900000.1040055763@warlock.codesourcery.com>
Message-ID: <3DFE005E.205@cs.msu.su>

Mark Mitchell wrote:
>>> Thoughts?
>>
>>
>> This looks like a good idea!
> 
> 
> OK, we'll see about making that work.

I've played with this locally and this works. The only problem
is that you can't use <a> with empty href for menu items:
brower will try to access "" on click then. Guess that plays
with CSS will be needed to achive the same look as for links.

>> P.S. BTW, what was the motivation for the change? I see it uses
>> JavaScript, so desire to eliminate JS could not be the reason. Or am I
>> wrong?
> 
> 
> We feel that it's OK to use JavaScript in the GUI; JavaScript (or, more
> properly ECMA) is pretty universal these days and will only get more so.

I completely agree.

> Of course, it would be nice to have a non-JavaScript version too,
> especially for browsers like Lynx where JavaScript doesn't really make
> sense.
> 
> The motivation for the change was really aesthetics; the drop-down boxes
> as menus weren't very attractive.  The new menus look more like normal
> menus.

OK. As far as they pop up on click (which is doable), I've no objections.

- Volodya





From eichin at metacarta.com  Mon Dec 16 17:57:19 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 16 Dec 2002 12:57:19 -0500
Subject: [qmtest] derivation issues?
In-Reply-To: <93720000.1040028311@warlock.codesourcery.com>
References: <93720000.1040028311@warlock.codesourcery.com>
Message-ID: <7g3coxn8xs.fsf@pikespeak.metacarta.com>

indeed, I pulled too many import lines from internal code...  reducing
it to

import os
import qm.common
from command import ShellScriptTest
from file import SubstitutionField

worked (as did your example.)


From eichin at metacarta.com  Mon Dec 16 21:56:14 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 16 Dec 2002 16:56:14 -0500
Subject: [qmtest] GUI changes
In-Reply-To: <94210000.1040028378@warlock.codesourcery.com>
References: <94210000.1040028378@warlock.codesourcery.com>
Message-ID: <7gisxtljb5.fsf@pikespeak.metacarta.com>

Just checking if this is intentional (or an artifact of my own
somewhat bludgeoned package/install):  when I create a test, I get a 
"Resources

Resources on which this test depends. "

stanza towards the bottom, which has two buttons, [add another] and
[remove selected], but doesn't have the selection box 1.1.5 had.  if I
hit add-another, I get an empty text-edit box with a checkbutton next
to it.   (Needless to say, I prefer the other way, for a gui...)

This is using galeon (debian x86 1.2.7-5), if that matters... but if I
try netscape (4.77), I get


"JavaScript Error: http://127.0.0.1:34948/common.js, line 387:

o has no properties. 
JavaScript Error: http://127.0.0.1:34948/common.js, line 387:

o has no properties. 
JavaScript Error: http://127.0.0.1:34948/common.js, line 387:

o has no properties. 

Too many errors. No further JavaScript errors will be displayed for
this page."

when I try to use any of the drop downs, in other words "it doesn't
work at all"...


From mark at codesourcery.com  Tue Dec 17 03:23:05 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 16 Dec 2002 19:23:05 -0800
Subject: [qmtest] GUI changes
In-Reply-To: <7gisxtljb5.fsf@pikespeak.metacarta.com>
Message-ID: <1500000.1040095385@localhost>



--On Monday, December 16, 2002 04:56:14 PM -0500 eichin at metacarta.com wrote:

> Just checking if this is intentional (or an artifact of my own
> somewhat bludgeoned package/install):  when I create a test, I get a
> "Resources
>
> Resources on which this test depends. "
>
> stanza towards the bottom, which has two buttons, [add another] and
> [remove selected], but doesn't have the selection box 1.1.5 had.  if I
> hit add-another, I get an empty text-edit box with a checkbutton next
> to it.   (Needless to say, I prefer the other way, for a gui...)

This behavior is intentional.  (In a way, it's a good thing if people
object to the 2.0 GUI saying "I liked 1.1.5 better" -- at least that
means we used to know how to do things well...)

Some people objected to the use of pop-ups; some people have actually
disabled them entirely in their browsers.  So, we were trying to minimize
that.  And, a selection box with 15,000 entries turns out not to work
very well. :-)

The current bit is cumbersome partly because Mozilla doesn't know about
the full DOM model for tables; you can't add table rows and such using
the DOM.  So, we have to go back to the server.

What we really want is a hierarchical selector gizmo.  We'll get there...

> This is using galeon (debian x86 1.2.7-5), if that matters... but if I
> try netscape (4.77), I get

Right; note that 2.0 explicitly requires Mozilla/Netscape 6/IE 6.

We decided that Netscape 4 was dead.  Perhaps reports of its death have
been greatly exaggerated.  We're trying to move towards XHTML/DOM, and
Netscape 4 makes that pretty tough.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Tue Dec 17 13:56:10 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 17 Dec 2002 08:56:10 -0500
Subject: [qmtest] GUI changes
In-Reply-To: <1500000.1040095385@localhost>
References: <1500000.1040095385@localhost>
Message-ID: <7gwum8n405.fsf@pikespeak.metacarta.com>


> that.  And, a selection box with 15,000 entries turns out not to work
> very well. :-)

Yeah, it occurred to me after sending it that it was probably a
scaling issue; it does (1) increase the learning curve (2)
discourages verbose resource names.  (if it were an application, I'd
say "Ok, then I want completion" :-)

I'm also not sure that I'd want to work with the gui at all once I had
15k resources (as it is I'm keeping the test database under CVS, but I
haven't tried generating any of the xml from scripts - yet; I
certainly plan to at some point, since we have matrix tests...)

> What we really want is a hierarchical selector gizmo.  We'll get there...

Yeah, you're right :-) that would encourage hierarchical organization
of tests, which is an even better thing.  (I'm fond of the design
principle that right things should be easy to express, and "wrong"
things should take more work... oddly enough, Ada95 demonstrates this
-- at least when compared to C or C++, which support the reverse.)

> We decided that Netscape 4 was dead.  Perhaps reports of its death have
> been greatly exaggerated.  We're trying to move towards XHTML/DOM, and

I'd certainly like to treat it as dead - I'd only tried it at all
because it was what came up by default with 1.1.3, and was testing to
make sure it wasn't a galeon issue.


From eichin at metacarta.com  Tue Dec 17 19:52:27 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 17 Dec 2002 14:52:27 -0500
Subject: [qmtest] GUI changes
In-Reply-To: <7gwum8n405.fsf@pikespeak.metacarta.com>
References: <1500000.1040095385@localhost>
	<7gwum8n405.fsf@pikespeak.metacarta.com>
Message-ID: <7gu1hctock.fsf@pikespeak.metacarta.com>

> that.  And, a selection box with 15,000 entries turns out not to work
> very well. :-)

Ooh, nastier problem: a mistyped resource name isn't checked until the
test run, and even there, it only shows up in qmtest full, not in the
gui (the gui points only that there's an "issue" with the name, it
takes "qmtest run -f full" to actually see 
    qmtest.exception:
      qm.test.database.NoSuchResourceError: There is no resource with the
      resource ID "mcprod".

and
--- RESOURCES THAT DID NOT PASS ----------------------------------------------

  Setup mcprod                                  : ERROR   
    Resource is missing from the database.

This is tempting me to roll back to the old interface :-)


From eichin at metacarta.com  Tue Dec 17 20:35:38 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 17 Dec 2002 15:35:38 -0500
Subject: [qmtest] derivation issues?
In-Reply-To: <7g3coxn8xs.fsf@pikespeak.metacarta.com>
References: <93720000.1040028311@warlock.codesourcery.com>
	<7g3coxn8xs.fsf@pikespeak.metacarta.com>
Message-ID: <7gd6o0tmcl.fsf@pikespeak.metacarta.com>

Today's problem: how does one set argument values in parent classes
correctly?  In particular, I've got something derived from
ShellScriptTest that runs a find [and does some other things with
arguments, so it isn't just an instance, it is a new class of test.]

I can just set self.script in the the Run method, before calling the
parent Run... but I'd really like to, for example, set Hidden on that
argument, or at least set the default_value to my find command so that
the user sees it.  Thoughts?


From eichin at metacarta.com  Tue Dec 17 21:08:25 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 17 Dec 2002 16:08:25 -0500
Subject: [qmtest] derivation issues?
In-Reply-To: <7gd6o0tmcl.fsf@pikespeak.metacarta.com>
References: <93720000.1040028311@warlock.codesourcery.com>
	<7g3coxn8xs.fsf@pikespeak.metacarta.com>
	<7gd6o0tmcl.fsf@pikespeak.metacarta.com>
Message-ID: <7g1y4gtkty.fsf@pikespeak.metacarta.com>

oh, hmm, I wonder if the fact that command.ShellScriptTest has a
Set(TextField) name="arguments" (which sets self.arguments, right?) is
what is giving me trouble...


From mark at codesourcery.com  Wed Dec 18 03:27:09 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 17 Dec 2002 19:27:09 -0800
Subject: [qmtest] GUI changes
In-Reply-To: <7gu1hctock.fsf@pikespeak.metacarta.com>
Message-ID: <3310000.1040182029@localhost>



--On Tuesday, December 17, 2002 02:52:27 PM -0500 eichin at metacarta.com 
wrote:

>> that.  And, a selection box with 15,000 entries turns out not to work
>> very well. :-)
>
> Ooh, nastier problem: a mistyped resource name isn't checked until the
> test run

A fair criticism; we'll fix that in the next few days.

Thanks,

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From mark at codesourcery.com  Wed Dec 18 05:28:00 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 17 Dec 2002 21:28:00 -0800
Subject: Resource results in the GUI
Message-ID: <200212180528.gBI5S0901329@localhost.localdomain>


I've checked a change into CVS to display resource results in the GUI;
when a test fails because a resource could not be set up a link to the
resource result page is now available.

FYI,

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From svlu at enea.se  Wed Dec 18 17:38:19 2002
From: svlu at enea.se (Sven Lundblad)
Date: Wed, 18 Dec 2002 18:38:19 +0100
Subject: Idle state of targets
Message-ID: <3E00B28B.20106@enea.se>

Hi,

QMTest today assumes that the idle state of a target is an QMTest 
internal state, i.e. whenever it is idle or not only depends on the 
tests scheduled to it by the execution engine. However we have embedded 
targets that we intend to share among many user who all can run QMTest 
therefor when someone starts QMTest some targets may be occupied by 
somebody else, this can be detected by our target class implementation, 
which reserves the target, but there is no way to let the execution 
engine know about that, i.e. the target idle state is actually external 
to QMTest.

I would like to implement an API to QMTest (and submit that as a patch) 
that does one of two things:
(1) Asynchronously notifies the execution engine that the idle state of 
the target has changed.
(2) Dynamically add a new target.

The alternative (1) would be my first choice. Typically when the target 
is started it would check whenever it is already allocated and in that 
case notify the execution engine that the idle state has changed (since 
QMTest assumes that all targets are idle from the beginning) then the 
execution engine would call target.IsIdle() to update its state. Our 
target class has its own thread that can detect when the state change again.

What are your thoughts about this?

Regards,
Sven Lundblad



From mark at codesourcery.com  Wed Dec 18 20:18:09 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 18 Dec 2002 12:18:09 -0800
Subject: [qmtest] Idle state of targets
In-Reply-To: <3E00B28B.20106@enea.se>
Message-ID: <74320000.1040242689@warlock.codesourcery.com>



--On Wednesday, December 18, 2002 06:38:19 PM +0100 Sven Lundblad 
<svlu at enea.se> wrote:

> Hi,
>
> QMTest today assumes that the idle state of a target is an QMTest
> internal state, i.e. whenever it is idle or not only depends on the tests
> scheduled to it by the execution engine. However we have embedded targets
> that we intend to share among many user who all can run QMTest therefor
> when someone starts QMTest some targets may be occupied by somebody else,
> this can be detected by our target class implementation, which reserves
> the target, but there is no way to let the execution engine know about
> that, i.e. the target idle state is actually external to QMTest.
>
> I would like to implement an API to QMTest (and submit that as a patch)
> that does one of two things: (1) Asynchronously notifies the execution
> engine that the idle state of the target has changed.

We used to have something that was not too far from that, but it was very
hard to avoid deadlocks, so we went for something simpler.

It would be nice to have the facility you propose.

One key requirement is that we avoid spinning in the ExecutionEngine;
if there are no idle targets we want to be asleep so that we don't load
the machine.

Thanks,

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Wed Dec 18 20:40:06 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 18 Dec 2002 15:40:06 -0500
Subject: [qmtest] derivation issues?
In-Reply-To: <7g1y4gtkty.fsf@pikespeak.metacarta.com>
References: <93720000.1040028311@warlock.codesourcery.com>
	<7g3coxn8xs.fsf@pikespeak.metacarta.com>
	<7gd6o0tmcl.fsf@pikespeak.metacarta.com>
	<7g1y4gtkty.fsf@pikespeak.metacarta.com>
Message-ID: <7g65trgixl.fsf@pikespeak.metacarta.com>

eichin at metacarta.com writes:

> oh, hmm, I wonder if the fact that command.ShellScriptTest has a
> Set(TextField) name="arguments" (which sets self.arguments, right?) is
> what is giving me trouble...


I think it is (copying to MyShellScriptTest and changing it to
innerarguments seems to have helped, but I've changed other things
too, as I get my footing.)  Part of my problem is that the
ShellScriptTest is already the deepest bit of derivation in the tree
(mmm SourceNavigator) and it isn't "exporting" anything useful
upstream... even ExecTestBase is a good parent class only because it
provides RunProgram explicitly, it would be hard to write
ShellScriptTest to have, instead, stuffed it's script into a file and
changed the args to a ShellCommandTest parent intsead, right?


From eichin at metacarta.com  Wed Dec 18 21:54:15 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 18 Dec 2002 16:54:15 -0500
Subject: typo
In-Reply-To: <74320000.1040242689@warlock.codesourcery.com>
Message-ID: <7gsmwvf0xk.fsf@pikespeak.metacarta.com>

Index: fields.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/fields.py,v
retrieving revision 1.60
diff -u -r1.60 fields.py
--- fields.py   1 Dec 2002 20:10:12 -0000       1.60
+++ fields.py   18 Dec 2002 21:53:48 -0000
@@ -2009,7 +2009,7 @@
     The data and time is stored as seconds since the start of the UNIX
     epoch, UTC (the semantics of the standard 'time' function), with
     one-second precision.  User representations of 'TimeField' fields
-    show one-minue precision."""
+    show one-minute precision."""
 
     class_name = "qm.fields.TimeField"
 



From eichin at metacarta.com  Wed Dec 18 23:20:47 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 18 Dec 2002 18:20:47 -0500
Subject: FileContentsTest multiple substitutions?
In-Reply-To: <74320000.1040242689@warlock.codesourcery.com>
Message-ID: <7g3cougbhs.fsf@pikespeak.metacarta.com>

Does adding a second substitution pair to a FileContentsTest instance
work for anyone else? I keep getting blanks...



From eichin at metacarta.com  Wed Dec 18 23:43:51 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 18 Dec 2002 18:43:51 -0500
Subject: [qmtest] FileContentsTest multiple substitutions?
In-Reply-To: <7g3cougbhs.fsf@pikespeak.metacarta.com>
References: <7g3cougbhs.fsf@pikespeak.metacarta.com>
Message-ID: <7gptryevuw.fsf@pikespeak.metacarta.com>

ahh, both mozilla and galeon give

> Error: pattern has no properties
> In http://127.0.0.1:xxxx/test/edit-test?id=ftest, Line 371

when attempting to change *any* of the substitution fields once there
is more than one present (so if you fill in one, create a second, your
changes to the first don't take either.)  Now to figure out how to
install "venkman" under debian...



From eichin at metacarta.com  Thu Dec 19 01:01:20 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 18 Dec 2002 20:01:20 -0500
Subject: [qmtest] FileContentsTest multiple substitutions?
In-Reply-To: <7gptryevuw.fsf@pikespeak.metacarta.com>
References: <7g3cougbhs.fsf@pikespeak.metacarta.com>
	<7gptryevuw.fsf@pikespeak.metacarta.com>
Message-ID: <7gel8eddpb.fsf@pikespeak.metacarta.com>

This fixes it for me - I'm not sure if it is a good fix (having not
heard if anyone else has the problem, it may just be due to my not
understanding DOM) but it at least makes some sense...  _Mark_

[ps.  Consider this public domain, it's a trivial fix, if you need
paperwork for even this, I'll try and get it tomorrow...]

Index: file.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/classes/file.py,v
retrieving revision 1.13
diff -u -r1.13 file.py
--- file.py     17 Oct 2002 20:38:15 -0000      1.13
+++ file.py     19 Dec 2002 00:59:12 -0000
@@ -96,7 +96,7 @@
               <td>&nbsp;</td>
               <td><input type="text"
                          size="40"
-                         name="pattern"
+                         name="pattern%(name)s"
                          onchange="update_substitution();"
                          value="%(pattern)s"/></td>
              </tr>
@@ -105,7 +105,7 @@
               <td>&nbsp;</td>
               <td><input type="text"
                          size="40"
-                         name="substitution"
+                         name="substitution%(name)s"
                          onchange="update_substitution();"
                          value="%(replacement)s"/></td>
              </tr>
@@ -113,9 +113,9 @@
             <script language="JavaScript">
             function update_substitution()
             {
-              var pattern = document.form.pattern.value;
+              var pattern = document.form.pattern%(name)s.value;
               pattern = pattern.replace(/;/g, "\\;");
-              var substitution = document.form.substitution.value;
+              var substitution = document.form.substitution%(name)s.value;
               substitution = substitution.replace(/;/g, "\\;");
               document.form.%(name)s.value = pattern + ";" + substitution;
             }


From mark at codesourcery.com  Thu Dec 19 05:50:01 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 18 Dec 2002 21:50:01 -0800
Subject: Patch for resource/prerequisite GUI issue
Message-ID: <200212190550.gBJ5o1N05747@localhost.localdomain>


This patch (applied in CVS) causes the GUI to present lists of choices
for prerequisites and resources, rather than requiring the user to
type an appropriate name.  This isn't prefect (it won't scale to very
large databases), but it is clearly more usable for small databases,
and still avoids the pop-ups used in QMTest 1.x.

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com

2002-12-18  Mark Mitchell  <mark at codesourcery.com>

	* qm/fields.py (ChoiceField): New class.
	* qm/test/test.py (Test.ResourceField): Likewise.
	(Test.TestField): Likewise.
	(Test.arguments): Use them.

Index: qm/fields.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/fields.py,v
retrieving revision 1.60
diff -c -5 -p -r1.60 fields.py
*** qm/fields.py	1 Dec 2002 20:10:12 -0000	1.60
--- qm/fields.py	19 Dec 2002 05:48:26 -0000
*************** class BooleanField(EnumerationField):
*** 1998,2008 ****
          # Construct the base class.
          EnumerationField.__init__(self, name, default_value,
                                    ["true", "false"], **properties)
  
          
!                                   
  ########################################################################
  
  class TimeField(IntegerField):
      """A field containing a date and time.
  
--- 1998,2045 ----
          # Construct the base class.
          EnumerationField.__init__(self, name, default_value,
                                    ["true", "false"], **properties)
  
          
! 
! class ChoiceField(TextField):
!     """An 'ChoiceField' allows choosing one of several values.
! 
!     An 'ChoiceField' is similar to an 'EnumerationField' -- but the
!     choices for an 'ChoiceField' are computed dynamically, rather than
!     chosen statically."""
! 
!     def FormatValueAsHtml(self, value, style, name = None):
! 
!         if style not in ("new", "edit"):
!             return qm.fields.TextField.FormatValueAsHtml(self, value,
!                                                          style, name)
! 
!         # For an editable field, give the user a choice of available
!         # resources.
!         result = "<select"
!         if name:
!             result += ' name="%s"' % name
!         result += ">"
!         for r in self.GetItems():
!             result += '<option value="%s"' % r
!             if r == value:
!                 result += ' selected="1"'
!             result += '>%s</option>' % r
!         result += "</select>"
! 
!         return result
!     
! 
!     def GetItems(self):
!         """Return the options from which to choose.
! 
!         returns -- A sequence of strings, each of which will be
!         presented as a choice for the user."""
! 
!         raise NotImplementedError
!         
  ########################################################################
  
  class TimeField(IntegerField):
      """A field containing a date and time.
  
Index: qm/test/test.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/test.py,v
retrieving revision 1.11
diff -c -5 -p -r1.11 test.py
*** qm/test/test.py	17 Oct 2002 20:38:15 -0000	1.11
--- qm/test/test.py	19 Dec 2002 05:48:26 -0000
*************** class TargetGroupField(qm.fields.TextFie
*** 51,60 ****
--- 51,61 ----
              desc = desc + "  * " + g + "\n"
  
          return desc
  
  
+ 
  class Test(qm.test.runnable.Runnable):
      """A 'Test' is run to check for correct behavior.
  
      A 'Test' performs some check on the system being tested, and
      indicates whether the check was successful, or whether the
*************** class Test(qm.test.runnable.Runnable):
*** 107,116 ****
--- 108,140 ----
                    qm.test.result.Result.ERROR ],
                  **properties)
  
  
  
+     class ResourceField(qm.fields.ChoiceField):
+         """A 'ResourceField' contains the name of a resource.
+ 
+         The exact format of the name depends on the test database in use."""
+ 
+         def GetItems(self):
+ 
+             database = qm.test.cmdline.get_qmtest().GetDatabase()
+             return database.GetResourceIds()
+ 
+ 
+ 
+     class TestField(qm.fields.ChoiceField):
+         """A 'TestField' contains the name of a resource.
+ 
+         The exact format of the name depends on the test database in use."""
+ 
+         def GetItems(self):
+ 
+             database = qm.test.cmdline.get_qmtest().GetDatabase()
+             return database.GetTestIds()
+ 
+ 
      arguments = [
          TargetGroupField(
              name="target_group",
              title="Target Group Pattern",
              description="""The targets on which this test can run.
*************** class Test(qm.test.runnable.Runnable):
*** 122,132 ****
              default_value=".*"
              ),
          qm.fields.SetField(
              qm.fields.TupleField(
                  "prerequisites",
!                 (qm.fields.TextField(
                      name = "test_id",
                      title = "Test",
                      description = """The name of the prerequisite test.""",
                      not_empty_text = "true",
                      ),
--- 146,156 ----
              default_value=".*"
              ),
          qm.fields.SetField(
              qm.fields.TupleField(
                  "prerequisites",
!                 (TestField(
                      name = "test_id",
                      title = "Test",
                      description = """The name of the prerequisite test.""",
                      not_empty_text = "true",
                      ),
*************** class Test(qm.test.runnable.Runnable):
*** 145,155 ****
                  Every test can depend on other tests.  Those tests will be
                  run before this test.  If the prerequisite test does not
                  have the outcome indicated, this test will not be run.""",
                  )),
          qm.fields.SetField(
!             qm.fields.TextField(
                  name = "resources",
                  title = "Resources",
                  description = """Resources on which this test depends.""",
                  not_empty_text = "true",
                  )),
--- 169,179 ----
                  Every test can depend on other tests.  Those tests will be
                  run before this test.  If the prerequisite test does not
                  have the outcome indicated, this test will not be run.""",
                  )),
          qm.fields.SetField(
!             ResourceField(
                  name = "resources",
                  title = "Resources",
                  description = """Resources on which this test depends.""",
                  not_empty_text = "true",
                  )),


From mark at codesourcery.com  Thu Dec 19 06:22:51 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 18 Dec 2002 22:22:51 -0800
Subject: [qmtest] FileContentsTest multiple substitutions?
In-Reply-To: <7gel8eddpb.fsf@pikespeak.metacarta.com>
Message-ID: <162800000.1040278971@warlock.codesourcery.com>



--On Wednesday, December 18, 2002 08:01:20 PM -0500 "eichin at metacarta.com" 
<eichin at metacarta.com> wrote:

> This fixes it for me - I'm not sure if it is a good fix (having not
> heard if anyone else has the problem, it may just be due to my not
> understanding DOM) but it at least makes some sense...  _Mark_

You're on the right track.  That cruft is disgusting; we revamped some
aspects of Fields for 2.0 so that we would't have to do this kind of thing;
that's what tuple fields are for.

Your change is correct, but I will see if I can clean this up a bit.  If
I can't, your way will work.

> [ps.  Consider this public domain, it's a trivial fix, if you need
> paperwork for even this, I'll try and get it tomorrow...]

We need paperwork for *everything*.  (We are a tad paranoid...)

Thanks,

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From mark at codesourcery.com  Thu Dec 19 07:37:05 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 18 Dec 2002 23:37:05 -0800
Subject: [qmtest] FileContentsTest multiple substitutions?
In-Reply-To: <7gel8eddpb.fsf@pikespeak.metacarta.com>
Message-ID: <14990000.1040283425@warlock.codesourcery.com>



--On Wednesday, December 18, 2002 08:01:20 PM -0500 "eichin at metacarta.com" 
<eichin at metacarta.com> wrote:

> This fixes it for me - I'm not sure if it is a good fix (having not
> heard if anyone else has the problem, it may just be due to my not
> understanding DOM) but it at least makes some sense...  _Mark_

I checked in this version.  Note the NEWS entry; we could make this
backwards-compatible if we need to do so.

Do people have lots of FileContentsTests out there?

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com

Index: ChangeLog
===================================================================
RCS file: /home/sc/Repository/qm/ChangeLog,v
retrieving revision 1.429.2.5
diff -c -5 -p -r1.429.2.5 ChangeLog
*** ChangeLog	19 Dec 2002 05:50:06 -0000	1.429.2.5
--- ChangeLog	19 Dec 2002 07:36:37 -0000
***************
*** 1,7 ****
--- 1,13 ----
  2002-12-18  Mark Mitchell  <mark at codesourcery.com>

+ 	* qm/test/classes/file.py (SubstitutionField): Rework, using
+ 	TupleField as a base class.
+ 	(FileContentsTest.Run): Remove exception-handling code.
+ 	(FileContentsTest.__PerformSubstitutions): Correct.
+ 	* NEWS: Mention change.
+ 	
  	* qm/fields.py (ChoiceField): New class.
  	* qm/test/test.py (Test.ResourceField): Likewise.
  	(Test.TestField): Likewise.
  	(Test.arguments): Use them.

Index: NEWS
===================================================================
RCS file: /home/sc/Repository/qm/NEWS,v
retrieving revision 1.11.2.2
diff -c -5 -p -r1.11.2.2 NEWS
*** NEWS	18 Dec 2002 05:29:16 -0000	1.11.2.2
--- NEWS	19 Dec 2002 07:36:37 -0000
*************** QM 2.0.2
*** 9,18 ****
--- 9,25 ----
  When a test fails due to dependency on a resource that could not be
  set up, the GUI now displays a link to the resource result from the
  test result.  (Previously, there was no way to get information about
  resource failures in the GUI.)

+ The GUI now offers a choice of available prerequisite tests and
+ resources when editing a test.
+
+ The substitutions field for the FileContentsTest now works correctly
+ in the GUI.  This is an incompatible change; tests that use this test
+ class will require hand-editing.
+
  QM 2.0.1
  ========

  A bug that prevented the "New Resource" entry on the "File" menu from
  working has been fixed.
Index: qm/test/classes/file.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/classes/file.py,v
retrieving revision 1.13
diff -c -5 -p -r1.13 file.py
*** qm/test/classes/file.py	17 Oct 2002 20:38:15 -0000	1.13
--- qm/test/classes/file.py	19 Dec 2002 07:36:38 -0000
*************** import string
*** 29,39 ****

  ########################################################################
  # classes
  ########################################################################

! class SubstitutionField(qm.fields.TextField):
      """A rule for performing a text substitution.

      A 'SubstitutionField' consists of a regular expression pattern and a
      corresponding replacement string.  When the substitution is applied
      to a body of text, all substrings that match the pattern are
--- 29,39 ----

  ########################################################################
  # classes
  ########################################################################

! class SubstitutionField(qm.fields.TupleField):
      """A rule for performing a text substitution.

      A 'SubstitutionField' consists of a regular expression pattern and a
      corresponding replacement string.  When the substitution is applied
      to a body of text, all substrings that match the pattern are
*************** class SubstitutionField(qm.fields.TextFi
*** 42,153 ****
      The syntax for the regular expression and the substitution string is
      that of the standard Python 're' (regular expression) module."""

      class_name = "qm.test.classes.file.SubstitutionField"

-     # The pattern and replacement string are encoded together into a
-     # single string, separated by a semicolon.  Semicolons that occur
-     # within the pattern and replacement string are escaped with a
-     # backslash.
-     #
-     # Use 'SplitValue' to extract the pattern and replacement string
-     # from a value of this field.
-
-
      def __init__(self, name, **properties):
          """Create a new 'SubstitutionField'.

          By default, the pattern and replacement string are empty."""

          # Initialize the base class.
!         qm.fields.TextField.__init__(self, name, ";", **properties)
!
!
!     def SplitValue(self, value):
!         """Split a value of this field into the pattern and replacement 
string.
!
!         'value' -- A value for this field.
!
!         returns -- A pair '(pattern, replacement_string)'."""
!
!         # Be lenient about an empty string.
!         if value == "":
!             return ("", "")
!         # Break it in half.
!         elements = string.split(value, ";", 1)
!         # Unescape semicolons in both halves.
!         elements = map(lambda e: string.replace(e, r"\;", ";"), elements)
!         return elements
!
!
!     def FormatValueAsHtml(self, value, style, name=None):
!         pattern, replacement = self.SplitValue(value)
!         # Since we're generating HTML, escape special characters.
!         pattern = qm.web.escape(pattern)
!         replacement = qm.web.escape(replacement)
!
!         if style in ["new", "edit"]:
!             result = '''
!             <input type="hidden"
!                    name="%(name)s"
!                    value="%(value)s"/>
!             <table border="0" cellpadding="0" cellspacing="4">
!              <tr>
!               <td>Pattern:</td>
!               <td>&nbsp;</td>
!               <td><input type="text"
!                          size="40"
!                          name="pattern"
!                          onchange="update_substitution();"
!                          value="%(pattern)s"/></td>
!              </tr>
!              <tr>
!               <td>Replacement:</td>
!               <td>&nbsp;</td>
!               <td><input type="text"
!                          size="40"
!                          name="substitution"
!                          onchange="update_substitution();"
!                          value="%(replacement)s"/></td>
!              </tr>
!             </table>
!             <script language="JavaScript">
!             function update_substitution()
!             {
!               var pattern = document.form.pattern.value;
!               pattern = pattern.replace(/;/g, "\\;");
!               var substitution = document.form.substitution.value;
!               substitution = substitution.replace(/;/g, "\\;");
!               document.form.%(name)s.value = pattern + ";" + substitution;
!             }
!             </script>
!             ''' % locals()
!             return result
!
!         elif style == "full":
!             return '''
!             <table border="0" cellpadding="2" cellspacing="0">
!              <tr valign="top">
!               <td>Pattern:</td>
!               <td><tt>%s</tt></td>
!              </tr>
!              <tr valign="top">
!               <td>Replacement:</td>
!               <td><tt>%s</tt></td>
!              </tr>
!             </table>
!             ''' % (pattern, replacement)
!
!         else:
!             # For all other styles, use the base class implementation.
!             return qm.fields.TextField.FormatValueAsHtml(
!                 self, value, style, name)
!
!
!     def FormatValueAsText(self, value, columns=72):
!         # Don't line-wrap or otherwise futz with the value.
!         return value


      def GetHelp(self):
          return """
          A substitution consists of a regular expression pattern and a
--- 42,62 ----
      The syntax for the regular expression and the substitution string is
      that of the standard Python 're' (regular expression) module."""

      class_name = "qm.test.classes.file.SubstitutionField"

      def __init__(self, name, **properties):
          """Create a new 'SubstitutionField'.

          By default, the pattern and replacement string are empty."""

          # Initialize the base class.
!         fields = (qm.fields.TextField(name = "pattern",
!                                       title = "Pattern",),
!                   qm.fields.TextField(name = "replacement",
!                                       title = "Replacement"))
!         qm.fields.TupleField.__init__(self, name, fields, **properties)


      def GetHelp(self):
          return """
          A substitution consists of a regular expression pattern and a
*************** class SubstitutionField(qm.fields.TextFi
*** 155,167 ****
          subtrings matching the pattern are replaced with the
          substitution string.  The substitution string may reference
          matched groups in the pattern.

          The regular expression and substitution syntax are those of
!         Python's standard "'re' regular expression module"
!
! .. "'re' regular expression module" 
http://www.python.org/doc/1.5.2p2/lib/module-re.html ."""



  class FileContentsTest(Test):
      """Check that the contents of a file match the expected value.
--- 64,74 ----
          subtrings matching the pattern are replaced with the
          substitution string.  The substitution string may reference
          matched groups in the pattern.

          The regular expression and substitution syntax are those of
!         Python's standard "'re' regular expression module"."""



  class FileContentsTest(Test):
      """Check that the contents of a file match the expected value.
*************** class FileContentsTest(Test):
*** 213,237 ****
          ]


      def Run(self, context, result):
          # Extract the path to the file we're testing.
!         try:
!             path = context[self.path_property]
!         except KeyError:
!             # The path is not present in the context under the expected
!             # property name.
!             result.Fail("Missing property '%s' in context." %
!                         self.path_property)
          # Read the contents of the file.
!         try:
!             contents = open(path, "r").read()
!         except IOError, exception:
!             # Couldn't read the file.
!             result.Fail(cause="Could not open file '%s'." % path,
!                         annotations={ "FileContentsTest.error"
!                                       : str(exception) })
          # Perform substitutions on the file contents.
          self.expected_contents = \
            self.__PerformSubstitutions(self.expected_contents)
          contents = self.__PerformSubstitutions(contents)
          # Compare the contents to the expected contents.
--- 120,132 ----
          ]


      def Run(self, context, result):
          # Extract the path to the file we're testing.
!         path = context[self.path_property]
          # Read the contents of the file.
!         contents = open(path, "r").read()
          # Perform substitutions on the file contents.
          self.expected_contents = \
            self.__PerformSubstitutions(self.expected_contents)
          contents = self.__PerformSubstitutions(contents)
          # Compare the contents to the expected contents.
*************** class FileContentsTest(Test):
*** 246,258 ****
          """Perform substitutions on a body of text.

          returns -- The string 'text', processed with the substitutions
          configured for this test instance."""

!         substitutions_field = self.arguments[2].GetContainedField()
!         for substitution in self.substitutions:
!             pattern, replacement = 
substitutions_field.SplitValue(substitution)
              text = re.sub(pattern, replacement, text)
          return text



--- 141,151 ----
          """Perform substitutions on a body of text.

          returns -- The string 'text', processed with the substitutions
          configured for this test instance."""

!         for pattern, replacement in self.substitutions:
              text = re.sub(pattern, replacement, text)
          return text






From ghost at cs.msu.su  Thu Dec 19 07:52:04 2002
From: ghost at cs.msu.su (Vladimir Prus)
Date: Thu, 19 Dec 2002 10:52:04 +0300
Subject: Format of XML test file
Message-ID: <3E017AA4.9080107@cs.msu.su>


I see that new QMTest does not pretty-print XML document that
it writes. They all become one long line. As the result,
editing them by hand is very hard, and I'd like to do that
sometimes.

Is this hard/undesirable to change?

- Volodya



From mark at codesourcery.com  Thu Dec 19 07:49:57 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 18 Dec 2002 23:49:57 -0800
Subject: [qmtest] Format of XML test file
In-Reply-To: <3E017AA4.9080107@cs.msu.su>
Message-ID: <17890000.1040284197@warlock.codesourcery.com>



--On Thursday, December 19, 2002 10:52:04 AM +0300 Vladimir Prus 
<ghost at cs.msu.su> wrote:

>
> I see that new QMTest does not pretty-print XML document that
> it writes. They all become one long line. As the result,
> editing them by hand is very hard, and I'd like to do that
> sometimes.
>
> Is this hard/undesirable to change?

It's desirable to change this, but it's non-trivial.  We switched to
Python's standard XML-writing package, and this is how it does it.  We
need to insert elements in the DOM that contain spaces/carriage-returns.
It should be possible to write a generic pretty-printing routine to do
this, but we don't have one yet.

(It's also might be bad to full indent everything; that could increase
the size of the files a lot.)

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Thu Dec 19 18:28:42 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 19 Dec 2002 13:28:42 -0500
Subject: resources depending on resources?
Message-ID: <7gptrxrhgl.fsf@pikespeak.metacarta.com>

Are resources always "final", or can I construct a resource that
builds upon another one?

The scenario is that I have two layers of "expensive" operations, then
a bunch of cheap ones -- there's "build a local data set from a
source" (web mirroring like I posted before, or nntp download, or SQL
pull).  Then there's "process the local data set to within an inch of
it's life" which is also expensive, but is a single "operator",
ie. the only argument to it is "input data set".  Finally, the tests
are all "poke at that processed data", simple blind-men-and-elephant
observations, but lots of them.

I could just derive the "processed" resource from the "data set"
resource, I suppose, since there's nothing special in the processed
side, and just configure one object there.  It's just that they
already have distinct natural fail-and-cleanup points...



From eichin at metacarta.com  Thu Dec 19 21:39:13 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 19 Dec 2002 16:39:13 -0500
Subject: typo
In-Reply-To: <7gsmwvf0xk.fsf@pikespeak.metacarta.com>
References: <7gsmwvf0xk.fsf@pikespeak.metacarta.com>
Message-ID: <7gznr1ofi6.fsf@pikespeak.metacarta.com>

(At least I assume this is a typo, since it looks a lot like the
previous one that says
        """A 'ResourceField' contains the name of a resource.
)  _Mark_

Index: qm/test/test.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/test.py,v
retrieving revision 1.12
diff -u -r1.12 test.py
--- qm/test/test.py     19 Dec 2002 05:50:52 -0000      1.12
+++ qm/test/test.py     19 Dec 2002 21:36:30 -0000
@@ -123,7 +123,7 @@
 
 
     class TestField(qm.fields.ChoiceField):
-        """A 'TestField' contains the name of a resource.
+        """A 'TestField' contains the name of a test.
 
         The exact format of the name depends on the test database in use."""
 


From mark at codesourcery.com  Thu Dec 19 22:57:11 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 19 Dec 2002 14:57:11 -0800
Subject: [qmtest] derivation issues?
In-Reply-To: <7gd6o0tmcl.fsf@pikespeak.metacarta.com>
Message-ID: <25480000.1040338631@warlock.codesourcery.com>



--On Tuesday, December 17, 2002 03:35:38 PM -0500 "eichin at metacarta.com" 
<eichin at metacarta.com> wrote:

> Today's problem: how does one set argument values in parent classes
> correctly?  In particular, I've got something derived from
> ShellScriptTest that runs a find [and does some other things with
> arguments, so it isn't just an instance, it is a new class of test.]
>
> I can just set self.script in the the Run method, before calling the
> parent Run... but I'd really like to, for example, set Hidden on that
> argument, or at least set the default_value to my find command so that
> the user sees it.  Thoughts?

The way this was supposed to work is that you would just redefine the
argument in the derived class (probably using the "computed" attribute,
so that it wouldn't show up.)  Like so:

  class DerivedClass(ShellScriptTest):

    arguments = [TextField(name = "script", computed = 1)]

    __init__(...):

      self.script = "find . -name foo"

However, we blew it in that extension.get_class_arguments is going
to find both arguments.  That's easily fixed by removing duplicates
in that function, but before we do that, will it work for you?

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Fri Dec 20 00:11:08 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 19 Dec 2002 19:11:08 -0500
Subject: [qmtest] derivation issues?
In-Reply-To: <25480000.1040338631@warlock.codesourcery.com>
References: <25480000.1040338631@warlock.codesourcery.com>
Message-ID: <7gr8cdo8gz.fsf@pikespeak.metacarta.com>


>   class DerivedClass(ShellScriptTest):
> 
>     arguments = [TextField(name = "script", computed = 1)]
> 
>     __init__(...):
> 
>       self.script = "find . -name foo"

> However, we blew it in that extension.get_class_arguments is going

Ahh, I was wondering how it was pulling those out...

> to find both arguments.  That's easily fixed by removing duplicates
> in that function, but before we do that, will it work for you?

So it just keeps the "most derived" version?  That makes sense.
Especially for the example that's giving me trouble today:
SubstitutedShellScriptTest does
self.script = self.__PerformSubstitutions(context, self.script)

in Run, before calling MyShellScriptTest.Run, no problems there... but
substituting on self.stdout (etc.) wasn't working -- this would fix
that?


From eichin at metacarta.com  Fri Dec 20 01:13:29 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 19 Dec 2002 20:13:29 -0500
Subject: [qmtest] derivation issues?
In-Reply-To: <7gr8cdo8gz.fsf@pikespeak.metacarta.com>
References: <25480000.1040338631@warlock.codesourcery.com>
	<7gr8cdo8gz.fsf@pikespeak.metacarta.com>
Message-ID: <7g65tpo5l2.fsf@pikespeak.metacarta.com>


> in Run, before calling MyShellScriptTest.Run, no problems there... but
> substituting on self.stdout (etc.) wasn't working -- this would fix
> that?

Oh, ignore me, that was one of those "looking for subtle class
hierarchy issues, and missing that I'd used the wrong variable name"
(using
self.stdin = self.__PerformSubstitutions(context, self.realstdin)
worked a lot better :)


From mark at codesourcery.com  Fri Dec 20 19:32:14 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 20 Dec 2002 11:32:14 -0800
Subject: [qmtest] derivation issues?
In-Reply-To: <7gr8cdo8gz.fsf@pikespeak.metacarta.com>
Message-ID: <83220000.1040412734@warlock.codesourcery.com>



--On Thursday, December 19, 2002 07:11:08 PM -0500 "eichin at metacarta.com" 
<eichin at metacarta.com> wrote:

>
>>   class DerivedClass(ShellScriptTest):
>>
>>     arguments = [TextField(name = "script", computed = 1)]
>>
>>     __init__(...):
>>
>>       self.script = "find . -name foo"

I've checked in the attached patch to implement this change.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com

-------------- next part --------------
A non-text attachment was scrubbed...
Name: diffs
Type: application/octet-stream
Size: 8177 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20021220/5bf2b0e5/attachment.obj>

From eichin at metacarta.com  Fri Dec 20 23:05:11 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 20 Dec 2002 18:05:11 -0500
Subject: [qmtest] derivation issues?
In-Reply-To: <7gr8cdo8gz.fsf@pikespeak.metacarta.com>
References: <25480000.1040338631@warlock.codesourcery.com>
	<7gr8cdo8gz.fsf@pikespeak.metacarta.com>
Message-ID: <7g1y4c70m0.fsf@pikespeak.metacarta.com>

>     arguments = [TextField(name = "script", computed = 1)]

FYI, since IsProperty says
        return self.GetProperty(property_name, "false") == "true"
this needs to be literally "true", ie.
        arguments = [TextField(name = "script", computed = "true")]

(could argue that that should be more liberal, but not very strongly. 


From mark at codesourcery.com  Fri Dec 20 23:28:53 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 20 Dec 2002 23:28:53 -0000
Subject: [qmtest] derivation issues?
In-Reply-To: <7g1y4c70m0.fsf@pikespeak.metacarta.com>
Message-ID: <1044848237.1040426933@[192.168.0.103]>



--On Friday, December 20, 2002 6:05 PM -0500 "eichin at metacarta.com" 
<eichin at metacarta.com> wrote:

>>     arguments = [TextField(name = "script", computed = 1)]
>
> FYI, since IsProperty says
>         return self.GetProperty(property_name, "false") == "true"
> this needs to be literally "true", ie.
>         arguments = [TextField(name = "script", computed = "true")]
>
> (could argue that that should be more liberal, but not very strongly.

Yup.

I wasn't the original author of this code, and I saw that a while back
-- but didn't see a terribly easy way to change it at the time.  We
could fix it now, due to some of the other infrastructure cleanups, but,
on the other hand, the way it is now isn't horrible...

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From eichin at metacarta.com  Sat Dec 21 03:34:25 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 20 Dec 2002 22:34:25 -0500
Subject: [qmtest] derivation issues?
In-Reply-To: <83220000.1040412734@warlock.codesourcery.com>
References: <83220000.1040412734@warlock.codesourcery.com>
Message-ID: <7gr8ccavum.fsf@pikespeak.metacarta.com>

hmm, working with this version (cvs head from earlier today), I get

> Error
> A value for the "base_url" parameter is missing.

when I try to submit any changes to the derived class.  Here's the
sample:

# more public domain code from Mark Eichin <eichin at metacarta.com>

import os
import re
import qm.common
import qm.fields
from qm.test.test import Test
from url_field import *
import urllib

class URLQuery(Test):
    """Test class to query a URL for a result."""

    arguments = [
        URLField(name="base_url",
                 title="Base URL",
                 description="""URL to add the search arguments to"""),
        TextField(name="match",
                  title="match",
                  description="""Regexp to match against URL result, should have one () group"""),
        TextField(name="result",
                  title="Result",
                  description="""Result string to check against match regexp"""),
        ]

    def GetDoc(self, url):
        """Get the URL, return as string"""
        u = urllib.urlopen(url)
        doc = u.read()
        u.close()
        return doc

    def Run(self, context, result):
        """Run the test."""
        causes = []
        doc = self.GetDoc(self.base_url)
        res = re.search(self.match, doc)
        if res == None:
            causes.append("regexp match")
            result["URLQuery.match"] = str(self.match)
            result["URLQuery.actual_doc"] = str(doc)
        elif res.group(1) != self.result:
            causes.append("regexp result")
            result["URLQuery.expected_result"] = str(self.result)
            result["URLQuery.actual_result"] = res.group(1)
            # result["URLQuery.actual_doc"] = str(doc)
        if causes:
            result.Fail("Failed %s." % string.join(causes, ", "))

class CGIArgumentField(qm.fields.TupleField):
    """A field which is a tag and value for a CGI search argument."""

    class_name = "ifacequery.CGIArgumentField"

    def __init__(self, name, **properties):
        """Create a new CGIArgumentField''.
        
        By default, the tag and value string are empty."""

        # Initialize the base class.
        fields = (qm.fields.TextField(name = "tag",
                                      title = "Tag",),
                  qm.fields.TextField(name = "value",
                                      title = "Value"))
        qm.fields.TupleField.__init__(self, name, fields, **properties)

class SearchQuery(URLQuery):
    """Test class to query a standard cgi-options style interface."""

    arguments = [
        SetField(CGIArgumentField(name="search_constraints",
                                  title="Search Constraints",
                                  description="""Tags and Values that constrain the search""")),
        URLField(name="base_url", computed="true"),
        URLField(name="search_url_base",
                 title="Search URL Base",
                 description="""Base URL for search strings"""),
        ]

    def GetTags(self):
        """extract the tags from the arguments, as a quoted list"""
        cgi_quoted_tags = []
        for tag, value in self.search_constraints:
            tag = urllib.quote_plus(tag)
            value = urllib.quote_plus(value)
            cgi_quoted_tags.extend(tag + "=" + value)
        return cgi_quoted_tags

    def __init__(self, name, **properties):
        self.base_url = self.search_url_base +
        string.join(self.GetTags(),"&")
        URLQuery.__init__(self, name, properties)

Oh, and urlfield.py is just a trivial derivation of TextField:

import qm.common
from qm.fields import *

class URLField(TextField):
    """A text field containing a URL."""

    class_name = "url_field.URLField"

    def GetTypeDescription(self):
        return "a URL"

    def FormatValueAsHtml(self, value, style, name=None):
        if style != "new" and style != "edit":
            return '<a href="%s">%s</a>' % (value, value)
        else:
            return TextField.FormatValueAsHtml(self, value, style, name)


Anyway, to duplicate, register these, qmtest gui, file->'new test',
name=foosearch, class=query.SearchQuery, and then you get a display
screen with the fields to fill in... and any change from there (like
any of the "add something" buttons, or hitting OK at the bottom) gives
the error described at the top.

I haven't figured out if this is a side effect of the recent changes
or not, or just something I've missed...

                                                        _Mark_


From mark at codesourcery.com  Mon Dec 23 16:39:28 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 23 Dec 2002 08:39:28 -0800
Subject: [qmtest] Re: typo
In-Reply-To: <7gznr1ofi6.fsf@pikespeak.metacarta.com>
Message-ID: <254240000.1040661568@warlock.codesourcery.com>



--On Thursday, December 19, 2002 04:39:13 PM -0500 "eichin at metacarta.com" 
<eichin at metacarta.com> wrote:

> (At least I assume this is a typo, since it looks a lot like the
> previous one that says
>         """A 'ResourceField' contains the name of a resource.
> )  _Mark_

Thanks; I applied your patch.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From mark at codesourcery.com  Mon Dec 23 16:59:26 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 23 Dec 2002 08:59:26 -0800
Subject: [qmtest] derivation issues?
In-Reply-To: <7gr8ccavum.fsf@pikespeak.metacarta.com>
Message-ID: <256670000.1040662766@warlock.codesourcery.com>



--On Friday, December 20, 2002 10:34:25 PM -0500 "eichin at metacarta.com" 
<eichin at metacarta.com> wrote:

>     def FormatValueAsHtml(self, value, style, name=None):
>         if style != "new" and style != "edit":
>             return '<a href="%s">%s</a>' % (value, value)
>         else:
>             return TextField.FormatValueAsHtml(self, value, style, name)

Your problem is here; you're not fully respecting the semantics of
a style of "hidden".

Thanks,

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From ghost at cs.msu.su  Wed Dec 25 10:49:22 2002
From: ghost at cs.msu.su (Vladimir Prus)
Date: Wed, 25 Dec 2002 13:49:22 +0300
Subject: Binary results file?
Message-ID: <3E098D32.2060807@cs.msu.su>


I've just noticed that results.qmr file written
by "qmtest run", stored from gui, or file given
in "-o" option to "qmtest run" are not XML anymore.
And there's no option to make it XML.

I think that's very bad. In particular, I have a script
that used to process the XML results file and do
something meaningfull. I was just going to write another
such script. Using pickled representation for result prevents
this usage.

What was the rationale for the change?

Is it possible to support both pickled and XML results file?
For command line part the change will be very simple. For GUI
it will be needed to pass the type of results. (I actually believe
that GUI should always store XML results...)

- Volodya




From eichin at metacarta.com  Thu Dec 26 03:55:20 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 25 Dec 2002 22:55:20 -0500
Subject: [qmtest] derivation issues?
In-Reply-To: <256670000.1040662766@warlock.codesourcery.com>
References: <256670000.1040662766@warlock.codesourcery.com>
Message-ID: <7gvg1hv3h3.fsf@pikespeak.metacarta.com>

Sure enough, another "missed the obvious" case.  (In retrospect,
looking more closely at TextField.FormatValueAsHtml, I should just
check for "full", "brief", and possibly mimic some of the property
tests...)  Thanks.


From mark at codesourcery.com  Fri Dec 27 18:24:03 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 27 Dec 2002 10:24:03 -0800
Subject: [qmtest] Binary results file?
In-Reply-To: <3E098D32.2060807@cs.msu.su>
Message-ID: <17380000.1041013443@warlock.codesourcery.com>



--On Wednesday, December 25, 2002 01:49:22 PM +0300 Vladimir Prus 
<ghost at cs.msu.su> wrote:

>
> I've just noticed that results.qmr file written
> by "qmtest run", stored from gui, or file given
> in "-o" option to "qmtest run" are not XML anymore.
> And there's no option to make it XML.

That's true.  The logic is still there; there's an XMLResultsStream
(spelling might be wrong) class that will write out the results as
XML.  We didn't have time before 2.0 to wire up the command-line
options to pick amongst output streams.

There was a very good reason for changing to the pickled representation;
it's much, much faster.  With test databases with thousands of results,
the XML results file could take minutes to load; in the pickled form it
takes seconds.

We'd like to have the option to choose between them, but there's little
bit of thinking to do about how exactly that should work.  Presumably
something like:

  --output-stream=xml_results_stream.XMLResultsStream -o foo

or the like.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Mon Dec 30 21:13:40 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 30 Dec 2002 16:13:40 -0500
Subject: [qmtest] Binary results file?
In-Reply-To: <17380000.1041013443@warlock.codesourcery.com>
References: <17380000.1041013443@warlock.codesourcery.com>
Message-ID: <7gwulrrz0b.fsf@pikespeak.metacarta.com>

That would do, or even a tool to convert pickled results to xml
results; I'm just now noticing I want to look at the file for hints
(seems that a resource dependency is getting built, cleaned up, and
then the next time the test runs it isn't there -- or more likely, my
resource is written wrong, but I'm still looking into that possibility...)


From eichin at metacarta.com  Mon Dec 30 21:30:43 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 30 Dec 2002 16:30:43 -0500
Subject: [qmtest] Binary results file?
In-Reply-To: <7gwulrrz0b.fsf@pikespeak.metacarta.com>
References: <17380000.1041013443@warlock.codesourcery.com>
	<7gwulrrz0b.fsf@pikespeak.metacarta.com>
Message-ID: <7gn0mnry7w.fsf@pikespeak.metacarta.com>

> (seems that a resource dependency is getting built, cleaned up, and
> then the next time the test runs it isn't there -- or more likely, my
> resource is written wrong, but I'm still looking into that possibility...)

Actually, if I do a "qmtest run -f full mcweb" several times, I get
the same results each time:

--- TEST RESULTS -------------------------------------------------------------

  Setup wget_prod                               : PASS    

  mcweb                                         : PASS    

  Cleanup wget_prod                             : PASS    


--- STATISTICS ---------------------------------------------------------------

       1        tests total
       1 (100%) tests PASS

If instead I do a "qmtest gui", select that test, hit run->"this
test", it works, then if I click on it again from the result page, hit
run->"this test" again, it fails with unexpected output (it's just
doing an "ls" to look for the directory constructed by the test, and
the output the second time *from the gui* doesn't have it...)



From eichin at metacarta.com  Tue Dec 31 00:43:22 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 30 Dec 2002 19:43:22 -0500
Subject: context passed among tests?
In-Reply-To: <7gn0mnry7w.fsf@pikespeak.metacarta.com>
Message-ID: <7gznqnqaqd.fsf_-_@pikespeak.metacarta.com>

Annotations are output-only, right?  Or is it reasonable to have one
test look for annotations provided by another test?

And the context can be input by the user, or set up by resources, but
can't actually be modified by tests, right?

I am, as usual, trying to be too modular :-)  

I've got a chunk of data that I can set up (by pulling it down from a
web site, or checking it out of cvs, whatever.)  That feels like a
"resource" -- perhaps a Wget resource (that takes a source url, and
stuffs a temporary target dir in the context) or a CVS-Checkout
resource (that takes a repository, directory, some auth data, and
likewise puts a target dir in the context.)

Then, I have a few different kinds of (also expensive) processing I
can do on these chunks of data (like "build an inverted index".)  If
resources had dependencies, I could just do it that way; otherwise,
I'm stuck making a wget-indexed and a cvs-indexed class that each have
the wget- and cvs- parameters respectively, plus the index parameters.

Another way to do this in the current framework would be to make them
pseudo-tests -- this gets me dependencies [except that the
prerequisite relationship is a little weak, in that running a single
test doesn't count excluded tests towards prerequisites, but that's
ok] but it *doesn't* get me a way to pass further information on to
other tests, since only Resources can modify the context.  It also
doesn't get cleanups.

Both are sort of close; does it make more sense to
  * stretch resource by adding resource-dependencies
  * stretch test by letting it write to context, and maybe add cleanup
  * add a new thing called an "Operator" (or something), which is a
    Runnable that has all of the above features together?


From mark at codesourcery.com  Tue Dec 31 03:54:59 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 30 Dec 2002 19:54:59 -0800
Subject: [qmtest] context passed among tests?
In-Reply-To: <7gznqnqaqd.fsf_-_@pikespeak.metacarta.com>
Message-ID: <2370000.1041306899@localhost>



--On Monday, December 30, 2002 07:43:22 PM -0500 eichin at metacarta.com wrote:

> Annotations are output-only, right?  Or is it reasonable to have one
> test look for annotations provided by another test?

Right.

> And the context can be input by the user, or set up by resources, but
> can't actually be modified by tests, right?

Right.

Those are both important design decisions.

The idea is that tests should not be communicating amongst themselves;
that means that running a single test is no longer a well-formed idea.

(Prerequisites are not supposed to be used for ordering so much as for
optimization/diagnosis; if simple test X fails it may not even make sense
to run big test Y.  Or, the opposite -- if big test X passes, you may want
to skip small diagnostic tests Y and Z.)

There are of course games you can play (use the filesystem, modify the
classes directly, global Python variables, etc.) that you can use to
do cross-test communication, but we're not going to make it easy. :-)

> Both are sort of close; does it make more sense to
>   * stretch resource by adding resource-dependencies

This one; that's a natural extension, and one we've planned for a while.

In the abstract, resources are just an optimization -- you do some set-up
once and share it for lots of tests.  A correctly implemented resource
could be run once for each test that needed it, or just once for all of
those tests; the only difference should be how long it takes the tests to
run.  So, having one resource depend on others is no problem, that's just
allowing the resources themselves to be optimized in a similar way.

I've started on the code for this, but we need to watch out for and
diagnose circular dependencies, and that will take a little thought to
get right.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From eichin at metacarta.com  Tue Dec 31 19:51:12 2002
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 31 Dec 2002 14:51:12 -0500
Subject: [qmtest] context passed among tests?
In-Reply-To: <2370000.1041306899@localhost>
References: <2370000.1041306899@localhost>
Message-ID: <7gznqmhsr3.fsf@pikespeak.metacarta.com>

> Those are both important design decisions.

Always a good thing to hear.

> (Prerequisites are not supposed to be used for ordering so much as for
> optimization/diagnosis; if simple test X fails it may not even make sense
> to run big test Y.  Or, the opposite -- if big test X passes, you may want
> to skip small diagnostic tests Y and Z.)

So prerequisites can be thought of as "short cuts" - it wouldn't be
wrong for qmtest to just run everything, in any order, and ignore
them, but they let useful results be reported faster.  Got it.

> There are of course games you can play (use the filesystem, modify the
> classes directly, global Python variables, etc.) that you can use to
> do cross-test communication, but we're not going to make it easy. :-)

Ah, the fine principle of "make it easier to express the right thing
than to express the wrong thing" - C being the usual counterexample :-)

> In the abstract, resources are just an optimization -- you do some set-up
> once and share it for lots of tests.  A correctly implemented resource
> could be run once for each test that needed it, or just once for all of
> those tests; the only difference should be how long it takes the tests to
> run.  So, having one resource depend on others is no problem, that's just
> allowing the resources themselves to be optimized in a similar way.

It's just an optimization from the viewpoint of the tests; it does
impose an ordering (or rather, a nesting) on resource construction,
though.  I guess it's sufficient for the test "plan" phase to come up
with a set of "edge" resources, and then work "outward" from there;
you might handle lifetimes as an optimization, simple reference counts
should be enough for correctness.

Ok, so I think I have an idea of the direction to go with short-term
cheating, so that I can easily sync back up later.  Thanks.  _Mark_


