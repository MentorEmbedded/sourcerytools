From mohamedb at sgi.com  Tue Aug 26 00:47:03 2008
From: mohamedb at sgi.com (Mohamed Barwani)
Date: Tue, 26 Aug 2008 10:47:03 +1000
Subject: [qmtest] Only run tests with attribute=X
In-Reply-To: <48866220.1020906@codesourcery.com>
References: <200807221809.29803.mohamedb@sgi.com> <48866220.1020906@codesourcery.com>
Message-ID: <200808261047.03385.mohamedb@sgi.com>

On Wed, 23 Jul 2008 08:41:36 am Mark Mitchell wrote:
> Mohamed Barwani wrote:
> > Is there a mechanism for me to ask qmtest to run any of class y tests
> > that have metadata="something"
>
> Not out of the box, but you could provide an implementation of the test
> suite abstraction that did that.  Then, you'd be able to run just the
> tests in that test suite.

Grouping tests via test suites is fine, however, you might have a huge 
test-database with duplicate tests.. Would you guys be interested in a 
tagging system for the tests, and if so any pointers? I can give it a shot..

thanks,


From mohamedb at sgi.com  Thu Aug 28 03:51:55 2008
From: mohamedb at sgi.com (Mohamed Barwani)
Date: Thu, 28 Aug 2008 13:51:55 +1000
Subject: How do you add prerequisites test from the command line?
Message-ID: <200808281351.55646.mohamedb@sgi.com>

Sorry if this was documented somewhere and I can't find it..

Most of what I try causes this exception,
$ qmtest create -a prerequisites="['('hello', 'PASS')']" test command.ExecTest
Traceback (most recent call last):
  File "/usr/bin/qmtest", line 132, in <module>
    exit_code = main()
  File "/usr/bin/qmtest", line 110, in main
    exit_code = command.Execute()
  File "[some-location]/qmtest/build/lib.linux-x86_64-2.5/qm/test/cmdline.py", line 796, in Execute
    return method()
  File "[some-location]/qmtest/build/lib.linux-x86_64-2.5/qm/test/cmdline.py", line 1054, in __ExecuteCreate
    (self.__arguments[1], class_loader, extension_loader))
  File "[some-location]/qmtest/build/lib.linux-x86_64-2.5/qm/extension.py", line 631, in parse_descriptor
    arguments = validate_arguments(extension_class, arguments)
  File "[some-location]/qmtest/build/lib.linux-x86_64-2.5/qm/extension.py", line 353, in validate_arguments
    converted_arguments[name] = field.ParseTextValue(value)
  File "/usr/lib/python2.5/site-packages/qm/fields.py", line 1243, in ParseTextValue
    elements.append(self.__contained.ParseTextValue(v))
  File "/usr/lib/python2.5/site-packages/qm/fields.py", line 336, in ParseTextValue
    raise NotImplemented
TypeError: exceptions must be classes, instances, or strings (deprecated), not NotImplementedType

cheers
-- 
Mohamed Barwani
ASGQA
"Everything is vague to a degree you do not realize till you have tried to make it precise." --Bertrand Russell


From mohamedb at sgi.com  Fri Aug 29 05:46:18 2008
From: mohamedb at sgi.com (Mohamed Barwani)
Date: Fri, 29 Aug 2008 15:46:18 +1000
Subject: TupleField not friendly whith pretty xml..
Message-ID: <200808291546.18279.mohamedb@sgi.com>

If my xml files are indented and clean, and they happen to have a TupleField in
the extension arguments, then qmtest fail to load the xml file..
ERROR:
             xml_database.TestFileError: A problem occurred while loading the
             XML test file "mysuite.touch1":Text instance has no attribute 
             'tagName'


The following patch fixes the issue.

 qm/fields.py |   15 +++++++++++++--
 1 files changed, 13 insertions(+), 2 deletions(-)

diff --git a/qm/fields.py b/qm/fields.py
index 7d9a1ed..1aaa23a 100644
--- a/qm/fields.py
+++ b/qm/fields.py
@@ -812,8 +812,19 @@ class TupleField(Field):

     def GetValueFromDomNode(self, node, attachment_store):

-        values = []
-        for f, element in map(None, self.__fields, node.childNodes):
+        # Make sure 'node' is a '<tuple>' element.
+        if node.nodeType != xml.dom.Node.ELEMENT_NODE \
+           or node.tagName != "tuple":
+            raise qm.QMException, \
+                  qm.error("dom wrong tag for field",
+                           name=self.GetName(),
+                           right_tag="tuple",
+                           wrong_tag=node.tagName)
+        values   = []
+        # filter Text Node
+        children = [ n for n in node.childNodes
+                       if n.nodeType == xml.dom.Node.ELEMENT_NODE ]
+        for f, element in map(None, self.__fields, children):
             values.append(f.GetValueFromDomNode(element, attachment_store))

         return self.Validate(values)

cheers
-- 
Mohamed Barwani
ASGQA
"what can be said at all can be said clearly, and what we cannot talk about we must pass over in silence."
-- Ludwig Wittgenstein


From mohamedb at sgi.com  Fri Aug 29 05:55:56 2008
From: mohamedb at sgi.com (Mohamed Barwani)
Date: Fri, 29 Aug 2008 15:55:56 +1000
Subject: [qmtest] How do you add prerequisites test from the command line?
In-Reply-To: <200808281351.55646.mohamedb@sgi.com>
References: <200808281351.55646.mohamedb@sgi.com>
Message-ID: <200808291555.56346.mohamedb@sgi.com>

To work around this temporarily I had to do the following.. 
Until some comes up with a better solution for parsing TupleFields contained in SetFields.

Apply this patch...
---
 qm/fields.py |   11 +++++++++++
 1 files changed, 11 insertions(+), 0 deletions(-)

diff --git a/qm/fields.py b/qm/fields.py
index 6434680..7d9a1ed 100644
--- a/qm/fields.py
+++ b/qm/fields.py
@@ -787,6 +787,11 @@ class TupleField(Field):
                    self.__fields, value)


+    def ParseTextValue(self, value):
+
+        return self.Validate(value)
+
+
     def ParseFormValue(self, request, name, attachment_stores):

         value = []
@@ -1240,6 +1245,12 @@ class SetField(Field):
                 invalid(tok)
             # Parse the string constant.
             v = eval(tok[1])
+            # SetFields can't contain SetFields, However they can contain a
+            # TupleField. In this case, evaluated string object would be in
+            # the following format for example
+            #   "'['test.id', 'result.outcome']'".. To work around just
+            # evaluate it again.
+            if isinstance(self.__contained,TupleField): v = eval(v)
             elements.append(self.__contained.ParseTextValue(v))

         # There should not be any tokens left over.

Then I can add prereq tests from the command line like so;
$ qmtest create --id=test_b -a resources="['res_a', 'res_b']" -a prerequisites="['[\'test_a\', \'PASS\']']" -a program=ls test command.ExecTest


cheers
-- 
Mohamed Barwani
ASGQA
"Science may set limits to knowledge, but should not set limits to imagination."
-- Bertrand Russell


