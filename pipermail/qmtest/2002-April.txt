From stannous at cisco.com  Thu Apr 11 15:26:25 2002
From: stannous at cisco.com (Sam Tannous)
Date: Thu, 11 Apr 2002 11:26:25 -0400
Subject: python 2.2 error
Message-ID: <20020411112611.A7763@cisco.com>

Not sure if this is a known install issue.  I'm using 
Python version 2.2 under FreeBSD 4.5 Stable.

The error I get is the following:

--------------------------------------------------------
[samiam ~/qm-1.1.3] > ./configure --prefix=/home/stannous/packages/qm-1.1.3
loading cache ./config.cache
checking for python2... (cached) python
checking Python version... Traceback (most recent call last):
  File "<stdin>", line 6, in ?
NameError: name 'EOF' is not defined
Traceback (most recent call last):
  File "<stdin>", line 6, in ?
NameError: name 'EOF' is not defined
2.2
checking Python prefix... /usr/local
checking Python platform... freebsd-4.5-STABLE-i386
checking for happydoc... (cached) no
checking for jade... (cached) no
checking for tidy... (cached) no
checking DocBook stylesheets... no
checking for docbook DTD... /usr/lib/sgml
configure: warning: Documentation will not be built.
creating ./config.status
creating GNUmakefile
creating qm.spec
creating qm/setup_path.py
--------------------------------------------

Any ideas?

Thanks,
Sam Tannous


From ghost at cs.msu.su  Fri Apr 12 13:19:05 2002
From: ghost at cs.msu.su (Vladimir Prus)
Date: Fri, 12 Apr 2002 17:19:05 +0400
Subject: Specifying arguments in derived test classes
Message-ID: <E16w0xG-0001DX-00@zigzag.lvk.cs.msu.su>


Hi,
I'm trying to create a test class that would derive from python.ExecTest and 
change it a little. In particular, I want to get rid of 'expession' argument. 
I'm trying the following:

class Test(python.ExecTest):

    arguments = [
        qm.fields.TextField(
            name="source",
            title="Python Source Code",
            description="""The source code.

            This code may contain class definitions, function
            definitions, statements, and so forth.  If this code
            throws an uncaught exception, the test will fail.""",
            verbatim="true",
            multiline="true",
            default_value="pass"
            )
        ]

    def __init__(self, **properties):

        apply(python.ExecTest.__init__, (self,), properties)
        self.expression = None
    
    def Run(self, context, result):
	# Not relevant here

However, I get a test class with three arguments: two defined in 
python.ExecTest and one defined in my class. How can I accomplish what I want?

- Volodya


From mark at codesourcery.com  Mon Apr 15 14:41:11 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 15 Apr 2002 07:41:11 -0700
Subject: [qmtest] python 2.2 error
In-Reply-To: <20020411112611.A7763@cisco.com>
References: <20020411112611.A7763@cisco.com>
Message-ID: <29800000.1018881671@gandalf.codesourcery.com>



--On Thursday, April 11, 2002 11:26:25 AM -0400 Sam Tannous 
<stannous at cisco.com> wrote:

> Not sure if this is a known install issue.  I'm using
> Python version 2.2 under FreeBSD 4.5 Stable.
>
> The error I get is the following:
>
> --------------------------------------------------------
> [samiam ~/qm-1.1.3] > ./configure
> --prefix=/home/stannous/packages/qm-1.1.3 loading cache ./config.cache
> checking for python2... (cached) python
> checking Python version... Traceback (most recent call last):
>   File "<stdin>", line 6, in ?
> NameError: name 'EOF' is not defined
> Traceback (most recent call last):
>   File "<stdin>", line 6, in ?
> NameError: name 'EOF' is not defined
> 2.2

That's interesting.  It actually got the right answer, but it spewed
out these weird error messages.

It looks like your shell is not behaving as QMTest's configure script
expects.  We will attempt to fix this in the next release, but you
should be able to type "make" after getting the above and keep going
OK.

Thanks,

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From mark at codesourcery.com  Mon Apr 15 15:08:18 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 15 Apr 2002 08:08:18 -0700
Subject: [qmtest] Specifying arguments in derived test classes
In-Reply-To: <E16w0xG-0001DX-00@zigzag.lvk.cs.msu.su>
References: <E16w0xG-0001DX-00@zigzag.lvk.cs.msu.su>
Message-ID: <33080000.1018883298@gandalf.codesourcery.com>



--On Friday, April 12, 2002 05:19:05 PM +0400 Vladimir Prus 
<ghost at cs.msu.su> wrote:

>
> Hi,
> I'm trying to create a test class that would derive from python.ExecTest
> and  change it a little. In particular, I want to get rid of 'expession'
> argument.  I'm trying the following:
>
> class Test(python.ExecTest):
>
>     arguments = [
>         qm.fields.TextField(
>             name="source",
>             title="Python Source Code",
>             description="""The source code.
>
>             This code may contain class definitions, function
>             definitions, statements, and so forth.  If this code
>             throws an uncaught exception, the test will fail.""",
>             verbatim="true",
>             multiline="true",
>             default_value="pass"
>             )
>         ]
>
>     def __init__(self, **properties):
>
>         apply(python.ExecTest.__init__, (self,), properties)
>         self.expression = None
>
>     def Run(self, context, result):
> 	# Not relevant here
>
> However, I get a test class with three arguments: two defined in
> python.ExecTest and one defined in my class. How can I accomplish what I
> want?

There's no easy way to do this.

The plan is to add "computed arguments" which would solve this problem.
For the time being, you have no real choice but to create a whole new
class.

(At one point, it was possible to do approximately what you wanted;
each class could completely override "arguments".  We decided this was
a bad design since that meant that derived classes had to explicitly
list the arguments from the base classes, and there was no guarantee
that the "is-a" relationship would be preserved.)

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From ghost at cs.msu.su  Mon Apr 15 15:33:05 2002
From: ghost at cs.msu.su (Vladimir Prus)
Date: Mon, 15 Apr 2002 19:33:05 +0400
Subject: [qmtest] Specifying arguments in derived test classes
In-Reply-To: <33080000.1018883298@gandalf.codesourcery.com>
References: <E16w0xG-0001DX-00@zigzag.lvk.cs.msu.su> <33080000.1018883298@gandalf.codesourcery.com>
Message-ID: <E16x8TZ-0006C1-00@zigzag.lvk.cs.msu.su>

Mark Mitchell wrote:
> <ghost at cs.msu.su> wrote:
> > Hi,
> > I'm trying to create a test class that would derive from python.ExecTest
> > and  change it a little. In particular, I want to get rid of 'expession'
> > argument.  I'm trying the following:

> There's no easy way to do this.
>
> The plan is to add "computed arguments" which would solve this problem.
> For the time being, you have no real choice but to create a whole new
> class.
>
> (At one point, it was possible to do approximately what you wanted;
> each class could completely override "arguments".  We decided this was
> a bad design since that meant that derived classes had to explicitly
> list the arguments from the base classes, and there was no guarantee
> that the "is-a" relationship would be preserved.)

Actually, I don't think that there's the need to explicitly list arguments. 
Why the following is not appropriate:

class Test(python.ExecTest):

	arguments = [ ...... ] + python.ExecTest.arguments

	..........

- Volodya




From mark at codesourcery.com  Mon Apr 15 16:18:04 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 15 Apr 2002 09:18:04 -0700
Subject: [qmtest] Specifying arguments in derived test classes
In-Reply-To: <E16x8TZ-0006C1-00@zigzag.lvk.cs.msu.su>
References: <E16w0xG-0001DX-00@zigzag.lvk.cs.msu.su>
 <33080000.1018883298@gandalf.codesourcery.com>
 <E16x8TZ-0006C1-00@zigzag.lvk.cs.msu.su>
Message-ID: <39050000.1018887484@gandalf.codesourcery.com>



--On Monday, April 15, 2002 07:33:05 PM +0400 Vladimir Prus 
<ghost at cs.msu.su> wrote:

> Mark Mitchell wrote:
>> <ghost at cs.msu.su> wrote:
>> > Hi,
>> > I'm trying to create a test class that would derive from
>> > python.ExecTest and  change it a little. In particular, I want to get
>> > rid of 'expession' argument.  I'm trying the following:
>
>> There's no easy way to do this.
>>
>> The plan is to add "computed arguments" which would solve this problem.
>> For the time being, you have no real choice but to create a whole new
>> class.
>>
>> (At one point, it was possible to do approximately what you wanted;
>> each class could completely override "arguments".  We decided this was
>> a bad design since that meant that derived classes had to explicitly
>> list the arguments from the base classes, and there was no guarantee
>> that the "is-a" relationship would be preserved.)
>
> Actually, I don't think that there's the need to explicitly list
> arguments.  Why the following is not appropriate:
>
> class Test(python.ExecTest):
>
> 	arguments = [ ...... ] + python.ExecTest.arguments
>
> 	..........

Yes, that's exactly how it used to work.  We decided that a better
approach would be to allow derived classes to indicate that some
arguments could be computed by base classes instead -- but that has
not yet been implemented.

Another approach would be to make your new class a base class, and
derived ExecTest from that.

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



From KD.Mazboudi at secretseal.com  Tue Apr 23 17:20:45 2002
From: KD.Mazboudi at secretseal.com (KD Mazboudi)
Date: Tue, 23 Apr 2002 10:20:45 -0700
Subject: QMTest Error
Message-ID: <!~!UENERkVCMDkAAQACAAAAAAAAAAAAAAAAABgAAAAAAAAApQ0luu26GkqFTTRhehLGnMKAAAAQAAAAIh8JfMHnD0CFKrYv5Zyt9wEAAAAA@secretseal.com>

Hello,

I was trying to run 'test2' that has 'test1 (FAIL)' as prerequisite but
this fails with the following message. Any idea why this
might be happening.

Both tests are simple command.ShellCommandTest tests

Thanks

KD


Traceback (most recent call last):
  File "C:\progra~1\qm\lib\qm\qm\test\qmtest.py", line 78, in ?
    command.Execute(sys.stdout)
  File "C:\progra~1\qm\lib\qm\qm\test\cmdline.py", line 410, in Execute
    method(output)
  File "C:\progra~1\qm\lib\qm\qm\test\cmdline.py", line 790, in
__ExecuteRun
    engine.Run()
  File "C:\progra~1\qm\lib\qm\qm\test\execution_engine.py", line 129, in
Run
    self._RunTests()
  File "C:\progra~1\qm\lib\qm\qm\test\execution_engine.py", line 168, in
_RunTests
    prereq_desc = self.__descriptors[prereq_id]
KeyError: test1




From mark at codesourcery.com  Mon Apr 29 15:44:32 2002
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 29 Apr 2002 08:44:32 -0700
Subject: [qmtest] QMTest Error
In-Reply-To: <!~!UENERkVCMDkAAQACAAAAAAAAAAAAAAAAABgAAAAAAAAApQ0luu26GkqFTTRhehLGnMKAAAAQAAAAIh8JfMHnD0CFKrYv5Zyt9wEAAAAA@secretseal.com>
References: <!~!UENERkVCMDkAAQACAAAAAAAAAAAAAAAAABgAAAAAAAAApQ0luu26GkqFTTRh
 ehLGnMKAAAAQAAAAIh8JfMHnD0CFKrYv5Zyt9wEAAAAA@secretseal.com>
Message-ID: <278720000.1020095072@gandalf.codesourcery.com>



--On Tuesday, April 23, 2002 10:20:45 AM -0700 KD Mazboudi 
<KD.Mazboudi at secretseal.com> wrote:

> Hello,
>
> I was trying to run 'test2' that has 'test1 (FAIL)' as prerequisite but
> this fails with the following message. Any idea why this
> might be happening.

No -- but it's definitely a bug.  Would you mind sending me your
entire test database as a zip file?  Then I will try to figure out what
is going wrong.

Thanks,

--
Mark Mitchell                   mark at codesourcery.com
CodeSourcery, LLC               http://www.codesourcery.com



