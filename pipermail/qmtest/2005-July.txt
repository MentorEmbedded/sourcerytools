From mark at codesourcery.com  Wed Jul  6 15:48:42 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 06 Jul 2005 08:48:42 -0700
Subject: [Fwd: PATCH: Fix typo in qm/test/cmdline.py]
Message-ID: <42CBFD5A.7030406@codesourcery.com>

I mis-addressed this mail last night.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded message was scrubbed...
From: Mark Mitchell <mark at codesourcery.com>
Subject: PATCH: Fix typo in qm/test/cmdline.py
Date: Tue, 05 Jul 2005 23:27:12 -0700
Size: 2288
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050706/0d475e68/attachment.mht>

From stefan at codesourcery.com  Wed Jul  6 18:32:31 2005
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Wed, 06 Jul 2005 14:32:31 -0400
Subject: QMTest 2.3 Released
Message-ID: <42CC23BF.5000305@codesourcery.com>

QMTest 2.3 is now available from:

http://www.codesourcery.com/qm/qmtest_download

This release contains a number of major improvements relative to QMTest 2.2,
as described in the attached NEWS file.

--
Stefan Seefeld
CodeSourcery, LLC
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: NEWS
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050706/b0bc47b5/attachment.ksh>

From rpoppe65 at hotmail.com  Thu Jul  7 16:12:40 2005
From: rpoppe65 at hotmail.com (Richard Poppe)
Date: Thu, 07 Jul 2005 18:12:40 +0200
Subject: finished targets are not always detected
Message-ID: <BAY10-F40E232F2BE58A327500427C4D80@phx.gbl>

Hi,

My tests on windows PCs run several hours and therefore i am using two 
targets (executables) in parallel. But when a target finished its test, it 
is not always detected (but sometimes it is detected). The GUI 'view 
results' doesn't show the outcome and no new test is assigned to the 
finished target.

I installed the new QMTest version 2.3 to see if it solved my problem, but 
unfortunately it didn't.

The targets run on the local PC, Win2000.

<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//QM/2.3/Extension//EN'
  'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
<extension class="command.ExecTest" kind="test">
<argument name="stdin"><text/></argument>
<argument name="timeout"><integer>-1</integer></argument>
<argument name="stdout"><text/></argument>
<argument name="prerequisites"><set/></argument>
<argument name="target_group"><text>TP</text></argument>
<argument name="exit_code"><integer>100</integer></argument>
<argument name="environment"><set><text>omg=x5</text></set></argument>
<argument name="program"><text>c:\qm\qmini.exe</text></argument>
<argument name="arguments"><set/></argument>
<argument name="stderr"><text/></argument>
<argument name="resources"><set/></argument>
</extension>


Has anyone seen the same behaviour?

It might be related to another issue:

To: qmtest at xxxxxxxxxxxxxxxx
Subject: [qmtest] Problem with transition from 'Run test' to 'Show results'
From: "Richard Poppe" <rpoppe65 at xxxxxxxxxxx>
Date: Mon, 06 Jun 2005 14:39:43 +0200

Thanks,
Richard.

_________________________________________________________________
Nieuw: Beeld en geluid met MSN Messenger 7.0 http://messenger.msn.nl/



From kellyl at google.com  Fri Jul  8 19:15:13 2005
From: kellyl at google.com (Kelly Lucas)
Date: Fri, 08 Jul 2005 12:15:13 -0700
Subject: matching file contents
Message-ID: <42CED0C1.3050001@google.com>

I just created a demo test, and have the context pointing at a file. The 
file contains one string: 'test'

I then created a testcase that checks for the contents of 'test'. 
However, the test fails everytime, saying: "Contents do not match 
expected contents.

Any ideas what I did wrong? Do I need to enclose the string inside 
quotes or something?

kdl

-- 
Kelly D. Lucas
Software Test Engineer
Google, Inc.
kellyl at google.com
650.253.7953



From kellyl at google.com  Fri Jul 15 17:50:13 2005
From: kellyl at google.com (Kelly Lucas)
Date: Fri, 15 Jul 2005 10:50:13 -0700
Subject: Target File
Message-ID: <42D7F755.6060903@google.com>

The docs don't have an example for the format of the target file, nor do 
they specify how to set up resources.

Could someone post a sample of both?

kdl

-- 
Kelly D. Lucas
Software Test Engineer
Google, Inc.
kellyl at google.com
650.253.7953



From pankajj at qualcomm.com  Fri Jul 15 18:02:44 2005
From: pankajj at qualcomm.com (Pankaj Jain)
Date: Fri, 15 Jul 2005 11:02:44 -0700
Subject: [qmtest] Target File
References: <42D7F755.6060903@google.com>
Message-ID: <0c7d01c58967$66d3a3b0$5b051e0a@na.qualcomm.com>

I will do on this weekend for target file. 
----- Original Message ----- 
From: "Kelly Lucas" <kellyl at google.com>
To: <qmtest at codesourcery.com>
Sent: Friday, July 15, 2005 10:50 AM
Subject: [qmtest] Target File


> The docs don't have an example for the format of the target file, nor do 
> they specify how to set up resources.
> 
> Could someone post a sample of both?
> 
> kdl
> 
> -- 
> Kelly D. Lucas
> Software Test Engineer
> Google, Inc.
> kellyl at google.com
> 650.253.7953
>


From rpoppe65 at hotmail.com  Tue Jul 19 06:24:36 2005
From: rpoppe65 at hotmail.com (Richard Poppe)
Date: Tue, 19 Jul 2005 08:24:36 +0200
Subject: Problem with transition from 'Run test' to 'Show results'
Message-ID: <BAY20-F28D06C5677E017EE428B8FC4D40@phx.gbl>

I made a workaround for the transition problem in file:
C:\Python23\Lib\site-packages\qm\test\web\web.py (HandleRunTests)

In the web function "HandleRunTests" it seems that i have to redirect to the 
show-results page, before the execution thread starts. When i comment out 
the delay, the show-results page will be displayed directly (and refresh 
every few seconds). With the delay active the show-results page will never 
come up. After some time the (firefox) browser comes with a pop-up message 
that "www.ws6264.com" could not be found, while the base request was 
"http://ws6264:3503/test/something".

~~~~~~~~~~~~~~~~~~~~~~~~~~~~
comment out line 1860: time.sleep(5)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
C:\Python23\Lib\site-packages\qm\test\web\web.py (lines 1854-1864)
        # Start the thread.
        self.__execution_thread.start()

        # Sleep for a few seconds so that if we're only running one
        # test there's a good chance that it will finish before we
        # show the results page.
#        time.sleep(5)

        # Redirect to the results page.
        request = qm.web.WebRequest("show-results", base=request)
        raise qm.web.HttpRedirect, request

_________________________________________________________________
Altijd in contact met de kleinkinderen: MSN Messenger 
http://messenger.msn.nl/



From mark at codesourcery.com  Tue Jul 19 17:15:15 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Jul 2005 10:15:15 -0700
Subject: PATCH: Fix typo in file_database.py
Message-ID: <42DD3523.70304@codesourcery.com>

Here's a little patch to fix a typo in a comment.

Applied.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: file_database.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050719/d255d8bd/attachment.ksh>

From mark at codesourcery.com  Tue Jul 19 17:21:49 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Jul 2005 10:21:49 -0700
Subject: PATCH: Break out _GetShell in ShellScriptTest
Message-ID: <42DD36AD.1000102@codesourcery.com>

This patch makes it possible for classes derived from ShellScriptTest to 
use a different default shell.  For example, if you want to use 
ShellScriptTest to run Python tests, you can know use a derived class 
that defaults to "/usr/bin/env python" for the shell, rather than 
requiring users to explicitly set ShellScriptTest.script_shell in their 
context file.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: shell.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050719/4d58ddf7/attachment.ksh>

From mark at codesourcery.com  Tue Jul 19 22:19:12 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Jul 2005 15:19:12 -0700
Subject: PATCH: Generalize build_doc command
Message-ID: <42DD7C60.1040809@codesourcery.com>

I've been working on some documentation updates and fighting, once 
again, with the fact that everybody seems to put DocBook in different 
places.  This patch generalizes the build_doc command, so that (a) 
Debian Sarge is handled correctly, and (b) it's possible to override the 
location of the SGML declaration of XML, the DocBook DTD, and the DSSL 
stylesheets.  I've also made it possible to turn on and off the various 
kinds of documentation we generate (HTML, PDF, and internal).

Applied.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: doc.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050719/9740860d/attachment.ksh>

From mark at codesourcery.com  Tue Jul 19 22:37:09 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Jul 2005 15:37:09 -0700
Subject: Automatically updated documentation
Message-ID: <42DD8095.8090102@codesourcery.com>

I have updated:

   http://www.codesourcery.com/qmtest/development.html

so that automatically generated documentation (both the internals 
documentation and the reference manual) are provided.  This 
documentation will be automatically updated every time a change is made 
to QMTest.

FYI,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From mark at codesourcery.com  Tue Jul 19 22:40:30 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Jul 2005 15:40:30 -0700
Subject: PATCH: Add example of SetUp and CleanUp methods
Message-ID: <42DD815E.6090507@codesourcery.com>

Daniel pointed out that the QMTest manual claimed it gave an example for 
resources:

   Below is an example of setup and cleanup functions...

but that there was in fact no example.

This patch adds an example, taken from code in QMTest itself.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: doc.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050719/b996af64/attachment.ksh>

From pankajj at qualcomm.com  Tue Jul 19 23:25:53 2005
From: pankajj at qualcomm.com (Pankaj Jain)
Date: Tue, 19 Jul 2005 16:25:53 -0700
Subject: [qmtest] Target File
References: <42D7F755.6060903@google.com>
Message-ID: <083701c58cb9$35317800$34061e0a@na.qualcomm.com>

How to Create target:
Run the fallowing command
qmtest create-target -a host="hostname" "TargetName" rsh_target.RSHTarget 
"group name"
Where hostname = name or ip address of remote machine
      TargetName= for internal use of qmtest . same       as host name , 
dly-ydoa.
      GroupName= Group this remote target belongs to. ( e.g OFFICEMACHINE).

when you create a test you will sepcify the group name in target field.

understand GroupName: you can add multiple machine under one group. QMTest 
will pick any of the available machine randomly to run your test.if you want 
to run test on perticular machine create a dedicated group for it.

above command will create a "target" file in QMTest folder. sample target 
file looks like,
-----------------------------------------------------

<?xml version="1.0" ?>
<!DOCTYPE targets
  PUBLIC '-//QM/2.3/QMTest/Target//EN'

'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/qmtest/target//en.dtd'>
<targets><extension class="rsh_target.RSHTarget"
kind="target"><argument name="group"><text>LAB</text></argument><argument
name="name"><text>m1</text></argument></extension><extension
class="rsh_target.RSHTarget" kind="target"><argument
name="group"><text>OFFICE</text></argument><argument
name="name"><text>m2</text></argument></extension></targets>
----------------------------------------------------

Now the last step is to set the password less ssh for the remote machine. 
here are the steps
On the client run the following commands:

 mkdir -p $HOME/.ssh
 chmod 0700 $HOME/.ssh
 ssh-keygen -t rsa -f $HOME/.ssh/id_rsa -P ''

This should result in two files, $HOME/.ssh/id_rsa (private key) and 
$HOME/.ssh/id_dsa.pub (public key).
 Copy $HOME/.ssh/id_rsa.pub to the server.

On the server run the following commands:

 $ cat id_rsa.pub >>hOME/.ssh/authorized_keys2
. $ chmod 0600 $HOME/.ssh/authorized_keys2

Hope this will help.

----- Original Message ----- 
From: "Kelly Lucas" <kellyl at google.com>
To: <qmtest at codesourcery.com>
Sent: Friday, July 15, 2005 10:50 AM
Subject: [qmtest] Target File


> The docs don't have an example for the format of the target file, nor do 
> they specify how to set up resources.
>
> Could someone post a sample of both?
>
> kdl
>
> -- 
> Kelly D. Lucas
> Software Test Engineer
> Google, Inc.
> kellyl at google.com
> 650.253.7953
> 



From mark at codesourcery.com  Wed Jul 20 00:44:26 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 19 Jul 2005 17:44:26 -0700
Subject: PATCH: Do not silently ignore bogus prerequisites
Message-ID: <200507200044.j6K0iQAX005647@sethra.codesourcery.com>


If a test had a prerequisite that did not exist in the database, we
silently ignored it.  That situation probably reflects a problem with
the test database.  This patch therefore changes the behavior of
QMTest so that in this case the test with the bogus prerequisite is
UNTESTED.

Committed.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2005-07-19  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/execution_engine.py (ExecutionEngine.__AddTestToStack):
	If a test prerequisite does not exist, give the test an error
	outcome.
	* qm/test/share/messages/diagnostics.txt (prerequisite not in
	database): New message.
	* tests/regress/bad_prereq: New test.

	* qm/test/classes/python.py (ExecTest.Run): Handle empty input.

Index: qm/test/execution_engine.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/execution_engine.py,v
retrieving revision 1.29
diff -c -5 -p -r1.29 execution_engine.py
*** qm/test/execution_engine.py	26 May 2004 01:25:13 -0000	1.29
--- qm/test/execution_engine.py	20 Jul 2005 00:37:45 -0000
*************** class ExecutionEngine:
*** 547,556 ****
--- 547,569 ----
          # Load the descriptor.
          descriptor = self.__GetTestDescriptor(test_id)
          if not descriptor:
              return 0
  
+         # Check that all the prerequisites listed are actually present
+         # in the database.  We may not actually run all of them, but if
+         # they're completely missing, that indicates a problem with
+         # either the descriptor or the database.
+         for p in descriptor.GetPrerequisites():
+             if not self.__database.HasTest(p):
+                 self.__AddUntestedResult(
+                     test_id,
+                     qm.message("prerequisite not in database",
+                                prerequisite = p)
+                     )
+                 return 0
+         
          # Ignore prerequisites that are not going to be run at all.
          prereqs_iter = iter(descriptor.GetPrerequisites())
          relevant_prereqs = filter(self.__statuses.has_key, prereqs_iter)
  
          # Store the test on the stack.
Index: qm/test/classes/python.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/classes/python.py,v
retrieving revision 1.18
diff -c -5 -p -r1.18 python.py
*** qm/test/classes/python.py	22 Mar 2005 01:11:15 -0000	1.18
--- qm/test/classes/python.py	20 Jul 2005 00:37:45 -0000
*************** class ExecTest(Test):
*** 72,90 ****
          ]
  
  
      def Run(self, context, result):
  
!         # Adjust the source code.
!         if self.source is None:
!             self.source = ""
!         else:
!             # Make sure the source ends with a newline.  A user is
!             # likely to be confused by the error message if it's
!             # missing. 
!             if self.source[-1] != "\n":
!                 self.source = self.source + "\n" 
          global_namespace, local_namespace = make_namespaces(context)
          # Execute the source code.
          try:
              exec self.source in global_namespace, local_namespace
          except:
--- 72,88 ----
          ]
  
  
      def Run(self, context, result):
  
!         # Adjust the source code.  Make sure the source ends with a
!         # newline.  A user is likely to be confused by the error message
!         # if it's missing.
!         if not self.source:
!             self.source = "\n"
!         elif self.source[-1] != "\n":
!             self.source += "\n" 
          global_namespace, local_namespace = make_namespaces(context)
          # Execute the source code.
          try:
              exec self.source in global_namespace, local_namespace
          except:
Index: qm/test/share/messages/diagnostics.txt
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/share/messages/diagnostics.txt,v
retrieving revision 1.11
diff -c -5 -p -r1.11 diagnostics.txt
*** qm/test/share/messages/diagnostics.txt	13 Nov 2003 03:08:01 -0000	1.11
--- qm/test/share/messages/diagnostics.txt	20 Jul 2005 00:37:45 -0000
*************** The "%(file)s" target file could not be 
*** 39,53 ****
  @ dependency cycle
  This test depends on itself, either directly or by way of other tests.
  
  @ error loading xml resource
  A problem occurred while loading the XML resource file "%(resource_id)s":
! %(message)s.
  
  @ error loading xml test
  A problem occurred while loading the XML test file "%(test_id)s":
! %(message)s.
  
  @ execution terminated
  Termination was requested before this test was executed.
  
  @ extension class not found
--- 39,53 ----
  @ dependency cycle
  This test depends on itself, either directly or by way of other tests.
  
  @ error loading xml resource
  A problem occurred while loading the XML resource file "%(resource_id)s":
! %(message)s
  
  @ error loading xml test
  A problem occurred while loading the XML test file "%(test_id)s":
! %(message)s
  
  @ execution terminated
  Termination was requested before this test was executed.
  
  @ extension class not found
*************** An extension class failed to override th
*** 185,194 ****
--- 185,197 ----
  The following traceback may be helpful to the extension class implementor.
  
  @ not test database
  "%(path)s" is not a test database.
  
+ @ prerequisite not in database
+ The non-existant test "%(prerequisite)s" is listed as a prerequisite.
+  
  @ seed not integer
  The random number generator seed you specified, "%(seed)s", is not an
  integer. 
  
  @ suite already exists
Index: tests/regress/bad_prereq/a.qmt
===================================================================
RCS file: tests/regress/bad_prereq/a.qmt
diff -N tests/regress/bad_prereq/a.qmt
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- tests/regress/bad_prereq/a.qmt	20 Jul 2005 00:37:45 -0000
***************
*** 0 ****
--- 1,9 ----
+ <?xml version="1.0" ?>
+ <!DOCTYPE extension
+   PUBLIC '-//QM/2.3/Extension//EN'
+   'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
+ <extension class="python.ExecTest" kind="test">
+  <argument name="source"><text/></argument>
+  <argument name="expression"><text>True</text></argument>
+  <argument name="prerequisites"><set><tuple><text>bad_prereq</text><enumeral>PASS</enumeral></tuple></set></argument>
+ </extension>
Index: tests/regress/bad_prereq/results.qmr
===================================================================
RCS file: tests/regress/bad_prereq/results.qmr
diff -N tests/regress/bad_prereq/results.qmr
Binary files /dev/null and results.qmr differ
Index: tests/regress/bad_prereq/QMTest/configuration
===================================================================
RCS file: tests/regress/bad_prereq/QMTest/configuration
diff -N tests/regress/bad_prereq/QMTest/configuration
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- tests/regress/bad_prereq/QMTest/configuration	20 Jul 2005 00:37:45 -0000
***************
*** 0 ****
--- 1,5 ----
+ <?xml version="1.0" ?>
+ <!DOCTYPE extension
+   PUBLIC '-//QM/2.3/Extension//EN'
+   'http://www.codesourcery.com/qm/dtds/2.3/-//qm/2.3/extension//en.dtd'>
+ <extension class="xml_database.XMLDatabase" kind="database"/>
\ No newline at end of file


From mark at codesourcery.com  Wed Jul 20 14:39:14 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 20 Jul 2005 07:39:14 -0700
Subject: PATCH: Add more documentation for prerequisites
Message-ID: <42DE6212.9050208@codesourcery.com>

Prerequisites seem to confuse a lot of people; here's a documentation 
update that tries to clarify their purpose and the fact that you should 
not use prerequisite tests to try to make one test depend on 
side-effects from another test.

Committed.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: doc.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050720/1c4b315d/attachment.ksh>

From dan at codesourcery.com  Wed Jul 20 14:48:40 2005
From: dan at codesourcery.com (Daniel Jacobowitz)
Date: Wed, 20 Jul 2005 10:48:40 -0400
Subject: PATCH: Add more documentation for prerequisites
In-Reply-To: <42DE6212.9050208@codesourcery.com>
References: <42DE6212.9050208@codesourcery.com>
Message-ID: <20050720144839.GB8960@nevyn.them.org>

On Wed, Jul 20, 2005 at 07:39:14AM -0700, Mark Mitchell wrote:
> Prerequisites seem to confuse a lot of people; here's a documentation 
> update that tries to clarify their purpose and the fact that you should 
> not use prerequisite tests to try to make one test depend on 
> side-effects from another test.

Thanks - this is much clearer.

-- 
Daniel Jacobowitz
CodeSourcery, LLC


From mark at codesourcery.com  Thu Jul 21 04:55:54 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 20 Jul 2005 21:55:54 -0700
Subject: PATCH: Robustify executable.py
Message-ID: <42DF2ADA.6000607@codesourcery.com>

This patch fixes a bug in TimeoutExecutable; in particular, when os.fork 
threw an exception, TimeoutExecutable still tried to kill the child 
process.

This situation showed up for me on Cygwin, where, for some reason, 
calling os.fork results in:

C:\cygwin\bin\python2.4.exe (3076): *** unable to remap 
C:\cygwin\bin\cygssl-0.9.7.dll to same address as parent(0x18CA0000) != 
0x18CB0000

Does anyone know how to avoid this problem?

Committed.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: executable.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050720/44ca76b5/attachment.ksh>

From mark at codesourcery.com  Thu Jul 21 05:12:50 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 20 Jul 2005 22:12:50 -0700
Subject: PATCH: Deprecate special-purpose database methods
Message-ID: <200507210512.j6L5CoF9014724@sethra.codesourcery.com>


In the early history of QMTest, the various things in a database
(namely tests, resources, and suites) were completely disaparate
entities.  Eventually, we reworked things so that all of these
entities were instances of "Extension".  However, an ugly wart
remained: we still had Database.GetTest, Database.GetResource, and
Database.GetSuite.  

This patch adds Database.GetExtension, and new databases should
override that method, rather than the old methods.  See the updated
documentation attached for more information.

As a side-effect, writing database classes that permit multiple
entries with the same name (like having a test and resource both named
"foo") is no longer supported.  That was never an intentional feature;
it was merely an accident of the original implementation, and breaks
the conceptual model of a Database as logically similar to a
filesystem.  Existing database classes will continue to work, but any
dependence on this time is deprecated.

Committed.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2005-07-20  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/database.py (qm.test.resource.Resource): Import it.
	(qm.test.suite.Suite): Likewise.
	(Database._is_generic_database): New
	variable.
	(Database.GetExtension): New function.
	(Database.GetTest): Use it.
	(Database.GetResource): Likewise.
	(Database.GetSuite): Likewise.
	* qm/test/doc/reference.xml: Update information about writing
	database classes.

Index: qm/test/database.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/database.py,v
retrieving revision 1.42
diff -c -5 -p -r1.42 database.py
*** qm/test/database.py	31 May 2005 15:48:37 -0000	1.42
--- qm/test/database.py	21 Jul 2005 05:04:48 -0000
*************** import qm.extension
*** 24,33 ****
--- 24,35 ----
  import qm.fields
  from   qm.label import *
  from   qm.test.base import *
  from   qm.test.directory_suite import DirectorySuite
  from   qm.test.runnable import Runnable
+ from   qm.test.resource import Resource
+ from   qm.test.suite import Suite
  from   qm.test.test import Test
  
  ########################################################################
  # Variables
  ########################################################################
*************** class Database(qm.extension.Extension):
*** 493,502 ****
--- 495,513 ----
          }
      """The exceptions to be raised when a particular item cannot be found.
  
      This map is indexed by the 'ITEM_KINDS'; the value indicates the
      exception class to be used when the indicated kind cannot be found."""
+ 
+     _is_generic_database = False
+     """True if this database implements 'GetExtension' as a primitive.
+ 
+     Databases should implement 'GetExtension' and then override
+     '_is_generic_database', setting it to 'True'.  However, legacy
+     databases implemented 'GetTest', 'GetResource', and 'GetSuite' as
+     primivites.  These legacy databases should not override
+     '_generic_database'."""
      
      kind = "database"
      """The 'Extension' kind."""
  
      def __init__(self, path, arguments):
*************** class Database(qm.extension.Extension):
*** 590,600 ****
                  components.append(label)
                  break
  
          return components
      
!                 
      # Methods that deal with tests.
      
      def GetTest(self, test_id):
          """Return the 'TestDescriptor' for the test named 'test_id'.
  
--- 601,669 ----
                  components.append(label)
                  break
  
          return components
      
! 
!     # Generic methods that deal with extensions.
!     
!     def GetExtension(self, id):
!         """Return the extension object named 'id'.
! 
!         'id' -- The label for the extension.
! 
!         returns -- The instance of 'Extension' with the indicated name,
!         or 'None' if there is no such entity.
! 
!         Database classes should override this method, and then define
!         'GetTest', 'GetResource', and 'GetSuite' in terms of this
!         method.  However, for backwards compatibility, this base class
!         implements this generic method in terms of the special-purpose
!         methods."""
! 
!         for kind in (Database.TEST, Database.RESOURCE):
!             try:
!                 item = self.GetItem(kind, id).GetItem()
!             except NoSuchItemError:
!                 pass
!             
!         try:
!             return self.GetSuite(id)
!         except NoSuchSuiteError:
!             pass
! 
!         return None
!         
!             
!     def RemoveExtension(self, id, kind):
!         """Remove the extension 'id' from the database.
! 
!         'id' -- A label for the 'Extension' instance stored in the
!         database.
! 
!         'kind' -- The kind of 'Extension' stored with the given 'id'."""
! 
!         raise NotImplementedError
!         
!         
!     def WriteExtension(self, id, extension):
!         """Store 'extension' in the database, using the name 'id'.
! 
!         'id' -- A label for the 'extension'.
!         
!         'extension' -- An instance of 'Extension'.
! 
!         The 'extension' is stored in the database.  If there is a
!         previous item in the database with the same id, it is removed
!         and replaced with 'extension'.  Some databases may not be able
!         to store all 'Extension' instances; those database must throw an
!         exception when an attempt is made to store such an
!         'extension'."""
! 
!         raise NotImplementedError
!         
!         
      # Methods that deal with tests.
      
      def GetTest(self, test_id):
          """Return the 'TestDescriptor' for the test named 'test_id'.
  
*************** class Database(qm.extension.Extension):
*** 603,612 ****
--- 672,689 ----
          returns -- A 'TestDescriptor' corresponding to 'test_id'.
          
          raises -- 'NoSuchTestError' if there is no test in the database
          named 'test_id'."""
  
+         if self._is_generic_database:
+             test = self.GetExtension(test_id)
+             if isinstance(test, Test):
+                 return TestDescriptor(self,
+                                       test_id,
+                                       test.GetClassName(),
+                                       test.GetExplicitArguments())
+         
          raise NoSuchTestError(test_id)
  
  
      def HasTest(self, test_id):
          """Check whether or not the database has a test named 'test_id'.
*************** class Database(qm.extension.Extension):
*** 665,674 ****
--- 742,756 ----
          subdirectories."""
  
          if suite_id == "":
              return DirectorySuite(self, "")
  
+         if self._is_generic_database:
+             suite = GetExtension(suite_id)
+             if isinstance(suite, Suite):
+                 return suite
+             
          raise NoSuchSuiteError(suite_id)
  
  
      def HasSuite(self, suite_id):
          """Check whether or not the database has a suite named 'suite_id'.
*************** class Database(qm.extension.Extension):
*** 724,733 ****
--- 806,823 ----
          returns -- A 'ResourceDescriptor' corresponding to 'resource_id'.
          
          raises -- 'NoSuchResourceError' if there is no resource in the
          database named 'resource_id'."""
  
+         if self._is_generic_database:
+             resource = self.GetExtension(resource_id)
+             if isinstance(resource, Resource):
+                 return ResourceDescriptor(self,
+                                           resource_id,
+                                           resource.GetClassName(),
+                                           resource.GetExplicitArguments())
+             
          raise NoSuchResourceError(resource_id)
  
  
      def HasResource(self, resource_id):
          """Check whether or not the database has a resource named
*************** class Database(qm.extension.Extension):
*** 951,991 ****
  
          # Convert the maps to sequences.
          return test_ids.keys(), suite_ids.keys()
  
  
-     def RemoveExtension(self, id, kind):
-         """Remove the extension 'id' from the database.
- 
-         'id' -- A label for the 'Extension' instance stored in the
-         database.
- 
-         'kind' -- The kind of 'Extension' stored with the given 'id'.
-         Some databases store different kinds of 'Extension' in different
-         namespaces so that it is possible for there to be more than one
-         'Extension' with the same 'id' in a single database."""
- 
-         raise NotImplementedError
-         
-         
-     def WriteExtension(self, id, extension):
-         """Store 'extension' in the database, using the name 'id'.
- 
-         'id' -- A label for the 'extension'.
-         
-         'extension' -- An instance of 'Extension'.
- 
-         The 'extension' is stored in the database.  If there is a
-         previous item in the database with the same id', it is removed
-         and replaced with 'extension'.  Some databases may not be able
-         to store all 'Extension' instances; those database must throw an
-         exception when an attempt is made to store such an
-         'extension'."""
- 
-         raise NotImplementedError
-         
-         
      def IsModifiable(self):
          """Returns true iff this database is modifiable.
  
          returns -- True iff this database is modifiable.  If the
          database is modifiable, it supports operatings like 'Write'
--- 1041,1050 ----
Index: qm/test/doc/reference.xml
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/doc/reference.xml,v
retrieving revision 1.40
diff -c -5 -p -r1.40 reference.xml
*** qm/test/doc/reference.xml	20 Jul 2005 14:36:11 -0000	1.40
--- qm/test/doc/reference.xml	21 Jul 2005 05:04:48 -0000
***************
*** 2446,2457 ****
    server.</para>
  
    <para>A test database class is a Python class that is derived from
    &database_class;, which is itself derived from
    <classname>Extension</classname>.  To create a new database class,
!   you must define methods that read and write tests, resources, and
!   suites.</para>
  
    <para>The database is also responsible for determining how tests
    (and other entities stored in the database) are named.  Each item
    stored in the database must have a unique name.  For a database that
    stores files in the filesystem, the name of the file may be a good
--- 2446,2457 ----
    server.</para>
  
    <para>A test database class is a Python class that is derived from
    &database_class;, which is itself derived from
    <classname>Extension</classname>.  To create a new database class,
!   you must define methods that read and write
!   <classname>Extension</classname> instances.</para>
  
    <para>The database is also responsible for determining how tests
    (and other entities stored in the database) are named.  Each item
    stored in the database must have a unique name.  For a database that
    stores files in the filesystem, the name of the file may be a good
***************
*** 2459,2551 ****
    the module might be a good name for the tests.  Choosing the naming
    convention appropriate requires understanding both the application
    domain and the way in which the tests will actually be
    stored.</para>
    
!   <para>The database class must have a <function>GetTest</function>
!   function which retrieves a test from the database.  The
!   <parameter>test_id</parameter> parameter provide the name of the
!   test.  The <function>GetTest</function> function returns a
!   &test_descriptor_class;.
!   <footnote><para><function>GetTest</function> returns a
!   <classname>TestDescriptor</classname>, rather than a
!   <classname>Test</classname>, because that allows QMTest to avoid
!   loading in the test class.  If you are running many tests in
!   parallel, on many different machines, this indirection makes QMTest
!   more effficient; QMTest only needs to load a particular test class
!   on a particular machine if an instance of that class is being run
!   on that machine.</para></footnote> A
!   <classname>TestDescriptor</classname> indicates the test class, and
!   the arguments to that test class.  QMTest uses that information to
!   instantiate an instance of the test class itself as
!   appropriate.</para>
! 
!   <para>The <function>Write</function> function is the inverse of
!   <function>GetTest</function>.  The test database is responsible for
!   storing the <classname>Test</classname> provided.  The name of test
!   can be obtained by calling <function>GetId</function> on the
!   <classname>Test</classname>.  When the <function>Remove</function>
!   function is called the database is responsible for removing the test
!   named by the <parameter>id</parameter> parameter.</para>
! 
!   <para>The functions that handle resources are analogous to those
!   for tests.  For exmaple, <function>GetResource</function> plays the
!   same role for resources as <function>GetTest</function> does for
!   tests.</para>
!   
!  </section> <!-- sec-ref-writing-database-classes -->
! 
!   <section id="sec-registering-extension-class">
!    <title>Registering an Extension Class</title>
! 
!    <para>To use your test or resource class, you must place the Python
!    module file containing it in a directory where &qmtest; can find
!    it.  &qmtest; looks in three places when loading
!    extension classes:</para>
! 
!    <itemizedlist>
!     <listitem>
!      <para>If the environment variable <envar>QMTEST_CLASS_PATH</envar>
!      is defined, &qmtest first checks any directories listed in it.
!      This value of this environment variable should be a list of
!      directories to check for the module file, in the same format as
!      the standard <envar>PATH</envar> environment variable.</para>
!     </listitem>
! 
!     <listitem>
!      <para>A test database may specify additional locations to check.</para>
!     </listitem>
! 
!     <listitem>
!      <para>QMTest checks the configuration directory (the subdirectory
!      named <filename>QMTest</filename> of a test database).</para>
!     </listitem>
! 
!     <listitem>
!      <para>Finally, &qmtest; checks a standard directory.  This
!      directory, installed with &qmtest;, contains modules with the
!      standard test classes described in <xref
!      linkend="sec-ref-classes"/>.</para>
!     </listitem>
!    </itemizedlist>
! 
!    <para>You should generally place module files containing your test
!    classes in the test database's <filename>QMTest</filename>
!    directory, unless you plan to use the test classes in more than one
!    test database.</para>
! 
!    <para>You must use the <command>&qmtest-cmd; register</command>
!    command to register your new extension class.  You must perform
!    this step no matter where you place the module containing your
!    extension class.</para>
! 
!    <para>You can refer to the new extension class using the syntax
!    <classname>module.Class</classname>, where
!    <classname>module</classname> is the name of the module and
!    <classname>Class</classname> is the name of the class.</para>
  
!   </section> <!-- sec-registering-extension-class -->
  
  </chapter> <!-- chap-test-extension -->
  
  <!--
    Local Variables:
--- 2459,2528 ----
    the module might be a good name for the tests.  Choosing the naming
    convention appropriate requires understanding both the application
    domain and the way in which the tests will actually be
    stored.</para>
    
!   <para>The database class must have a
!   <function>GetExtension</function> method which retrieves an instance
!   of <classname>Extension</classname> given the name of the instance.
!   If your database is modifiable, you must also provide
!   <function>WriteExtension</function> and
!   <function>RemoveExtension</function> methods.  For historical
!   reasons, your database class must also set the class variable
!   <varname>_is_generic_database</varname> to true.</para> </section>
!  <!-- sec-ref-writing-database-classes -->
! 
!  <section id="sec-registering-extension-class">
!   <title>Registering an Extension Class</title>
! 
!   <para>To use your test or resource class, you must place the Python
!   module file containing it in a directory where &qmtest; can find
!   it.  &qmtest; looks in three places when loading
!   extension classes:</para>
! 
!   <itemizedlist>
!    <listitem>
!     <para>If the environment variable <envar>QMTEST_CLASS_PATH</envar>
!     is defined, &qmtest first checks any directories listed in it.
!     This value of this environment variable should be a list of
!     directories to check for the module file, in the same format as
!     the standard <envar>PATH</envar> environment variable.</para>
!    </listitem>
! 
!    <listitem>
!     <para>A test database may specify additional locations to check.</para>
!    </listitem>
! 
!    <listitem>
!     <para>QMTest checks the configuration directory (the subdirectory
!     named <filename>QMTest</filename> of a test database).</para>
!    </listitem>
! 
!    <listitem>
!     <para>Finally, &qmtest; checks a standard directory.  This
!     directory, installed with &qmtest;, contains modules with the
!     standard test classes described in <xref
!     linkend="sec-ref-classes"/>.</para>
!    </listitem>
!   </itemizedlist>
! 
!   <para>You should generally place module files containing your test
!   classes in the test database's <filename>QMTest</filename>
!   directory, unless you plan to use the test classes in more than one
!   test database.</para>
! 
!   <para>You must use the <command>&qmtest-cmd; register</command>
!   command to register your new extension class.  You must perform
!   this step no matter where you place the module containing your
!   extension class.</para>
! 
!   <para>You can refer to the new extension class using the syntax
!   <classname>module.Class</classname>, where
!   <classname>module</classname> is the name of the module and
!   <classname>Class</classname> is the name of the class.</para>
  
!  </section> <!-- sec-registering-extension-class -->
  
  </chapter> <!-- chap-test-extension -->
  
  <!--
    Local Variables:


From mark at codesourcery.com  Thu Jul 21 08:09:43 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 21 Jul 2005 01:09:43 -0700
Subject: PATCH: Generalize "qmtest create"
Message-ID: <200507210809.j6L89hB4018139@sethra.codesourcery.com>


This patch adds support for generating new entries in a test database
from the command line.  For example, you can say:

  qmtest create --id=simple -a program=testprog test command.ExecTest

to create a new test named "simple" in your database, using the
"command.ExecTest" test class, with the "program" argument
"testprog".  This will work independently of the storage format used
by your database.

The old "qmtest create" behavior (generating an XML file) still works;
if you don't use "--id" you get the old behavior.

Committed.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2005-07-21  Mark Mitchell  <mark at codesourcery.com>

	* qm/extension.py (Extension.GetClassName): New method.
	(Extension.GetExplicitArguments): Likewise.
	(Extension.MakeDomEelement): Use GetExplicitArguments.
	(parse_descriptor): Add extension_loader.
	* qm/test/cmdline.py (qm.test.runnable.Runnable): Import it.
	(QMTest.extension_id_option_spec): New variable.
	(QMTest.conflicting_option_specs): Update.
	(QMTest.__ExecuteCreate): Support writing extensions to the
	database.
	* qm/test/database.py (Database.GetExtension): Fix typo.
	* qm/test/doc/reference.xml: Document --id option to "qmtest
	create".
	* qm/test/share/messages/diagnostics.txt (db not modifiable): New
	message.
	(no db specified): Update message.

Index: qm/extension.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/extension.py,v
retrieving revision 1.18
diff -c -5 -p -r1.18 extension.py
*** qm/extension.py	10 Jun 2005 20:49:40 -0000	1.18
--- qm/extension.py	21 Jul 2005 08:05:39 -0000
*************** class Extension(object):
*** 163,186 ****
          if field is None:
              raise AttributeError, name
          return field.GetDefaultValue()
  
  
!     def MakeDomElement(self, document, element = None):
!         """Create a DOM node for 'self'.
  
-         'document' -- The DOM document that will contain the new
-         element.
-         
-         'element' -- If not 'None' the extension element to which items
-         will be added.  Otherwise, a new element will be created by this
-         function.
          
!         returns -- A new DOM element corresponding to an instance of the
!         extension class.  The caller is responsible for attaching it to
!         the 'document'."""
  
          # Get all of the arguments.
          arguments = get_class_arguments_as_dictionary(self.__class__)
          # Determine which subset of the 'arguments' have been set
          # explicitly.
          explicit_arguments = {}
--- 163,187 ----
          if field is None:
              raise AttributeError, name
          return field.GetDefaultValue()
  
  
!     def GetClassName(self):
!         """Return the name of the extension class.
! 
!         returns -- A string giving the name of this etension class."""
! 
!         return get_extension_class_name(self.__class__)
  
          
!     def GetExplicitArguments(self):
!         """Return the arguments to this extension instance.
  
+         returns -- A dictionary mapping argument names to their
+         values.  Computed arguments are ommitted from the
+         dictionary."""
+         
          # Get all of the arguments.
          arguments = get_class_arguments_as_dictionary(self.__class__)
          # Determine which subset of the 'arguments' have been set
          # explicitly.
          explicit_arguments = {}
*************** class Extension(object):
*** 189,199 ****
              if field.IsComputed():
                  continue
              if self.__dict__.has_key(name):
                  explicit_arguments[name] = self.__dict__[name]
  
!         return make_dom_element(self.__class__, explicit_arguments,
                                  document, element)
  
  
      def MakeDomDocument(self):
          """Create a DOM document for 'self'.
--- 190,218 ----
              if field.IsComputed():
                  continue
              if self.__dict__.has_key(name):
                  explicit_arguments[name] = self.__dict__[name]
  
!         return explicit_arguments
! 
!         
!     def MakeDomElement(self, document, element = None):
!         """Create a DOM node for 'self'.
! 
!         'document' -- The DOM document that will contain the new
!         element.
!         
!         'element' -- If not 'None' the extension element to which items
!         will be added.  Otherwise, a new element will be created by this
!         function.
!         
!         returns -- A new DOM element corresponding to an instance of the
!         extension class.  The caller is responsible for attaching it to
!         the 'document'."""
! 
!         return make_dom_element(self.__class__,
!                                 self.GetExplicitArguments(),
                                  document, element)
  
  
      def MakeDomDocument(self):
          """Create a DOM document for 'self'.
*************** def get_class_arguments(extension_class)
*** 236,245 ****
--- 255,265 ----
      arguments in the class hierarchy."""
  
      assert issubclass(extension_class, Extension)
      return extension_class._argument_list        
  
+ 
  def get_class_arguments_as_dictionary(extension_class):
      """Return the arguments associated with 'extension_class'.
  
      'extension_class' -- A class derived from 'Extension'.
  
*************** def read_extension_file(file, class_load
*** 487,511 ****
      document = qm.xmlutil.load_xml(file)
      return parse_dom_element(document.documentElement,
                               class_loader,
                               attachment_store)
  
!     
! def parse_descriptor(descriptor, class_loader):
      """Parse a descriptor representing an instance of 'Extension'.
  
      'descriptor' -- A string representing an instance of 'Extension'.
      The 'descriptor' has the form 'class(arg1 = "val1", arg2 = "val2",
      ...)'.  The arguments and the parentheses are optional.
  
!     If 'class' names a file in the file system, it is assumed to be an
!     extension file.  Any attributes provided in the descriptor
!     override those in the file.
  
!     'class_loader' -- A callable.  The callable will be passed the
!     name of the extension class and must return the actual class
!     object.
  
      returns -- A pair ('extension_class', 'arguments') containing the
      extension class (a class derived from 'Extension') and the
      arguments (a dictionary mapping names to values) stored in the
      'element'.  The 'arguments' will have already been processed by
--- 507,535 ----
      document = qm.xmlutil.load_xml(file)
      return parse_dom_element(document.documentElement,
                               class_loader,
                               attachment_store)
  
! 
! def parse_descriptor(descriptor, class_loader, extension_loader = None):
      """Parse a descriptor representing an instance of 'Extension'.
  
      'descriptor' -- A string representing an instance of 'Extension'.
      The 'descriptor' has the form 'class(arg1 = "val1", arg2 = "val2",
      ...)'.  The arguments and the parentheses are optional.
  
!     'class_loader' -- A callable that, when passed the name of the
!     extension class, will return the actual Python class object.
  
!     'extension_loader' -- A callable that loads an existing extension
!     given the name of that extension and returns a tuple '(class,
!     arguments)' where 'class' is a class derived from 'Extension'.  If
!     'extension_loader' is 'None', or if the 'class' returned is
!     'None', then if a file exists named 'class', the extension is read
!     from 'class' as XML.  Any arguments returned by the extension
!     loader or read from the file system are overridden by the
!     arguments explicitly provided in the descriptor.
  
      returns -- A pair ('extension_class', 'arguments') containing the
      extension class (a class derived from 'Extension') and the
      arguments (a dictionary mapping names to values) stored in the
      'element'.  The 'arguments' will have already been processed by
*************** def parse_descriptor(descriptor, class_l
*** 520,536 ****
      else:
          # The class name is the part of the descriptor up to the
          # parenthesis.
          class_name = descriptor[:open_paren]
  
!     # Load the extension class.
!     if os.path.exists(class_name):
!         extension_class, orig_arguments \
!             = read_extension_file(open(class_name), class_loader)
!     else:
!         extension_class = class_loader(class_name)
!         orig_arguments = {}
  
      arguments = {}
      
      # Parse the arguments.
      if open_paren != -1:
--- 544,567 ----
      else:
          # The class name is the part of the descriptor up to the
          # parenthesis.
          class_name = descriptor[:open_paren]
  
!     # Load the extension, if it already exists.
!     extension_class = None
!     if extension_loader:
!         extension = extension_loader(class_name)
!         if extension:
!             extension_class = extension.__class__
!             orig_arguments = extension.GetExplicitArguments()
!     if not extension_class:
!         if os.path.exists(class_name):
!             extension_class, orig_arguments \
!                 = read_extension_file(open(filename), class_loader)
!         else:
!             extension_class = class_loader(class_name)
!             orig_arguments = {}
  
      arguments = {}
      
      # Parse the arguments.
      if open_paren != -1:
Index: qm/test/cmdline.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/cmdline.py,v
retrieving revision 1.108
diff -c -5 -p -r1.108 cmdline.py
*** qm/test/cmdline.py	6 Jul 2005 06:24:17 -0000	1.108
--- qm/test/cmdline.py	21 Jul 2005 08:05:39 -0000
*************** import qm.platform
*** 27,36 ****
--- 27,37 ----
  from   qm.test import test
  from   qm.test.result import Result
  from   qm.test.context import *
  from   qm.test.execution_engine import *
  from   qm.test.result_stream import ResultStream
+ from   qm.test.runnable import Runnable
  from   qm.test.report import ReportGenerator
  from   qm.trace import *
  import qm.test.web.web
  import qm.xmlutil
  import Queue
*************** class QMTest:
*** 138,147 ****
--- 139,155 ----
          "o",
          "output",
          "FILE",
          "Write the extension to FILE.",
          )
+ 
+     extension_id_option_spec = (
+         "i",
+         "id",
+         "NAME",
+         "Write the extension to the database as NAME.",
+         )
          
      output_option_spec = (
          "o",
          "output",
          "FILE",
*************** class QMTest:
*** 298,307 ****
--- 306,316 ----
  
      # Groups of options that should not be used together.
      conflicting_option_specs = (
          ( output_option_spec, no_output_option_spec ),
          ( concurrent_option_spec, targets_option_spec ),
+         ( extension_output_option_spec, extension_id_option_spec ),
          )
  
      global_options_spec = [
          help_option_spec,
          version_option_spec,
*************** class QMTest:
*** 315,342 ****
           """Create (or update) an extension.
  
           The EXTENSION-KIND indicates what kind of extension to
           create; it must be one of """ + __extension_kinds_string + """.
  
!          The CLASS-NAME indicates the name of the extension class.  It
!          must have the form 'MODULE.CLASS'.  For a list of available
!          extension classes use "qmtest extensions".  If the extension
!          class takes arguments, those arguments can be specified after
!          the CLASS-NAME as show above.
  
           Any "--attribute" options are processed before the arguments
           specified after the class name.  Therefore, the "--attribute"
           options can be overridden by the arguments provided after the
           CLASS-NAME.  If no attributes are specified, the parentheses
           following the 'CLASS-NAME' can be omitted.
  
!          The extension instance is written to the file given by the
!          "--output" option, or to the standard output if no "--output"
!          option is present.""",
           ( attribute_option_spec,
             help_option_spec,
!            extension_output_option_spec,
             ),
           ),
             
          ("create-target",
           "Create (or update) a target specification.",
--- 324,358 ----
           """Create (or update) an extension.
  
           The EXTENSION-KIND indicates what kind of extension to
           create; it must be one of """ + __extension_kinds_string + """.
  
!          The CLASS-NAME indicates the name of the extension class, or
!          the name of an existing extension object.  If the CLASS-NAME
!          is the name of a extension in the test database, then the 
! 
!          In the former case, it must have the form 'MODULE.CLASS'.  For
!          a list of available extension classes use "qmtest extensions".
!          If the extension class takes arguments, those arguments can be
!          specified after the CLASS-NAME as show above.  In the latter
!          case,
  
           Any "--attribute" options are processed before the arguments
           specified after the class name.  Therefore, the "--attribute"
           options can be overridden by the arguments provided after the
           CLASS-NAME.  If no attributes are specified, the parentheses
           following the 'CLASS-NAME' can be omitted.
  
!          If the "--id" option is given, the extension is written to the
!          database.  Otherwise, if the "--output" option is given, the
!          extension is written as XML to the file indicated.  If neither
!          option is given, the extension is written as XML to the
!          standard output.""",
           ( attribute_option_spec,
             help_option_spec,
!            extension_id_option_spec,
!            extension_output_option_spec
             ),
           ),
             
          ("create-target",
           "Create (or update) a target specification.",
*************** Valid formats are %s.
*** 882,917 ****
          
          # Get the extension kind.
          kind = self.__arguments[0]
          self.__CheckExtensionKind(kind)
  
!         # Get the --attribute options.
!         arguments = self.__GetAttributeOptions()
  
          # Process the descriptor.
          (extension_class, more_arguments) \
               = (qm.extension.parse_descriptor
!                 (self.__arguments[1],
!                  lambda n: \
!                      qm.test.base.get_extension_class(n, kind, database)))
  
          # Validate the --attribute options.
          arguments = qm.extension.validate_arguments(extension_class,
                                                      arguments)
          # Override the --attribute options with the arguments provided
          # as part of the descriptor.
          arguments.update(more_arguments)
  
!         # Figure out what file to use.
!         filename = self.GetCommandOption("output")
!         if filename is not None:
!             file = open(filename, "w")
          else:
!             file = sys.stdout
!                                      
!         # Write out the file.
!         qm.extension.write_extension_file(extension_class, arguments, file)
  
          return 0
      
          
      def __ExecuteCreateTdb(self, db_path):
--- 898,954 ----
          
          # Get the extension kind.
          kind = self.__arguments[0]
          self.__CheckExtensionKind(kind)
  
!         extension_id = self.GetCommandOption("id")
!         if extension_id is not None:
!             if not database:
!                 raise QMException, qm.error("no db specified")
!             if not database.IsModifiable():
!                 raise QMException, qm.error("db not modifiable")
!             extension_loader = database.GetExtension
!         else:
!             extension_loader = None
  
+         class_loader = lambda n: \
+             qm.test.base.get_extension_class(n, kind, database)
+         
          # Process the descriptor.
          (extension_class, more_arguments) \
               = (qm.extension.parse_descriptor
!                 (self.__arguments[1], class_loader, extension_loader))
  
          # Validate the --attribute options.
+         arguments = self.__GetAttributeOptions()
          arguments = qm.extension.validate_arguments(extension_class,
                                                      arguments)
          # Override the --attribute options with the arguments provided
          # as part of the descriptor.
          arguments.update(more_arguments)
  
!         if extension_id is not None:
!             # Create the extension instance.  Objects derived from
!             # Runnable require magic additional arguments.
!             if issubclass(extension_class, Runnable):
!                 extras = { Runnable.EXTRA_ID : extension_id, 
!                            Runnable.EXTRA_DATABASE : database }
!             else:
!                 extras = {}
!             extension = extension_class(arguments, **extras)
!             # Write the extension to the database.
!             database.WriteExtension(extension_id, extension)
          else:
!             # Figure out what file to use.
!             filename = self.GetCommandOption("output")
!             if filename is not None:
!                 file = open(filename, "w")
!             else:
!                 file = sys.stdout
!             # Write out the file.
!             qm.extension.write_extension_file(extension_class, arguments,
!                                               file)
  
          return 0
      
          
      def __ExecuteCreateTdb(self, db_path):
Index: qm/test/database.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/database.py,v
retrieving revision 1.43
diff -c -5 -p -r1.43 database.py
*** qm/test/database.py	21 Jul 2005 05:06:37 -0000	1.43
--- qm/test/database.py	21 Jul 2005 08:05:39 -0000
*************** class Database(qm.extension.Extension):
*** 620,630 ****
          implements this generic method in terms of the special-purpose
          methods."""
  
          for kind in (Database.TEST, Database.RESOURCE):
              try:
!                 item = self.GetItem(kind, id).GetItem()
              except NoSuchItemError:
                  pass
              
          try:
              return self.GetSuite(id)
--- 620,630 ----
          implements this generic method in terms of the special-purpose
          methods."""
  
          for kind in (Database.TEST, Database.RESOURCE):
              try:
!                 return self.GetItem(kind, id).GetItem()
              except NoSuchItemError:
                  pass
              
          try:
              return self.GetSuite(id)
Index: qm/test/doc/reference.xml
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/doc/reference.xml,v
retrieving revision 1.41
diff -c -5 -p -r1.41 reference.xml
*** qm/test/doc/reference.xml	21 Jul 2005 05:06:38 -0000	1.41
--- qm/test/doc/reference.xml	21 Jul 2005 08:05:46 -0000
***************
*** 687,728 ****
      create a new test or resource.  For a list of the kinds of
      extensions supported by &qmtest;, run <command>&qmtest-cmd;
      extensions</command>.  The <replaceable>kind</replaceable>
      must be one of these extension kinds.</para>
  
      <para>The descriptor specifies an extension class and (optionally)
      attributes for that extension class.  The form of the descriptor is
      <command><replaceable>class</replaceable>(<replaceable>attributes</replaceable>)</command>,
      where the attributes are of the form
      <command><replaceable>attr</replaceable> =
      &quot;<replaceable>val</replaceable>&quot;</command>.  If there
      are no attributes, the parentheses may be omitted.</para>
  
      <para>The <replaceable>class</replaceable> may be either the path
!     to an extension file or a QMTest class name in the form
      <replaceable>module.class</replaceable>.  If the
!     <replaceable>class</replaceable> is the path to an extension file
!     (such as an existing test or resource file), the class name used
!     is the one provided in the file; otherwise the class named used is
!     the name provided on the command line.</para>
  
      <para>The attributes used to construct the extension instance come
!     from three sources: the attributes in the extension file (if the
      <replaceable>class</replaceable> is the path to an extension
      file), the <option>&dashdash;attribute</option> options provided
      on the command line, and the explicit attributes provided in the
      descriptor.  If multiple values for the the same attribute name
      are provided, the value used is taken from the first source in the
      following list for which there is a value: the rightmost attribute
      provided in the descriptor, the extension file, or the rightmost
      <option>&dashdash;attribute</option> present on the command
      line.</para>
  
-     <para>The new extension file is written to the file specified with
-     the <option>&dashdash;output</option> option, or to the standard
-     output if no <option>&dashdash;output</option> is specified.</para>
- 
      <para>The <command>create</command> command accepts these
      options:</para>    
  
      <variablelist>
       <varlistentry>
--- 687,736 ----
      create a new test or resource.  For a list of the kinds of
      extensions supported by &qmtest;, run <command>&qmtest-cmd;
      extensions</command>.  The <replaceable>kind</replaceable>
      must be one of these extension kinds.</para>
  
+     <para>If the <option>&dashdash;id</option> option is provided then
+     the new instance is created in the test database.  The argument to
+     the <option>&dashdash;id</option> option gives the name of the
+     instance.  Otherwise, the extension is written as XML to the
+     filename specified by <option>&dashdash;output</option> option, or
+     to the standard output if no <option>&dashdash;output</option> is
+     specified.</para>
+ 
      <para>The descriptor specifies an extension class and (optionally)
      attributes for that extension class.  The form of the descriptor is
      <command><replaceable>class</replaceable>(<replaceable>attributes</replaceable>)</command>,
      where the attributes are of the form
      <command><replaceable>attr</replaceable> =
      &quot;<replaceable>val</replaceable>&quot;</command>.  If there
      are no attributes, the parentheses may be omitted.</para>
  
      <para>The <replaceable>class</replaceable> may be either the path
!     to an extensing extension or a QMTest class name in the form
      <replaceable>module.class</replaceable>.  If the
!     <option>&dashdash;id</option> option has been provided, QMTest
!     will look for an existing extension in the test database named
!     <replaceable>class</replaceable>.  If the
!     <option>&dashdash;id</option> option has not been provided, QMTest
!     will look for an XML file named <replaceable>class</replaceable>.
!     In either case, if an existing extension cannot be found, the
!     <replaceable>class</replaceable> is interepreted as the name of an
!     extension class.</para>
  
      <para>The attributes used to construct the extension instance come
!     from three sources: the attributes in the extant extension (if the
      <replaceable>class</replaceable> is the path to an extension
      file), the <option>&dashdash;attribute</option> options provided
      on the command line, and the explicit attributes provided in the
      descriptor.  If multiple values for the the same attribute name
      are provided, the value used is taken from the first source in the
      following list for which there is a value: the rightmost attribute
      provided in the descriptor, the extension file, or the rightmost
      <option>&dashdash;attribute</option> present on the command
      line.</para>
  
      <para>The <command>create</command> command accepts these
      options:</para>    
  
      <variablelist>
       <varlistentry>
***************
*** 738,754 ****
         and valid values is dependent on the extension class in use.</para>
        </listitem>
       </varlistentry>
  
       <varlistentry>
        <term><option>-o</option> <replaceable>file</replaceable></term>
        <term>
         <option>&dashdash;output</option> 
         <replaceable>file</replaceable>
        </term>
        <listitem>
!        <para>Write a description of the extension instance to
         <replaceable>file</replaceable>.</para>
        </listitem>
       </varlistentry>
      </variablelist>
     </section>
--- 746,774 ----
         and valid values is dependent on the extension class in use.</para>
        </listitem>
       </varlistentry>
  
       <varlistentry>
+       <term><option>-i</option> <replaceable>id</replaceable></term>
+       <term>
+        <option>&dashdash;id</option> 
+        <replaceable>id</replaceable>
+       </term>
+       <listitem>
+        <para>Add the extension instance to the database, using 
+        <replaceable>id</replaceable> as the name of the instance.</para>
+       </listitem>
+      </varlistentry>
+ 
+      <varlistentry>
        <term><option>-o</option> <replaceable>file</replaceable></term>
        <term>
         <option>&dashdash;output</option> 
         <replaceable>file</replaceable>
        </term>
        <listitem>
!        <para>Write the extension instance to
         <replaceable>file</replaceable>.</para>
        </listitem>
       </varlistentry>
      </variablelist>
     </section>
***************
*** 762,771 ****
--- 782,809 ----
    qmtest create -a format=stats -o rs
           result_stream text_result_stream.TextResultStream(filename="rs")]]></userinput></screen>
       creates a file called <filename>rs</filename> containing an
       instance of <classname>TextResultStream</classname>.
      </para>
+ 
+     <para>
+      This command:
+      <screen>
+       &prompt;<userinput>qmtest create --id=simple -a program=testprog test command.ExecTest</userinput>
+      </screen>
+      creates a test named &quot;simple&quot; that executes the program 
+      <filename>testprog</filename>:
+     </para>
+ 
+     <para>
+      This command:
+      <screen>
+       &prompt;<userinput>qmtest create --id=copy test simple</userinput>
+      </screen>
+      creates a copy of the &quot;simple&quot; test, naming the new version
+      &quot;copy&quot;.
+     </para>
     </section>
  
    </section>
  
    <section id="sec-testcmd-create-target">
Index: qm/test/share/messages/diagnostics.txt
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/share/messages/diagnostics.txt,v
retrieving revision 1.12
diff -c -5 -p -r1.12 diagnostics.txt
*** qm/test/share/messages/diagnostics.txt	20 Jul 2005 00:42:18 -0000	1.12
--- qm/test/share/messages/diagnostics.txt	21 Jul 2005 08:05:46 -0000
*************** The "%(class_name)s" extension class cou
*** 34,43 ****
--- 34,46 ----
  The "%(file)s" target file could not be loaded.
  
  @ db path doesn't exist
  "%(path)s" does not exist. 
  
+ @ db not modifiable
+ The test database is not modifiable.
+ 
  @ dependency cycle
  This test depends on itself, either directly or by way of other tests.
  
  @ error loading xml resource
  A problem occurred while loading the XML resource file "%(resource_id)s":
*************** QMTest has created a new test database a
*** 144,155 ****
  @ no db specified
  You must specify the location of the test database.  
  
    * Specify the '--db-path' option with the path to the database.
  
!   * Or, set the '%(envvar)s' environment variable to the path to the
!     database. 
  
  @ loading class
  QMTest will load '%(class_name)s' from '%(file_name)s'.
  
  @ no id for edit
--- 147,158 ----
  @ no db specified
  You must specify the location of the test database.  
  
    * Specify the '--db-path' option with the path to the database.
  
!   * Or, set the 'QMTEST_DB_PATH' environment variable to the path 
!     to the database. 
  
  @ loading class
  QMTest will load '%(class_name)s' from '%(file_name)s'.
  
  @ no id for edit


From stefan at codesourcery.com  Thu Jul 21 02:12:31 2005
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Thu, 21 Jul 2005 04:12:31 +0200
Subject: [qmtest] PATCH: Robustify executable.py
In-Reply-To: <42DF2ADA.6000607@codesourcery.com>
References: <42DF2ADA.6000607@codesourcery.com>
Message-ID: <42DF048F.2080903@codesourcery.com>

Mark Mitchell wrote:
> This patch fixes a bug in TimeoutExecutable; in particular, when os.fork 
> threw an exception, TimeoutExecutable still tried to kill the child 
> process.
> 
> This situation showed up for me on Cygwin, where, for some reason, 
> calling os.fork results in:
> 
> C:\cygwin\bin\python2.4.exe (3076): *** unable to remap 
> C:\cygwin\bin\cygssl-0.9.7.dll to same address as parent(0x18CA0000) != 
> 0x18CB0000
> 
> Does anyone know how to avoid this problem?

I believe this can be dealt with by calling the 'rebaseall' utility;
at least I managed to get over similar messages that way.

Regards,
		Stefan


From mark at codesourcery.com  Thu Jul 21 08:32:17 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 21 Jul 2005 01:32:17 -0700
Subject: [qmtest] PATCH: Robustify executable.py
In-Reply-To: <42DF048F.2080903@codesourcery.com>
References: <42DF2ADA.6000607@codesourcery.com> <42DF048F.2080903@codesourcery.com>
Message-ID: <42DF5D91.3050701@codesourcery.com>

Stefan Seefeld wrote:
> Mark Mitchell wrote:
> 
>> This patch fixes a bug in TimeoutExecutable; in particular, when 
>> os.fork threw an exception, TimeoutExecutable still tried to kill the 
>> child process.
>>
>> This situation showed up for me on Cygwin, where, for some reason, 
>> calling os.fork results in:
>>
>> C:\cygwin\bin\python2.4.exe (3076): *** unable to remap 
>> C:\cygwin\bin\cygssl-0.9.7.dll to same address as parent(0x18CA0000) 
>> != 0x18CB0000
>>
>> Does anyone know how to avoid this problem?
> 
> 
> I believe this can be dealt with by calling the 'rebaseall' utility;
> at least I managed to get over similar messages that way.

I just tried that -- and then had to Google around to figure out how to 
fix emacs.  After reinstalling libncurses, it did work fine -- and I'm 
now able to run the QMTest tests under Cygwin!

Thanks!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From mark at codesourcery.com  Thu Jul 21 08:47:51 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 21 Jul 2005 01:47:51 -0700
Subject: PATCH: Fix typo in DGTest
Message-ID: <42DF6137.5080109@codesourcery.com>

There was a typo in the DGTest test class; instead of removing blank 
lines at the start of the output, we removed all newlines, resulting in 
annotations that were horribly run together.

Committed.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: dg.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050721/604a0b05/attachment.ksh>

From mark at codesourcery.com  Thu Jul 21 19:04:43 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 21 Jul 2005 12:04:43 -0700
Subject: [qmtest] Problem with transition from 'Run test' to 'Show results'
In-Reply-To: <BAY20-F28D06C5677E017EE428B8FC4D40@phx.gbl>
References: <BAY20-F28D06C5677E017EE428B8FC4D40@phx.gbl>
Message-ID: <42DFF1CB.5060307@codesourcery.com>

Richard Poppe wrote:
> I made a workaround for the transition problem in file:
> C:\Python23\Lib\site-packages\qm\test\web\web.py (HandleRunTests)
> 
> In the web function "HandleRunTests" it seems that i have to redirect to 
> the show-results page, before the execution thread starts. When i 
> comment out the delay, the show-results page will be displayed directly 
> (and refresh every few seconds). With the delay active the show-results 
> page will never come up. After some time the (firefox) browser comes 
> with a pop-up message that "www.ws6264.com" could not be found, while 
> the base request was "http://ws6264:3503/test/something".

That's really weird.  If you make the delay smaller, does that help? 
Are you able to provide any network traces that demonsrate whether or 
not the redirection is ever making it out of QMTest?

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From mark at codesourcery.com  Fri Jul 22 18:04:14 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 22 Jul 2005 11:04:14 -0700
Subject: PATCH: Add support for "qmtest ls"
Message-ID: <42E1351E.6050607@codesourcery.com>

This patch adds a "qmtest ls" command that can be used to examine the 
contents of a test database.  Like the UNIX "ls" command, you can use 
"qmtest ls -lR" to get a recursive listing.

Commmitted.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: qmtest-ls.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20050722/6756e93a/attachment.ksh>

From pankajj at qualcomm.com  Sat Jul 23 01:08:25 2005
From: pankajj at qualcomm.com (Pankaj Jain)
Date: Fri, 22 Jul 2005 18:08:25 -0700
Subject: [qmtest] Target File
References: <42D7F755.6060903@google.com>
Message-ID: <0e3801c58f23$075cb270$42801e0a@na.qualcomm.com>

Hi,
I am printing out bunch of stuff but I dont want qmtest to compare it with 
Standard output string ( which is null in this case) . Is there any way I 
can disable the Standard output option for a perticular test.

Thanks
Pankaj
----- Original Message ----- 
From: "Kelly Lucas" <kellyl at google.com>
To: <qmtest at codesourcery.com>
Sent: Friday, July 15, 2005 10:50 AM
Subject: [qmtest] Target File


> The docs don't have an example for the format of the target file, nor do 
> they specify how to set up resources.
>
> Could someone post a sample of both?
>
> kdl
>
> -- 
> Kelly D. Lucas
> Software Test Engineer
> Google, Inc.
> kellyl at google.com
> 650.253.7953
> 



From dwcraig at qualcomm.com  Sat Jul 23 01:20:52 2005
From: dwcraig at qualcomm.com (Craig, Dave)
Date: Fri, 22 Jul 2005 18:20:52 -0700
Subject: [qmtest] Target File
Message-ID: <0320111483D8B84AAAB437215BBDA526019819D6@NAEX01.na.qualcomm.com>

I ran into a problem with inundating QMTest with too much output.  I had
to write a wrapper executable for my executable that pipe the output
from the executable through "tail -50" to see only the last fifty lines.

I'm sure you could also redirect stdout/stderr in your wrapper script to
/dev/null.  You'll just need to exit with the exit code returned from
the wrapped executable to make sure pass/fail works ok.

HTH,
	Dave

-----Original Message-----
From: Pankaj Jain [mailto:pankajj at qualcomm.com] 
Sent: Friday, July 22, 2005 6:08 PM
To: Kelly Lucas; qmtest at codesourcery.com
Subject: Re: [qmtest] Target File

Hi,
I am printing out bunch of stuff but I dont want qmtest to compare it
with 
Standard output string ( which is null in this case) . Is there any way
I 
can disable the Standard output option for a perticular test.

Thanks
Pankaj
----- Original Message ----- 
From: "Kelly Lucas" <kellyl at google.com>
To: <qmtest at codesourcery.com>
Sent: Friday, July 15, 2005 10:50 AM
Subject: [qmtest] Target File


> The docs don't have an example for the format of the target file, nor
do 
> they specify how to set up resources.
>
> Could someone post a sample of both?
>
> kdl
>
> -- 
> Kelly D. Lucas
> Software Test Engineer
> Google, Inc.
> kellyl at google.com
> 650.253.7953
> 



From mark at codesourcery.com  Sat Jul 23 02:18:55 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 22 Jul 2005 19:18:55 -0700
Subject: [qmtest] Target File
In-Reply-To: <0320111483D8B84AAAB437215BBDA526019819D6@NAEX01.na.qualcomm.com>
References: <0320111483D8B84AAAB437215BBDA526019819D6@NAEX01.na.qualcomm.com>
Message-ID: <42E1A90F.6030507@codesourcery.com>

Craig, Dave wrote:
> I ran into a problem with inundating QMTest with too much output.  I had
> to write a wrapper executable for my executable that pipe the output
> from the executable through "tail -50" to see only the last fifty lines.
> 
> I'm sure you could also redirect stdout/stderr in your wrapper script to
> /dev/null.  You'll just need to exit with the exit code returned from
> the wrapped executable to make sure pass/fail works ok.

The other approach would be to create a derived test class that 
overrides ExecTestBase.ValidateOutput.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From mark at codesourcery.com  Mon Jul 25 00:23:52 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 24 Jul 2005 17:23:52 -0700
Subject: [qmtest] Target File
In-Reply-To: <0e5901c58f37$92832a50$42801e0a@na.qualcomm.com>
References: <70279F9FDF814C48B62F4FCEDAA8497246524A@NAEX06.na.qualcomm.com> <0e5901c58f37$92832a50$42801e0a@na.qualcomm.com>
Message-ID: <42E43118.4090400@codesourcery.com>

Pankaj Jain wrote:
> is it possible to change command.py. such that if some one write "none" 
> in standard output ,command.py ignore the check for it. and pass or fail 
> it on the basis on exit code.

That wouldn't work well if someone actually wanted to check for the 
output being "none"!

We could add boolean options to ExecTestBase that indicate whether or 
not the standard output and/or standard error should actually be checked.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From dwcraig at qualcomm.com  Tue Jul 26 23:00:29 2005
From: dwcraig at qualcomm.com (Craig, Dave)
Date: Tue, 26 Jul 2005 16:00:29 -0700
Subject: Saving output from a resource setup/cleanup
Message-ID: <0320111483D8B84AAAB437215BBDA52601981D49@NAEX01.na.qualcomm.com>

Is there a way to obtain the output from a resource setup/cleanup
script?  I've hacked a new resource that inherits from both Resource and
ExecTest that saves and presents its output for just the setup script in
QMTest 2.2.  Is there something else that is less of hack that anyone
else has found?

Thanks,
       Dave Craig


From stefan at codesourcery.com  Wed Jul 27 08:03:09 2005
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Wed, 27 Jul 2005 10:03:09 +0200
Subject: [qmtest] Saving output from a resource setup/cleanup
In-Reply-To: <0320111483D8B84AAAB437215BBDA52601981D49@NAEX01.na.qualcomm.com>
References: <0320111483D8B84AAAB437215BBDA52601981D49@NAEX01.na.qualcomm.com>
Message-ID: <42E73FBD.5060600@codesourcery.com>

Craig, Dave wrote:
> Is there a way to obtain the output from a resource setup/cleanup
> script?  I've hacked a new resource that inherits from both Resource and
> ExecTest that saves and presents its output for just the setup script in
> QMTest 2.2.  Is there something else that is less of hack that anyone
> else has found?


I don't think there is.
I have been planning to look into some refactoring of the ExecTest code
to make it available to Resource classes, too (such as shell execution,
return value checks, output recording, etc.).
Unfortunately I didn't get around to it yet.

Thanks,
		Stefan


From mark at codesourcery.com  Wed Jul 27 21:00:40 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 27 Jul 2005 14:00:40 -0700
Subject: [qmtest] Saving output from a resource setup/cleanup
In-Reply-To: <0320111483D8B84AAAB437215BBDA52601981D49@NAEX01.na.qualcomm.com>
References: <0320111483D8B84AAAB437215BBDA52601981D49@NAEX01.na.qualcomm.com>
Message-ID: <42E7F5F8.1060400@codesourcery.com>

Craig, Dave wrote:
> Is there a way to obtain the output from a resource setup/cleanup
> script?  I've hacked a new resource that inherits from both Resource and
> ExecTest that saves and presents its output for just the setup script in
> QMTest 2.2.  Is there something else that is less of hack that anyone
> else has found?

In general, I've been wondering whether it should be possible to create 
a resource using a test class; the semantics in that case, would be that 
the Run() function is used, but there is no cleanup function.  Then, all 
test classes would be instantly usable as resource classes.

(I don't think it really makes sense to go in the other direction; if 
the resource class has a cleanup method then presumably its doing 
something important, and we can't just ignore it.  You could run the 
cleanup immediately, I guess.)

Do people think this is a good idea?

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From dwcraig at qualcomm.com  Wed Jul 27 21:05:57 2005
From: dwcraig at qualcomm.com (Craig, Dave)
Date: Wed, 27 Jul 2005 14:05:57 -0700
Subject: [qmtest] Saving output from a resource setup/cleanup
Message-ID: <0320111483D8B84AAAB437215BBDA52601A355CC@NAEX01.na.qualcomm.com>

I agree.  Composing resources from tests gives you more flexibility.

How about taking two tests to compose a resource?  That would mean I
could store the stdout and stderr from both setup and cleanup as
different test cases.  That would be very nice.

Thanks,
	Dave

-----Original Message-----
From: Mark Mitchell [mailto:mark at codesourcery.com] 
Sent: Wednesday, July 27, 2005 2:01 PM
To: Craig, Dave
Cc: qmtest at codesourcery.com
Subject: Re: [qmtest] Saving output from a resource setup/cleanup

Craig, Dave wrote:
> Is there a way to obtain the output from a resource setup/cleanup
> script?  I've hacked a new resource that inherits from both Resource
and
> ExecTest that saves and presents its output for just the setup script
in
> QMTest 2.2.  Is there something else that is less of hack that anyone
> else has found?

In general, I've been wondering whether it should be possible to create 
a resource using a test class; the semantics in that case, would be that

the Run() function is used, but there is no cleanup function.  Then, all

test classes would be instantly usable as resource classes.

(I don't think it really makes sense to go in the other direction; if 
the resource class has a cleanup method then presumably its doing 
something important, and we can't just ignore it.  You could run the 
cleanup immediately, I guess.)

Do people think this is a good idea?

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


