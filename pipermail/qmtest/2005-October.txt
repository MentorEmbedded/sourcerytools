From dimock at cag.csail.mit.edu  Tue Oct 11 23:15:04 2005
From: dimock at cag.csail.mit.edu (Allyn Dimock)
Date: Tue, 11 Oct 2005 19:15:04 -0400 (EDT)
Subject: transition from 2.0.3 to 2.3 -- missing chdir problem
Message-ID: <Pine.LNX.4.61.0510111813060.27156@cag.csail.mit.edu>


Highest level:
   I would like to create a target for running QMTest tests under openPBS.
If anyone just happens to have created such a thing already and is willing 
to share it, I would be grateful.
   I inherited a test harness that mostly hides QMTest, but uses it for 
running a regression test suite sequentially.  The suite has grown large 
enough that I want to parallelize its execution.  To get access to 
multiple machines I will need to use openPBS, so will need to extend a 
target method.

So far:
   I started out just playing around under QMtest 2.0.3 with some of the 
parallel targets (multiple threads, multiple processes) and found that 
they did not work: occasional ERROR 13 when using multiple processes, 
occasional incorrect output using multiple threads, neither of which 
occurs with sequential execution.
   So I thought to upgrade to QMTest 2.3 to get the last two+ years of bug 
fixes.

Unfortunately:
   The extensions to qm.test.test.Test that I had inherited depended on 
code that was removed between 2.0.3 and 2.3:  the chdir to the directory 
containing the individual test.  I haven't been able to track through the 
QMTest 2.0.3 code thoroughly yet, but it seems that it must be the chdir 
that has been removed from the qm.test.database.ItemDescriptor __Execute method.

Considering that I am new to both Python and QMtest extension, I would be 
grateful for any pointers as to where to grab the test directory so as to 
update test extension code to do the chdir itself:  I hope that I can get
this information through the context.  However, the manual in section 4.3
has a bad link to internal documentation on context -- which provoked 
enough frustration that I decided to send out this message before 
instumenting my code to dump out context and see if the test directory can 
be found...

-- Allyn Dimock


From mark at codesourcery.com  Tue Oct 11 23:26:37 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 11 Oct 2005 16:26:37 -0700
Subject: [qmtest] transition from 2.0.3 to 2.3 -- missing chdir problem
In-Reply-To: <Pine.LNX.4.61.0510111813060.27156@cag.csail.mit.edu>
References: <Pine.LNX.4.61.0510111813060.27156@cag.csail.mit.edu>
Message-ID: <434C4A2D.10109@codesourcery.com>

Allyn Dimock wrote:

>   The extensions to qm.test.test.Test that I had inherited depended on
> code that was removed between 2.0.3 and 2.3:  the chdir to the directory
> containing the individual test.  I haven't been able to track through
> the QMTest 2.0.3 code thoroughly yet, but it seems that it must be the
> chdir that has been removed from the qm.test.database.ItemDescriptor
> __Execute method.

That's very plausible.  The chdir was removed because its not safe to do
chdir in multi-threaded programs, and QMTest can provide parallelism via
threading.  If your test class is invoking an external program, you can
have that external program do the chdir, if you like.

> this information through the context.  However, the manual in section 4.3
> has a bad link to internal documentation on context -- which provoked
> enough frustration that I decided to send out this message before
> instumenting my code to dump out context and see if the test directory
> can be found...

Thank you for the bug report.  We're working on fixing that link.  Here
is the current internals manual, which is a little more current than
2.3, but should still be useful to you:

http://www.codesourcery.com/public/qmtest/qm-snapshot/doc/qm/index.html

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From dimock at cag.csail.mit.edu  Wed Oct 12 12:33:33 2005
From: dimock at cag.csail.mit.edu (Allyn Dimock)
Date: Wed, 12 Oct 2005 08:33:33 -0400 (EDT)
Subject: [qmtest] transition from 2.0.3 to 2.3 -- missing chdir problem
In-Reply-To: <434C4A2D.10109@codesourcery.com>
References: <Pine.LNX.4.61.0510111813060.27156@cag.csail.mit.edu>
 <434C4A2D.10109@codesourcery.com>
Message-ID: <Pine.LNX.4.61.0510120830030.16272@cag.csail.mit.edu>



On Tue, 11 Oct 2005, Mark Mitchell wrote:

> Allyn Dimock wrote:
>
>>   The extensions to qm.test.test.Test that I had inherited depended on
>> code that was removed between 2.0.3 and 2.3:  the chdir to the directory
>> containing the individual test.  I haven't been able to track through
>> the QMTest 2.0.3 code thoroughly yet, but it seems that it must be the
>> chdir that has been removed from the qm.test.database.ItemDescriptor
>> __Execute method.
>
> That's very plausible.  The chdir was removed because its not safe to do
> chdir in multi-threaded programs, and QMTest can provide parallelism via
> threading.  If your test class is invoking an external program, you can
> have that external program do the chdir, if you like.
>

Thank you for pointing out the interaction of chdir and threads:  that is 
likely the reason that I was getting intermittent problems using a 
thread target in version 2.0.3

-- Allyn Dimock


From mark at codesourcery.com  Mon Oct 24 05:47:09 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 23 Oct 2005 22:47:09 -0700
Subject: PATCH: Add SetCause convenience method
Message-ID: <435C755D.1070609@codesourcery.com>

This patch just adds a little convenience method to Result for setting
the cause of failure, abstracting away the "Result.CAUSE" annotation
property.

Committed.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: qmtest.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20051023/04779101/attachment.ksh>

From mark at codesourcery.com  Mon Oct 24 05:58:51 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 23 Oct 2005 22:58:51 -0700
Subject: PATCH: Make use of expected outcomes in result streams more convenient
Message-ID: <435C781B.7000006@codesourcery.com>

This patch adds a _GetExpectedOutcome conveience method to ResultStream.
 When ResultStreams are constructed, they are provided with the current
list of expected test outcomes, if that list is available.  The intended
semantics are that if no expectation is available, the expectation is
PASS by default.  This new method encapsulates this information in a
single place, so that various result stream classes can behave consistently.

Committed.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: qmtest.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20051023/63c95f32/attachment.ksh>

From mark at codesourcery.com  Mon Oct 24 06:00:45 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 23 Oct 2005 23:00:45 -0700
Subject: [qmtest] PATCH: Make use of expected outcomes in result streams
 more convenient
In-Reply-To: <435C781B.7000006@codesourcery.com>
References: <435C781B.7000006@codesourcery.com>
Message-ID: <435C788D.7030209@codesourcery.com>

Mark Mitchell wrote:
> This patch adds a _GetExpectedOutcome conveience method to ResultStream.
>  When ResultStreams are constructed, they are provided with the current
> list of expected test outcomes, if that list is available.  The intended
> semantics are that if no expectation is available, the expectation is
> PASS by default.  This new method encapsulates this information in a
> single place, so that various result stream classes can behave consistently.

I should also have commented on:

> 	(TextResultStream.DisplayResult): Treat Result.CAUSE annotation as
> 	HTML.

All Result annotations are HTML.  However, while TextResultStream
respected that fact for other annotations, the special handling for the
Result.CAUSE annotation (i.e., the annotation to which Result.ReadCause
and Result.WriteCauase apply) did not.  This part of the patch makes
TextResultStream consistent in that respect.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From mark at codesourcery.com  Mon Oct 24 07:17:32 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 24 Oct 2005 00:17:32 -0700
Subject: PATCH: Support extension descriptors in qmtest summarize input file
Message-ID: <435C8A8C.4090903@codesourcery.com>

The "qmtest summarize" commands reads a results file and generates
output, using QMTest's textual format by default, or via extension
classes, any format you please.

The input file, however, was constrained to be in a format known to
QMTest.  It makes sense to permit the full generality of extension
descriptors for the input file as well, which this patch makes possible.
 By default, "qmtest summarize" will work just as before, but you can
now write things like:

  qmtest summarize "my_report.Reader(filename = 'report', option = '7')"

to construct a ResultReader (using the "my_report.Reader" extension
class) with the indicated arguments.  Results will be read from this
extnsion object.

Committed.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: qmtest.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20051024/22477001/attachment.ksh>

From mark at codesourcery.com  Mon Oct 24 07:44:25 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 24 Oct 2005 00:44:25 -0700
Subject: PATCH: Enhance DejaGNU result reader
Message-ID: <435C90D9.4060005@codesourcery.com>

QMTest has had a ResultReader that could parse DejaGNU .log files for
some time.  This patch enhances that reader in two respects.

First, the reader now offers a "combined" mode.  DejaGNU often applies
multiple separate tests in situations which QMTest would probably group
together into a single test.  For example, here's an extra from a
DejaGNU log file for G++:

FAIL: g++.dg/other/switch2.C  (test for errors, line 16)
FAIL: g++.dg/other/switch2.C  (test for errors, line 17)
FAIL: g++.dg/other/switch2.C  (test for errors, line 18)
FAIL: g++.dg/other/switch2.C  (test for errors, line 19)
FAIL: g++.dg/other/switch2.C  (test for errors, line 20)
PASS: g++.dg/other/switch2.C (test for excess errors)

All that comes from source file, which the compiler is supposed to
compile.  DejaGNU is checking that errors appear on the lines where they
should, and that no additional errors appear.  In QMTest, it would be
natural to have a test class that compiled the file, and PASSed only if
all of the right things happened, and failed otherwise, because most
people talk about "the test switch2.C", not "the test
switch2.C-errors-on-line-16".

Until now, the DejaGNU reader only let you read in results in the
DejaGNU model, so that the above would be six separate results.  That
mode is still present, but the new "combined" mode combines the DejaGNU
results into a single result:

  g++.dg/other/switch2.C                        : FAIL

    Test for errors, line 16. Test for errors, line 17. Test for errors,
    line 18. Test for errors, line 19. Test for errors, line 20.

The second enhancement is a "generate-expectations" mode.  DejaGNU
stores information about expected passage and failure in the testsuite
itself, rather than using QMTest's "todays results are tomorrows
expectations" approach.  In order to provide an analog, in the
generate-expectations mode, the results generated by QMTest reflect not
the actual reuslts in the DejaGNU .log file, but the DejaGNU
expectations for those results.  So, a command like:

  qmtest summarize \
    -O "dejagnu_stream.DejaGNUReader(filename = 'gcc.log', \
                                     expectations = 'true')" \
    gcc.log

will show the same unexpected failures in QMTest as would be shown by
DejaGNU, if 'gcc.log' is a DejaGNU log file.

(Note that here we're using the extension descriptor syntax to construct
a result readers for the expected outcomes, using a non-default
argument, while for the principal input we're content to use the default
mode.)

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: qmtest.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20051024/06db4a21/attachment.ksh>

From stefan at codesourcery.com  Tue Oct 25 17:31:02 2005
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Tue, 25 Oct 2005 13:31:02 -0400
Subject: PATCH: Fix html-report generation to report proper results when used
 with multiple test runs
Message-ID: <435E6BD6.1070604@codesourcery.com>

The attached patch fixes an indexing error in the html-report generation
that made all columns (i.e. test runs) be reported with the same results.
Doh !

Regards,
		Stefan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: report.xslt.diff
Type: text/x-patch
Size: 1478 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20051025/cd7a8ddf/attachment.bin>

From pragnesh.sampat at timesys.com  Tue Oct 25 19:50:19 2005
From: pragnesh.sampat at timesys.com (Pragnesh Sampat)
Date: Tue, 25 Oct 2005 15:50:19 -0400
Subject: [qmtest] PATCH: Enhance DejaGNU result reader
In-Reply-To: <435C90D9.4060005@codesourcery.com>
References: <435C90D9.4060005@codesourcery.com>
Message-ID: <1130269819.22077.50.camel@pss-pc.timesys>

> ===================================================================
> RCS file: /home/qm/Repository/qm/qm/test/classes/dejagnu_stream.py,v
> retrieving revision 1.3
> diff -c -5 -p -r1.3 dejagnu_stream.py
> *** qm/test/classes/dejagnu_stream.py	24 Aug 2005 02:48:30 -0000	1.3
> --- qm/test/classes/dejagnu_stream.py	24 Oct 2005 07:25:44 -0000
> ***************
> *** 15,29 ****
> --- 15,32 ----
>   
>   ########################################################################
>   # Imports
>   ########################################################################
>   
> + import cgi
>   from   dejagnu_test import DejaGNUTest
>   import qm.fields
>   from   qm.test.file_result_stream import FileResultStream
>   from   qm.test.result import Result
>   from   qm.test.file_result_reader import FileResultReader
> + import re
> + from   sets import Set

Hello,

We are using qmtest to drive some of our test needs.  I noticed that
this breaks python 2.2, due to the use of sets, which came in python
2.3.  This is the only case I found that breaks on python 2.2.  Maybe it
is not important to support python 2.2, but I thought I would note it,
just in case it was unintentional (Some basic set operations can be
supported via dictionaries, although sets are clearly the way to go).

I tested the following patch under 2.3, checking now under 2.2.

-Pragnesh

--- qm/ChangeLog-orig
+++ qm/ChangeLog
@@ -5,7 +5,6 @@
 
 	* qm/test/classes/dejagnu_stream.py (cgi): Import it.
 	(re): Likewise.
-	(sets.Set): Likewise.
 	(DejaGNUReader): Add combined mode.  Add expectations-generation
 	mode.
 
--- qm/qm/test/classes/dejagnu_stream.py-orig
+++ qm/qm/test/classes/dejagnu_stream.py
@@ -24,7 +24,6 @@
 from   qm.test.result import Result
 from   qm.test.file_result_reader import FileResultReader
 import re
-from   sets import Set
 

########################################################################
 # Classes
@@ -204,7 +203,7 @@
             raise FileResultReader.InvalidFile, \
                   "file is not a DejaGNU result stream"
         self.file.seek(0)
-        self.test_ids = Set()
+        self.test_ids = {}
         if self.__UseCombinedMode():
             test_id, dejagnu_outcome, cause = self.__NextOutcome()
             if test_id:




From mark at codesourcery.com  Tue Oct 25 19:55:30 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 25 Oct 2005 12:55:30 -0700
Subject: [qmtest] PATCH: Enhance DejaGNU result reader
In-Reply-To: <1130269819.22077.50.camel@pss-pc.timesys>
References: <435C90D9.4060005@codesourcery.com> <1130269819.22077.50.camel@pss-pc.timesys>
Message-ID: <435E8DB2.90100@codesourcery.com>

Pragnesh Sampat wrote:

> We are using qmtest to drive some of our test needs.  I noticed that
> this breaks python 2.2, due to the use of sets, which came in python
> 2.3.  This is the only case I found that breaks on python 2.2. 

You're correct; the top-level README says that Python 2.2 is the minium
supported version.  So, I should not have checked in this patch, at
least not without updating the README. :-(

Let's take a poll: how many people using QMTest are using it with Python
2.2?  Should we update the minium version to 2.3?  Or, stick with 2.2?

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From pragnesh.sampat at timesys.com  Tue Oct 25 20:04:34 2005
From: pragnesh.sampat at timesys.com (Pragnesh Sampat)
Date: Tue, 25 Oct 2005 16:04:34 -0400
Subject: [qmtest] PATCH: Enhance DejaGNU result reader
In-Reply-To: <435E8DB2.90100@codesourcery.com>
References: <435C90D9.4060005@codesourcery.com>
	 <1130269819.22077.50.camel@pss-pc.timesys>
	 <435E8DB2.90100@codesourcery.com>
Message-ID: <1130270674.22077.55.camel@pss-pc.timesys>

On Tue, 2005-10-25 at 12:55 -0700, Mark Mitchell wrote:
> Pragnesh Sampat wrote:
> 
> > We are using qmtest to drive some of our test needs.  I noticed that
> > this breaks python 2.2, due to the use of sets, which came in python
> > 2.3.  This is the only case I found that breaks on python 2.2. 
> 
> You're correct; the top-level README says that Python 2.2 is the minium
> supported version.  So, I should not have checked in this patch, at
> least not without updating the README. :-(
> 
> Let's take a poll: how many people using QMTest are using it with Python
> 2.2?  Should we update the minium version to 2.3?  Or, stick with 2.2?

We are using mixed versions, with 2.2 being used on automated systems
for formal activities and desktops and developers boxes being typically
more recent with a mix of 2.3.x and 2.4.x.  I think I would be ok moving
to 2.3 if it is a better solution.

-Pragnesh



From mark at codesourcery.com  Tue Oct 25 20:28:47 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 25 Oct 2005 13:28:47 -0700
Subject: [qmtest] PATCH: Enhance DejaGNU result reader
In-Reply-To: <1130270674.22077.55.camel@pss-pc.timesys>
References: <435C90D9.4060005@codesourcery.com>	 <1130269819.22077.50.camel@pss-pc.timesys>	 <435E8DB2.90100@codesourcery.com> <1130270674.22077.55.camel@pss-pc.timesys>
Message-ID: <435E957F.4060109@codesourcery.com>

Pragnesh Sampat wrote:

> We are using mixed versions, with 2.2 being used on automated systems
> for formal activities and desktops and developers boxes being typically
> more recent with a mix of 2.3.x and 2.4.x.  I think I would be ok moving
> to 2.3 if it is a better solution.

I don't think that 2.2 is bad, per se; I'm just worried about how many
of these things might creep in over time.  The example you found is easy
to fix, with minor obfuscation of the code, using dictionaries, but I
can never remember exactly which versions of Python support exactly
which syntax.  I know that Red Hat 8.0 and RHEL 3 had Python 2.2; RHEL 4
has Python 2.3.

I guess I tend to think sticking with Python 2.2 makes the most sense
for now, even though it would be easier if we could move to 2.3. :-)

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304


From pragnesh.sampat at timesys.com  Tue Oct 25 20:57:18 2005
From: pragnesh.sampat at timesys.com (Pragnesh Sampat)
Date: Tue, 25 Oct 2005 16:57:18 -0400
Subject: [qmtest] PATCH: Enhance DejaGNU result reader
In-Reply-To: <435E957F.4060109@codesourcery.com>
References: <435C90D9.4060005@codesourcery.com>
	 <1130269819.22077.50.camel@pss-pc.timesys>
	 <435E8DB2.90100@codesourcery.com>
	 <1130270674.22077.55.camel@pss-pc.timesys>
	 <435E957F.4060109@codesourcery.com>
Message-ID: <1130273838.22077.66.camel@pss-pc.timesys>

On Tue, 2005-10-25 at 13:28 -0700, Mark Mitchell wrote:
> Pragnesh Sampat wrote:
> 
> > We are using mixed versions, with 2.2 being used on automated systems
> > for formal activities and desktops and developers boxes being typically
> > more recent with a mix of 2.3.x and 2.4.x.  I think I would be ok moving
> > to 2.3 if it is a better solution.
> 
> I don't think that 2.2 is bad, per se; I'm just worried about how many
> of these things might creep in over time.  The example you found is easy
> to fix, with minor obfuscation of the code, using dictionaries, but I
> can never remember exactly which versions of Python support exactly
> which syntax.  I know that Red Hat 8.0 and RHEL 3 had Python 2.2; RHEL 4
> has Python 2.3.

Red Hat 9.0 has 2.2, which is where I ran into the issue.  I have also
occasionally run into things where I needed to something different for
python 2.2, after I check in, since most of the systems that I use have
2.3 or later and I would miss something locally and get caught later. 
It is getting harder to keep track of these little things.

> I guess I tend to think sticking with Python 2.2 makes the most sense
> for now, even though it would be easier if we could move to 2.3. :-)

You are probably probably right.  Many of the newer features are nice
(I find the "What's New in Python 2.x" pages on python.org very
useful), but I have not had a compelling case yet where something
trumped compatibility.  Bound to happen one of these days soon, I think.

-Pragnesh




From dimock at cag.csail.mit.edu  Tue Oct 25 21:18:11 2005
From: dimock at cag.csail.mit.edu (Allyn Dimock)
Date: Tue, 25 Oct 2005 17:18:11 -0400 (EDT)
Subject: [qmtest] PATCH: Enhance DejaGNU result reader
In-Reply-To: <435E8DB2.90100@codesourcery.com>
References: <435C90D9.4060005@codesourcery.com> <1130269819.22077.50.camel@pss-pc.timesys>
 <435E8DB2.90100@codesourcery.com>
Message-ID: <Pine.LNX.4.61.0510251711340.15117@cag.csail.mit.edu>


I am using QMTest with Python 2.2.  I have no particular need to 
upgrade to the latest patch level of QMTest for new features since my use 
of qmtest is hidden from users under a script: My users never see QMTest. 
I would upgrade for bug fixes.

There seem to be copies of Python 2.3.4 and 2.4 on my cluster.  If Python 
has maintained full backward compatibility then I could upgrade to a newer 
version of Python as needed.

-- Allyn


From mark at codesourcery.com  Wed Oct 26 00:22:54 2005
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 25 Oct 2005 17:22:54 -0700
Subject: [qmtest] PATCH: Enhance DejaGNU result reader
In-Reply-To: <Pine.LNX.4.61.0510251711340.15117@cag.csail.mit.edu>
References: <435C90D9.4060005@codesourcery.com> <1130269819.22077.50.camel@pss-pc.timesys> <435E8DB2.90100@codesourcery.com> <Pine.LNX.4.61.0510251711340.15117@cag.csail.mit.edu>
Message-ID: <435ECC5E.4080401@codesourcery.com>

Allyn Dimock wrote:
> 
> I am using QMTest with Python 2.2. 

I think that there's enough reason to stick with Python 2.2 that we
ought to do so.

It also turns out that this particular use of Python 2.3 was completely
stupid: the variable in question was totally unused!

So, I checked in this patch, which I think should restore usability with
Python 2.2.  Pragnesh, thanks for bringing this issue to my attention!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
(916) 791-8304
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: qmtest.patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20051025/81178135/attachment.ksh>

From stefan at codesourcery.com  Wed Oct 26 02:59:45 2005
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Tue, 25 Oct 2005 22:59:45 -0400
Subject: PATCH: Provide new SimpleCompilationTest and SimpleCompiledResource
 extensions
Message-ID: <435EF121.1070107@codesourcery.com>

The attached patch provides a new test class and a new resource class,
useful for tests that require source compilation. The new test subclasses
the existing CompilerTest test, which was slightly modified and cleaned up
to prepare it to be subclassed.
The Result class has a new method 'CheckExitStatus' that replaces similar
repetive code at various places.

Regards,
		Stefan
-------------- next part --------------
A non-text attachment was scrubbed...
Name: compilation_test.patch
Type: text/x-patch
Size: 16945 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20051025/97c08093/attachment.bin>

From pragnesh.sampat at timesys.com  Wed Oct 26 04:29:19 2005
From: pragnesh.sampat at timesys.com (Pragnesh Sampat)
Date: Wed, 26 Oct 2005 00:29:19 -0400
Subject: [qmtest] PATCH: Enhance DejaGNU result reader
In-Reply-To: <435ECC5E.4080401@codesourcery.com>
References: <435C90D9.4060005@codesourcery.com>
	 <1130269819.22077.50.camel@pss-pc.timesys>
	 <435E8DB2.90100@codesourcery.com>
	 <Pine.LNX.4.61.0510251711340.15117@cag.csail.mit.edu>
	 <435ECC5E.4080401@codesourcery.com>
Message-ID: <1130300959.1295.8.camel@www.sampatonline.com>

> It also turns out that this particular use of Python 2.3 was completely
> stupid: the variable in question was totally unused!
> 

I too noticed it wasn't used, but I kept looking for "test_ids" and
thought that I must be missing some derivative sequence or perhaps some
other code that relied on that.  I am glad you confirmed.

-Pragnesh



