From mark at codesourcery.com  Fri Aug  1 01:20:41 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 31 Jul 2003 18:20:41 -0700
Subject: [qmtest] test in tutorial fails on Windows
In-Reply-To: <3F1FFDBE.2070903@tejasconsulting.com>
References: <200307241551.16967.ghost@cs.msu.su> 
	<3F1FFDBE.2070903@tejasconsulting.com>
Message-ID: <1059700846.17503.104.camel@doubledemon.codesourcery.com>

On Thu, 2003-07-24 at 08:39, Danny Faught wrote:
> I just started looking at QMTest 2.0.3 in earnest in order to use it as 
> an example in a tutorial I'm giving at a conference.  So far I'm very
> impressed.
> 
> I'm going through the tutorial on Windows 2000 now, and I'm getting 
> stuck.  On the page at 
> http://www.codesourcery.com/qm/qmtest_downloads/qm-2.0.3/manual.html/sec-testtut-modifying.html, 
>   it says "Click on the Home link to return to the main QMTest page."  I 
> haven't found a Home link on the web interface.

We've updated the tutorial text to correct that problem.

Thanks for pointing out the issue!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Fri Aug  1 19:49:04 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 1 Aug 2003 12:49:04 -0700
Subject: PATCH: Continue improving scalability
Message-ID: <200308011949.h71Jn48A022860@minax.codesourcery.com>


This patch continues the push to improve the scalability of QMTest.
In particular, TextResultStream no longer stores all results -- just
the results with unexpected outcomes.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-08-01  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/base.py (split_results_by_expected_outcome): Remove.
	* qm/test/cmdline.py (QMTest.__GetResultStreams): Remove
	test_suites parameter.
	* qm/test/result_stream.py (ResultStream.arguments): Remove
	suite_ids.
	* qm/test/classes/text_result_stream.py
	(TextResultStream.__init__): Do not save test and resource
	results.
	(TextResultStream.WriteResult): Update outcome counts, but do not
	save results.
	(TextResultStream.Summarize): Adjust accordingly.
	(TextResultStream._SummarizeTestStats): Remove results parameter.
	(TextResultStream._SummarizeRelativeTestStats): Likewise.
	(TextResultStream._CountOutcomes): Remove.
	(TextResultStream._SummarizeTestSuiteStats): Remove.

Index: qm/test/base.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/base.py,v
retrieving revision 1.88
diff -c -5 -p -r1.88 base.py
*** qm/test/base.py	24 Jul 2003 06:38:39 -0000	1.88
--- qm/test/base.py	1 Aug 2003 19:45:16 -0000
*************** def _result_from_dom(node):
*** 392,424 ****
          result[name] = value
  
      return result
  
  
- def split_results_by_expected_outcome(results, expected_outcomes):
-     """Partition a sequence of results by expected outcomes.
- 
-     'results' -- A sequence of 'Result' objects.
- 
-     'expected_outcomes' -- A map from ID to corresponding expected
-     outcome.
- 
-     returns -- A pair of lists.  The first contains results that
-     produced the expected outcome.  The second contains results that
-     didn't."""
- 
-     expected = []
-     unexpected = []
-     for result in results:
-         expected_outcome = expected_outcomes.get(result.GetId(), Result.PASS)
-         if result.GetOutcome() == expected_outcome:
-             expected.append(result)
-         else:
-             unexpected.append(result)
-     return expected, unexpected
- 
- 
  ########################################################################
  # variables
  ########################################################################
  
  extension_kinds = [ 'database',
--- 392,401 ----
Index: qm/test/cmdline.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/cmdline.py,v
retrieving revision 1.90
diff -c -5 -p -r1.90 cmdline.py
*** qm/test/cmdline.py	24 Jul 2003 18:14:17 -0000	1.90
--- qm/test/cmdline.py	1 Aug 2003 19:45:17 -0000
*************** Valid formats are "full", "brief" (the d
*** 1235,1245 ****
  
          any_unexpected_outcomes = 0
  
          # Compute the list of result streams to which output should be
          # written.
!         streams = self.__GetResultStreams(suite_ids)
          
          # Send the annotations through.
          for s in streams:
              s.WriteAllAnnotations(results.GetAnnotations())
  
--- 1235,1245 ----
  
          any_unexpected_outcomes = 0
  
          # Compute the list of result streams to which output should be
          # written.
!         streams = self.__GetResultStreams()
          
          # Send the annotations through.
          for s in streams:
              s.WriteAllAnnotations(results.GetAnnotations())
  
*************** Valid formats are "full", "brief" (the d
*** 1383,1393 ****
              rs = (self.GetFileResultStreamClass()
                    ({ "filename" : result_file_name}))
              result_streams.append(rs)
  
          # Handle the --result-stream options.
!         result_streams.extend(self.__GetResultStreams(test_suites))
          
          if self.HasCommandOption("random"):
              # Randomize the order of the tests.
              random.shuffle(test_ids)
          else:
--- 1383,1393 ----
              rs = (self.GetFileResultStreamClass()
                    ({ "filename" : result_file_name}))
              result_streams.append(rs)
  
          # Handle the --result-stream options.
!         result_streams.extend(self.__GetResultStreams())
          
          if self.HasCommandOption("random"):
              # Randomize the order of the tests.
              random.shuffle(test_ids)
          else:
*************** Valid formats are "full", "brief" (the d
*** 1581,1591 ****
              raise qm.cmdline.CommandError, \
                    qm.error("invalid extension kind",
                             kind = kind)
  
                         
!     def __GetResultStreams(self, test_suites):
          """Return the result streams to use.
  
          returns -- A list of 'ResultStream' objects, as indicated by the
          user."""
  
--- 1581,1591 ----
              raise qm.cmdline.CommandError, \
                    qm.error("invalid extension kind",
                             kind = kind)
  
                         
!     def __GetResultStreams(self):
          """Return the result streams to use.
  
          returns -- A list of 'ResultStream' objects, as indicated by the
          user."""
  
*************** Valid formats are "full", "brief" (the d
*** 1594,1604 ****
          result_streams = []
  
          arguments = {
              "expected_outcomes" : self.__GetExpectedOutcomes(),
              "database" : database,
-             "suite_ids" : test_suites
              }
          
          # Look up the summary format.
          format = self.GetCommandOption("format", "")
          if format and format not in self.summary_formats:
--- 1594,1603 ----
*************** Valid formats are "full", "brief" (the d
*** 1612,1622 ****
          if format != "none":
              as = { "format" : format }
              as.update(arguments)
              stream = self.GetTextResultStreamClass()(as)
              result_streams.append(stream)
!         
          f = lambda n: qm.test.base.get_extension_class(n,
                                                         "result_stream",
                                                         database)
          
          # Look for all of the "--result-stream" options.
--- 1611,1621 ----
          if format != "none":
              as = { "format" : format }
              as.update(arguments)
              stream = self.GetTextResultStreamClass()(as)
              result_streams.append(stream)
! 
          f = lambda n: qm.test.base.get_extension_class(n,
                                                         "result_stream",
                                                         database)
          
          # Look for all of the "--result-stream" options.
Index: qm/test/result_stream.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/result_stream.py,v
retrieving revision 1.7
diff -c -5 -p -r1.7 result_stream.py
*** qm/test/result_stream.py	3 Jul 2003 19:32:04 -0000	1.7
--- qm/test/result_stream.py	1 Aug 2003 19:45:17 -0000
*************** class ResultStream(qm.extension.Extensio
*** 46,57 ****
      arguments = [
          qm.fields.PythonField(
             name = "expected_outcomes"),
          qm.fields.PythonField(
             name = "database"),
-         qm.fields.PythonField(
-            name = "suite_ids"),
          ]
      
      def WriteAnnotation(self, key, value):
          """Output an annotation for this run.
  
--- 46,55 ----
Index: qm/test/classes/text_result_stream.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/classes/text_result_stream.py,v
retrieving revision 1.2
diff -c -5 -p -r1.2 text_result_stream.py
*** qm/test/classes/text_result_stream.py	31 Jul 2003 23:17:50 -0000	1.2
--- qm/test/classes/text_result_stream.py	1 Aug 2003 19:45:17 -0000
*************** class TextResultStream(FileResultStream)
*** 79,89 ****
              gives details about any tests with unexpected outcomes.
  
              The "full" format is like "brief" except that all
              annotations are shown for tests as they are run.
  
!             The "stats" format omits the failing tests section."""),
          ]
      
      def __init__(self, arguments):
          """Construct a 'TextResultStream'.
  
--- 79,90 ----
              gives details about any tests with unexpected outcomes.
  
              The "full" format is like "brief" except that all
              annotations are shown for tests as they are run.
  
!             In the "stats" format only the summary statistics are
!             displayed."""),
          ]
      
      def __init__(self, arguments):
          """Construct a 'TextResultStream'.
  
*************** class TextResultStream(FileResultStream)
*** 102,129 ****
                  if self.file.isatty():
                      self.format = "brief"
              except:
                  pass
              
-         self.__test_results = []
-         self.__resource_results = []
          self.__first_test = 1
!         
!         
      def WriteResult(self, result):
          """Output a test or resource result.
  
          'result' -- A 'Result'."""
  
          # Record the results as they are received.
          if result.GetKind() == Result.TEST:
!             self.__test_results.append(result)
          else:
!             self.__resource_results.append(result)
! 
!         # In batch mode, no results are displayed as tests are run.
!         if self.format == "batch":
              return
          
          # Display a heading before the first result.
          if self.__first_test:
              self._DisplayHeading("TEST RESULTS")
--- 103,154 ----
                  if self.file.isatty():
                      self.format = "brief"
              except:
                  pass
              
          self.__first_test = 1
!         # Keep track of tests and resources that had unexpected outcomes.
!         self.__unexpected_test_results = []
!         self.__unexpected_resource_results = []
!         # And how many tests were run.
!         self.__num_tests = 0
!         # And how many tests there are with each outcome.
!         self.__outcome_counts = {}
!         for o in Result.outcomes:
!             self.__outcome_counts[o] = 0
!         # And how many unexpected tests there are with each outcome.
!         self.__unexpected_outcome_counts = {}
!         for o in Result.outcomes:
!             self.__unexpected_outcome_counts[o] = 0
! 
! 
      def WriteResult(self, result):
          """Output a test or resource result.
  
          'result' -- A 'Result'."""
  
          # Record the results as they are received.
          if result.GetKind() == Result.TEST:
!             # Remember how many tests we have processed.
!             self.__num_tests += 1
!             # Increment the outcome count.
!             outcome = result.GetOutcome()
!             self.__outcome_counts[outcome] += 1
!             # Remember tests with unexpected results so that we can
!             # display them at the end of the run.
!             test_id = result.GetId()
!             expected_outcome = self.expected_outcomes.get(result.GetId(),
!                                                           Result.PASS)
!             if outcome != expected_outcome:
!                 self.__unexpected_outcome_counts[outcome] += 1
!                 self.__unexpected_test_results.append(result)
          else:
!             if result.GetOutcome() != result.PASS:
!                 self.__unexpected_resource_results.append(result)
!             
!         # In some modes, no results are displayed as the tests are run.
!         if self.format == "batch" or self.format == "stats":
              return
          
          # Display a heading before the first result.
          if self.__first_test:
              self._DisplayHeading("TEST RESULTS")
*************** class TextResultStream(FileResultStream)
*** 153,189 ****
          # Show results for tests with unexpected outcomes.
          if self.format in ("full", "brief", "batch"):
              compare_ids = lambda r1, r2: cmp(r1.GetId(), r2.GetId())
  
              # Sort test results by ID.
!             self.__test_results.sort(compare_ids)
              # Print individual test results.
              if self.expected_outcomes:
-                 # Show tests that produced unexpected outcomes.
-                 bad_results = split_results_by_expected_outcome(
-                     self.__test_results, self.expected_outcomes)[1]
                  self._DisplayHeading("TESTS WITH UNEXPECTED OUTCOMES")
!                 self._SummarizeResults(bad_results)
!             if not self.expected_outcomes or self.format == "full":
!                 # No expected outcomes were specified, so show all tests
!                 # that did not pass.
!                 bad_results = filter(
!                     lambda r: r.GetOutcome() != Result.PASS,
!                     self.__test_results)
!                 if bad_results:
!                     self._DisplayHeading("TESTS THAT DID NOT PASS")
!                     self._SummarizeResults(bad_results)
! 
!             # Sort resource results by ID.
!             self.__resource_results.sort(compare_ids)
!             bad_results = filter(
!                 lambda r: r.GetOutcome() != Result.PASS,
!                 self.__resource_results)
!             if len(bad_results) > 0:
                  # Print individual resource results.
                  self._DisplayHeading("RESOURCES THAT DID NOT PASS")
!                 self._SummarizeResults(bad_results)
  
          if self.format != "batch":
              self._DisplayStatistics()
          
          # Invoke the base class method.
--- 178,201 ----
          # Show results for tests with unexpected outcomes.
          if self.format in ("full", "brief", "batch"):
              compare_ids = lambda r1, r2: cmp(r1.GetId(), r2.GetId())
  
              # Sort test results by ID.
!             self.__unexpected_test_results.sort(compare_ids)
              # Print individual test results.
              if self.expected_outcomes:
                  self._DisplayHeading("TESTS WITH UNEXPECTED OUTCOMES")
!             else:
!                 self._DisplayHeading("TESTS THAT DID NOT PASS")
!             self._SummarizeResults(self.__unexpected_test_results)
! 
!             if self.__unexpected_resource_results:
!                 # Sort resource results by ID.
!                 self.__unexpected_resource_results.sort(compare_ids)
                  # Print individual resource results.
                  self._DisplayHeading("RESOURCES THAT DID NOT PASS")
!                 self._SummarizeResults(self.__unexpected_resource_results)
  
          if self.format != "batch":
              self._DisplayStatistics()
          
          # Invoke the base class method.
*************** class TextResultStream(FileResultStream)
*** 198,315 ****
          self.file.write("\n")
          self._DisplayHeading("STATISTICS")
  
          # Summarize the test statistics.
          if self.expected_outcomes:
!             self._SummarizeRelativeTestStats(self.__test_results)
          else:
!             self._SummarizeTestStats(self.__test_results)
! 
!         # Summarize test results by test suite.
!         if self.format in ("full", "stats") \
!            and len(self.suite_ids) > 0:
!             # Print statistics by test suite.
!             self._DisplayHeading("STATISTICS BY TEST SUITE")
!             self._SummarizeTestSuiteStats()
  
-         
-     def _SummarizeTestStats(self, results):
-         """Generate statistics about the overall results.
  
!         'results' -- The sequence of 'Result' objects to summarize."""
  
!         num_tests = len(results)
          self.file.write("  %6d        tests total\n" % num_tests)
  
          # If there are no tests, there is no need to go into detail.
          if num_tests == 0:
              return
  
-         counts_by_outcome = self._CountOutcomes(results)
          for outcome in Result.outcomes:
!             count = counts_by_outcome[outcome]
              if count > 0:
                  self.file.write("  %6d (%3.0f%%) tests %s\n"
                                  % (count, (100. * count) / num_tests,
                                     outcome))
          self.file.write("\n")
  
          
!     def _SummarizeRelativeTestStats(self, results):
!         """Generate statistics showing results relative to expectations.
! 
!         'results' -- The sequence of 'Result' objects to summarize."""
  
          # Indicate the total number of tests.
!         num_tests = len(results)
          self.file.write("  %6d        tests total\n" % num_tests)
  
          # If there are no tests, there is no need to go into detail.
          if num_tests == 0:
              return
  
-         # Split the results into those that produced expected outcomes, and
-         # those that didn't.
-         expected, unexpected = \
-             split_results_by_expected_outcome(results,
-                                               self.expected_outcomes)
          # Report the number that produced expected outcomes.
          self.file.write("  %6d (%3.0f%%) tests as expected\n"
!                         % (len(expected),
!                            (100. * len(expected)) / num_tests))
          # For results that produced unexpected outcomes, break them down by
          # actual outcome.
-         counts_by_outcome = self._CountOutcomes(unexpected)
          for outcome in Result.outcomes:
!             count = counts_by_outcome[outcome]
              if count > 0:
                  self.file.write("  %6d (%3.0f%%) tests unexpected %s\n"
                                  % (count, (100. * count) / num_tests,
                                     outcome))
          self.file.write("\n")
  
  
-     def _CountOutcomes(self, results):
-         """Count results by outcome.
- 
-         'results' -- A sequence of 'Result' objects.
- 
-         returns -- A map from outcomes to counts of results with that
-         outcome.""" 
- 
-         counts = {}
-         for outcome in Result.outcomes:
-             counts[outcome] = 0
-         for result in results:
-             outcome = result.GetOutcome()
-             counts[outcome] = counts[outcome] + 1
-         return counts
-         
-         
-     def _SummarizeTestSuiteStats(self):
-         """Generate statistics showing results by test suite."""
- 
-         for suite_id in self.suite_ids:
-             # Expand the contents of the suite.
-             suite = self.database.GetSuite(suite_id)
-             ids_in_suite = suite.GetAllTestAndSuiteIds()[0]
-             # Determine the results belonging to tests in the suite.
-             results_in_suite = []
-             for result in self.__test_results:
-                 if result.GetId() in ids_in_suite:
-                     results_in_suite.append(result)
-             # If there aren't any, skip.
-             if len(results_in_suite) == 0:
-                 continue
- 
-             self.file.write("  %s\n" % suite.GetId())
-             if self.expected_outcomes is None:
-                 self._SummarizeTestStats(results_in_suite)
-             else:
-                 self._SummarizeRelativeTestStats(results_in_suite)
- 
-         
      def _SummarizeResults(self, results):
          """Summarize each of the results.
  
          'results' -- The sequence of 'Result' objects to summarize."""
  
--- 210,271 ----
          self.file.write("\n")
          self._DisplayHeading("STATISTICS")
  
          # Summarize the test statistics.
          if self.expected_outcomes:
!             self._SummarizeRelativeTestStats()
          else:
!             self._SummarizeTestStats()
  
  
!     def _SummarizeTestStats(self):
!         """Generate statistics about the overall results."""
  
!         num_tests = self.__num_tests
          self.file.write("  %6d        tests total\n" % num_tests)
  
          # If there are no tests, there is no need to go into detail.
          if num_tests == 0:
              return
  
          for outcome in Result.outcomes:
!             count = self.__outcome_counts[outcome]
              if count > 0:
                  self.file.write("  %6d (%3.0f%%) tests %s\n"
                                  % (count, (100. * count) / num_tests,
                                     outcome))
          self.file.write("\n")
  
          
!     def _SummarizeRelativeTestStats(self):
!         """Generate statistics showing results relative to expectations."""
  
          # Indicate the total number of tests.
!         num_tests = self.__num_tests
          self.file.write("  %6d        tests total\n" % num_tests)
  
          # If there are no tests, there is no need to go into detail.
          if num_tests == 0:
              return
  
          # Report the number that produced expected outcomes.
+         unexpected_count = len(self.__unexpected_test_results)
+         expected_count = num_tests - unexpected_count
          self.file.write("  %6d (%3.0f%%) tests as expected\n"
!                         % (expected_count,
!                            (100. * expected_count) / num_tests))
          # For results that produced unexpected outcomes, break them down by
          # actual outcome.
          for outcome in Result.outcomes:
!             count = self.__unexpected_outcome_counts[outcome]
              if count > 0:
                  self.file.write("  %6d (%3.0f%%) tests unexpected %s\n"
                                  % (count, (100. * count) / num_tests,
                                     outcome))
          self.file.write("\n")
  
  
      def _SummarizeResults(self, results):
          """Summarize each of the results.
  
          'results' -- The sequence of 'Result' objects to summarize."""
  


From njs at pobox.com  Thu Aug  7 09:36:54 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 7 Aug 2003 02:36:54 -0700
Subject: Patches for scheduler updates
Message-ID: <20030807093653.GA93@njs.dhis.org>

Attached is a patch that fixes a few bugs in the new scheduler, and in
the test suite that failed to catch said bugs.

The changes to the scheduler are pretty minor -- a few obvious bugs,
and a change to the idle target handling to make it a bit less clever.

The changes to the test suite are so that when we, e.g., run the
check-threads test, the regression tests will also be run using the
thread target.  Previously, though we ran the regression tests
themselves in parallel, we only ever tested qmtest run in serial...
this fixes that.

However, this has odd effects.  If the results are to be believed,
then when running with threaded parallelism the target checking
doesn't work at all (regress.bad_target1 and regress.bad_target2
fail -- apparently we don't notice that the tests aren't supposed to
be run and run them anyway?), and when running with process parallelism
then lots and lots of things don't work.  Like, most but not all of
the regression tests fail, and it's not immediately obvious to me why.

I also get exactly the same results from my original scheduler, the
version in HEAD after applying the fixes here, and even a checkout
from last month before the scheduler changes.  Which is weird, since
the bad target checking in particular is totally different in all
three cases...

Tomorrow I'll make an attempt at digging into these failures in the
hopes of figuring out what's going on, but thought people might like a
heads up and a chance to try to reproduce this... or point out the
pilot error causing all this ;-).

-- Nathaniel

-- 
"But suppose I am not willing to claim that.  For in fact pianos
are heavy, and very few persons can carry a piano all by themselves."
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target --exclude='*.qmr' qm-clean/ChangeLog qm-efficient-scheduling/ChangeLog
--- qm-clean/ChangeLog	2003-08-06 13:00:29.000000000 -0700
+++ qm-efficient-scheduling/ChangeLog	2003-08-07 01:58:52.000000000 -0700
@@ -1,3 +1,23 @@
+2003-08-06  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/test/execution_engine.py: Some comment updates.  Also:
+	(ExecutionEngine._TARGET_IDLE): New variable.
+	(ExecutionEngine._TARGET_BUSY): Likewise.
+	(ExecutionEngine._TARGET_STARVING): Likewise.
+	(ExecutionEngine.__num_idle_targets): Replace with...
+	(ExecutionEngine.__has_idle_targets): ...this.
+	(ExecutionEngine._RunTests): Incorporate above changes.
+	(ExecutionEngine.__AddResult): Likewise.
+	
+	(ExecutionEngine.__AddToTargetPatternQueue): Fix typo.
+
+	* GNUMakefile.in (check-threads): Set new context variable
+	qmtest_target.
+	(check-processes): Likewise.
+	(check-rsh): Likewise.
+	* tests/regress/QMTest/selftest.py (RegTest.Run): Use context
+	variable qmtest_target if defined.
+	
 2003-08-01  Mark Mitchell  <mark at codesourcery.com>
 
 	* qm/test/base.py (split_results_by_expected_outcome): Remove.
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target --exclude='*.qmr' qm-clean/GNUmakefile.in qm-efficient-scheduling/GNUmakefile.in
--- qm-clean/GNUmakefile.in	2003-08-06 13:00:29.000000000 -0700
+++ qm-efficient-scheduling/GNUmakefile.in	2003-08-07 01:30:22.000000000 -0700
@@ -227,7 +227,8 @@
 		thread thread_target.ThreadTarget
 	qm/test/qmtest -D tests run -T tests/QMTest/thread_target \
 		$(QMTESTFLAGS) \
-		-c qmtest_path=qm/test/qmtest
+		-c qmtest_path=qm/test/qmtest \
+		-c qmtest_target=tests/QMTest/thread_target
 
 check-processes: all
 	rm -f tests/QMTest/process_target
@@ -236,7 +237,8 @@
 		process process_target.ProcessTarget
 	qm/test/qmtest -D tests run -T tests/QMTest/process_target \
 		$(QMTESTFLAGS) \
-		-c qmtest_path=qm/test/qmtest
+		-c qmtest_path=qm/test/qmtest \
+		-c qmtest_target=tests/QMTest/process_target
 
 check-rsh: all
 	rm -f tests/QMTest/rsh_target
@@ -246,7 +248,8 @@
 		rsh rsh_target.RSHTarget
 	qm/test/qmtest -D tests run -T tests/QMTest/rsh_target \
 		$(QMTESTFLAGS) \
-		-c qmtest_path=`pwd`/qm/test/qmtest
+		-c qmtest_path=`pwd`/qm/test/qmtest \
+		-c qmtest_target=`pwd`/tests/QMTest/rsh_target
 
 ########################################################################
 # Documentation Rules
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target --exclude='*.qmr' qm-clean/qm/test/execution_engine.py qm-efficient-scheduling/qm/test/execution_engine.py
--- qm-clean/qm/test/execution_engine.py	2003-08-06 17:45:21.000000000 -0700
+++ qm-efficient-scheduling/qm/test/execution_engine.py	2003-08-07 01:22:14.000000000 -0700
@@ -164,6 +164,11 @@
 
 
 
+    _TARGET_IDLE = "IDLE"
+    _TARGET_BUSY = "BUSY"
+    _TARGET_STARVING = "STARVING"
+
+
     def __init__(self,
                  database,
                  test_ids,
@@ -315,14 +320,12 @@
         # Every target is in one of three states: busy, idle, or
         # starving.  A busy target is running tests, an idle target is
         # ready to run tests, and a starving target is ready to run
-        # tests, but no tests are available for it to run.  The value
-        # recorded in the table is 'None' for a starving target, true
-        # for an idle target, and false for a busy target.
+        # tests, but no tests are available for it to run.
         self.__target_state = {}
+        # All targets are initially idle.
         for target in self.__targets:
-            self.__target_state[target] = 1
-        # The total number of idle targets.
-        self.__num_idle_targets = len(self.__targets)
+            self.__target_state[target] = self._TARGET_IDLE
+        self.__has_idle_targets = 1
         
         # Figure out what target groups are available.
         self.__target_groups = {}
@@ -345,7 +348,7 @@
                 pass
 
             # Now look for idle targets.
-            if self.__num_idle_targets == 0:
+            if not self.__has_idle_targets:
                 # Block until one of the running tests completes.
                 self._Trace("All targets are busy -- waiting.")
                 self.__CheckForResponse(wait=1)
@@ -354,19 +357,22 @@
 
             # Go through each of the idle targets, finding work for it
             # to do.
-            self.__num_idle_targets = 0
+            self.__has_idle_targets = 0
             for target in self.__targets:
-                if self.__target_state[target] != 1:
+                if self.__target_state[target] != self._TARGET_IDLE:
                     continue
                 # Try to find work for the target.  If there is no
                 # available work, the target is starving.
                 if not self.__FeedTarget(target):
-                    self.__target_state[target] = None
+                    self.__target_state[target] = self._TARGET_STARVING
                 else:
-                    is_idle = target.IsIdle()
-                    self.__target_state[target] = is_idle
-                    if is_idle:
-                        self.__num_idle_targets += 1
+                    # We gave the target some work, which may have
+                    # changed its idle state, so update the status.
+                    if target.IsIdle():
+                        self.__target_state[target] = self._TARGET_IDLE
+                        self.__has_idle_targets = 1
+                    else:
+                        self.__target_state[target] = self._TARGET_BUSY
 
         # Now all tests have been started; we just have wait for them
         # all to finish.
@@ -384,20 +390,19 @@
 
         self._Trace("Looking for a test for target %s" % target.GetName())
 
-        descriptor = None
-
         # See if there is already a ready-to-run test for this target.
         for pattern in self.__patterns.get(target.GetGroup(), []):
             tests = self.__target_pattern_queues.get(pattern, [])
             if tests:
                 descriptor = tests.pop()
                 break
-
-        # If there is no ready test, find one.
-        descriptor = self.__FindRunnableTest(target)
-        if descriptor is None:
-            # There are no more tests ready to run.
-            return 0
+        else:
+            # There was no ready-to-run test queued, so try to find one
+            # another one.
+            descriptor = self.__FindRunnableTest(target)
+            if descriptor is None:
+                # There really are no more tests ready to run.
+                return 0
                 
         target_name = target.GetName()
         test_id = descriptor.GetId()
@@ -451,8 +456,8 @@
                 # A->B, A->C, B->C, where we can't know ahead of time
                 # that A's dependence on C is unnecessary.
                 if self.__statuses[new_test_id].HasBeenQueued():
-                    # This one is already in process.  This is also what
-                    # a dependency cycle looks like, so check for that
+                    # This one is already in process.  This might
+                    # indicate a dependency cycle, so check for that
                     # now.
                     if new_test_id in self.__ids_on_stack:
                         self._Trace("Cycle detected (%s)"
@@ -552,7 +557,7 @@
             self.__pattern_ok[pattern] = 0
             for group in self.__target_groups:
                 if re.match(pattern, group):
-                    self.__pattern_ok[group] = 1
+                    self.__pattern_ok[pattern] = 1
                     patterns = self.__patterns.setdefault(group, [])
                     patterns.append(pattern)
         # If none of the targets can run this test, mark it untested.
@@ -581,7 +586,8 @@
             try:
                 prereq_status = self.__statuses[prereq_id]
             except KeyError:
-                # This prerequisite is not being run at all.
+                # This prerequisite is not being run at all, so skip
+                # it.
                 continue
 
             if prereq_status.IsFinished():
@@ -634,8 +640,8 @@
         if (target and target.IsIdle()):
             # Output a trace message.
             self._Trace("Target is now idle.\n")
-            self.__target_state[target] = 1
-            self.__num_idle_targets += 1
+            self.__target_state[target] = self._TARGET_IDLE
+            self.__has_idle_targets = 1
             
         # Only tests have expectations or scheduling dependencies.
         if result.GetKind() == Result.TEST:
@@ -670,8 +676,8 @@
             # Any targets that were starving may now be able to find
             # work.
             for t in self.__targets:
-                if self.__target_state[t] is None:
-                    self.__target_state[t] = 1
+                if self.__target_state[t] == self._TARGET_STARVING:
+                    self.__target_state[t] = self._TARGET_IDLE
             
         # Output a trace message.
         self._Trace("Writing result for %s to streams." % id)
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target --exclude='*.qmr' qm-clean/tests/regress/QMTest/selftest.py qm-efficient-scheduling/tests/regress/QMTest/selftest.py
--- qm-clean/tests/regress/QMTest/selftest.py	2003-03-23 23:24:24.000000000 -0800
+++ qm-efficient-scheduling/tests/regress/QMTest/selftest.py	2003-08-07 02:13:27.000000000 -0700
@@ -68,7 +68,12 @@
         # The QMTest binary to test is specified as a context variable.
         qmtest = context['qmtest_path']
 
+        # Set the basic argument vector.
         argv = (qmtest, "-D", path, "run", "-O", results, "-o", output)
+        
+        # If the context also specifies a target, add that.
+        if context.has_key("qmtest_target"):
+            argv += ("-T", context["qmtest_target"])
 
         e = qm.executable.RedirectedExecutable()
         status = e.Run(argv)

From mark at codesourcery.com  Thu Aug  7 16:22:19 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 07 Aug 2003 09:22:19 -0700
Subject: [qmtest] Patches for scheduler updates
In-Reply-To: <20030807093653.GA93@njs.dhis.org>
References: <20030807093653.GA93@njs.dhis.org>
Message-ID: <1060273339.1014.148.camel@doubledemon.codesourcery.com>


> Tomorrow I'll make an attempt at digging into these failures in the
> hopes of figuring out what's going on, but thought people might like a
> heads up and a chance to try to reproduce this... or point out the
> pilot error causing all this ;-).

The problem with bad_target2 is that bad_target.qmt has this target
group pattern:

  $^

And the GNUmakefile.in creates the thread_target without giving it a
group, which makes it default to the empty string.

So, actually, QMTest is honoring the target specification.

The way to fix that is to explicitly use a bogus name rather than "$^"
as a group pattern.  

The reason this did not show up without parallelism is that QMTest puts
the default "local" target in the "local" group.  We could debate
whether or not QMTest should use the empty string in that case, or
whether every target's group should default to its name, if no explicit
group is specified.

I've got fixes for the bad_target tests locally and will check them in
soonish.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Thu Aug  7 16:37:12 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 07 Aug 2003 09:37:12 -0700
Subject: [qmtest] Patches for scheduler updates
In-Reply-To: <20030807093653.GA93@njs.dhis.org>
References: <20030807093653.GA93@njs.dhis.org>
Message-ID: <1060274232.1014.159.camel@doubledemon.codesourcery.com>

> when running with process parallelism
> then lots and lots of things don't work.  Like, most but not all of
> the regression tests fail, and it's not immediately obvious to me why.

They fail because QMTest doesn't compute the correct path to itself the
second time it is invoked.  (It would be nice if UNIX, like Windows,
would give you a way to get at the path to the executable that is
running.)

The qmtest shell script was not correctly handling having both QM_HOME
and QM_BUILD set.

I'll check in the combined set of fixes shortly.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Thu Aug  7 17:08:57 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 07 Aug 2003 10:08:57 -0700
Subject: PATCH: Fix execution engine problems and miscellaneous other issues.
Message-ID: <1060276137.941.162.camel@doubledemon.codesourcery.com>

This patch combines the patches that Nathaniel and I have come up with
over the last 24 hours.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
-------------- next part --------------
2003-08-07  Nathaniel Smith  <njs at codesourcery.com>
	    Mark Mitchell  <mark at codesourcery.com>

	* qm/test/execution_engine.py: Improve documentation.
	(ExecutionEngine.__TARGET_IDLE): New variable.
	(ExecutionEngine.__TARGET_BUSY): Likewise.
	(ExecutionEngine.__TARGET_STARVING): Likewise.
	(ExecutionEngine.__num_idle_targets): Replace with...
	(ExecutionEngine.__has_idle_targets): ...this.
	(ExecutionEngine._RunTests): Incorporate above changes.
	(ExecutionEngine.__AddResult): Likewise.
	(ExecutionEngine.__AddToTargetPatternQueue): Fix typo.
	* GNUMakefile.in (check-threads): Set new context variable
	qmtest_target.
	(check-processes): Likewise.
	(check-rsh): Likewise.
	* qm/qm.sh: Correct handling of QM_PATH when both QM_HOME and
	QM_BUILD are set.
	* tests/regress/QMTest/selftest.py (RegTest.Run): Use context
	variable qmtest_target if defined.
	* tests/regress/bad_target1/bad_target.qmt: Use a target group
	that does not match the empty string.
	* tests/regress/bad_target2/bad_target.qmt: Use a target group
	that does not match the empty string.

	* qm/test/classes/xml_database.py: Do not import dircache.

	* scripts/qm-release: Improve snapshot generation.

Index: GNUmakefile.in
===================================================================
RCS file: /home/sc/Repository/qm/GNUmakefile.in,v
retrieving revision 1.23
diff -c -5 -p -r1.23 GNUmakefile.in
*** GNUmakefile.in	29 Jul 2003 20:22:43 -0000	1.23
--- GNUmakefile.in	7 Aug 2003 17:00:28 -0000
*************** check-threads: all
*** 225,254 ****
  	qm/test/qmtest -D tests create-target -a threads=4 \
  		-T tests/QMTest/thread_target \
  		thread thread_target.ThreadTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/thread_target \
  		$(QMTESTFLAGS) \
! 		-c qmtest_path=qm/test/qmtest
  
  check-processes: all
  	rm -f tests/QMTest/process_target
  	qm/test/qmtest -D tests create-target -a processes=4 \
  		-T tests/QMTest/process_target \
  		process process_target.ProcessTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/process_target \
  		$(QMTESTFLAGS) \
! 		-c qmtest_path=qm/test/qmtest
  
  check-rsh: all
  	rm -f tests/QMTest/rsh_target
  	qm/test/qmtest -D tests create-target \
                  -a host=localhost -a remote_shell=ssh \
  		-T tests/QMTest/rsh_target \
  		rsh rsh_target.RSHTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/rsh_target \
  		$(QMTESTFLAGS) \
! 		-c qmtest_path=`pwd`/qm/test/qmtest
  
  ########################################################################
  # Documentation Rules
  ########################################################################
  
--- 225,257 ----
  	qm/test/qmtest -D tests create-target -a threads=4 \
  		-T tests/QMTest/thread_target \
  		thread thread_target.ThreadTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/thread_target \
  		$(QMTESTFLAGS) \
! 		-c qmtest_path=qm/test/qmtest \
! 		-c qmtest_target=tests/QMTest/thread_target
  
  check-processes: all
  	rm -f tests/QMTest/process_target
  	qm/test/qmtest -D tests create-target -a processes=4 \
  		-T tests/QMTest/process_target \
  		process process_target.ProcessTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/process_target \
  		$(QMTESTFLAGS) \
! 		-c qmtest_path=qm/test/qmtest \
! 		-c qmtest_target=tests/QMTest/process_target
  
  check-rsh: all
  	rm -f tests/QMTest/rsh_target
  	qm/test/qmtest -D tests create-target \
                  -a host=localhost -a remote_shell=ssh \
  		-T tests/QMTest/rsh_target \
  		rsh rsh_target.RSHTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/rsh_target \
  		$(QMTESTFLAGS) \
! 		-c qmtest_path=`pwd`/qm/test/qmtest \
! 		-c qmtest_target=`pwd`/tests/QMTest/rsh_target
  
  ########################################################################
  # Documentation Rules
  ########################################################################
  
Index: qm/qm.sh
===================================================================
RCS file: /home/sc/Repository/qm/qm/qm.sh,v
retrieving revision 1.12
diff -c -5 -p -r1.12 qm.sh
*** qm/qm.sh	13 Jun 2003 05:12:58 -0000	1.12
--- qm/qm.sh	7 Aug 2003 17:00:28 -0000
*************** if test x"${QM_HOME}" = x; then
*** 162,172 ****
  	fi
  	# Go the next containing directory.
  	QM_HOME=`dirname "${QM_HOME}"`
      done
  else
!     QM_PATH=$QM_HOME/bin/qmtest
  fi
  
  # Export QM_HOME and QM_PATH so that we can find them from within Python.
  export QM_HOME
  export QM_PATH
--- 162,177 ----
  	fi
  	# Go the next containing directory.
  	QM_HOME=`dirname "${QM_HOME}"`
      done
  else
!     # The QM_HOME variable was set.
!     if test ${QM_BUILD} -eq 0; then
! 	QM_PATH=$QM_HOME/bin/qmtest
!     else
! 	QM_PATH=$QM_HOME/qm/test/qmtest
!     fi
  fi
  
  # Export QM_HOME and QM_PATH so that we can find them from within Python.
  export QM_HOME
  export QM_PATH
Index: qm/test/execution_engine.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/execution_engine.py,v
retrieving revision 1.22
diff -c -5 -p -r1.22 execution_engine.py
*** qm/test/execution_engine.py	31 Jul 2003 23:17:50 -0000	1.22
--- qm/test/execution_engine.py	7 Aug 2003 17:00:29 -0000
*************** class ExecutionEngine:
*** 161,170 ****
--- 161,178 ----
                  self.dependants = [test_id]
              else:
                  self.dependants.append(test_id)
  
  
+     # Every target is in one of three states: busy, idle, or starving.
+     # A busy target is running tests, an idle target is ready to run
+     # tests, and a starving target is ready to run tests, but no tests
+     # are available for it to run.
+     __TARGET_IDLE = "IDLE"
+     __TARGET_BUSY = "BUSY"
+     __TARGET_STARVING = "STARVING"
+ 
  
      def __init__(self,
                   database,
                   test_ids,
                   context,
*************** class ExecutionEngine:
*** 310,330 ****
          self.__test_stack = []
          # A hash-table giving the names of the tests presently on the
          # stack.  The names are the keys; the values are unused.
          self.__ids_on_stack = {}
  
!         # Every target is in one of three states: busy, idle, or
!         # starving.  A busy target is running tests, an idle target is
!         # ready to run tests, and a starving target is ready to run
!         # tests, but no tests are available for it to run.  The value
!         # recorded in the table is 'None' for a starving target, true
!         # for an idle target, and false for a busy target.
          self.__target_state = {}
          for target in self.__targets:
!             self.__target_state[target] = 1
!         # The total number of idle targets.
!         self.__num_idle_targets = len(self.__targets)
          
          # Figure out what target groups are available.
          self.__target_groups = {}
          for target in self.__targets:
              self.__target_groups[target.GetGroup()] = None
--- 318,332 ----
          self.__test_stack = []
          # A hash-table giving the names of the tests presently on the
          # stack.  The names are the keys; the values are unused.
          self.__ids_on_stack = {}
  
!         # All targets are initially idle.
          self.__target_state = {}
          for target in self.__targets:
!             self.__target_state[target] = self.__TARGET_IDLE
!         self.__has_idle_targets = 1
          
          # Figure out what target groups are available.
          self.__target_groups = {}
          for target in self.__targets:
              self.__target_groups[target.GetGroup()] = None
*************** class ExecutionEngine:
*** 343,374 ****
              # Process any responses and update the count of idle targets.
              while self.__CheckForResponse(wait=0):
                  pass
  
              # Now look for idle targets.
!             if self.__num_idle_targets == 0:
                  # Block until one of the running tests completes.
                  self._Trace("All targets are busy -- waiting.")
                  self.__CheckForResponse(wait=1)
                  self._Trace("Response received.")
                  continue
  
              # Go through each of the idle targets, finding work for it
              # to do.
!             self.__num_idle_targets = 0
              for target in self.__targets:
!                 if self.__target_state[target] != 1:
                      continue
                  # Try to find work for the target.  If there is no
                  # available work, the target is starving.
                  if not self.__FeedTarget(target):
!                     self.__target_state[target] = None
                  else:
!                     is_idle = target.IsIdle()
!                     self.__target_state[target] = is_idle
!                     if is_idle:
!                         self.__num_idle_targets += 1
  
          # Now all tests have been started; we just have wait for them
          # all to finish.
          while self.__running:
              self.__CheckForResponse(wait=1)
--- 345,379 ----
              # Process any responses and update the count of idle targets.
              while self.__CheckForResponse(wait=0):
                  pass
  
              # Now look for idle targets.
!             if not self.__has_idle_targets:
                  # Block until one of the running tests completes.
                  self._Trace("All targets are busy -- waiting.")
                  self.__CheckForResponse(wait=1)
                  self._Trace("Response received.")
                  continue
  
              # Go through each of the idle targets, finding work for it
              # to do.
!             self.__has_idle_targets = 0
              for target in self.__targets:
!                 if self.__target_state[target] != self.__TARGET_IDLE:
                      continue
                  # Try to find work for the target.  If there is no
                  # available work, the target is starving.
                  if not self.__FeedTarget(target):
!                     self.__target_state[target] = self.__TARGET_STARVING
                  else:
!                     # We gave the target some work, which may have
!                     # changed its idle state, so update the status.
!                     if target.IsIdle():
!                         self.__target_state[target] = self.__TARGET_IDLE
!                         self.__has_idle_targets = 1
!                     else:
!                         self.__target_state[target] = self.__TARGET_BUSY
  
          # Now all tests have been started; we just have wait for them
          # all to finish.
          while self.__running:
              self.__CheckForResponse(wait=1)
*************** class ExecutionEngine:
*** 382,405 ****
          returns -- True, iff a test could be found to run on 'target'.
          False otherwise."""
  
          self._Trace("Looking for a test for target %s" % target.GetName())
  
-         descriptor = None
- 
          # See if there is already a ready-to-run test for this target.
          for pattern in self.__patterns.get(target.GetGroup(), []):
              tests = self.__target_pattern_queues.get(pattern, [])
              if tests:
                  descriptor = tests.pop()
                  break
! 
!         # If there is no ready test, find one.
!         descriptor = self.__FindRunnableTest(target)
!         if descriptor is None:
!             # There are no more tests ready to run.
!             return 0
                  
          target_name = target.GetName()
          test_id = descriptor.GetId()
          self._Trace("Running %s on %s" % (test_id, target_name))
          assert self.__statuses[test_id].GetState() == self.__TestStatus.READY
--- 387,409 ----
          returns -- True, iff a test could be found to run on 'target'.
          False otherwise."""
  
          self._Trace("Looking for a test for target %s" % target.GetName())
  
          # See if there is already a ready-to-run test for this target.
          for pattern in self.__patterns.get(target.GetGroup(), []):
              tests = self.__target_pattern_queues.get(pattern, [])
              if tests:
                  descriptor = tests.pop()
                  break
!         else:
!             # There was no ready-to-run test queued, so try to find one
!             # another one.
!             descriptor = self.__FindRunnableTest(target)
!             if descriptor is None:
!                 # There really are no more tests ready to run.
!                 return 0
                  
          target_name = target.GetName()
          test_id = descriptor.GetId()
          self._Trace("Running %s on %s" % (test_id, target_name))
          assert self.__statuses[test_id].GetState() == self.__TestStatus.READY
*************** class ExecutionEngine:
*** 449,460 ****
                  # here; if we were to do it earlier, we would be in
                  # danger of being confused by dependency graphs like
                  # A->B, A->C, B->C, where we can't know ahead of time
                  # that A's dependence on C is unnecessary.
                  if self.__statuses[new_test_id].HasBeenQueued():
!                     # This one is already in process.  This is also what
!                     # a dependency cycle looks like, so check for that
                      # now.
                      if new_test_id in self.__ids_on_stack:
                          self._Trace("Cycle detected (%s)"
                                      % (new_test_id,))
                          self.__AddUntestedResult \
--- 453,464 ----
                  # here; if we were to do it earlier, we would be in
                  # danger of being confused by dependency graphs like
                  # A->B, A->C, B->C, where we can't know ahead of time
                  # that A's dependence on C is unnecessary.
                  if self.__statuses[new_test_id].HasBeenQueued():
!                     # This one is already in process.  This might
!                     # indicate a dependency cycle, so check for that
                      # now.
                      if new_test_id in self.__ids_on_stack:
                          self._Trace("Cycle detected (%s)"
                                      % (new_test_id,))
                          self.__AddUntestedResult \
*************** class ExecutionEngine:
*** 550,560 ****
          # matches any of the targets, do so now.
          if not self.__pattern_ok.has_key(pattern):
              self.__pattern_ok[pattern] = 0
              for group in self.__target_groups:
                  if re.match(pattern, group):
!                     self.__pattern_ok[group] = 1
                      patterns = self.__patterns.setdefault(group, [])
                      patterns.append(pattern)
          # If none of the targets can run this test, mark it untested.
          if not self.__pattern_ok[pattern]:
              self.__AddUntestedResult(test_id,
--- 554,564 ----
          # matches any of the targets, do so now.
          if not self.__pattern_ok.has_key(pattern):
              self.__pattern_ok[pattern] = 0
              for group in self.__target_groups:
                  if re.match(pattern, group):
!                     self.__pattern_ok[pattern] = 1
                      patterns = self.__patterns.setdefault(group, [])
                      patterns.append(pattern)
          # If none of the targets can run this test, mark it untested.
          if not self.__pattern_ok[pattern]:
              self.__AddUntestedResult(test_id,
*************** class ExecutionEngine:
*** 579,589 ****
          prereqs = descriptor.GetPrerequisites()
          for prereq_id, outcome in prereqs.iteritems():
              try:
                  prereq_status = self.__statuses[prereq_id]
              except KeyError:
!                 # This prerequisite is not being run at all.
                  continue
  
              if prereq_status.IsFinished():
                  prereq_outcome = prereq_status.outcome
                  if outcome != prereq_outcome:
--- 583,594 ----
          prereqs = descriptor.GetPrerequisites()
          for prereq_id, outcome in prereqs.iteritems():
              try:
                  prereq_status = self.__statuses[prereq_id]
              except KeyError:
!                 # This prerequisite is not being run at all, so skip
!                 # it.
                  continue
  
              if prereq_status.IsFinished():
                  prereq_outcome = prereq_status.outcome
                  if outcome != prereq_outcome:
*************** class ExecutionEngine:
*** 632,643 ****
  
          # This target might now be idle.
          if (target and target.IsIdle()):
              # Output a trace message.
              self._Trace("Target is now idle.\n")
!             self.__target_state[target] = 1
!             self.__num_idle_targets += 1
              
          # Only tests have expectations or scheduling dependencies.
          if result.GetKind() == Result.TEST:
              # Record the outcome for this test.
              test_status = self.__statuses[id]
--- 637,648 ----
  
          # This target might now be idle.
          if (target and target.IsIdle()):
              # Output a trace message.
              self._Trace("Target is now idle.\n")
!             self.__target_state[target] = self.__TARGET_IDLE
!             self.__has_idle_targets = 1
              
          # Only tests have expectations or scheduling dependencies.
          if result.GetKind() == Result.TEST:
              # Record the outcome for this test.
              test_status = self.__statuses[id]
*************** class ExecutionEngine:
*** 668,679 ****
                      self.__any_unexpected_outcomes = 1
  
              # Any targets that were starving may now be able to find
              # work.
              for t in self.__targets:
!                 if self.__target_state[t] is None:
!                     self.__target_state[t] = 1
              
          # Output a trace message.
          self._Trace("Writing result for %s to streams." % id)
  
          # Report the result.
--- 673,684 ----
                      self.__any_unexpected_outcomes = 1
  
              # Any targets that were starving may now be able to find
              # work.
              for t in self.__targets:
!                 if self.__target_state[t] == self.__TARGET_STARVING:
!                     self.__target_state[t] = self.__TARGET_IDLE
              
          # Output a trace message.
          self._Trace("Writing result for %s to streams." % id)
  
          # Report the result.
Index: qm/test/classes/xml_database.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/classes/xml_database.py,v
retrieving revision 1.14
diff -c -5 -p -r1.14 xml_database.py
*** qm/test/classes/xml_database.py	15 Jul 2003 18:48:21 -0000	1.14
--- qm/test/classes/xml_database.py	7 Aug 2003 17:00:29 -0000
***************
*** 15,25 ****
  
  ########################################################################
  # imports
  ########################################################################
  
- import dircache
  import os
  import qm.common
  import qm.fields
  import qm.label
  import qm.structured_text
--- 15,24 ----
Index: scripts/qm-release
===================================================================
RCS file: /home/sc/Repository/qm/scripts/qm-release,v
retrieving revision 1.8
diff -c -5 -p -r1.8 qm-release
*** scripts/qm-release	6 Aug 2003 20:55:26 -0000	1.8
--- scripts/qm-release	7 Aug 2003 17:00:29 -0000
*************** tag_qm() {
*** 71,90 ****
      # Check out the source distribution.
      ${CVS} co -d qm-${QM_VERSION} -r ${BRANCH} qm || \
        error "Could not check out QM"
      changedir qm-${QM_VERSION}
      # Create the version file.
! cat > version <<EOF
  # This file is automatically generated.  Do not edit.
  
  QM_VERSION=${QM_VERSION}
  QM_MAJOR_VER=${QM_MAJOR_VER}
  QM_MINOR_VER=${QM_MINOR_VER}
  QM_RELEASE_VER=${QM_RELEASE_VER}
  EOF
!     # Commit the version file.
!     ${CVS} commit -m 'Update version numbers.' version
      # Tag the sources.  Using the "-F" option to CVS makes sure that any
      # existing tag is moved, in case it takes several tries to get a 
      # release that we are happy with.
      ${CVS} tag -F ${QM_RELEASE_TAG} || \
        error "Could not tag QM"
--- 71,92 ----
      # Check out the source distribution.
      ${CVS} co -d qm-${QM_VERSION} -r ${BRANCH} qm || \
        error "Could not check out QM"
      changedir qm-${QM_VERSION}
      # Create the version file.
!     if [ $SNAPSHOT -eq 0 ]; then
! 	cat > version <<EOF
  # This file is automatically generated.  Do not edit.
  
  QM_VERSION=${QM_VERSION}
  QM_MAJOR_VER=${QM_MAJOR_VER}
  QM_MINOR_VER=${QM_MINOR_VER}
  QM_RELEASE_VER=${QM_RELEASE_VER}
  EOF
!         # Commit the version file.
! 	${CVS} commit -m 'Update version numbers.' version
!     fi
      # Tag the sources.  Using the "-F" option to CVS makes sure that any
      # existing tag is moved, in case it takes several tries to get a 
      # release that we are happy with.
      ${CVS} tag -F ${QM_RELEASE_TAG} || \
        error "Could not tag QM"
Index: tests/regress/QMTest/selftest.py
===================================================================
RCS file: /home/sc/Repository/qm/tests/regress/QMTest/selftest.py,v
retrieving revision 1.1
diff -c -5 -p -r1.1 selftest.py
*** tests/regress/QMTest/selftest.py	24 Mar 2003 07:24:24 -0000	1.1
--- tests/regress/QMTest/selftest.py	7 Aug 2003 17:00:29 -0000
*************** class RegTest(Test):
*** 66,76 ****
--- 66,81 ----
          assert os.path.isfile(results)
          
          # The QMTest binary to test is specified as a context variable.
          qmtest = context['qmtest_path']
  
+         # Set the basic argument vector.
          argv = (qmtest, "-D", path, "run", "-O", results, "-o", output)
+         
+         # If the context also specifies a target, add that.
+         if context.has_key("qmtest_target"):
+             argv += ("-T", context["qmtest_target"])
  
          e = qm.executable.RedirectedExecutable()
          status = e.Run(argv)
          stdout = e.stdout
          stderr = e.stderr
Index: tests/regress/bad_target1/bad_target.qmt
===================================================================
RCS file: /home/sc/Repository/qm/tests/regress/bad_target1/bad_target.qmt,v
retrieving revision 1.1
diff -c -5 -p -r1.1 bad_target.qmt
*** tests/regress/bad_target1/bad_target.qmt	31 Jul 2003 23:17:50 -0000	1.1
--- tests/regress/bad_target1/bad_target.qmt	7 Aug 2003 17:00:29 -0000
***************
*** 1,5 ****
  <?xml version="1.0" ?>
  <!DOCTYPE extension
    PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
    'http://www.software-carpentry.com/qm/xml/extension'>
! <extension class="python.ExecTest" kind="test"><argument name="prerequisites"><set/></argument><argument name="source"><text>pass</text></argument><argument name="target_group"><text>$^</text></argument><argument name="expression"><text>1</text></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
--- 1,5 ----
  <?xml version="1.0" ?>
  <!DOCTYPE extension
    PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
    'http://www.software-carpentry.com/qm/xml/extension'>
! <extension class="python.ExecTest" kind="test"><argument name="prerequisites"><set/></argument><argument name="source"><text>pass</text></argument><argument name="target_group"><text>bad</text></argument><argument name="expression"><text>1</text></argument><argument name="resources"><set/></argument></extension>
Index: tests/regress/bad_target2/bad_target.qmt
===================================================================
RCS file: /home/sc/Repository/qm/tests/regress/bad_target2/bad_target.qmt,v
retrieving revision 1.1
diff -c -5 -p -r1.1 bad_target.qmt
*** tests/regress/bad_target2/bad_target.qmt	31 Jul 2003 23:17:51 -0000	1.1
--- tests/regress/bad_target2/bad_target.qmt	7 Aug 2003 17:00:29 -0000
***************
*** 1,5 ****
  <?xml version="1.0" ?>
  <!DOCTYPE extension
    PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
    'http://www.software-carpentry.com/qm/xml/extension'>
! <extension class="python.ExecTest" kind="test"><argument name="prerequisites"><set/></argument><argument name="source"><text>pass</text></argument><argument name="target_group"><text>$^</text></argument><argument name="expression"><text>1</text></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
--- 1,5 ----
  <?xml version="1.0" ?>
  <!DOCTYPE extension
    PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
    'http://www.software-carpentry.com/qm/xml/extension'>
! <extension class="python.ExecTest" kind="test"><argument name="prerequisites"><set/></argument><argument name="source"><text>pass</text></argument><argument name="target_group"><text>bad</text></argument><argument name="expression"><text>1</text></argument><argument name="resources"><set/></argument></extension>

From kevin at elemtech.com  Thu Aug  7 21:51:13 2003
From: kevin at elemtech.com (Kevin White)
Date: Thu, 7 Aug 2003 15:51:13 -0600
Subject: Remote Option
Message-ID: <HMEBILOLFCDJCDAAKIJPCECHCDAA.kevin@elemtech.com>

Mark,

I am trying to make QMTest available over the Internet to some team members
located offsite, but am having problems doing so.

I can bind a local IP address just fine, but when I specify a public IP
address for my company domain, it chokes:

qmtest gui -A 166.70.xxx.xxx

>From the documentation, it seems this syntax is only for local IP addresses,
so I'm guessing the qmtest remote option is the way to go.  However, there
is no documentation that I can find on this particular option.  Can you help
me out?

Note: I'm running it on Linux and I compiled it from the source.

Thanks,
Kevin White



From mark at codesourcery.com  Thu Aug  7 21:57:35 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 07 Aug 2003 14:57:35 -0700
Subject: [qmtest] Remote Option
In-Reply-To: <HMEBILOLFCDJCDAAKIJPCECHCDAA.kevin@elemtech.com>
References: <HMEBILOLFCDJCDAAKIJPCECHCDAA.kevin@elemtech.com>
Message-ID: <1060293456.4295.196.camel@doubledemon.codesourcery.com>

On Thu, 2003-08-07 at 14:51, Kevin White wrote:
> Mark,
> 
> I am trying to make QMTest available over the Internet to some team members
> located offsite, but am having problems doing so.
> 
> I can bind a local IP address just fine, but when I specify a public IP
> address for my company domain, it chokes:
> 
> qmtest gui -A 166.70.xxx.xxx
> 
> From the documentation, it seems this syntax is only for local IP addresses,
> so I'm guessing the qmtest remote option is the way to go.  However, there
> is no documentation that I can find on this particular option.  Can you help
> me out?

I don't think it's "qmtest remote" that you want; that's used internally
by QMTest when using ProcessTarget or RshTarget.

The "-A" option you're using above should be what you want, but you're
correct that you'll need to use an address that corresponds to your
local machine.  If there's a firewall between that machine and your
remote users, you'll need to set up some kind of HTTP forwarding at the
firewall.

Yours,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From njs at pobox.com  Fri Aug  8 20:56:40 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 8 Aug 2003 13:56:40 -0700
Subject: [qmtest] Problem loading expectation
In-Reply-To: <200307150845.50265.ghost@cs.msu.su>
References: <200307141225.32295.ghost@cs.msu.su> <20030715001159.GB5026@njs.dhis.org> <200307150845.50265.ghost@cs.msu.su>
Message-ID: <20030808205639.GA4654@njs.dhis.org>

On Tue, Jul 15, 2003 at 08:45:50AM +0400, Vladimir Prus wrote:
[...]
>   File 
> "/home/ghost/build/Tools/qm-up-to-date/qm/test/classes/pickle_result_stream.py", 
> line 183, in __init__
>     version = self.__unpickler.load()
> cPickle.UnpicklingError: <class 'qm.test.context.Context'> is not safe for 
> unpickling

Sorry for taking such a long time to get back to this.  I've cleaned
up the pickle handling a bit so this shouldn't happen again in the
future, and I believe I've fixed your problem as well.  Patch
attached.

-- Nathaniel

-- 
Details are all that matters; God dwells there, and you never get to
see Him if you don't struggle to get them right. -- Stephen Jay Gould
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target --exclude='*.qmr' qm-clean/ChangeLog qm-pickle-compatibility/ChangeLog
--- qm-clean/ChangeLog	2003-08-07 11:10:43.000000000 -0700
+++ qm-pickle-compatibility/ChangeLog	2003-08-08 13:35:08.000000000 -0700
@@ -1,3 +1,13 @@
+2003-08-08  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/test/context.py (ContextException.__safe_for_unpickling__):
+	Set to 1.
+	(ContextWrapper): New class.
+	* qm/test/result.py (Result.__setstate__): New method.
+	(Result.__getstate__): New method.
+	* qm/test/share/messages/diagnostics.txt
+	(result pickle too recent): New message.
+
 2003-08-07  Nathaniel Smith  <njs at codesourcery.com>
 	    Mark Mitchell  <mark at codesourcery.com>
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target --exclude='*.qmr' qm-clean/qm/test/context.py qm-pickle-compatibility/qm/test/context.py
--- qm-clean/qm/test/context.py	2003-07-09 17:33:44.000000000 -0700
+++ qm-pickle-compatibility/qm/test/context.py	2003-08-07 19:13:20.000000000 -0700
@@ -39,6 +39,19 @@
 
         
     
+class ContextWrapper:
+    """Do-nothing class to preserve pickle compatability.
+
+    A class called 'ContextWrapper' used to be used in instead of a
+    'Context' class in some cases, and we used to put contexts into
+    'Result's.  Because of how pickles work, this means that the only way
+    to unpickle these old 'Result's is to have a do-nothing placeholder
+    class that can be instantiated and then thrown away."""
+
+    pass
+
+
+
 class Context(types.DictType):
     """Test-time and local configuration for tests.
 
@@ -67,6 +80,9 @@
     the temporary directory is empty, however; it may contain files
     left behind by the execution of other 'Runnable' objects."""
 
+    __safe_for_unpickling__ = 1
+    """Required to unpickle new-style classes under Python 2.2."""
+
     def __init__(self, context = None):
         """Construct a new context.
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target --exclude='*.qmr' qm-clean/qm/test/result.py qm-pickle-compatibility/qm/test/result.py
--- qm-clean/qm/test/result.py	2003-05-16 00:31:18.000000000 -0700
+++ qm-pickle-compatibility/qm/test/result.py	2003-08-08 13:43:15.000000000 -0700
@@ -142,6 +142,55 @@
         self.__annotations = annotations.copy()
 
 
+    def __getstate__(self):
+        """Return a representation of this result for pickling.
+
+        By using an explicit tuple representation of 'Result's when
+        storing them in a pickle file, we decouple our storage format
+        from internal implementation details (e.g., the names of private
+        variables)."""
+
+        # First element is a version number; the rest are the data
+        # needed to reconstruct a 'Result'.  No part of this structure
+        # should ever be a user-defined type, because that will
+        # introduce interdependencies that we want to avoid.
+        return (0,
+                self.__kind,
+                self.__id,
+                self.__outcome,
+                self.__annotations)
+
+
+    def __setstate__(self, pickled_state):
+        """Construct a 'Result' from its pickled form."""
+
+        if isinstance(pickled_state, dict):
+            # Old style pickle, from before we defined '__getstate__'.
+            # The state is a dictionary containing the variables we used
+            # to have.
+            self.__kind = pickled_state["_Result__kind"]
+            self.__id = pickled_state["_Result__id"]
+            self.__outcome = pickled_state["_Result__outcome"]
+            self.__annotations = pickled_state["_Result__annotations"]
+            # Also has a key "_Result__context" containing a (probably
+            # invalid) context object, but we discard it.
+        else:
+            # New style pickle, from after we defined '__getstate__'.
+            # The state is a tuple whose first element is a version
+            # number, and the rest are values of variables we care
+            # about.
+            if pickled_state[0] == 0:
+                (self.__kind,
+                 self.__id,
+                 self.__outcome,
+                 self.__annotations) = pickled_state[1:]
+            else:
+                raise QMException, \
+                      qm.error("result pickle too recent",
+                               curr_version=0,
+                               bad_version=pickled_state[0])
+
+
     def GetKind(self):
         """Return the kind of result this is.
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target --exclude='*.qmr' qm-clean/qm/test/share/messages/diagnostics.txt qm-pickle-compatibility/qm/test/share/messages/diagnostics.txt
--- qm-clean/qm/test/share/messages/diagnostics.txt	2003-08-08 13:35:15.000000000 -0700
+++ qm-pickle-compatibility/qm/test/share/messages/diagnostics.txt	2003-08-08 13:34:59.000000000 -0700
@@ -181,6 +181,11 @@
 @ not test database
 "%(path)s" is not a test database.
 
+@ result pickle too recent
+Attempted to unpickle a 'Result' with version %(bad_version)i, but this
+version of QMTest only supports version %(curr_version)i or lower.  Try
+upgrading your version of QMTest.
+
 @ seed not integer
 The random number generator seed you specified, "%(seed)s", is not an
 integer. 

From njs at pobox.com  Sat Aug  9 00:09:45 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 8 Aug 2003 17:09:45 -0700
Subject: [qmtest] Problem loading expectation
In-Reply-To: <20030808205639.GA4654@njs.dhis.org>
References: <200307141225.32295.ghost@cs.msu.su> <20030715001159.GB5026@njs.dhis.org> <200307150845.50265.ghost@cs.msu.su> <20030808205639.GA4654@njs.dhis.org>
Message-ID: <20030809000945.GA20330@njs.dhis.org>

On Fri, Aug 08, 2003 at 01:56:40PM -0700, Nathaniel Smith wrote:
> On Tue, Jul 15, 2003 at 08:45:50AM +0400, Vladimir Prus wrote:
> [...]
> >   File 
> > "/home/ghost/build/Tools/qm-up-to-date/qm/test/classes/pickle_result_stream.py", 
> > line 183, in __init__
> >     version = self.__unpickler.load()
> > cPickle.UnpicklingError: <class 'qm.test.context.Context'> is not safe for 
> > unpickling
> 
> Sorry for taking such a long time to get back to this.  I've cleaned
> up the pickle handling a bit so this shouldn't happen again in the
> future, and I believe I've fixed your problem as well.  Patch
> attached.

Updated version attached; only real difference is the addition of a
new set of tests to make sure this doesn't happen again.

-- Nathaniel

-- 
"If you can explain how you do something, then you're very very bad at it."
  -- John Hopfield
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/ChangeLog qm-pickle-compatibility/ChangeLog
--- qm-clean/ChangeLog	2003-08-07 11:10:43.000000000 -0700
+++ qm-pickle-compatibility/ChangeLog	2003-08-08 17:06:41.000000000 -0700
@@ -1,3 +1,40 @@
+2003-08-08  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/test/context.py (ContextException.__safe_for_unpickling__):
+	Set to 1.
+	(ContextWrapper): New class.
+	* qm/test/result.py (Result.__setstate__): New method.
+	(Result.__getstate__): New method.
+	* qm/test/share/messages/diagnostics.txt
+	(result pickle too recent): New message.
+
+	* tests/results_files: New directory.
+	* tests/results_files/QMTest: Likewise.
+	* tests/results_files/QMTest/configuration: New file.
+	* tests/results_files/QMTest/classes.qmc: New file.
+	* tests/results_files/QMTest/results_file_database.py: New
+	file.
+	* tests/results_files/QMTest/results_file_test.py: New file.
+	* tests/results_files/README: New file.
+	* tests/results_files/xml_results.qmr: New file.
+	* tests/results_files/result_class_v0-file_format_v0-pickling_format_v0.qmr:
+	New file.
+	* tests/results_files/result_class_v1-file_format_v0-pickling_format_v0.qmr:
+	New file.
+	* tests/results_files/result_class_v1-file_format_v1-pickling_format_v0.qmr:
+	New file.
+	* tests/results_files/result_class_v1-file_format_v1-pickling_format_v1.qmr:
+	New file.
+	* tests/results_file/tdb: New directory.
+	* tests/results_file/tdb/QMTest: New directory.
+	* tests/results_file/tdb/QMTest/configuration: New file.
+	* tests/results_file/tdb/pass.qmt: New file.
+	* tests/results_file/tdb/fail.qmt: New file.
+	* tests/results_file/tdb/error.qmt: New file.
+	* tests/results_file/tdb/untested.qmt: New file.
+	* tests/results_file/tdb/tmpdir_resource.qma: New file.
+	* tests/results_file/tdb/fail_with_tmpdir.qmt: New file.
+	
 2003-08-07  Nathaniel Smith  <njs at codesourcery.com>
 	    Mark Mitchell  <mark at codesourcery.com>
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/test/context.py qm-pickle-compatibility/qm/test/context.py
--- qm-clean/qm/test/context.py	2003-07-09 17:33:44.000000000 -0700
+++ qm-pickle-compatibility/qm/test/context.py	2003-08-07 19:13:20.000000000 -0700
@@ -39,6 +39,19 @@
 
         
     
+class ContextWrapper:
+    """Do-nothing class to preserve pickle compatability.
+
+    A class called 'ContextWrapper' used to be used in instead of a
+    'Context' class in some cases, and we used to put contexts into
+    'Result's.  Because of how pickles work, this means that the only way
+    to unpickle these old 'Result's is to have a do-nothing placeholder
+    class that can be instantiated and then thrown away."""
+
+    pass
+
+
+
 class Context(types.DictType):
     """Test-time and local configuration for tests.
 
@@ -67,6 +80,9 @@
     the temporary directory is empty, however; it may contain files
     left behind by the execution of other 'Runnable' objects."""
 
+    __safe_for_unpickling__ = 1
+    """Required to unpickle new-style classes under Python 2.2."""
+
     def __init__(self, context = None):
         """Construct a new context.
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/test/result.py qm-pickle-compatibility/qm/test/result.py
--- qm-clean/qm/test/result.py	2003-05-16 00:31:18.000000000 -0700
+++ qm-pickle-compatibility/qm/test/result.py	2003-08-08 16:19:08.000000000 -0700
@@ -142,6 +142,55 @@
         self.__annotations = annotations.copy()
 
 
+    def __getstate__(self):
+        """Return a representation of this result for pickling.
+
+        By using an explicit tuple representation of 'Result's when
+        storing them in a pickle file, we decouple our storage format
+        from internal implementation details (e.g., the names of private
+        variables)."""
+
+        # First element is a version number; the rest are the data
+        # needed to reconstruct a 'Result'.  No part of this structure
+        # should ever be a user-defined type, because that will
+        # introduce interdependencies that we want to avoid.
+        return (1,
+                self.__kind,
+                self.__id,
+                self.__outcome,
+                self.__annotations)
+
+
+    def __setstate__(self, pickled_state):
+        """Construct a 'Result' from its pickled form."""
+
+        if isinstance(pickled_state, dict):
+            # Old style pickle, from before we defined '__getstate__'.
+            # (Notionally, this is version "0".)  The state is a
+            # dictionary containing the variables we used to have.
+            self.__kind = pickled_state["_Result__kind"]
+            self.__id = pickled_state["_Result__id"]
+            self.__outcome = pickled_state["_Result__outcome"]
+            self.__annotations = pickled_state["_Result__annotations"]
+            # Also has a key "_Result__context" containing a (probably
+            # invalid) context object, but we discard it.
+        else:
+            # New style pickle, from after we defined '__getstate__'.
+            # The state is a tuple whose first element is a version
+            # number, and the rest are values of variables we care
+            # about.
+            if pickled_state[0] == 1:
+                (self.__kind,
+                 self.__id,
+                 self.__outcome,
+                 self.__annotations) = pickled_state[1:]
+            else:
+                raise QMException, \
+                      qm.error("result pickle too recent",
+                               curr_version=1,
+                               bad_version=pickled_state[0])
+
+
     def GetKind(self):
         """Return the kind of result this is.
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/test/share/messages/diagnostics.txt qm-pickle-compatibility/qm/test/share/messages/diagnostics.txt
--- qm-clean/qm/test/share/messages/diagnostics.txt	2003-08-08 13:35:15.000000000 -0700
+++ qm-pickle-compatibility/qm/test/share/messages/diagnostics.txt	2003-08-08 13:34:59.000000000 -0700
@@ -181,6 +181,11 @@
 @ not test database
 "%(path)s" is not a test database.
 
+@ result pickle too recent
+Attempted to unpickle a 'Result' with version %(bad_version)i, but this
+version of QMTest only supports version %(curr_version)i or lower.  Try
+upgrading your version of QMTest.
+
 @ seed not integer
 The random number generator seed you specified, "%(seed)s", is not an
 integer. 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/QMTest/classes.qmc qm-pickle-compatibility/tests/results_files/QMTest/classes.qmc
--- qm-clean/tests/results_files/QMTest/classes.qmc	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/QMTest/classes.qmc	2003-08-08 15:28:41.000000000 -0700
@@ -0,0 +1,2 @@
+<?xml version="1.0" ?>
+<class-directory><class kind="database">results_file_database.ResultsFileDatabase</class><class kind="test">results_file_test.ResultsFileTest</class></class-directory>
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/QMTest/configuration qm-pickle-compatibility/tests/results_files/QMTest/configuration
--- qm-clean/tests/results_files/QMTest/configuration	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/QMTest/configuration	2003-08-08 15:29:09.000000000 -0700
@@ -0,0 +1,2 @@
+<?xml version="1.0" ?>
+<extension class="results_file_database.ResultsFileDatabase" kind="database"/>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/QMTest/results_file_database.py qm-pickle-compatibility/tests/results_files/QMTest/results_file_database.py
--- qm-clean/tests/results_files/QMTest/results_file_database.py	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/QMTest/results_file_database.py	2003-08-08 16:57:57.000000000 -0700
@@ -0,0 +1,78 @@
+########################################################################
+#
+# File:   results_file_database.py
+# Author: Nathaniel Smith
+# Date:   2003-08-08
+#
+# Contents:
+#   ResultsFileDatabase.
+#
+# Copyright (c) 2003 by CodeSourcery, LLC.  All rights reserved. 
+#
+########################################################################
+
+########################################################################
+# Imports 
+########################################################################
+
+import glob
+import os.path
+from   qm.test.database import *
+
+########################################################################
+# Classes
+########################################################################
+
+class ResultsFileDatabase(Database):
+    """Database storing result file tests for QMTest.
+
+    Each file in the test directory matching the glob "*.qmr" is
+    considered to be a test, and should be a results file resulting from
+    running the database "tdb" in the test directory.  So to generate a
+    new test, one generally should run "qmtest -D tdb run -o my_test".
+    Each test is considered to pass if the latest version of qmtest is
+    able to load it in as an expectations file and run with no
+    unexpected results.
+
+    This database is read-only, i.e. the methods to update it through
+    the GUI are not implemented.  It is expected that users will
+    update it by creating new result files automatically.
+
+    Currently, there are no subdirectories and no resources in this
+    database."""
+
+    def __init__(self, path, arguments):
+
+        arguments["modifiable"] = "false"
+        Database.__init__(self, path, arguments)
+
+        
+    def GetTest(self, test_id):
+
+        results_file = os.path.join(self.GetPath(), test_id + ".qmr")
+        if not os.path.exists(results_file):
+            raise NoSuchTestError
+        tdb = os.path.join(self.GetPath(), "tdb")
+
+        return TestDescriptor(self,
+                              test_id,
+                              "results_file_test.ResultsFileTest",
+                              {"results_file": results_file,
+                               "tdb": tdb})
+
+        
+    def GetIds(self, kind, directory = "", scan_subdirs = 1):
+
+        assert directory == ""
+
+        if kind == Database.TEST:
+            p = self.GetPath()
+            files = glob.glob(os.path.join(p, "*.qmr"))
+            basenames = [os.path.basename(file) for file in files]
+            names = [os.path.splitext(file)[0] for file in basenames]
+            return names
+        else:
+            # There are no suites or resources in this database.
+            return []
+
+        return ids
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/QMTest/results_file_test.py qm-pickle-compatibility/tests/results_files/QMTest/results_file_test.py
--- qm-clean/tests/results_files/QMTest/results_file_test.py	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/QMTest/results_file_test.py	2003-08-08 15:40:20.000000000 -0700
@@ -0,0 +1,85 @@
+########################################################################
+#
+# File:   results_file_test.py
+# Author: Nathaniel Smith
+# Date:   2003-08-08
+#
+# Contents:
+#   ResultsFileTest
+#
+# Copyright (c) 2002, 2003 by CodeSourcery, LLC.  All rights reserved.
+#
+# For license terms see the file COPYING.
+#
+########################################################################
+
+########################################################################
+# imports
+########################################################################
+
+import os
+import re
+import qm.executable
+from   qm.test.test import *
+from   qm.test.result import *
+
+########################################################################
+# classes
+########################################################################
+
+class ResultsFileTest(Test):
+    """A 'ResultsFileTest' tests that QMTest can load a results file.
+    """
+
+    arguments = [
+        qm.fields.TextField(
+            name        = "results_file",
+            title       = "Path to results file.",
+            verbatim    = "true",
+            multiline   = "false",
+            description = """The pathname of the results file."""
+            ),
+        qm.fields.TextField(
+            name        = "tdb",
+            title       = "Path to test database.",
+            verbatim    = "true",
+            multiline   = "false",
+            description = """The pathname of the test database file.
+
+            All tests in this database will be run, and the outcomes
+            compared to those stored in the results file."""
+            ),
+        ]
+
+    def Run(self, context, result):
+
+        # Sanity check the arguments.
+        assert os.path.isfile(self.results_file)
+        assert os.path.isdir(self.tdb)
+        
+        # The QMTest binary to test is specified as a context variable.
+        qmtest = context['qmtest_path']
+
+        argv = (qmtest, "-D", self.tdb,
+                "run", "-O", self.results_file, "--no-output")
+
+        e = qm.executable.RedirectedExecutable()
+        status = e.Run(argv)
+
+        result.Annotate({
+            "selftest.RegTest.cmdline"  : ' '.join(argv),
+            "selftest.RegTest.exitcode" : ("%d" % status),
+            "selftest.RegTest.stdout"   : '<pre>' + e.stdout + '</pre>',
+            "selftest.RegTest.stderr"   : '<pre>' + e.stderr + '</pre>',
+            })
+
+        if e.stderr != '':
+            # Printing anything to stderr is a failure.
+            result.Fail("Child process reported errors")
+        elif status:
+            # Unsuccessful termination is a failure.  This is checked
+            # second because output on stderr should come along with
+            # an unsuccessful exit, and we want to pick the more specific
+            # failure cause.
+            result.Fail("Child process exited unsuccessfully")
+        
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/README qm-pickle-compatibility/tests/results_files/README
--- qm-clean/tests/results_files/README	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/README	2003-08-08 16:31:28.000000000 -0700
@@ -0,0 +1,25 @@
+We have had several different result file formats, and we need to be able
+to load all of them.  Listed in the order QMTest was changed to output each
+format.
+  -- XML result file format.  The original format.
+     -> xml_results.qmr
+  -- Pickle format v0 (original format).
+       -- 'Result's still contain the context they were run in.
+       -- just a bunch of 'Result' pickles, no metadata.
+       -- 'Result's still use the standard pickling mechanism.
+     -> result_class_v0-file_format_v0-pickling_format_v0.qmr
+  -- Pickle format v0 with new 'Result' object.
+       -- 'Result's no longer contain the context object they were run in.
+       -- just a bunch of 'Result' pickles, no metadata.
+       -- 'Result's still use the standard pickling mechanism.
+     -> result_class_v1-file_format_v0-pickling_format_v0.qmr
+  -- Pickle format v1 with new 'Result' object.
+       -- 'Result's no longer contain the context object they were run in.
+       -- More complicated file layout containing metadata.
+       -- 'Result's still use the standard pickling mechanism.
+     -> result_class_v1-file_format_v1-pickling_format_v0.qmr
+  -- Pickle format v1 with new 'Result' object and new 'Result' pickling.
+       -- 'Result's no longer contain the context object they were run in.
+       -- More complicated file layout containing metadata.
+       -- 'Result's no longer use the standard pickling mechanism.
+     -> result_class_v1-file_format_v1-pickling_format_v1.qmr
Binary files qm-clean/tests/results_files/result_class_v0-file_format_v0-pickling_format_v0.qmr and qm-pickle-compatibility/tests/results_files/result_class_v0-file_format_v0-pickling_format_v0.qmr differ
Binary files qm-clean/tests/results_files/result_class_v1-file_format_v0-pickling_format_v0.qmr and qm-pickle-compatibility/tests/results_files/result_class_v1-file_format_v0-pickling_format_v0.qmr differ
Binary files qm-clean/tests/results_files/result_class_v1-file_format_v1-pickling_format_v0.qmr and qm-pickle-compatibility/tests/results_files/result_class_v1-file_format_v1-pickling_format_v0.qmr differ
Binary files qm-clean/tests/results_files/result_class_v1-file_format_v1-pickling_format_v1.qmr and qm-pickle-compatibility/tests/results_files/result_class_v1-file_format_v1-pickling_format_v1.qmr differ
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/tdb/QMTest/configuration qm-pickle-compatibility/tests/results_files/tdb/QMTest/configuration
--- qm-clean/tests/results_files/tdb/QMTest/configuration	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/tdb/QMTest/configuration	2003-08-08 15:31:15.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="xml_database.XMLDatabase" kind="database"/>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/tdb/error.qmt qm-pickle-compatibility/tests/results_files/tdb/error.qmt
--- qm-clean/tests/results_files/tdb/error.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/tdb/error.qmt	2003-08-08 15:32:57.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="python.ExecTest" kind="test"><argument name="prerequisites"><set/></argument><argument name="source"><text>pass</text></argument><argument name="target_group"><text>.*</text></argument><argument name="expression"><text>raise &quot;An exception&quot;</text></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/tdb/fail.qmt qm-pickle-compatibility/tests/results_files/tdb/fail.qmt
--- qm-clean/tests/results_files/tdb/fail.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/tdb/fail.qmt	2003-08-08 15:32:32.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="python.ExecTest" kind="test"><argument name="prerequisites"><set/></argument><argument name="source"><text>pass</text></argument><argument name="target_group"><text>.*</text></argument><argument name="expression"><text>0</text></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/tdb/fail_with_tmpdir.qmt qm-pickle-compatibility/tests/results_files/tdb/fail_with_tmpdir.qmt
--- qm-clean/tests/results_files/tdb/fail_with_tmpdir.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/tdb/fail_with_tmpdir.qmt	2003-08-08 16:02:23.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="python.ExecTest" kind="test"><argument name="prerequisites"><set/></argument><argument name="source"><text>pass</text></argument><argument name="target_group"><text>.*</text></argument><argument name="expression"><text>0</text></argument><argument name="resources"><set><text>tmpdir_resource</text></set></argument></extension>
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/tdb/pass.qmt qm-pickle-compatibility/tests/results_files/tdb/pass.qmt
--- qm-clean/tests/results_files/tdb/pass.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/tdb/pass.qmt	2003-08-08 15:32:03.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="python.ExecTest" kind="test"><argument name="prerequisites"><set/></argument><argument name="source"><text>pass</text></argument><argument name="target_group"><text>.*</text></argument><argument name="expression"><text>1</text></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/tdb/tmpdir_resource.qma qm-pickle-compatibility/tests/results_files/tdb/tmpdir_resource.qma
--- qm-clean/tests/results_files/tdb/tmpdir_resource.qma	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/tdb/tmpdir_resource.qma	2003-08-08 15:58:49.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="temporary.TempDirectoryResource" kind="resource"><argument name="dir_path_property"><text>temp_dir_path</text></argument><argument name="resources"><set/></argument><argument name="delete_recursively"><integer>1</integer></argument></extension>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/tdb/untested.qmt qm-pickle-compatibility/tests/results_files/tdb/untested.qmt
--- qm-clean/tests/results_files/tdb/untested.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/tdb/untested.qmt	2003-08-08 15:36:22.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="python.ExecTest" kind="test"><argument name="prerequisites"><set><tuple><text>fail</text><enumeral>PASS</enumeral></tuple></set></argument><argument name="source"><text>pass</text></argument><argument name="target_group"><text>.*</text></argument><argument name="expression"><text>1</text></argument><argument name="resources"><set/></argument></extension>
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=setup_path.py --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/results_files/xml_results.qmr qm-pickle-compatibility/tests/results_files/xml_results.qmr
--- qm-clean/tests/results_files/xml_results.qmr	1969-12-31 16:00:00.000000000 -0800
+++ qm-pickle-compatibility/tests/results_files/xml_results.qmr	2003-08-08 16:43:05.000000000 -0700
@@ -0,0 +1,16 @@
+<?xml version='1.0' encoding='ISO-8859-1'?>
+<!DOCTYPE results PUBLIC "-//Software Carpentry//QMTest Result V0.3//EN" "http://www.software-carpentry.com/qm/xml/result.dtd">
+<results>
+<annotation key="qmtest.run.start_time">2003-08-08T23:43:05Z</annotation>
+<result id="error" kind="test"><outcome>ERROR</outcome><property name="qmtest.cause">Exception evaluating expression.</property><property name="qmtest.exception">exceptions.SyntaxError: invalid syntax (line 1)</property><property name="qmtest.target">local</property><property name="qmtest.traceback">&lt;pre&gt;  File &quot;/home/njs/src/cvs/qm/qm-pickle-compatibility/qm/test/classes/python.py&quot;, line 101, in Run
+    global_namespace, local_namespace)
+&lt;/pre&gt;</property></result>
+<result id="fail" kind="test"><outcome>FAIL</outcome><property name="ExecTest.expr">0</property><property name="ExecTest.value">0</property><property name="qmtest.cause">Expression evaluates to false.</property><property name="qmtest.target">local</property></result>
+<result id="tmpdir_resource" kind="resource_setup"><outcome>PASS</outcome><property name="qmtest.target">local</property></result>
+<result id="fail_with_tmpdir" kind="test"><outcome>FAIL</outcome><property name="ExecTest.expr">0</property><property name="ExecTest.value">0</property><property name="qmtest.cause">Expression evaluates to false.</property><property name="qmtest.target">local</property></result>
+<result id="pass" kind="test"><outcome>PASS</outcome><property name="qmtest.target">local</property></result>
+<result id="untested" kind="test"><outcome>UNTESTED</outcome><property name="qmtest.cause">A prerequisite produced an incorrect outcome.</property><property name="qmtest.expected_outcome">PASS</property><property name="qmtest.outcome">FAIL</property><property name="qmtest.prequisite">fail</property></result>
+<result id="tmpdir_resource" kind="resource_cleanup"><outcome>PASS</outcome><property name="qmtest.target">local</property></result>
+<annotation key="qmtest.run.end_time">2003-08-08T23:43:05Z</annotation>
+
+</results>

From njs at pobox.com  Sun Aug 10 09:04:13 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Sun, 10 Aug 2003 02:04:13 -0700
Subject: [PATCH] Revamp QMTest version number handling.
Message-ID: <20030810090413.GA7464@njs.dhis.org>

Attached patch contains no user-visible change in functionality, but
does clean up the handling of the overall QMTest version number.

This can be considered part n of my long-term quest to kill
setup_path.py.in.  In some sense with this patch I've succeeded, since
setup_path.py.in no longer needs to undergo @@ substitution, and is
renamed to setup_path.py...

The general idea is to provide variables qm.version and
qm.version_info exactly analogous to the standard python variables
sys.version and sys.version_info.  The current code has a very strange
idea of version numbers; it stores them in a single QMTest object and
provides a method to read them.  This is strange because firstly, the
version numbers are necessarily immutable over the life of an
interpreter, so having a function to fetch them is odd.  Secondly, and
more importantly, the version number is a property of the qm package
as a whole, not any particular QMTest object; it makes perfect sense
to want to know the version of the qm package without first
instantiating a QMTest object.  Especially since prior to this patch,
on can't instantiate a QMTest object without knowing the version
number :-).

This patch leaves 'QMTest.GetVersion' working, but if Jeffrey is the
only one using it, then I'd suggest removing it altogether.  Its new
implementation is just "return qm.version_info".

Comments?

-- Nathaniel

-- 
In mathematics, it's not enough to read the words
you have to hear the music
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/ChangeLog qm-version-handling/ChangeLog
--- qm-clean/ChangeLog	2003-08-09 00:09:58.000000000 -0700
+++ qm-version-handling/ChangeLog	2003-08-10 01:41:53.000000000 -0700
@@ -1,3 +1,24 @@
+2003-08-10  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/version.py.in: New file.
+	* qm/setup_path.py.in: Remove version handling, and rename to...
+	* qm/setup_path.py: ...this.
+	* qm/.cvsignore: Add version.py, remove setup_path.py.
+	* configure.in (AC_OUTPUT): Munge qm/version.py.in instead of
+	qm/setup_path.py.in.
+	* configure: Regenerate.
+	* GNUmakefile.in (all): Remove qm/setup_path.py.
+	(distclean): Delete qm/version.py, don't delete
+	qm/setup_path.py.
+	* qm/__init__.py: Import version, version_info from qm.version.
+	* qm/test/qmtest.py (main): Don't pass version to QMTest
+	initializer.
+	* qm/test/cmdline.py (QMTest.__init__): Don't accept or record
+	version information.
+	(QMTest.GetVersion): Use new qm.version_info variable.
+	(QMTest.Execute): Don't call QMTest._GetVersionString.
+	(QMTest._GetVersionString): Remove.
+	
 2003-08-08  Nathaniel Smith  <njs at codesourcery.com>
 
 	* qm/test/context.py (ContextException.__safe_for_unpickling__):
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/GNUmakefile.in qm-version-handling/GNUmakefile.in
--- qm-clean/GNUmakefile.in	2003-08-07 11:10:43.000000000 -0700
+++ qm-version-handling/GNUmakefile.in	2003-08-10 01:38:35.000000000 -0700
@@ -141,7 +141,6 @@
 	$(PYTHON_PACKAGES) \
 	$(SCRIPTS) \
 	$(DTD_CATALOG) \
-	qm/setup_path.py \
 	doc
 
 # Regenerate files that are generated by configure.
@@ -208,7 +207,7 @@
 
 distclean: clean
 	rm -f GNUmakefile config.cache config.status config.log
-	rm -f qm/setup_path.py 
+	rm -f qm/version.py 
 	rm -f qm.spec
 
 # Run tests.
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/configure qm-version-handling/configure
--- qm-clean/configure	2003-06-21 00:57:48.000000000 -0700
+++ qm-version-handling/configure	2003-08-10 01:21:40.000000000 -0700
@@ -1,287 +1,32 @@
 #! /bin/sh
+
 # Guess values for system-dependent variables and create Makefiles.
-# Generated by GNU Autoconf 2.57.
+# Generated automatically using autoconf version 2.13 
+# Copyright (C) 1992, 93, 94, 95, 96 Free Software Foundation, Inc.
 #
-# Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002
-# Free Software Foundation, Inc.
 # This configure script is free software; the Free Software Foundation
 # gives unlimited permission to copy, distribute and modify it.
-## --------------------- ##
-## M4sh Initialization.  ##
-## --------------------- ##
-
-# Be Bourne compatible
-if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
-  emulate sh
-  NULLCMD=:
-  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
-  # is contrary to our usage.  Disable this feature.
-  alias -g '${1+"$@"}'='"$@"'
-elif test -n "${BASH_VERSION+set}" && (set -o posix) >/dev/null 2>&1; then
-  set -o posix
-fi
-
-# Support unset when possible.
-if (FOO=FOO; unset FOO) >/dev/null 2>&1; then
-  as_unset=unset
-else
-  as_unset=false
-fi
-
-
-# Work around bugs in pre-3.0 UWIN ksh.
-$as_unset ENV MAIL MAILPATH
-PS1='$ '
-PS2='> '
-PS4='+ '
-
-# NLS nuisances.
-for as_var in \
-  LANG LANGUAGE LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
-  LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
-  LC_TELEPHONE LC_TIME
-do
-  if (set +x; test -n "`(eval $as_var=C; export $as_var) 2>&1`"); then
-    eval $as_var=C; export $as_var
-  else
-    $as_unset $as_var
-  fi
-done
-
-# Required to use basename.
-if expr a : '\(a\)' >/dev/null 2>&1; then
-  as_expr=expr
-else
-  as_expr=false
-fi
-
-if (basename /) >/dev/null 2>&1 && test "X`basename / 2>&1`" = "X/"; then
-  as_basename=basename
-else
-  as_basename=false
-fi
 
-
-# Name of the executable.
-as_me=`$as_basename "$0" ||
-$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
-	 X"$0" : 'X\(//\)$' \| \
-	 X"$0" : 'X\(/\)$' \| \
-	 .     : '\(.\)' 2>/dev/null ||
-echo X/"$0" |
-    sed '/^.*\/\([^/][^/]*\)\/*$/{ s//\1/; q; }
-  	  /^X\/\(\/\/\)$/{ s//\1/; q; }
-  	  /^X\/\(\/\).*/{ s//\1/; q; }
-  	  s/.*/./; q'`
-
-
-# PATH needs CR, and LINENO needs CR and PATH.
-# Avoid depending upon Character Ranges.
-as_cr_letters='abcdefghijklmnopqrstuvwxyz'
-as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
-as_cr_Letters=$as_cr_letters$as_cr_LETTERS
-as_cr_digits='0123456789'
-as_cr_alnum=$as_cr_Letters$as_cr_digits
-
-# The user is always right.
-if test "${PATH_SEPARATOR+set}" != set; then
-  echo "#! /bin/sh" >conf$$.sh
-  echo  "exit 0"   >>conf$$.sh
-  chmod +x conf$$.sh
-  if (PATH="/nonexistent;."; conf$$.sh) >/dev/null 2>&1; then
-    PATH_SEPARATOR=';'
-  else
-    PATH_SEPARATOR=:
-  fi
-  rm -f conf$$.sh
-fi
-
-
-  as_lineno_1=$LINENO
-  as_lineno_2=$LINENO
-  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
-  test "x$as_lineno_1" != "x$as_lineno_2" &&
-  test "x$as_lineno_3"  = "x$as_lineno_2"  || {
-  # Find who we are.  Look in the path if we contain no path at all
-  # relative or not.
-  case $0 in
-    *[\\/]* ) as_myself=$0 ;;
-    *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-  test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
-done
-
-       ;;
-  esac
-  # We did not find ourselves, most probably we were run as `sh COMMAND'
-  # in which case we are not to be found in the path.
-  if test "x$as_myself" = x; then
-    as_myself=$0
-  fi
-  if test ! -f "$as_myself"; then
-    { echo "$as_me: error: cannot find myself; rerun with an absolute path" >&2
-   { (exit 1); exit 1; }; }
-  fi
-  case $CONFIG_SHELL in
-  '')
-    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-  for as_base in sh bash ksh sh5; do
-	 case $as_dir in
-	 /*)
-	   if ("$as_dir/$as_base" -c '
-  as_lineno_1=$LINENO
-  as_lineno_2=$LINENO
-  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
-  test "x$as_lineno_1" != "x$as_lineno_2" &&
-  test "x$as_lineno_3"  = "x$as_lineno_2" ') 2>/dev/null; then
-	     $as_unset BASH_ENV || test "${BASH_ENV+set}" != set || { BASH_ENV=; export BASH_ENV; }
-	     $as_unset ENV || test "${ENV+set}" != set || { ENV=; export ENV; }
-	     CONFIG_SHELL=$as_dir/$as_base
-	     export CONFIG_SHELL
-	     exec "$CONFIG_SHELL" "$0" ${1+"$@"}
-	   fi;;
-	 esac
-       done
-done
-;;
-  esac
-
-  # Create $as_me.lineno as a copy of $as_myself, but with $LINENO
-  # uniformly replaced by the line number.  The first 'sed' inserts a
-  # line-number line before each line; the second 'sed' does the real
-  # work.  The second script uses 'N' to pair each line-number line
-  # with the numbered line, and appends trailing '-' during
-  # substitution so that $LINENO is not a special case at line end.
-  # (Raja R Harinath suggested sed '=', and Paul Eggert wrote the
-  # second 'sed' script.  Blame Lee E. McMahon for sed's syntax.  :-)
-  sed '=' <$as_myself |
-    sed '
-      N
-      s,$,-,
-      : loop
-      s,^\(['$as_cr_digits']*\)\(.*\)[$]LINENO\([^'$as_cr_alnum'_]\),\1\2\1\3,
-      t loop
-      s,-$,,
-      s,^['$as_cr_digits']*\n,,
-    ' >$as_me.lineno &&
-  chmod +x $as_me.lineno ||
-    { echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2
-   { (exit 1); exit 1; }; }
-
-  # Don't try to exec as it changes $[0], causing all sort of problems
-  # (the dirname of $[0] is not the place where we might find the
-  # original and so on.  Autoconf is especially sensible to this).
-  . ./$as_me.lineno
-  # Exit status is that of the last command.
-  exit
-}
-
-
-case `echo "testing\c"; echo 1,2,3`,`echo -n testing; echo 1,2,3` in
-  *c*,-n*) ECHO_N= ECHO_C='
-' ECHO_T='	' ;;
-  *c*,*  ) ECHO_N=-n ECHO_C= ECHO_T= ;;
-  *)       ECHO_N= ECHO_C='\c' ECHO_T= ;;
-esac
-
-if expr a : '\(a\)' >/dev/null 2>&1; then
-  as_expr=expr
-else
-  as_expr=false
-fi
-
-rm -f conf$$ conf$$.exe conf$$.file
-echo >conf$$.file
-if ln -s conf$$.file conf$$ 2>/dev/null; then
-  # We could just check for DJGPP; but this test a) works b) is more generic
-  # and c) will remain valid once DJGPP supports symlinks (DJGPP 2.04).
-  if test -f conf$$.exe; then
-    # Don't use ln at all; we don't have any links
-    as_ln_s='cp -p'
-  else
-    as_ln_s='ln -s'
-  fi
-elif ln conf$$.file conf$$ 2>/dev/null; then
-  as_ln_s=ln
-else
-  as_ln_s='cp -p'
-fi
-rm -f conf$$ conf$$.exe conf$$.file
-
-if mkdir -p . 2>/dev/null; then
-  as_mkdir_p=:
-else
-  as_mkdir_p=false
-fi
-
-as_executable_p="test -f"
-
-# Sed expression to map a string onto a valid CPP name.
-as_tr_cpp="sed y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g"
-
-# Sed expression to map a string onto a valid variable name.
-as_tr_sh="sed y%*+%pp%;s%[^_$as_cr_alnum]%_%g"
-
-
-# IFS
-# We need space, tab and new line, in precisely that order.
-as_nl='
-'
-IFS=" 	$as_nl"
-
-# CDPATH.
-$as_unset CDPATH
-
-
-# Name of the host.
-# hostname on some systems (SVR3.2, Linux) returns a bogus exit status,
-# so uname gets run too.
-ac_hostname=`(hostname || uname -n) 2>/dev/null | sed 1q`
-
-exec 6>&1
-
-#
-# Initializations.
-#
+# Defaults:
+ac_help=
 ac_default_prefix=/usr/local
-ac_config_libobj_dir=.
-cross_compiling=no
-subdirs=
-MFLAGS=
-MAKEFLAGS=
-SHELL=${CONFIG_SHELL-/bin/sh}
-
-# Maximum number of lines to put in a shell here document.
-# This variable seems obsolete.  It should probably be removed, and
-# only ac_max_sed_lines should be used.
-: ${ac_max_here_lines=38}
-
-# Identity of this package.
-PACKAGE_NAME=
-PACKAGE_TARNAME=
-PACKAGE_VERSION=
-PACKAGE_STRING=
-PACKAGE_BUGREPORT=
-
-ac_unique_file="configure.in"
-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS MAINTAINER_MODE QM_MAJOR_VER QM_MINOR_VER QM_RELEASE_VER QM_VERSION PYTHON PYTHON_PLATFORM HAPPYDOC JADE TIDY XML_DCL DOCBOOK_STYLESHEETS DOCBOOK_DTD DOCUMENTATION INSTALL_DOCUMENTATION LIBOBJS LTLIBOBJS'
-ac_subst_files=''
+# Any additions from configure.in:
+ac_help="$ac_help
+  --enable-maintainer-mode configure for development"
+ac_help="$ac_help
+  --with-python=PATH      specify the Python interpreter"
+ac_help="$ac_help
+  --with-docbook-dtd=PATH directory containing the docbook DTD."
 
 # Initialize some variables set by options.
-ac_init_help=
-ac_init_version=false
 # The variables have the same names as the options, with
 # dashes changed to underlines.
-cache_file=/dev/null
+build=NONE
+cache_file=./config.cache
 exec_prefix=NONE
+host=NONE
 no_create=
+nonopt=NONE
 no_recursion=
 prefix=NONE
 program_prefix=NONE
@@ -290,15 +35,10 @@
 silent=
 site=
 srcdir=
+target=NONE
 verbose=
 x_includes=NONE
 x_libraries=NONE
-
-# Installation directory options.
-# These are left unexpanded so users can "make install exec_prefix=/foo"
-# and all the variables that are supposed to be based on exec_prefix
-# by default will actually change.
-# Use braces instead of parens because sh, perl, etc. also accept them.
 bindir='${exec_prefix}/bin'
 sbindir='${exec_prefix}/sbin'
 libexecdir='${exec_prefix}/libexec'
@@ -312,9 +52,17 @@
 infodir='${prefix}/info'
 mandir='${prefix}/man'
 
+# Initialize some other variables.
+subdirs=
+MFLAGS= MAKEFLAGS=
+SHELL=${CONFIG_SHELL-/bin/sh}
+# Maximum number of lines to put in a shell here document.
+ac_max_here_lines=12
+
 ac_prev=
 for ac_option
 do
+
   # If the previous option needs an argument, assign it.
   if test -n "$ac_prev"; then
     eval "$ac_prev=\$ac_option"
@@ -322,59 +70,59 @@
     continue
   fi
 
-  ac_optarg=`expr "x$ac_option" : 'x[^=]*=\(.*\)'`
+  case "$ac_option" in
+  -*=*) ac_optarg=`echo "$ac_option" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
+  *) ac_optarg= ;;
+  esac
 
   # Accept the important Cygnus configure options, so we can diagnose typos.
 
-  case $ac_option in
+  case "$ac_option" in
 
   -bindir | --bindir | --bindi | --bind | --bin | --bi)
     ac_prev=bindir ;;
   -bindir=* | --bindir=* | --bindi=* | --bind=* | --bin=* | --bi=*)
-    bindir=$ac_optarg ;;
+    bindir="$ac_optarg" ;;
 
   -build | --build | --buil | --bui | --bu)
-    ac_prev=build_alias ;;
+    ac_prev=build ;;
   -build=* | --build=* | --buil=* | --bui=* | --bu=*)
-    build_alias=$ac_optarg ;;
+    build="$ac_optarg" ;;
 
   -cache-file | --cache-file | --cache-fil | --cache-fi \
   | --cache-f | --cache- | --cache | --cach | --cac | --ca | --c)
     ac_prev=cache_file ;;
   -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \
   | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* | --c=*)
-    cache_file=$ac_optarg ;;
-
-  --config-cache | -C)
-    cache_file=config.cache ;;
+    cache_file="$ac_optarg" ;;
 
   -datadir | --datadir | --datadi | --datad | --data | --dat | --da)
     ac_prev=datadir ;;
   -datadir=* | --datadir=* | --datadi=* | --datad=* | --data=* | --dat=* \
   | --da=*)
-    datadir=$ac_optarg ;;
+    datadir="$ac_optarg" ;;
 
   -disable-* | --disable-*)
-    ac_feature=`expr "x$ac_option" : 'x-*disable-\(.*\)'`
+    ac_feature=`echo $ac_option|sed -e 's/-*disable-//'`
     # Reject names that are not valid shell variable names.
-    expr "x$ac_feature" : ".*[^-_$as_cr_alnum]" >/dev/null &&
-      { echo "$as_me: error: invalid feature name: $ac_feature" >&2
-   { (exit 1); exit 1; }; }
-    ac_feature=`echo $ac_feature | sed 's/-/_/g'`
-    eval "enable_$ac_feature=no" ;;
+    if test -n "`echo $ac_feature| sed 's/[-a-zA-Z0-9_]//g'`"; then
+      { echo "configure: error: $ac_feature: invalid feature name" 1>&2; exit 1; }
+    fi
+    ac_feature=`echo $ac_feature| sed 's/-/_/g'`
+    eval "enable_${ac_feature}=no" ;;
 
   -enable-* | --enable-*)
-    ac_feature=`expr "x$ac_option" : 'x-*enable-\([^=]*\)'`
+    ac_feature=`echo $ac_option|sed -e 's/-*enable-//' -e 's/=.*//'`
     # Reject names that are not valid shell variable names.
-    expr "x$ac_feature" : ".*[^-_$as_cr_alnum]" >/dev/null &&
-      { echo "$as_me: error: invalid feature name: $ac_feature" >&2
-   { (exit 1); exit 1; }; }
-    ac_feature=`echo $ac_feature | sed 's/-/_/g'`
-    case $ac_option in
-      *=*) ac_optarg=`echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"`;;
+    if test -n "`echo $ac_feature| sed 's/[-_a-zA-Z0-9]//g'`"; then
+      { echo "configure: error: $ac_feature: invalid feature name" 1>&2; exit 1; }
+    fi
+    ac_feature=`echo $ac_feature| sed 's/-/_/g'`
+    case "$ac_option" in
+      *=*) ;;
       *) ac_optarg=yes ;;
     esac
-    eval "enable_$ac_feature='$ac_optarg'" ;;
+    eval "enable_${ac_feature}='$ac_optarg'" ;;
 
   -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi \
   | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- \
@@ -383,47 +131,95 @@
   -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* \
   | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* \
   | --exec=* | --exe=* | --ex=*)
-    exec_prefix=$ac_optarg ;;
+    exec_prefix="$ac_optarg" ;;
 
   -gas | --gas | --ga | --g)
     # Obsolete; use --with-gas.
     with_gas=yes ;;
 
-  -help | --help | --hel | --he | -h)
-    ac_init_help=long ;;
-  -help=r* | --help=r* | --hel=r* | --he=r* | -hr*)
-    ac_init_help=recursive ;;
-  -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)
-    ac_init_help=short ;;
+  -help | --help | --hel | --he)
+    # Omit some internal or obsolete options to make the list less imposing.
+    # This message is too long to be a string in the A/UX 3.1 sh.
+    cat << EOF
+Usage: configure [options] [host]
+Options: [defaults in brackets after descriptions]
+Configuration:
+  --cache-file=FILE       cache test results in FILE
+  --help                  print this message
+  --no-create             do not create output files
+  --quiet, --silent       do not print \`checking...' messages
+  --version               print the version of autoconf that created configure
+Directory and file names:
+  --prefix=PREFIX         install architecture-independent files in PREFIX
+                          [$ac_default_prefix]
+  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
+                          [same as prefix]
+  --bindir=DIR            user executables in DIR [EPREFIX/bin]
+  --sbindir=DIR           system admin executables in DIR [EPREFIX/sbin]
+  --libexecdir=DIR        program executables in DIR [EPREFIX/libexec]
+  --datadir=DIR           read-only architecture-independent data in DIR
+                          [PREFIX/share]
+  --sysconfdir=DIR        read-only single-machine data in DIR [PREFIX/etc]
+  --sharedstatedir=DIR    modifiable architecture-independent data in DIR
+                          [PREFIX/com]
+  --localstatedir=DIR     modifiable single-machine data in DIR [PREFIX/var]
+  --libdir=DIR            object code libraries in DIR [EPREFIX/lib]
+  --includedir=DIR        C header files in DIR [PREFIX/include]
+  --oldincludedir=DIR     C header files for non-gcc in DIR [/usr/include]
+  --infodir=DIR           info documentation in DIR [PREFIX/info]
+  --mandir=DIR            man documentation in DIR [PREFIX/man]
+  --srcdir=DIR            find the sources in DIR [configure dir or ..]
+  --program-prefix=PREFIX prepend PREFIX to installed program names
+  --program-suffix=SUFFIX append SUFFIX to installed program names
+  --program-transform-name=PROGRAM
+                          run sed PROGRAM on installed program names
+EOF
+    cat << EOF
+Host type:
+  --build=BUILD           configure for building on BUILD [BUILD=HOST]
+  --host=HOST             configure for HOST [guessed]
+  --target=TARGET         configure for TARGET [TARGET=HOST]
+Features and packages:
+  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
+  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
+  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
+  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
+  --x-includes=DIR        X include files are in DIR
+  --x-libraries=DIR       X library files are in DIR
+EOF
+    if test -n "$ac_help"; then
+      echo "--enable and --with options recognized:$ac_help"
+    fi
+    exit 0 ;;
 
   -host | --host | --hos | --ho)
-    ac_prev=host_alias ;;
+    ac_prev=host ;;
   -host=* | --host=* | --hos=* | --ho=*)
-    host_alias=$ac_optarg ;;
+    host="$ac_optarg" ;;
 
   -includedir | --includedir | --includedi | --included | --include \
   | --includ | --inclu | --incl | --inc)
     ac_prev=includedir ;;
   -includedir=* | --includedir=* | --includedi=* | --included=* | --include=* \
   | --includ=* | --inclu=* | --incl=* | --inc=*)
-    includedir=$ac_optarg ;;
+    includedir="$ac_optarg" ;;
 
   -infodir | --infodir | --infodi | --infod | --info | --inf)
     ac_prev=infodir ;;
   -infodir=* | --infodir=* | --infodi=* | --infod=* | --info=* | --inf=*)
-    infodir=$ac_optarg ;;
+    infodir="$ac_optarg" ;;
 
   -libdir | --libdir | --libdi | --libd)
     ac_prev=libdir ;;
   -libdir=* | --libdir=* | --libdi=* | --libd=*)
-    libdir=$ac_optarg ;;
+    libdir="$ac_optarg" ;;
 
   -libexecdir | --libexecdir | --libexecdi | --libexecd | --libexec \
   | --libexe | --libex | --libe)
     ac_prev=libexecdir ;;
   -libexecdir=* | --libexecdir=* | --libexecdi=* | --libexecd=* | --libexec=* \
   | --libexe=* | --libex=* | --libe=*)
-    libexecdir=$ac_optarg ;;
+    libexecdir="$ac_optarg" ;;
 
   -localstatedir | --localstatedir | --localstatedi | --localstated \
   | --localstate | --localstat | --localsta | --localst \
@@ -432,19 +228,19 @@
   -localstatedir=* | --localstatedir=* | --localstatedi=* | --localstated=* \
   | --localstate=* | --localstat=* | --localsta=* | --localst=* \
   | --locals=* | --local=* | --loca=* | --loc=* | --lo=*)
-    localstatedir=$ac_optarg ;;
+    localstatedir="$ac_optarg" ;;
 
   -mandir | --mandir | --mandi | --mand | --man | --ma | --m)
     ac_prev=mandir ;;
   -mandir=* | --mandir=* | --mandi=* | --mand=* | --man=* | --ma=* | --m=*)
-    mandir=$ac_optarg ;;
+    mandir="$ac_optarg" ;;
 
   -nfp | --nfp | --nf)
     # Obsolete; use --without-fp.
     with_fp=no ;;
 
   -no-create | --no-create | --no-creat | --no-crea | --no-cre \
-  | --no-cr | --no-c | -n)
+  | --no-cr | --no-c)
     no_create=yes ;;
 
   -no-recursion | --no-recursion | --no-recursio | --no-recursi \
@@ -458,26 +254,26 @@
   -oldincludedir=* | --oldincludedir=* | --oldincludedi=* | --oldincluded=* \
   | --oldinclude=* | --oldinclud=* | --oldinclu=* | --oldincl=* | --oldinc=* \
   | --oldin=* | --oldi=* | --old=* | --ol=* | --o=*)
-    oldincludedir=$ac_optarg ;;
+    oldincludedir="$ac_optarg" ;;
 
   -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)
     ac_prev=prefix ;;
   -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)
-    prefix=$ac_optarg ;;
+    prefix="$ac_optarg" ;;
 
   -program-prefix | --program-prefix | --program-prefi | --program-pref \
   | --program-pre | --program-pr | --program-p)
     ac_prev=program_prefix ;;
   -program-prefix=* | --program-prefix=* | --program-prefi=* \
   | --program-pref=* | --program-pre=* | --program-pr=* | --program-p=*)
-    program_prefix=$ac_optarg ;;
+    program_prefix="$ac_optarg" ;;
 
   -program-suffix | --program-suffix | --program-suffi | --program-suff \
   | --program-suf | --program-su | --program-s)
     ac_prev=program_suffix ;;
   -program-suffix=* | --program-suffix=* | --program-suffi=* \
   | --program-suff=* | --program-suf=* | --program-su=* | --program-s=*)
-    program_suffix=$ac_optarg ;;
+    program_suffix="$ac_optarg" ;;
 
   -program-transform-name | --program-transform-name \
   | --program-transform-nam | --program-transform-na \
@@ -494,7 +290,7 @@
   | --program-transfo=* | --program-transf=* \
   | --program-trans=* | --program-tran=* \
   | --progr-tra=* | --program-tr=* | --program-t=*)
-    program_transform_name=$ac_optarg ;;
+    program_transform_name="$ac_optarg" ;;
 
   -q | -quiet | --quiet | --quie | --qui | --qu | --q \
   | -silent | --silent | --silen | --sile | --sil)
@@ -504,7 +300,7 @@
     ac_prev=sbindir ;;
   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \
   | --sbi=* | --sb=*)
-    sbindir=$ac_optarg ;;
+    sbindir="$ac_optarg" ;;
 
   -sharedstatedir | --sharedstatedir | --sharedstatedi \
   | --sharedstated | --sharedstate | --sharedstat | --sharedsta \
@@ -515,57 +311,58 @@
   | --sharedstated=* | --sharedstate=* | --sharedstat=* | --sharedsta=* \
   | --sharedst=* | --shareds=* | --shared=* | --share=* | --shar=* \
   | --sha=* | --sh=*)
-    sharedstatedir=$ac_optarg ;;
+    sharedstatedir="$ac_optarg" ;;
 
   -site | --site | --sit)
     ac_prev=site ;;
   -site=* | --site=* | --sit=*)
-    site=$ac_optarg ;;
+    site="$ac_optarg" ;;
 
   -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)
     ac_prev=srcdir ;;
   -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)
-    srcdir=$ac_optarg ;;
+    srcdir="$ac_optarg" ;;
 
   -sysconfdir | --sysconfdir | --sysconfdi | --sysconfd | --sysconf \
   | --syscon | --sysco | --sysc | --sys | --sy)
     ac_prev=sysconfdir ;;
   -sysconfdir=* | --sysconfdir=* | --sysconfdi=* | --sysconfd=* | --sysconf=* \
   | --syscon=* | --sysco=* | --sysc=* | --sys=* | --sy=*)
-    sysconfdir=$ac_optarg ;;
+    sysconfdir="$ac_optarg" ;;
 
   -target | --target | --targe | --targ | --tar | --ta | --t)
-    ac_prev=target_alias ;;
+    ac_prev=target ;;
   -target=* | --target=* | --targe=* | --targ=* | --tar=* | --ta=* | --t=*)
-    target_alias=$ac_optarg ;;
+    target="$ac_optarg" ;;
 
   -v | -verbose | --verbose | --verbos | --verbo | --verb)
     verbose=yes ;;
 
-  -version | --version | --versio | --versi | --vers | -V)
-    ac_init_version=: ;;
+  -version | --version | --versio | --versi | --vers)
+    echo "configure generated by autoconf version 2.13"
+    exit 0 ;;
 
   -with-* | --with-*)
-    ac_package=`expr "x$ac_option" : 'x-*with-\([^=]*\)'`
+    ac_package=`echo $ac_option|sed -e 's/-*with-//' -e 's/=.*//'`
     # Reject names that are not valid shell variable names.
-    expr "x$ac_package" : ".*[^-_$as_cr_alnum]" >/dev/null &&
-      { echo "$as_me: error: invalid package name: $ac_package" >&2
-   { (exit 1); exit 1; }; }
+    if test -n "`echo $ac_package| sed 's/[-_a-zA-Z0-9]//g'`"; then
+      { echo "configure: error: $ac_package: invalid package name" 1>&2; exit 1; }
+    fi
     ac_package=`echo $ac_package| sed 's/-/_/g'`
-    case $ac_option in
-      *=*) ac_optarg=`echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"`;;
+    case "$ac_option" in
+      *=*) ;;
       *) ac_optarg=yes ;;
     esac
-    eval "with_$ac_package='$ac_optarg'" ;;
+    eval "with_${ac_package}='$ac_optarg'" ;;
 
   -without-* | --without-*)
-    ac_package=`expr "x$ac_option" : 'x-*without-\(.*\)'`
+    ac_package=`echo $ac_option|sed -e 's/-*without-//'`
     # Reject names that are not valid shell variable names.
-    expr "x$ac_package" : ".*[^-_$as_cr_alnum]" >/dev/null &&
-      { echo "$as_me: error: invalid package name: $ac_package" >&2
-   { (exit 1); exit 1; }; }
-    ac_package=`echo $ac_package | sed 's/-/_/g'`
-    eval "with_$ac_package=no" ;;
+    if test -n "`echo $ac_package| sed 's/[-a-zA-Z0-9_]//g'`"; then
+      { echo "configure: error: $ac_package: invalid package name" 1>&2; exit 1; }
+    fi
+    ac_package=`echo $ac_package| sed 's/-/_/g'`
+    eval "with_${ac_package}=no" ;;
 
   --x)
     # Obsolete; use --with-x.
@@ -576,110 +373,99 @@
     ac_prev=x_includes ;;
   -x-includes=* | --x-includes=* | --x-include=* | --x-includ=* | --x-inclu=* \
   | --x-incl=* | --x-inc=* | --x-in=* | --x-i=*)
-    x_includes=$ac_optarg ;;
+    x_includes="$ac_optarg" ;;
 
   -x-libraries | --x-libraries | --x-librarie | --x-librari \
   | --x-librar | --x-libra | --x-libr | --x-lib | --x-li | --x-l)
     ac_prev=x_libraries ;;
   -x-libraries=* | --x-libraries=* | --x-librarie=* | --x-librari=* \
   | --x-librar=* | --x-libra=* | --x-libr=* | --x-lib=* | --x-li=* | --x-l=*)
-    x_libraries=$ac_optarg ;;
+    x_libraries="$ac_optarg" ;;
 
-  -*) { echo "$as_me: error: unrecognized option: $ac_option
-Try \`$0 --help' for more information." >&2
-   { (exit 1); exit 1; }; }
+  -*) { echo "configure: error: $ac_option: invalid option; use --help to show usage" 1>&2; exit 1; }
     ;;
 
-  *=*)
-    ac_envvar=`expr "x$ac_option" : 'x\([^=]*\)='`
-    # Reject names that are not valid shell variable names.
-    expr "x$ac_envvar" : ".*[^_$as_cr_alnum]" >/dev/null &&
-      { echo "$as_me: error: invalid variable name: $ac_envvar" >&2
-   { (exit 1); exit 1; }; }
-    ac_optarg=`echo "$ac_optarg" | sed "s/'/'\\\\\\\\''/g"`
-    eval "$ac_envvar='$ac_optarg'"
-    export $ac_envvar ;;
-
   *)
-    # FIXME: should be removed in autoconf 3.0.
-    echo "$as_me: WARNING: you should use --build, --host, --target" >&2
-    expr "x$ac_option" : ".*[^-._$as_cr_alnum]" >/dev/null &&
-      echo "$as_me: WARNING: invalid host type: $ac_option" >&2
-    : ${build_alias=$ac_option} ${host_alias=$ac_option} ${target_alias=$ac_option}
+    if test -n "`echo $ac_option| sed 's/[-a-z0-9.]//g'`"; then
+      echo "configure: warning: $ac_option: invalid host type" 1>&2
+    fi
+    if test "x$nonopt" != xNONE; then
+      { echo "configure: error: can only configure for one host and one target at a time" 1>&2; exit 1; }
+    fi
+    nonopt="$ac_option"
     ;;
 
   esac
 done
 
 if test -n "$ac_prev"; then
-  ac_option=--`echo $ac_prev | sed 's/_/-/g'`
-  { echo "$as_me: error: missing argument to $ac_option" >&2
-   { (exit 1); exit 1; }; }
+  { echo "configure: error: missing argument to --`echo $ac_prev | sed 's/_/-/g'`" 1>&2; exit 1; }
 fi
 
-# Be sure to have absolute paths.
-for ac_var in exec_prefix prefix
-do
-  eval ac_val=$`echo $ac_var`
-  case $ac_val in
-    [\\/$]* | ?:[\\/]* | NONE | '' ) ;;
-    *)  { echo "$as_me: error: expected an absolute directory name for --$ac_var: $ac_val" >&2
-   { (exit 1); exit 1; }; };;
-  esac
-done
+trap 'rm -fr conftest* confdefs* core core.* *.core $ac_clean_files; exit 1' 1 2 15
+
+# File descriptor usage:
+# 0 standard input
+# 1 file creation
+# 2 errors and warnings
+# 3 some systems may open it to /dev/tty
+# 4 used on the Kubota Titan
+# 6 checking for... messages and results
+# 5 compiler messages saved in config.log
+if test "$silent" = yes; then
+  exec 6>/dev/null
+else
+  exec 6>&1
+fi
+exec 5>./config.log
 
-# Be sure to have absolute paths.
-for ac_var in bindir sbindir libexecdir datadir sysconfdir sharedstatedir \
-              localstatedir libdir includedir oldincludedir infodir mandir
+echo "\
+This file contains any messages produced by compilers while
+running configure, to aid debugging if configure makes a mistake.
+" 1>&5
+
+# Strip out --no-create and --no-recursion so they do not pile up.
+# Also quote any args containing shell metacharacters.
+ac_configure_args=
+for ac_arg
 do
-  eval ac_val=$`echo $ac_var`
-  case $ac_val in
-    [\\/$]* | ?:[\\/]* ) ;;
-    *)  { echo "$as_me: error: expected an absolute directory name for --$ac_var: $ac_val" >&2
-   { (exit 1); exit 1; }; };;
+  case "$ac_arg" in
+  -no-create | --no-create | --no-creat | --no-crea | --no-cre \
+  | --no-cr | --no-c) ;;
+  -no-recursion | --no-recursion | --no-recursio | --no-recursi \
+  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r) ;;
+  *" "*|*"	"*|*[\[\]\~\#\$\^\&\*\(\)\{\}\\\|\;\<\>\?]*)
+  ac_configure_args="$ac_configure_args '$ac_arg'" ;;
+  *) ac_configure_args="$ac_configure_args $ac_arg" ;;
   esac
 done
 
-# There might be people who depend on the old broken behavior: `$host'
-# used to hold the argument of --host etc.
-# FIXME: To remove some day.
-build=$build_alias
-host=$host_alias
-target=$target_alias
-
-# FIXME: To remove some day.
-if test "x$host_alias" != x; then
-  if test "x$build_alias" = x; then
-    cross_compiling=maybe
-    echo "$as_me: WARNING: If you wanted to set the --build type, don't use --host.
-    If a cross compiler is detected then cross compile mode will be used." >&2
-  elif test "x$build_alias" != "x$host_alias"; then
-    cross_compiling=yes
-  fi
-fi
-
-ac_tool_prefix=
-test -n "$host_alias" && ac_tool_prefix=$host_alias-
+# NLS nuisances.
+# Only set these to C if already set.  These must not be set unconditionally
+# because not all systems understand e.g. LANG=C (notably SCO).
+# Fixing LC_MESSAGES prevents Solaris sh from translating var values in `set'!
+# Non-C LC_CTYPE values break the ctype check.
+if test "${LANG+set}"   = set; then LANG=C;   export LANG;   fi
+if test "${LC_ALL+set}" = set; then LC_ALL=C; export LC_ALL; fi
+if test "${LC_MESSAGES+set}" = set; then LC_MESSAGES=C; export LC_MESSAGES; fi
+if test "${LC_CTYPE+set}"    = set; then LC_CTYPE=C;    export LC_CTYPE;    fi
 
-test "$silent" = yes && exec 6>/dev/null
+# confdefs.h avoids OS command line length limits that DEFS can exceed.
+rm -rf conftest* confdefs.h
+# AIX cpp loses on an empty file, so make sure it contains at least a newline.
+echo > confdefs.h
 
+# A filename unique to this package, relative to the directory that
+# configure is in, which we can look for to find out if srcdir is correct.
+ac_unique_file=configure.in
 
 # Find the source files, if location was not specified.
 if test -z "$srcdir"; then
   ac_srcdir_defaulted=yes
   # Try the directory containing this script, then its parent.
-  ac_confdir=`(dirname "$0") 2>/dev/null ||
-$as_expr X"$0" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
-         X"$0" : 'X\(//\)[^/]' \| \
-         X"$0" : 'X\(//\)$' \| \
-         X"$0" : 'X\(/\)' \| \
-         .     : '\(.\)' 2>/dev/null ||
-echo X"$0" |
-    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{ s//\1/; q; }
-  	  /^X\(\/\/\)[^/].*/{ s//\1/; q; }
-  	  /^X\(\/\/\)$/{ s//\1/; q; }
-  	  /^X\(\/\).*/{ s//\1/; q; }
-  	  s/.*/./; q'`
+  ac_prog=$0
+  ac_confdir=`echo $ac_prog|sed 's%/[^/][^/]*$%%'`
+  test "x$ac_confdir" = "x$ac_prog" && ac_confdir=.
   srcdir=$ac_confdir
   if test ! -r $srcdir/$ac_unique_file; then
     srcdir=..
@@ -689,401 +475,13 @@
 fi
 if test ! -r $srcdir/$ac_unique_file; then
   if test "$ac_srcdir_defaulted" = yes; then
-    { echo "$as_me: error: cannot find sources ($ac_unique_file) in $ac_confdir or .." >&2
-   { (exit 1); exit 1; }; }
+    { echo "configure: error: can not find sources in $ac_confdir or .." 1>&2; exit 1; }
   else
-    { echo "$as_me: error: cannot find sources ($ac_unique_file) in $srcdir" >&2
-   { (exit 1); exit 1; }; }
+    { echo "configure: error: can not find sources in $srcdir" 1>&2; exit 1; }
   fi
 fi
-(cd $srcdir && test -r ./$ac_unique_file) 2>/dev/null ||
-  { echo "$as_me: error: sources are in $srcdir, but \`cd $srcdir' does not work" >&2
-   { (exit 1); exit 1; }; }
-srcdir=`echo "$srcdir" | sed 's%\([^\\/]\)[\\/]*$%\1%'`
-ac_env_build_alias_set=${build_alias+set}
-ac_env_build_alias_value=$build_alias
-ac_cv_env_build_alias_set=${build_alias+set}
-ac_cv_env_build_alias_value=$build_alias
-ac_env_host_alias_set=${host_alias+set}
-ac_env_host_alias_value=$host_alias
-ac_cv_env_host_alias_set=${host_alias+set}
-ac_cv_env_host_alias_value=$host_alias
-ac_env_target_alias_set=${target_alias+set}
-ac_env_target_alias_value=$target_alias
-ac_cv_env_target_alias_set=${target_alias+set}
-ac_cv_env_target_alias_value=$target_alias
-
-#
-# Report the --help message.
-#
-if test "$ac_init_help" = "long"; then
-  # Omit some internal or obsolete options to make the list less imposing.
-  # This message is too long to be a string in the A/UX 3.1 sh.
-  cat <<_ACEOF
-\`configure' configures this package to adapt to many kinds of systems.
-
-Usage: $0 [OPTION]... [VAR=VALUE]...
-
-To assign environment variables (e.g., CC, CFLAGS...), specify them as
-VAR=VALUE.  See below for descriptions of some of the useful variables.
-
-Defaults for the options are specified in brackets.
-
-Configuration:
-  -h, --help              display this help and exit
-      --help=short        display options specific to this package
-      --help=recursive    display the short help of all the included packages
-  -V, --version           display version information and exit
-  -q, --quiet, --silent   do not print \`checking...' messages
-      --cache-file=FILE   cache test results in FILE [disabled]
-  -C, --config-cache      alias for \`--cache-file=config.cache'
-  -n, --no-create         do not create output files
-      --srcdir=DIR        find the sources in DIR [configure dir or \`..']
-
-_ACEOF
-
-  cat <<_ACEOF
-Installation directories:
-  --prefix=PREFIX         install architecture-independent files in PREFIX
-                          [$ac_default_prefix]
-  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
-                          [PREFIX]
-
-By default, \`make install' will install all the files in
-\`$ac_default_prefix/bin', \`$ac_default_prefix/lib' etc.  You can specify
-an installation prefix other than \`$ac_default_prefix' using \`--prefix',
-for instance \`--prefix=\$HOME'.
-
-For better control, use the options below.
-
-Fine tuning of the installation directories:
-  --bindir=DIR           user executables [EPREFIX/bin]
-  --sbindir=DIR          system admin executables [EPREFIX/sbin]
-  --libexecdir=DIR       program executables [EPREFIX/libexec]
-  --datadir=DIR          read-only architecture-independent data [PREFIX/share]
-  --sysconfdir=DIR       read-only single-machine data [PREFIX/etc]
-  --sharedstatedir=DIR   modifiable architecture-independent data [PREFIX/com]
-  --localstatedir=DIR    modifiable single-machine data [PREFIX/var]
-  --libdir=DIR           object code libraries [EPREFIX/lib]
-  --includedir=DIR       C header files [PREFIX/include]
-  --oldincludedir=DIR    C header files for non-gcc [/usr/include]
-  --infodir=DIR          info documentation [PREFIX/info]
-  --mandir=DIR           man documentation [PREFIX/man]
-_ACEOF
-
-  cat <<\_ACEOF
-_ACEOF
-fi
-
-if test -n "$ac_init_help"; then
+srcdir=`echo "${srcdir}" | sed 's%\([^/]\)/*$%\1%'`
 
-  cat <<\_ACEOF
-
-Optional Features:
-  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
-  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
-  --enable-maintainer-mode configure for development
-
-Optional Packages:
-  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
-  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
-  --with-python=PATH      specify the Python interpreter
-  --with-docbook-dtd=PATH directory containing the docbook DTD.
-
-_ACEOF
-fi
-
-if test "$ac_init_help" = "recursive"; then
-  # If there are subdirs, report their specific --help.
-  ac_popdir=`pwd`
-  for ac_dir in : $ac_subdirs_all; do test "x$ac_dir" = x: && continue
-    test -d $ac_dir || continue
-    ac_builddir=.
-
-if test "$ac_dir" != .; then
-  ac_dir_suffix=/`echo "$ac_dir" | sed 's,^\.[\\/],,'`
-  # A "../" for each directory in $ac_dir_suffix.
-  ac_top_builddir=`echo "$ac_dir_suffix" | sed 's,/[^\\/]*,../,g'`
-else
-  ac_dir_suffix= ac_top_builddir=
-fi
-
-case $srcdir in
-  .)  # No --srcdir option.  We are building in place.
-    ac_srcdir=.
-    if test -z "$ac_top_builddir"; then
-       ac_top_srcdir=.
-    else
-       ac_top_srcdir=`echo $ac_top_builddir | sed 's,/$,,'`
-    fi ;;
-  [\\/]* | ?:[\\/]* )  # Absolute path.
-    ac_srcdir=$srcdir$ac_dir_suffix;
-    ac_top_srcdir=$srcdir ;;
-  *) # Relative path.
-    ac_srcdir=$ac_top_builddir$srcdir$ac_dir_suffix
-    ac_top_srcdir=$ac_top_builddir$srcdir ;;
-esac
-# Don't blindly perform a `cd "$ac_dir"/$ac_foo && pwd` since $ac_foo can be
-# absolute.
-ac_abs_builddir=`cd "$ac_dir" && cd $ac_builddir && pwd`
-ac_abs_top_builddir=`cd "$ac_dir" && cd ${ac_top_builddir}. && pwd`
-ac_abs_srcdir=`cd "$ac_dir" && cd $ac_srcdir && pwd`
-ac_abs_top_srcdir=`cd "$ac_dir" && cd $ac_top_srcdir && pwd`
-
-    cd $ac_dir
-    # Check for guested configure; otherwise get Cygnus style configure.
-    if test -f $ac_srcdir/configure.gnu; then
-      echo
-      $SHELL $ac_srcdir/configure.gnu  --help=recursive
-    elif test -f $ac_srcdir/configure; then
-      echo
-      $SHELL $ac_srcdir/configure  --help=recursive
-    elif test -f $ac_srcdir/configure.ac ||
-           test -f $ac_srcdir/configure.in; then
-      echo
-      $ac_configure --help
-    else
-      echo "$as_me: WARNING: no configuration information is in $ac_dir" >&2
-    fi
-    cd $ac_popdir
-  done
-fi
-
-test -n "$ac_init_help" && exit 0
-if $ac_init_version; then
-  cat <<\_ACEOF
-
-Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001, 2002
-Free Software Foundation, Inc.
-This configure script is free software; the Free Software Foundation
-gives unlimited permission to copy, distribute and modify it.
-_ACEOF
-  exit 0
-fi
-exec 5>config.log
-cat >&5 <<_ACEOF
-This file contains any messages produced by compilers while
-running configure, to aid debugging if configure makes a mistake.
-
-It was created by $as_me, which was
-generated by GNU Autoconf 2.57.  Invocation command line was
-
-  $ $0 $@
-
-_ACEOF
-{
-cat <<_ASUNAME
-## --------- ##
-## Platform. ##
-## --------- ##
-
-hostname = `(hostname || uname -n) 2>/dev/null | sed 1q`
-uname -m = `(uname -m) 2>/dev/null || echo unknown`
-uname -r = `(uname -r) 2>/dev/null || echo unknown`
-uname -s = `(uname -s) 2>/dev/null || echo unknown`
-uname -v = `(uname -v) 2>/dev/null || echo unknown`
-
-/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`
-/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`
-
-/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`
-/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`
-/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`
-hostinfo               = `(hostinfo) 2>/dev/null               || echo unknown`
-/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`
-/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`
-/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`
-
-_ASUNAME
-
-as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-  echo "PATH: $as_dir"
-done
-
-} >&5
-
-cat >&5 <<_ACEOF
-
-
-## ----------- ##
-## Core tests. ##
-## ----------- ##
-
-_ACEOF
-
-
-# Keep a trace of the command line.
-# Strip out --no-create and --no-recursion so they do not pile up.
-# Strip out --silent because we don't want to record it for future runs.
-# Also quote any args containing shell meta-characters.
-# Make two passes to allow for proper duplicate-argument suppression.
-ac_configure_args=
-ac_configure_args0=
-ac_configure_args1=
-ac_sep=
-ac_must_keep_next=false
-for ac_pass in 1 2
-do
-  for ac_arg
-  do
-    case $ac_arg in
-    -no-create | --no-c* | -n | -no-recursion | --no-r*) continue ;;
-    -q | -quiet | --quiet | --quie | --qui | --qu | --q \
-    | -silent | --silent | --silen | --sile | --sil)
-      continue ;;
-    *" "*|*"	"*|*[\[\]\~\#\$\^\&\*\(\)\{\}\\\|\;\<\>\?\"\']*)
-      ac_arg=`echo "$ac_arg" | sed "s/'/'\\\\\\\\''/g"` ;;
-    esac
-    case $ac_pass in
-    1) ac_configure_args0="$ac_configure_args0 '$ac_arg'" ;;
-    2)
-      ac_configure_args1="$ac_configure_args1 '$ac_arg'"
-      if test $ac_must_keep_next = true; then
-        ac_must_keep_next=false # Got value, back to normal.
-      else
-        case $ac_arg in
-          *=* | --config-cache | -C | -disable-* | --disable-* \
-          | -enable-* | --enable-* | -gas | --g* | -nfp | --nf* \
-          | -q | -quiet | --q* | -silent | --sil* | -v | -verb* \
-          | -with-* | --with-* | -without-* | --without-* | --x)
-            case "$ac_configure_args0 " in
-              "$ac_configure_args1"*" '$ac_arg' "* ) continue ;;
-            esac
-            ;;
-          -* ) ac_must_keep_next=true ;;
-        esac
-      fi
-      ac_configure_args="$ac_configure_args$ac_sep'$ac_arg'"
-      # Get rid of the leading space.
-      ac_sep=" "
-      ;;
-    esac
-  done
-done
-$as_unset ac_configure_args0 || test "${ac_configure_args0+set}" != set || { ac_configure_args0=; export ac_configure_args0; }
-$as_unset ac_configure_args1 || test "${ac_configure_args1+set}" != set || { ac_configure_args1=; export ac_configure_args1; }
-
-# When interrupted or exit'd, cleanup temporary files, and complete
-# config.log.  We remove comments because anyway the quotes in there
-# would cause problems or look ugly.
-# WARNING: Be sure not to use single quotes in there, as some shells,
-# such as our DU 5.0 friend, will then `close' the trap.
-trap 'exit_status=$?
-  # Save into config.log some information that might help in debugging.
-  {
-    echo
-
-    cat <<\_ASBOX
-## ---------------- ##
-## Cache variables. ##
-## ---------------- ##
-_ASBOX
-    echo
-    # The following way of writing the cache mishandles newlines in values,
-{
-  (set) 2>&1 |
-    case `(ac_space='"'"' '"'"'; set | grep ac_space) 2>&1` in
-    *ac_space=\ *)
-      sed -n \
-        "s/'"'"'/'"'"'\\\\'"'"''"'"'/g;
-    	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='"'"'\\2'"'"'/p"
-      ;;
-    *)
-      sed -n \
-        "s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1=\\2/p"
-      ;;
-    esac;
-}
-    echo
-
-    cat <<\_ASBOX
-## ----------------- ##
-## Output variables. ##
-## ----------------- ##
-_ASBOX
-    echo
-    for ac_var in $ac_subst_vars
-    do
-      eval ac_val=$`echo $ac_var`
-      echo "$ac_var='"'"'$ac_val'"'"'"
-    done | sort
-    echo
-
-    if test -n "$ac_subst_files"; then
-      cat <<\_ASBOX
-## ------------- ##
-## Output files. ##
-## ------------- ##
-_ASBOX
-      echo
-      for ac_var in $ac_subst_files
-      do
-	eval ac_val=$`echo $ac_var`
-        echo "$ac_var='"'"'$ac_val'"'"'"
-      done | sort
-      echo
-    fi
-
-    if test -s confdefs.h; then
-      cat <<\_ASBOX
-## ----------- ##
-## confdefs.h. ##
-## ----------- ##
-_ASBOX
-      echo
-      sed "/^$/d" confdefs.h | sort
-      echo
-    fi
-    test "$ac_signal" != 0 &&
-      echo "$as_me: caught signal $ac_signal"
-    echo "$as_me: exit $exit_status"
-  } >&5
-  rm -f core core.* *.core &&
-  rm -rf conftest* confdefs* conf$$* $ac_clean_files &&
-    exit $exit_status
-     ' 0
-for ac_signal in 1 2 13 15; do
-  trap 'ac_signal='$ac_signal'; { (exit 1); exit 1; }' $ac_signal
-done
-ac_signal=0
-
-# confdefs.h avoids OS command line length limits that DEFS can exceed.
-rm -rf conftest* confdefs.h
-# AIX cpp loses on an empty file, so make sure it contains at least a newline.
-echo >confdefs.h
-
-# Predefined preprocessor variables.
-
-cat >>confdefs.h <<_ACEOF
-#define PACKAGE_NAME "$PACKAGE_NAME"
-_ACEOF
-
-
-cat >>confdefs.h <<_ACEOF
-#define PACKAGE_TARNAME "$PACKAGE_TARNAME"
-_ACEOF
-
-
-cat >>confdefs.h <<_ACEOF
-#define PACKAGE_VERSION "$PACKAGE_VERSION"
-_ACEOF
-
-
-cat >>confdefs.h <<_ACEOF
-#define PACKAGE_STRING "$PACKAGE_STRING"
-_ACEOF
-
-
-cat >>confdefs.h <<_ACEOF
-#define PACKAGE_BUGREPORT "$PACKAGE_BUGREPORT"
-_ACEOF
-
-
-# Let the site file select an alternate cache file if it wants to.
 # Prefer explicitly selected file to automatically selected ones.
 if test -z "$CONFIG_SITE"; then
   if test "x$prefix" != xNONE; then
@@ -1094,103 +492,39 @@
 fi
 for ac_site_file in $CONFIG_SITE; do
   if test -r "$ac_site_file"; then
-    { echo "$as_me:$LINENO: loading site script $ac_site_file" >&5
-echo "$as_me: loading site script $ac_site_file" >&6;}
-    sed 's/^/| /' "$ac_site_file" >&5
+    echo "loading site script $ac_site_file"
     . "$ac_site_file"
   fi
 done
 
 if test -r "$cache_file"; then
-  # Some versions of bash will fail to source /dev/null (special
-  # files actually), so we avoid doing that.
-  if test -f "$cache_file"; then
-    { echo "$as_me:$LINENO: loading cache $cache_file" >&5
-echo "$as_me: loading cache $cache_file" >&6;}
-    case $cache_file in
-      [\\/]* | ?:[\\/]* ) . $cache_file;;
-      *)                      . ./$cache_file;;
-    esac
-  fi
+  echo "loading cache $cache_file"
+  . $cache_file
 else
-  { echo "$as_me:$LINENO: creating cache $cache_file" >&5
-echo "$as_me: creating cache $cache_file" >&6;}
-  >$cache_file
-fi
-
-# Check that the precious variables saved in the cache have kept the same
-# value.
-ac_cache_corrupted=false
-for ac_var in `(set) 2>&1 |
-               sed -n 's/^ac_env_\([a-zA-Z_0-9]*\)_set=.*/\1/p'`; do
-  eval ac_old_set=\$ac_cv_env_${ac_var}_set
-  eval ac_new_set=\$ac_env_${ac_var}_set
-  eval ac_old_val="\$ac_cv_env_${ac_var}_value"
-  eval ac_new_val="\$ac_env_${ac_var}_value"
-  case $ac_old_set,$ac_new_set in
-    set,)
-      { echo "$as_me:$LINENO: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&5
-echo "$as_me: error: \`$ac_var' was set to \`$ac_old_val' in the previous run" >&2;}
-      ac_cache_corrupted=: ;;
-    ,set)
-      { echo "$as_me:$LINENO: error: \`$ac_var' was not set in the previous run" >&5
-echo "$as_me: error: \`$ac_var' was not set in the previous run" >&2;}
-      ac_cache_corrupted=: ;;
-    ,);;
-    *)
-      if test "x$ac_old_val" != "x$ac_new_val"; then
-        { echo "$as_me:$LINENO: error: \`$ac_var' has changed since the previous run:" >&5
-echo "$as_me: error: \`$ac_var' has changed since the previous run:" >&2;}
-        { echo "$as_me:$LINENO:   former value:  $ac_old_val" >&5
-echo "$as_me:   former value:  $ac_old_val" >&2;}
-        { echo "$as_me:$LINENO:   current value: $ac_new_val" >&5
-echo "$as_me:   current value: $ac_new_val" >&2;}
-        ac_cache_corrupted=:
-      fi;;
-  esac
-  # Pass precious variables to config.status.
-  if test "$ac_new_set" = set; then
-    case $ac_new_val in
-    *" "*|*"	"*|*[\[\]\~\#\$\^\&\*\(\)\{\}\\\|\;\<\>\?\"\']*)
-      ac_arg=$ac_var=`echo "$ac_new_val" | sed "s/'/'\\\\\\\\''/g"` ;;
-    *) ac_arg=$ac_var=$ac_new_val ;;
-    esac
-    case " $ac_configure_args " in
-      *" '$ac_arg' "*) ;; # Avoid dups.  Use of quotes ensures accuracy.
-      *) ac_configure_args="$ac_configure_args '$ac_arg'" ;;
-    esac
-  fi
-done
-if $ac_cache_corrupted; then
-  { echo "$as_me:$LINENO: error: changes in the environment can compromise the build" >&5
-echo "$as_me: error: changes in the environment can compromise the build" >&2;}
-  { { echo "$as_me:$LINENO: error: run \`make distclean' and/or \`rm $cache_file' and start over" >&5
-echo "$as_me: error: run \`make distclean' and/or \`rm $cache_file' and start over" >&2;}
-   { (exit 1); exit 1; }; }
+  echo "creating cache $cache_file"
+  > $cache_file
 fi
 
 ac_ext=c
+# CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.
 ac_cpp='$CPP $CPPFLAGS'
-ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
-ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
-ac_compiler_gnu=$ac_cv_c_compiler_gnu
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
+ac_compile='${CC-cc} -c $CFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'
+ac_link='${CC-cc} -o conftest${ac_exeext} $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'
+cross_compiling=$ac_cv_prog_cc_cross
+
+ac_exeext=
+ac_objext=o
+if (echo "testing\c"; echo 1,2,3) | grep c >/dev/null; then
+  # Stardent Vistra SVR4 grep lacks -e, says ghazi at caip.rutgers.edu.
+  if (echo -n testing; echo 1,2,3) | sed s/-n/xn/ | grep xn >/dev/null; then
+    ac_n= ac_c='
+' ac_t='	'
+  else
+    ac_n=-n ac_c= ac_t=
+  fi
+else
+  ac_n= ac_c='\c' ac_t=
+fi
 
 
 
@@ -1205,9 +539,10 @@
               fi
 else
   MAINTAINER_MODE=0
-fi;
+fi
 
 
+	     
 
 . ${srcdir}/version
 
@@ -1217,7 +552,6 @@
 
 
 
-
 # Check whether --with-python or --without-python was given.
 if test "${with_python+set}" = set; then
   withval="$with_python"
@@ -1225,73 +559,293 @@
 else
   PYTHON=""
 
-fi;
+fi
+
 
 if test -n "$PYTHON" -a "$PYTHON" != yes; then
-  as_ac_File=`echo "ac_cv_file_$PYTHON" | $as_tr_sh`
-echo "$as_me:$LINENO: checking for $PYTHON" >&5
-echo $ECHO_N "checking for $PYTHON... $ECHO_C" >&6
-if eval "test \"\${$as_ac_File+set}\" = set"; then
-  echo $ECHO_N "(cached) $ECHO_C" >&6
-else
-  test "$cross_compiling" = yes &&
-  { { echo "$as_me:$LINENO: error: cannot check for file existence when cross compiling" >&5
-echo "$as_me: error: cannot check for file existence when cross compiling" >&2;}
-   { (exit 1); exit 1; }; }
-if test -r "$PYTHON"; then
-  eval "$as_ac_File=yes"
-else
-  eval "$as_ac_File=no"
-fi
-fi
-echo "$as_me:$LINENO: result: `eval echo '${'$as_ac_File'}'`" >&5
-echo "${ECHO_T}`eval echo '${'$as_ac_File'}'`" >&6
-if test `eval echo '${'$as_ac_File'}'` = yes; then
-  :
+  # Extract the first word of "gcc", so it can be a program name with args.
+set dummy gcc; ac_word=$2
+echo $ac_n "checking for $ac_word""... $ac_c" 1>&6
+echo "configure:570: checking for $ac_word" >&5
+if eval "test \"`echo '$''{'ac_cv_prog_CC'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_dummy="$PATH"
+  for ac_dir in $ac_dummy; do
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/$ac_word; then
+      ac_cv_prog_CC="gcc"
+      break
+    fi
+  done
+  IFS="$ac_save_ifs"
+fi
+fi
+CC="$ac_cv_prog_CC"
+if test -n "$CC"; then
+  echo "$ac_t""$CC" 1>&6
+else
+  echo "$ac_t""no" 1>&6
+fi
+
+if test -z "$CC"; then
+  # Extract the first word of "cc", so it can be a program name with args.
+set dummy cc; ac_word=$2
+echo $ac_n "checking for $ac_word""... $ac_c" 1>&6
+echo "configure:600: checking for $ac_word" >&5
+if eval "test \"`echo '$''{'ac_cv_prog_CC'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_prog_rejected=no
+  ac_dummy="$PATH"
+  for ac_dir in $ac_dummy; do
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/$ac_word; then
+      if test "$ac_dir/$ac_word" = "/usr/ucb/cc"; then
+        ac_prog_rejected=yes
+	continue
+      fi
+      ac_cv_prog_CC="cc"
+      break
+    fi
+  done
+  IFS="$ac_save_ifs"
+if test $ac_prog_rejected = yes; then
+  # We found a bogon in the path, so make sure we never use it.
+  set dummy $ac_cv_prog_CC
+  shift
+  if test $# -gt 0; then
+    # We chose a different compiler from the bogus one.
+    # However, it has the same basename, so the bogon will be chosen
+    # first if we set CC to just the basename; use the full file name.
+    shift
+    set dummy "$ac_dir/$ac_word" "$@"
+    shift
+    ac_cv_prog_CC="$@"
+  fi
+fi
+fi
+fi
+CC="$ac_cv_prog_CC"
+if test -n "$CC"; then
+  echo "$ac_t""$CC" 1>&6
+else
+  echo "$ac_t""no" 1>&6
+fi
+
+  if test -z "$CC"; then
+    case "`uname -s`" in
+    *win32* | *WIN32*)
+      # Extract the first word of "cl", so it can be a program name with args.
+set dummy cl; ac_word=$2
+echo $ac_n "checking for $ac_word""... $ac_c" 1>&6
+echo "configure:651: checking for $ac_word" >&5
+if eval "test \"`echo '$''{'ac_cv_prog_CC'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
+else
+  if test -n "$CC"; then
+  ac_cv_prog_CC="$CC" # Let the user override the test.
+else
+  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_dummy="$PATH"
+  for ac_dir in $ac_dummy; do
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/$ac_word; then
+      ac_cv_prog_CC="cl"
+      break
+    fi
+  done
+  IFS="$ac_save_ifs"
+fi
+fi
+CC="$ac_cv_prog_CC"
+if test -n "$CC"; then
+  echo "$ac_t""$CC" 1>&6
 else
-  echo "Cannot find Python interpreter $PYTHON."; exit 1
+  echo "$ac_t""no" 1>&6
+fi
+ ;;
+    esac
+  fi
+  test -z "$CC" && { echo "configure: error: no acceptable cc found in \$PATH" 1>&2; exit 1; }
+fi
+
+echo $ac_n "checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works""... $ac_c" 1>&6
+echo "configure:683: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works" >&5
+
+ac_ext=c
+# CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='${CC-cc} -c $CFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'
+ac_link='${CC-cc} -o conftest${ac_exeext} $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'
+cross_compiling=$ac_cv_prog_cc_cross
+
+cat > conftest.$ac_ext << EOF
+
+#line 694 "configure"
+#include "confdefs.h"
+
+main(){return(0);}
+EOF
+if { (eval echo configure:699: \"$ac_link\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then
+  ac_cv_prog_cc_works=yes
+  # If we can't run a trivial program, we are probably using a cross compiler.
+  if (./conftest; exit) 2>/dev/null; then
+    ac_cv_prog_cc_cross=no
+  else
+    ac_cv_prog_cc_cross=yes
+  fi
+else
+  echo "configure: failed program was:" >&5
+  cat conftest.$ac_ext >&5
+  ac_cv_prog_cc_works=no
+fi
+rm -fr conftest*
+ac_ext=c
+# CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='${CC-cc} -c $CFLAGS $CPPFLAGS conftest.$ac_ext 1>&5'
+ac_link='${CC-cc} -o conftest${ac_exeext} $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS 1>&5'
+cross_compiling=$ac_cv_prog_cc_cross
+
+echo "$ac_t""$ac_cv_prog_cc_works" 1>&6
+if test $ac_cv_prog_cc_works = no; then
+  { echo "configure: error: installation or configuration problem: C compiler cannot create executables." 1>&2; exit 1; }
+fi
+echo $ac_n "checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler""... $ac_c" 1>&6
+echo "configure:725: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler" >&5
+echo "$ac_t""$ac_cv_prog_cc_cross" 1>&6
+cross_compiling=$ac_cv_prog_cc_cross
+
+echo $ac_n "checking whether we are using GNU C""... $ac_c" 1>&6
+echo "configure:730: checking whether we are using GNU C" >&5
+if eval "test \"`echo '$''{'ac_cv_prog_gcc'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
+else
+  cat > conftest.c <<EOF
+#ifdef __GNUC__
+  yes;
+#endif
+EOF
+if { ac_try='${CC-cc} -E conftest.c'; { (eval echo configure:739: \"$ac_try\") 1>&5; (eval $ac_try) 2>&5; }; } | egrep yes >/dev/null 2>&1; then
+  ac_cv_prog_gcc=yes
+else
+  ac_cv_prog_gcc=no
+fi
+fi
+
+echo "$ac_t""$ac_cv_prog_gcc" 1>&6
+
+if test $ac_cv_prog_gcc = yes; then
+  GCC=yes
+else
+  GCC=
+fi
+
+ac_test_CFLAGS="${CFLAGS+set}"
+ac_save_CFLAGS="$CFLAGS"
+CFLAGS=
+echo $ac_n "checking whether ${CC-cc} accepts -g""... $ac_c" 1>&6
+echo "configure:758: checking whether ${CC-cc} accepts -g" >&5
+if eval "test \"`echo '$''{'ac_cv_prog_cc_g'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
+else
+  echo 'void f(){}' > conftest.c
+if test -z "`${CC-cc} -g -c conftest.c 2>&1`"; then
+  ac_cv_prog_cc_g=yes
+else
+  ac_cv_prog_cc_g=no
+fi
+rm -f conftest*
+
+fi
+
+echo "$ac_t""$ac_cv_prog_cc_g" 1>&6
+if test "$ac_test_CFLAGS" = set; then
+  CFLAGS="$ac_save_CFLAGS"
+elif test $ac_cv_prog_cc_g = yes; then
+  if test "$GCC" = yes; then
+    CFLAGS="-g -O2"
+  else
+    CFLAGS="-g"
+  fi
+else
+  if test "$GCC" = yes; then
+    CFLAGS="-O2"
+  else
+    CFLAGS=
+  fi
+fi
 
+
+ac_safe=`echo "$PYTHON" | sed 'y%./+-%__p_%'`
+echo $ac_n "checking for $PYTHON""... $ac_c" 1>&6
+echo "configure:792: checking for $PYTHON" >&5
+if eval "test \"`echo '$''{'ac_cv_file_$ac_safe'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
+else
+  if test "$cross_compiling" = yes; then
+    { echo "configure: error: Cannot check for file existence when cross compiling" 1>&2; exit 1; }
+else
+  if test -r $PYTHON; then
+    eval "ac_cv_file_$ac_safe=yes"
+  else
+    eval "ac_cv_file_$ac_safe=no"
+  fi
+fi
+fi
+if eval "test \"`echo '$ac_cv_file_'$ac_safe`\" = yes"; then
+  echo "$ac_t""yes" 1>&6
+  :
+else
+  echo "$ac_t""no" 1>&6
+echo "Cannot find Python interpreter $PYTHON."; exit 1
+  
 fi
 
 else
   # Extract the first word of "python2 python", so it can be a program name with args.
 set dummy python2 python; ac_word=$2
-echo "$as_me:$LINENO: checking for $ac_word" >&5
-echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
-if test "${ac_cv_path_PYTHON+set}" = set; then
-  echo $ECHO_N "(cached) $ECHO_C" >&6
+echo $ac_n "checking for $ac_word""... $ac_c" 1>&6
+echo "configure:819: checking for $ac_word" >&5
+if eval "test \"`echo '$''{'ac_cv_path_PYTHON'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
 else
-  case $PYTHON in
-  [\\/]* | ?:[\\/]*)
+  case "$PYTHON" in
+  /*)
   ac_cv_path_PYTHON="$PYTHON" # Let the user override the test with a path.
   ;;
+  ?:/*)			 
+  ac_cv_path_PYTHON="$PYTHON" # Let the user override the test with a dos path.
+  ;;
   *)
-  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-  for ac_exec_ext in '' $ac_executable_extensions; do
-  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_path_PYTHON="$as_dir/$ac_word$ac_exec_ext"
-    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
-done
-
+  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_dummy="$PATH"
+  for ac_dir in $ac_dummy; do 
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/$ac_word; then
+      ac_cv_path_PYTHON="$ac_dir/$ac_word"
+      break
+    fi
+  done
+  IFS="$ac_save_ifs"
   test -z "$ac_cv_path_PYTHON" && ac_cv_path_PYTHON="python"
   ;;
 esac
 fi
-PYTHON=$ac_cv_path_PYTHON
-
+PYTHON="$ac_cv_path_PYTHON"
 if test -n "$PYTHON"; then
-  echo "$as_me:$LINENO: result: $PYTHON" >&5
-echo "${ECHO_T}$PYTHON" >&6
+  echo "$ac_t""$PYTHON" 1>&6
 else
-  echo "$as_me:$LINENO: result: no" >&5
-echo "${ECHO_T}no" >&6
+  echo "$ac_t""no" 1>&6
 fi
 
 fi
@@ -1300,8 +854,8 @@
 # The code used to check the version only reports the version accurately
 # with Python 2.0 or greater -- but the minimum acceptable version of
 # Python is already higher than that.
-echo "$as_me:$LINENO: checking Python version" >&5
-echo $ECHO_N "checking Python version... $ECHO_C" >&6
+echo $ac_n "checking Python version""... $ac_c" 1>&6
+echo "configure:859: checking Python version" >&5
 cat > python-ver.py <<EOF
 try:
   import sys
@@ -1320,159 +874,140 @@
 PYTHON_MINOR=`$PYTHON python-ver.py`
 rm python-ver.py
 PYTHON_VERSION="${PYTHON_MAJOR}.${PYTHON_MINOR}"
-echo "$as_me:$LINENO: result: $PYTHON_VERSION" >&5
-echo "${ECHO_T}$PYTHON_VERSION" >&6
+echo "$ac_t""$PYTHON_VERSION" 1>&6
 
 # Some Python versions before 2.1 have serious bugs if threads and
 # fork are used together.  Therefore, Python 2.1 or higher is required.
 if test "$PYTHON_MAJOR" -lt 2 || \
    (test "$PYTHON_MAJOR" -eq 2 && test "$PYTHON_MINOR" -lt 1); then
-  { { echo "$as_me:$LINENO: error: QM requires Python version 2.1 or greater" >&5
-echo "$as_me: error: QM requires Python version 2.1 or greater" >&2;}
-   { (exit 1); exit 1; }; }
+  { echo "configure: error: QM requires Python version 2.1 or greater" 1>&2; exit 1; }
 fi
 
-echo "$as_me:$LINENO: checking Python platform" >&5
-echo $ECHO_N "checking Python platform... $ECHO_C" >&6
+echo $ac_n "checking Python platform""... $ac_c" 1>&6
+echo "configure:888: checking Python platform" >&5
 PYTHON_PLATFORM=`$PYTHON -c "import distutils.util; print distutils.util.get_platform()" 2>/dev/null`
 if test $? -ne 0; then
-  echo "$as_me:$LINENO: result: could not be determined" >&5
-echo "${ECHO_T}could not be determined" >&6
-  { { echo "$as_me:$LINENO: error: Python distutils module is not installed" >&5
-echo "$as_me: error: Python distutils module is not installed" >&2;}
-   { (exit 1); exit 1; }; }
+  echo "$ac_t""could not be determined" 1>&6
+  { echo "configure: error: Python distutils module is not installed" 1>&2; exit 1; }
 fi
-echo "$as_me:$LINENO: result: $PYTHON_PLATFORM" >&5
-echo "${ECHO_T}$PYTHON_PLATFORM" >&6
+echo "$ac_t""$PYTHON_PLATFORM" 1>&6
 
 
 
 # Extract the first word of "happydoc", so it can be a program name with args.
 set dummy happydoc; ac_word=$2
-echo "$as_me:$LINENO: checking for $ac_word" >&5
-echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
-if test "${ac_cv_path_HAPPYDOC+set}" = set; then
-  echo $ECHO_N "(cached) $ECHO_C" >&6
+echo $ac_n "checking for $ac_word""... $ac_c" 1>&6
+echo "configure:901: checking for $ac_word" >&5
+if eval "test \"`echo '$''{'ac_cv_path_HAPPYDOC'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
 else
-  case $HAPPYDOC in
-  [\\/]* | ?:[\\/]*)
+  case "$HAPPYDOC" in
+  /*)
   ac_cv_path_HAPPYDOC="$HAPPYDOC" # Let the user override the test with a path.
   ;;
+  ?:/*)			 
+  ac_cv_path_HAPPYDOC="$HAPPYDOC" # Let the user override the test with a dos path.
+  ;;
   *)
-  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-  for ac_exec_ext in '' $ac_executable_extensions; do
-  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_path_HAPPYDOC="$as_dir/$ac_word$ac_exec_ext"
-    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
-done
-
+  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_dummy="$PATH"
+  for ac_dir in $ac_dummy; do 
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/$ac_word; then
+      ac_cv_path_HAPPYDOC="$ac_dir/$ac_word"
+      break
+    fi
+  done
+  IFS="$ac_save_ifs"
   ;;
 esac
 fi
-HAPPYDOC=$ac_cv_path_HAPPYDOC
-
+HAPPYDOC="$ac_cv_path_HAPPYDOC"
 if test -n "$HAPPYDOC"; then
-  echo "$as_me:$LINENO: result: $HAPPYDOC" >&5
-echo "${ECHO_T}$HAPPYDOC" >&6
+  echo "$ac_t""$HAPPYDOC" 1>&6
 else
-  echo "$as_me:$LINENO: result: no" >&5
-echo "${ECHO_T}no" >&6
+  echo "$ac_t""no" 1>&6
 fi
 
 
 
 # Extract the first word of "jade", so it can be a program name with args.
 set dummy jade; ac_word=$2
-echo "$as_me:$LINENO: checking for $ac_word" >&5
-echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
-if test "${ac_cv_path_JADE+set}" = set; then
-  echo $ECHO_N "(cached) $ECHO_C" >&6
+echo $ac_n "checking for $ac_word""... $ac_c" 1>&6
+echo "configure:938: checking for $ac_word" >&5
+if eval "test \"`echo '$''{'ac_cv_path_JADE'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
 else
-  case $JADE in
-  [\\/]* | ?:[\\/]*)
+  case "$JADE" in
+  /*)
   ac_cv_path_JADE="$JADE" # Let the user override the test with a path.
   ;;
+  ?:/*)			 
+  ac_cv_path_JADE="$JADE" # Let the user override the test with a dos path.
+  ;;
   *)
-  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-  for ac_exec_ext in '' $ac_executable_extensions; do
-  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_path_JADE="$as_dir/$ac_word$ac_exec_ext"
-    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
-done
-
+  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_dummy="$PATH"
+  for ac_dir in $ac_dummy; do 
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/$ac_word; then
+      ac_cv_path_JADE="$ac_dir/$ac_word"
+      break
+    fi
+  done
+  IFS="$ac_save_ifs"
   test -z "$ac_cv_path_JADE" && ac_cv_path_JADE="no"
   ;;
 esac
 fi
-JADE=$ac_cv_path_JADE
-
+JADE="$ac_cv_path_JADE"
 if test -n "$JADE"; then
-  echo "$as_me:$LINENO: result: $JADE" >&5
-echo "${ECHO_T}$JADE" >&6
+  echo "$ac_t""$JADE" 1>&6
 else
-  echo "$as_me:$LINENO: result: no" >&5
-echo "${ECHO_T}no" >&6
+  echo "$ac_t""no" 1>&6
 fi
 
 # Extract the first word of "tidy", so it can be a program name with args.
 set dummy tidy; ac_word=$2
-echo "$as_me:$LINENO: checking for $ac_word" >&5
-echo $ECHO_N "checking for $ac_word... $ECHO_C" >&6
-if test "${ac_cv_path_TIDY+set}" = set; then
-  echo $ECHO_N "(cached) $ECHO_C" >&6
+echo $ac_n "checking for $ac_word""... $ac_c" 1>&6
+echo "configure:974: checking for $ac_word" >&5
+if eval "test \"`echo '$''{'ac_cv_path_TIDY'+set}'`\" = set"; then
+  echo $ac_n "(cached) $ac_c" 1>&6
 else
-  case $TIDY in
-  [\\/]* | ?:[\\/]*)
+  case "$TIDY" in
+  /*)
   ac_cv_path_TIDY="$TIDY" # Let the user override the test with a path.
   ;;
+  ?:/*)			 
+  ac_cv_path_TIDY="$TIDY" # Let the user override the test with a dos path.
+  ;;
   *)
-  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-  for ac_exec_ext in '' $ac_executable_extensions; do
-  if $as_executable_p "$as_dir/$ac_word$ac_exec_ext"; then
-    ac_cv_path_TIDY="$as_dir/$ac_word$ac_exec_ext"
-    echo "$as_me:$LINENO: found $as_dir/$ac_word$ac_exec_ext" >&5
-    break 2
-  fi
-done
-done
-
+  IFS="${IFS= 	}"; ac_save_ifs="$IFS"; IFS=":"
+  ac_dummy="$PATH"
+  for ac_dir in $ac_dummy; do 
+    test -z "$ac_dir" && ac_dir=.
+    if test -f $ac_dir/$ac_word; then
+      ac_cv_path_TIDY="$ac_dir/$ac_word"
+      break
+    fi
+  done
+  IFS="$ac_save_ifs"
   test -z "$ac_cv_path_TIDY" && ac_cv_path_TIDY="no"
   ;;
 esac
 fi
-TIDY=$ac_cv_path_TIDY
-
+TIDY="$ac_cv_path_TIDY"
 if test -n "$TIDY"; then
-  echo "$as_me:$LINENO: result: $TIDY" >&5
-echo "${ECHO_T}$TIDY" >&6
+  echo "$ac_t""$TIDY" 1>&6
 else
-  echo "$as_me:$LINENO: result: no" >&5
-echo "${ECHO_T}no" >&6
+  echo "$ac_t""no" 1>&6
 fi
 
 
 
 if test "$JADE" != no; then
-  echo "$as_me:$LINENO: checking xml.dcl" >&5
-echo $ECHO_N "checking xml.dcl... $ECHO_C" >&6
+  echo $ac_n "checking xml.dcl""... $ac_c" 1>&6
+echo "configure:1011: checking xml.dcl" >&5
   XML_DCL=no
   for file in \
     /usr/share/doc/jade*/pubtext/xml.dcl \
@@ -1485,14 +1020,13 @@
       break
     fi
   done
-  echo "$as_me:$LINENO: result: $XML_DCL" >&5
-echo "${ECHO_T}$XML_DCL" >&6
-
+  echo "$ac_t""$XML_DCL" 1>&6
+  
 fi
 
 
-echo "$as_me:$LINENO: checking DocBook stylesheets" >&5
-echo $ECHO_N "checking DocBook stylesheets... $ECHO_C" >&6
+echo $ac_n "checking DocBook stylesheets""... $ac_c" 1>&6
+echo "configure:1030: checking DocBook stylesheets" >&5
 DOCBOOK_STYLESHEETS=no
 for dir in \
   /usr/lib/sgml/stylesheets/docbook \
@@ -1503,15 +1037,13 @@
     break
   fi
 done
-echo "$as_me:$LINENO: result: $DOCBOOK_STYLESHEETS" >&5
-echo "${ECHO_T}$DOCBOOK_STYLESHEETS" >&6
+echo "$ac_t""$DOCBOOK_STYLESHEETS" 1>&6
 
 
 
 DOCBOOK_DTD=
-echo "$as_me:$LINENO: checking for docbook DTD" >&5
-echo $ECHO_N "checking for docbook DTD... $ECHO_C" >&6
-
+echo $ac_n "checking for docbook DTD""... $ac_c" 1>&6
+echo "configure:1047: checking for docbook DTD" >&5
 # Check whether --with-docbook-dtd or --without-docbook-dtd was given.
 if test "${with_docbook_dtd+set}" = set; then
   withval="$with_docbook_dtd"
@@ -1522,14 +1054,13 @@
              esac
 else
   DOCBOOK_DTD=/usr/lib/sgml
-fi;
-echo "$as_me:$LINENO: result: $DOCBOOK_DTD" >&5
-echo "${ECHO_T}$DOCBOOK_DTD" >&6
+fi
+
+echo "$ac_t""$DOCBOOK_DTD" 1>&6
 
 
 if test "$JADE" = no -o "$XML_DCL" = no -o "$DOCBOOK_DTD" = no; then
-  { echo "$as_me:$LINENO: WARNING: Documentation will not be built." >&5
-echo "$as_me: WARNING: Documentation will not be built." >&2;}
+  echo "configure: warning: Documentation will not be built." 1>&2
   DOCUMENTATION=no
 else
   DOCUMENTATION=yes
@@ -1538,17 +1069,14 @@
 # Do not try to build documentation unless --enable-maintainer-mode
 # was specified.  The documentation is pre-generated for releases.
 if test $DOCUMENTATION = yes && test $MAINTAINER_MODE = 0; then
-  { echo "$as_me:$LINENO: WARNING: Documentation is only built in maintainer mode." >&5
-echo "$as_me: WARNING: Documentation is only built in maintainer mode." >&2;}
+  echo "configure: warning: Documentation is only built in maintainer mode." 1>&2
   DOCUMENTATION=no
 fi
 
 # Maintainers should be building documentation.
 if test $DOCUMENTATION = no && test $MAINTAINER_MODE = 1; then
-  { echo "$as_me:$LINENO: WARNING: Documentation will not be built despite --enable-maintainer-mode." >&5
-echo "$as_me: WARNING: Documentation will not be built despite --enable-maintainer-mode." >&2;}
-  { echo "$as_me:$LINENO: WARNING: Check that Jade and Docbook have been installed." >&5
-echo "$as_me: WARNING: Check that Jade and Docbook have been installed." >&2;}
+  echo "configure: warning: Documentation will not be built despite --enable-maintainer-mode." 1>&2
+  echo "configure: warning: Check that Jade and Docbook have been installed." 1>&2
 fi
 
 if test $DOCUMENTATION = yes \
@@ -1562,886 +1090,276 @@
 
 
 
-                              ac_config_files="$ac_config_files GNUmakefile qm.spec qm/setup_path.py"
-cat >confcache <<\_ACEOF
+trap '' 1 2 15
+cat > confcache <<\EOF
 # This file is a shell script that caches the results of configure
 # tests run on this system so they can be shared between configure
-# scripts and configure runs, see configure's option --config-cache.
-# It is not useful on other systems.  If it contains results you don't
-# want to keep, you may remove or edit it.
+# scripts and configure runs.  It is not useful on other systems.
+# If it contains results you don't want to keep, you may remove or edit it.
 #
-# config.status only pays attention to the cache file if you give it
-# the --recheck option to rerun configure.
+# By default, configure uses ./config.cache as the cache file,
+# creating it if it does not exist already.  You can give configure
+# the --cache-file=FILE option to use a different cache file; that is
+# what configure does when it calls configure scripts in
+# subdirectories, so they share the cache.
+# Giving --cache-file=/dev/null disables caching, for debugging configure.
+# config.status only pays attention to the cache file if you give it the
+# --recheck option to rerun configure.
 #
-# `ac_cv_env_foo' variables (set or unset) will be overridden when
-# loading this file, other *unset* `ac_cv_foo' will be assigned the
-# following values.
-
-_ACEOF
-
+EOF
 # The following way of writing the cache mishandles newlines in values,
 # but we know of no workaround that is simple, portable, and efficient.
 # So, don't put newlines in cache variables' values.
 # Ultrix sh set writes to stderr and can't be redirected directly,
 # and sets the high bit in the cache file unless we assign to the vars.
-{
-  (set) 2>&1 |
-    case `(ac_space=' '; set | grep ac_space) 2>&1` in
-    *ac_space=\ *)
-      # `set' does not quote correctly, so add quotes (double-quote
-      # substitution turns \\\\ into \\, and sed turns \\ into \).
-      sed -n \
-        "s/'/'\\\\''/g;
-    	  s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1='\\2'/p"
-      ;;
-    *)
-      # `set' quotes correctly as required by POSIX, so do not add quotes.
-      sed -n \
-        "s/^\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\)=\\(.*\\)/\\1=\\2/p"
-      ;;
-    esac;
-} |
-  sed '
-     t clear
-     : clear
-     s/^\([^=]*\)=\(.*[{}].*\)$/test "${\1+set}" = set || &/
-     t end
-     /^ac_cv_env/!s/^\([^=]*\)=\(.*\)$/\1=${\1=\2}/
-     : end' >>confcache
-if diff $cache_file confcache >/dev/null 2>&1; then :; else
+(set) 2>&1 |
+  case `(ac_space=' '; set | grep ac_space) 2>&1` in
+  *ac_space=\ *)
+    # `set' does not quote correctly, so add quotes (double-quote substitution
+    # turns \\\\ into \\, and sed turns \\ into \).
+    sed -n \
+      -e "s/'/'\\\\''/g" \
+      -e "s/^\\([a-zA-Z0-9_]*_cv_[a-zA-Z0-9_]*\\)=\\(.*\\)/\\1=\${\\1='\\2'}/p"
+    ;;
+  *)
+    # `set' quotes correctly as required by POSIX, so do not add quotes.
+    sed -n -e 's/^\([a-zA-Z0-9_]*_cv_[a-zA-Z0-9_]*\)=\(.*\)/\1=${\1=\2}/p'
+    ;;
+  esac >> confcache
+if cmp -s $cache_file confcache; then
+  :
+else
   if test -w $cache_file; then
-    test "x$cache_file" != "x/dev/null" && echo "updating cache $cache_file"
-    cat confcache >$cache_file
+    echo "updating cache $cache_file"
+    cat confcache > $cache_file
   else
     echo "not updating unwritable cache $cache_file"
   fi
 fi
 rm -f confcache
 
+trap 'rm -fr conftest* confdefs* core core.* *.core $ac_clean_files; exit 1' 1 2 15
+
 test "x$prefix" = xNONE && prefix=$ac_default_prefix
 # Let make expand exec_prefix.
 test "x$exec_prefix" = xNONE && exec_prefix='${prefix}'
 
-# VPATH may cause trouble with some makes, so we remove $(srcdir),
-# ${srcdir} and @srcdir@ from VPATH if srcdir is ".", strip leading and
-# trailing colons and then remove the whole line if VPATH becomes empty
-# (actually we leave an empty line to preserve line numbers).
+# Any assignment to VPATH causes Sun make to only execute
+# the first set of double-colon rules, so remove it if not needed.
+# If there is a colon in the path, we need to keep it.
 if test "x$srcdir" = x.; then
-  ac_vpsub='/^[ 	]*VPATH[ 	]*=/{
-s/:*\$(srcdir):*/:/;
-s/:*\${srcdir}:*/:/;
-s/:*@srcdir@:*/:/;
-s/^\([^=]*=[ 	]*\):*/\1/;
-s/:*$//;
-s/^[^=]*=[ 	]*$//;
-}'
+  ac_vpsub='/^[ 	]*VPATH[ 	]*=[^:]*$/d'
 fi
 
+trap 'rm -f $CONFIG_STATUS conftest*; exit 1' 1 2 15
+
 # Transform confdefs.h into DEFS.
 # Protect against shell expansion while executing Makefile rules.
 # Protect against Makefile macro expansion.
-#
-# If the first sed substitution is executed (which looks for macros that
-# take arguments), then we branch to the quote section.  Otherwise,
-# look for a macro that doesn't take arguments.
-cat >confdef2opt.sed <<\_ACEOF
-t clear
-: clear
-s,^[ 	]*#[ 	]*define[ 	][ 	]*\([^ 	(][^ 	(]*([^)]*)\)[ 	]*\(.*\),-D\1=\2,g
-t quote
-s,^[ 	]*#[ 	]*define[ 	][ 	]*\([^ 	][^ 	]*\)[ 	]*\(.*\),-D\1=\2,g
-t quote
-d
-: quote
-s,[ 	`~#$^&*(){}\\|;'"<>?],\\&,g
-s,\[,\\&,g
-s,\],\\&,g
-s,\$,$$,g
-p
-_ACEOF
-# We use echo to avoid assuming a particular line-breaking character.
-# The extra dot is to prevent the shell from consuming trailing
-# line-breaks from the sub-command output.  A line-break within
-# single-quotes doesn't work because, if this script is created in a
-# platform that uses two characters for line-breaks (e.g., DOS), tr
-# would break.
-ac_LF_and_DOT=`echo; echo .`
-DEFS=`sed -n -f confdef2opt.sed confdefs.h | tr "$ac_LF_and_DOT" ' .'`
-rm -f confdef2opt.sed
-
-
-ac_libobjs=
-ac_ltlibobjs=
-for ac_i in : $LIBOBJS; do test "x$ac_i" = x: && continue
-  # 1. Remove the extension, and $U if already installed.
-  ac_i=`echo "$ac_i" |
-         sed 's/\$U\././;s/\.o$//;s/\.obj$//'`
-  # 2. Add them.
-  ac_libobjs="$ac_libobjs $ac_i\$U.$ac_objext"
-  ac_ltlibobjs="$ac_ltlibobjs $ac_i"'$U.lo'
-done
-LIBOBJS=$ac_libobjs
-
-LTLIBOBJS=$ac_ltlibobjs
-
+cat > conftest.defs <<\EOF
+s%#define \([A-Za-z_][A-Za-z0-9_]*\) *\(.*\)%-D\1=\2%g
+s%[ 	`~#$^&*(){}\\|;'"<>?]%\\&%g
+s%\[%\\&%g
+s%\]%\\&%g
+s%\$%$$%g
+EOF
+DEFS=`sed -f conftest.defs confdefs.h | tr '\012' ' '`
+rm -f conftest.defs
 
 
+# Without the "./", some shells look in PATH for config.status.
 : ${CONFIG_STATUS=./config.status}
-ac_clean_files_save=$ac_clean_files
-ac_clean_files="$ac_clean_files $CONFIG_STATUS"
-{ echo "$as_me:$LINENO: creating $CONFIG_STATUS" >&5
-echo "$as_me: creating $CONFIG_STATUS" >&6;}
-cat >$CONFIG_STATUS <<_ACEOF
-#! $SHELL
-# Generated by $as_me.
+
+echo creating $CONFIG_STATUS
+rm -f $CONFIG_STATUS
+cat > $CONFIG_STATUS <<EOF
+#! /bin/sh
+# Generated automatically by configure.
 # Run this file to recreate the current configuration.
+# This directory was configured as follows,
+# on host `(hostname || uname -n) 2>/dev/null | sed 1q`:
+#
+# $0 $ac_configure_args
+#
 # Compiler output produced by configure, useful for debugging
-# configure, is in config.log if it exists.
-
-debug=false
-ac_cs_recheck=false
-ac_cs_silent=false
-SHELL=\${CONFIG_SHELL-$SHELL}
-_ACEOF
-
-cat >>$CONFIG_STATUS <<\_ACEOF
-## --------------------- ##
-## M4sh Initialization.  ##
-## --------------------- ##
-
-# Be Bourne compatible
-if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
-  emulate sh
-  NULLCMD=:
-  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
-  # is contrary to our usage.  Disable this feature.
-  alias -g '${1+"$@"}'='"$@"'
-elif test -n "${BASH_VERSION+set}" && (set -o posix) >/dev/null 2>&1; then
-  set -o posix
-fi
-
-# Support unset when possible.
-if (FOO=FOO; unset FOO) >/dev/null 2>&1; then
-  as_unset=unset
-else
-  as_unset=false
-fi
-
+# configure, is in ./config.log if it exists.
 
-# Work around bugs in pre-3.0 UWIN ksh.
-$as_unset ENV MAIL MAILPATH
-PS1='$ '
-PS2='> '
-PS4='+ '
-
-# NLS nuisances.
-for as_var in \
-  LANG LANGUAGE LC_ADDRESS LC_ALL LC_COLLATE LC_CTYPE LC_IDENTIFICATION \
-  LC_MEASUREMENT LC_MESSAGES LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER \
-  LC_TELEPHONE LC_TIME
+ac_cs_usage="Usage: $CONFIG_STATUS [--recheck] [--version] [--help]"
+for ac_option
 do
-  if (set +x; test -n "`(eval $as_var=C; export $as_var) 2>&1`"); then
-    eval $as_var=C; export $as_var
-  else
-    $as_unset $as_var
-  fi
+  case "\$ac_option" in
+  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
+    echo "running \${CONFIG_SHELL-/bin/sh} $0 $ac_configure_args --no-create --no-recursion"
+    exec \${CONFIG_SHELL-/bin/sh} $0 $ac_configure_args --no-create --no-recursion ;;
+  -version | --version | --versio | --versi | --vers | --ver | --ve | --v)
+    echo "$CONFIG_STATUS generated by autoconf version 2.13"
+    exit 0 ;;
+  -help | --help | --hel | --he | --h)
+    echo "\$ac_cs_usage"; exit 0 ;;
+  *) echo "\$ac_cs_usage"; exit 1 ;;
+  esac
 done
 
-# Required to use basename.
-if expr a : '\(a\)' >/dev/null 2>&1; then
-  as_expr=expr
-else
-  as_expr=false
-fi
-
-if (basename /) >/dev/null 2>&1 && test "X`basename / 2>&1`" = "X/"; then
-  as_basename=basename
-else
-  as_basename=false
-fi
+ac_given_srcdir=$srcdir
 
+trap 'rm -fr `echo "GNUmakefile
+  qm.spec
+  qm/version.py
+" | sed "s/:[^ ]*//g"` conftest*; exit 1' 1 2 15
+EOF
+cat >> $CONFIG_STATUS <<EOF
 
-# Name of the executable.
-as_me=`$as_basename "$0" ||
-$as_expr X/"$0" : '.*/\([^/][^/]*\)/*$' \| \
-	 X"$0" : 'X\(//\)$' \| \
-	 X"$0" : 'X\(/\)$' \| \
-	 .     : '\(.\)' 2>/dev/null ||
-echo X/"$0" |
-    sed '/^.*\/\([^/][^/]*\)\/*$/{ s//\1/; q; }
-  	  /^X\/\(\/\/\)$/{ s//\1/; q; }
-  	  /^X\/\(\/\).*/{ s//\1/; q; }
-  	  s/.*/./; q'`
-
-
-# PATH needs CR, and LINENO needs CR and PATH.
-# Avoid depending upon Character Ranges.
-as_cr_letters='abcdefghijklmnopqrstuvwxyz'
-as_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
-as_cr_Letters=$as_cr_letters$as_cr_LETTERS
-as_cr_digits='0123456789'
-as_cr_alnum=$as_cr_Letters$as_cr_digits
-
-# The user is always right.
-if test "${PATH_SEPARATOR+set}" != set; then
-  echo "#! /bin/sh" >conf$$.sh
-  echo  "exit 0"   >>conf$$.sh
-  chmod +x conf$$.sh
-  if (PATH="/nonexistent;."; conf$$.sh) >/dev/null 2>&1; then
-    PATH_SEPARATOR=';'
-  else
-    PATH_SEPARATOR=:
-  fi
-  rm -f conf$$.sh
-fi
+# Protect against being on the right side of a sed subst in config.status.
+sed 's/%@/@@/; s/@%/@@/; s/%g\$/@g/; /@g\$/s/[\\\\&%]/\\\\&/g;
+ s/@@/%@/; s/@@/@%/; s/@g\$/%g/' > conftest.subs <<\\CEOF
+$ac_vpsub
+$extrasub
+s%@SHELL@%$SHELL%g
+s%@CFLAGS@%$CFLAGS%g
+s%@CPPFLAGS@%$CPPFLAGS%g
+s%@CXXFLAGS@%$CXXFLAGS%g
+s%@FFLAGS@%$FFLAGS%g
+s%@DEFS@%$DEFS%g
+s%@LDFLAGS@%$LDFLAGS%g
+s%@LIBS@%$LIBS%g
+s%@exec_prefix@%$exec_prefix%g
+s%@prefix@%$prefix%g
+s%@program_transform_name@%$program_transform_name%g
+s%@bindir@%$bindir%g
+s%@sbindir@%$sbindir%g
+s%@libexecdir@%$libexecdir%g
+s%@datadir@%$datadir%g
+s%@sysconfdir@%$sysconfdir%g
+s%@sharedstatedir@%$sharedstatedir%g
+s%@localstatedir@%$localstatedir%g
+s%@libdir@%$libdir%g
+s%@includedir@%$includedir%g
+s%@oldincludedir@%$oldincludedir%g
+s%@infodir@%$infodir%g
+s%@mandir@%$mandir%g
+s%@MAINTAINER_MODE@%$MAINTAINER_MODE%g
+s%@QM_MAJOR_VER@%$QM_MAJOR_VER%g
+s%@QM_MINOR_VER@%$QM_MINOR_VER%g
+s%@QM_RELEASE_VER@%$QM_RELEASE_VER%g
+s%@QM_VERSION@%$QM_VERSION%g
+s%@CC@%$CC%g
+s%@PYTHON@%$PYTHON%g
+s%@PYTHON_PLATFORM@%$PYTHON_PLATFORM%g
+s%@HAPPYDOC@%$HAPPYDOC%g
+s%@JADE@%$JADE%g
+s%@TIDY@%$TIDY%g
+s%@XML_DCL@%$XML_DCL%g
+s%@DOCBOOK_STYLESHEETS@%$DOCBOOK_STYLESHEETS%g
+s%@DOCBOOK_DTD@%$DOCBOOK_DTD%g
+s%@DOCUMENTATION@%$DOCUMENTATION%g
+s%@INSTALL_DOCUMENTATION@%$INSTALL_DOCUMENTATION%g
 
+CEOF
+EOF
 
-  as_lineno_1=$LINENO
-  as_lineno_2=$LINENO
-  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
-  test "x$as_lineno_1" != "x$as_lineno_2" &&
-  test "x$as_lineno_3"  = "x$as_lineno_2"  || {
-  # Find who we are.  Look in the path if we contain no path at all
-  # relative or not.
-  case $0 in
-    *[\\/]* ) as_myself=$0 ;;
-    *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in $PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-  test -r "$as_dir/$0" && as_myself=$as_dir/$0 && break
-done
+cat >> $CONFIG_STATUS <<\EOF
 
-       ;;
-  esac
-  # We did not find ourselves, most probably we were run as `sh COMMAND'
-  # in which case we are not to be found in the path.
-  if test "x$as_myself" = x; then
-    as_myself=$0
-  fi
-  if test ! -f "$as_myself"; then
-    { { echo "$as_me:$LINENO: error: cannot find myself; rerun with an absolute path" >&5
-echo "$as_me: error: cannot find myself; rerun with an absolute path" >&2;}
-   { (exit 1); exit 1; }; }
+# Split the substitutions into bite-sized pieces for seds with
+# small command number limits, like on Digital OSF/1 and HP-UX.
+ac_max_sed_cmds=90 # Maximum number of lines to put in a sed script.
+ac_file=1 # Number of current file.
+ac_beg=1 # First line for current file.
+ac_end=$ac_max_sed_cmds # Line after last line for current file.
+ac_more_lines=:
+ac_sed_cmds=""
+while $ac_more_lines; do
+  if test $ac_beg -gt 1; then
+    sed "1,${ac_beg}d; ${ac_end}q" conftest.subs > conftest.s$ac_file
+  else
+    sed "${ac_end}q" conftest.subs > conftest.s$ac_file
   fi
-  case $CONFIG_SHELL in
-  '')
-    as_save_IFS=$IFS; IFS=$PATH_SEPARATOR
-for as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH
-do
-  IFS=$as_save_IFS
-  test -z "$as_dir" && as_dir=.
-  for as_base in sh bash ksh sh5; do
-	 case $as_dir in
-	 /*)
-	   if ("$as_dir/$as_base" -c '
-  as_lineno_1=$LINENO
-  as_lineno_2=$LINENO
-  as_lineno_3=`(expr $as_lineno_1 + 1) 2>/dev/null`
-  test "x$as_lineno_1" != "x$as_lineno_2" &&
-  test "x$as_lineno_3"  = "x$as_lineno_2" ') 2>/dev/null; then
-	     $as_unset BASH_ENV || test "${BASH_ENV+set}" != set || { BASH_ENV=; export BASH_ENV; }
-	     $as_unset ENV || test "${ENV+set}" != set || { ENV=; export ENV; }
-	     CONFIG_SHELL=$as_dir/$as_base
-	     export CONFIG_SHELL
-	     exec "$CONFIG_SHELL" "$0" ${1+"$@"}
-	   fi;;
-	 esac
-       done
-done
-;;
-  esac
-
-  # Create $as_me.lineno as a copy of $as_myself, but with $LINENO
-  # uniformly replaced by the line number.  The first 'sed' inserts a
-  # line-number line before each line; the second 'sed' does the real
-  # work.  The second script uses 'N' to pair each line-number line
-  # with the numbered line, and appends trailing '-' during
-  # substitution so that $LINENO is not a special case at line end.
-  # (Raja R Harinath suggested sed '=', and Paul Eggert wrote the
-  # second 'sed' script.  Blame Lee E. McMahon for sed's syntax.  :-)
-  sed '=' <$as_myself |
-    sed '
-      N
-      s,$,-,
-      : loop
-      s,^\(['$as_cr_digits']*\)\(.*\)[$]LINENO\([^'$as_cr_alnum'_]\),\1\2\1\3,
-      t loop
-      s,-$,,
-      s,^['$as_cr_digits']*\n,,
-    ' >$as_me.lineno &&
-  chmod +x $as_me.lineno ||
-    { { echo "$as_me:$LINENO: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&5
-echo "$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell" >&2;}
-   { (exit 1); exit 1; }; }
-
-  # Don't try to exec as it changes $[0], causing all sort of problems
-  # (the dirname of $[0] is not the place where we might find the
-  # original and so on.  Autoconf is especially sensible to this).
-  . ./$as_me.lineno
-  # Exit status is that of the last command.
-  exit
-}
-
-
-case `echo "testing\c"; echo 1,2,3`,`echo -n testing; echo 1,2,3` in
-  *c*,-n*) ECHO_N= ECHO_C='
-' ECHO_T='	' ;;
-  *c*,*  ) ECHO_N=-n ECHO_C= ECHO_T= ;;
-  *)       ECHO_N= ECHO_C='\c' ECHO_T= ;;
-esac
-
-if expr a : '\(a\)' >/dev/null 2>&1; then
-  as_expr=expr
-else
-  as_expr=false
-fi
-
-rm -f conf$$ conf$$.exe conf$$.file
-echo >conf$$.file
-if ln -s conf$$.file conf$$ 2>/dev/null; then
-  # We could just check for DJGPP; but this test a) works b) is more generic
-  # and c) will remain valid once DJGPP supports symlinks (DJGPP 2.04).
-  if test -f conf$$.exe; then
-    # Don't use ln at all; we don't have any links
-    as_ln_s='cp -p'
+  if test ! -s conftest.s$ac_file; then
+    ac_more_lines=false
+    rm -f conftest.s$ac_file
   else
-    as_ln_s='ln -s'
+    if test -z "$ac_sed_cmds"; then
+      ac_sed_cmds="sed -f conftest.s$ac_file"
+    else
+      ac_sed_cmds="$ac_sed_cmds | sed -f conftest.s$ac_file"
+    fi
+    ac_file=`expr $ac_file + 1`
+    ac_beg=$ac_end
+    ac_end=`expr $ac_end + $ac_max_sed_cmds`
   fi
-elif ln conf$$.file conf$$ 2>/dev/null; then
-  as_ln_s=ln
-else
-  as_ln_s='cp -p'
-fi
-rm -f conf$$ conf$$.exe conf$$.file
-
-if mkdir -p . 2>/dev/null; then
-  as_mkdir_p=:
-else
-  as_mkdir_p=false
-fi
-
-as_executable_p="test -f"
-
-# Sed expression to map a string onto a valid CPP name.
-as_tr_cpp="sed y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g"
-
-# Sed expression to map a string onto a valid variable name.
-as_tr_sh="sed y%*+%pp%;s%[^_$as_cr_alnum]%_%g"
-
-
-# IFS
-# We need space, tab and new line, in precisely that order.
-as_nl='
-'
-IFS=" 	$as_nl"
-
-# CDPATH.
-$as_unset CDPATH
-
-exec 6>&1
-
-# Open the log real soon, to keep \$[0] and so on meaningful, and to
-# report actual input values of CONFIG_FILES etc. instead of their
-# values after options handling.  Logging --version etc. is OK.
-exec 5>>config.log
-{
-  echo
-  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX
-## Running $as_me. ##
-_ASBOX
-} >&5
-cat >&5 <<_CSEOF
-
-This file was extended by $as_me, which was
-generated by GNU Autoconf 2.57.  Invocation command line was
-
-  CONFIG_FILES    = $CONFIG_FILES
-  CONFIG_HEADERS  = $CONFIG_HEADERS
-  CONFIG_LINKS    = $CONFIG_LINKS
-  CONFIG_COMMANDS = $CONFIG_COMMANDS
-  $ $0 $@
-
-_CSEOF
-echo "on `(hostname || uname -n) 2>/dev/null | sed 1q`" >&5
-echo >&5
-_ACEOF
-
-# Files that config.status was made for.
-if test -n "$ac_config_files"; then
-  echo "config_files=\"$ac_config_files\"" >>$CONFIG_STATUS
-fi
-
-if test -n "$ac_config_headers"; then
-  echo "config_headers=\"$ac_config_headers\"" >>$CONFIG_STATUS
-fi
-
-if test -n "$ac_config_links"; then
-  echo "config_links=\"$ac_config_links\"" >>$CONFIG_STATUS
-fi
-
-if test -n "$ac_config_commands"; then
-  echo "config_commands=\"$ac_config_commands\"" >>$CONFIG_STATUS
-fi
-
-cat >>$CONFIG_STATUS <<\_ACEOF
-
-ac_cs_usage="\
-\`$as_me' instantiates files from templates according to the
-current configuration.
-
-Usage: $0 [OPTIONS] [FILE]...
-
-  -h, --help       print this help, then exit
-  -V, --version    print version number, then exit
-  -q, --quiet      do not print progress messages
-  -d, --debug      don't remove temporary files
-      --recheck    update $as_me by reconfiguring in the same conditions
-  --file=FILE[:TEMPLATE]
-                   instantiate the configuration file FILE
-
-Configuration files:
-$config_files
-
-Report bugs to <bug-autoconf at gnu.org>."
-_ACEOF
-
-cat >>$CONFIG_STATUS <<_ACEOF
-ac_cs_version="\\
-config.status
-configured by $0, generated by GNU Autoconf 2.57,
-  with options \\"`echo "$ac_configure_args" | sed 's/[\\""\`\$]/\\\\&/g'`\\"
-
-Copyright 1992, 1993, 1994, 1995, 1996, 1998, 1999, 2000, 2001
-Free Software Foundation, Inc.
-This config.status script is free software; the Free Software Foundation
-gives unlimited permission to copy, distribute and modify it."
-srcdir=$srcdir
-_ACEOF
-
-cat >>$CONFIG_STATUS <<\_ACEOF
-# If no file are specified by the user, then we need to provide default
-# value.  By we need to know if files were specified by the user.
-ac_need_defaults=:
-while test $# != 0
-do
-  case $1 in
-  --*=*)
-    ac_option=`expr "x$1" : 'x\([^=]*\)='`
-    ac_optarg=`expr "x$1" : 'x[^=]*=\(.*\)'`
-    ac_shift=:
-    ;;
-  -*)
-    ac_option=$1
-    ac_optarg=$2
-    ac_shift=shift
-    ;;
-  *) # This is not an option, so the user has probably given explicit
-     # arguments.
-     ac_option=$1
-     ac_need_defaults=false;;
-  esac
-
-  case $ac_option in
-  # Handling of the options.
-_ACEOF
-cat >>$CONFIG_STATUS <<\_ACEOF
-  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)
-    ac_cs_recheck=: ;;
-  --version | --vers* | -V )
-    echo "$ac_cs_version"; exit 0 ;;
-  --he | --h)
-    # Conflict between --help and --header
-    { { echo "$as_me:$LINENO: error: ambiguous option: $1
-Try \`$0 --help' for more information." >&5
-echo "$as_me: error: ambiguous option: $1
-Try \`$0 --help' for more information." >&2;}
-   { (exit 1); exit 1; }; };;
-  --help | --hel | -h )
-    echo "$ac_cs_usage"; exit 0 ;;
-  --debug | --d* | -d )
-    debug=: ;;
-  --file | --fil | --fi | --f )
-    $ac_shift
-    CONFIG_FILES="$CONFIG_FILES $ac_optarg"
-    ac_need_defaults=false;;
-  --header | --heade | --head | --hea )
-    $ac_shift
-    CONFIG_HEADERS="$CONFIG_HEADERS $ac_optarg"
-    ac_need_defaults=false;;
-  -q | -quiet | --quiet | --quie | --qui | --qu | --q \
-  | -silent | --silent | --silen | --sile | --sil | --si | --s)
-    ac_cs_silent=: ;;
-
-  # This is an error.
-  -*) { { echo "$as_me:$LINENO: error: unrecognized option: $1
-Try \`$0 --help' for more information." >&5
-echo "$as_me: error: unrecognized option: $1
-Try \`$0 --help' for more information." >&2;}
-   { (exit 1); exit 1; }; } ;;
-
-  *) ac_config_targets="$ac_config_targets $1" ;;
-
-  esac
-  shift
 done
-
-ac_configure_extra_args=
-
-if $ac_cs_silent; then
-  exec 6>/dev/null
-  ac_configure_extra_args="$ac_configure_extra_args --silent"
+if test -z "$ac_sed_cmds"; then
+  ac_sed_cmds=cat
 fi
+EOF
 
-_ACEOF
-cat >>$CONFIG_STATUS <<_ACEOF
-if \$ac_cs_recheck; then
-  echo "running $SHELL $0 " $ac_configure_args \$ac_configure_extra_args " --no-create --no-recursion" >&6
-  exec $SHELL $0 $ac_configure_args \$ac_configure_extra_args --no-create --no-recursion
-fi
-
-_ACEOF
-
-
-
-
+cat >> $CONFIG_STATUS <<EOF
 
-cat >>$CONFIG_STATUS <<\_ACEOF
-for ac_config_target in $ac_config_targets
-do
-  case "$ac_config_target" in
-  # Handling of arguments.
-  "GNUmakefile" ) CONFIG_FILES="$CONFIG_FILES GNUmakefile" ;;
-  "qm.spec" ) CONFIG_FILES="$CONFIG_FILES qm.spec" ;;
-  "qm/setup_path.py" ) CONFIG_FILES="$CONFIG_FILES qm/setup_path.py" ;;
-  *) { { echo "$as_me:$LINENO: error: invalid argument: $ac_config_target" >&5
-echo "$as_me: error: invalid argument: $ac_config_target" >&2;}
-   { (exit 1); exit 1; }; };;
+CONFIG_FILES=\${CONFIG_FILES-"GNUmakefile
+  qm.spec
+  qm/version.py
+"}
+EOF
+cat >> $CONFIG_STATUS <<\EOF
+for ac_file in .. $CONFIG_FILES; do if test "x$ac_file" != x..; then
+  # Support "outfile[:infile[:infile...]]", defaulting infile="outfile.in".
+  case "$ac_file" in
+  *:*) ac_file_in=`echo "$ac_file"|sed 's%[^:]*:%%'`
+       ac_file=`echo "$ac_file"|sed 's%:.*%%'` ;;
+  *) ac_file_in="${ac_file}.in" ;;
   esac
-done
-
-# If the user did not use the arguments to specify the items to instantiate,
-# then the envvar interface is used.  Set only those that are not.
-# We use the long form for the default assignment because of an extremely
-# bizarre bug on SunOS 4.1.3.
-if $ac_need_defaults; then
-  test "${CONFIG_FILES+set}" = set || CONFIG_FILES=$config_files
-fi
-
-# Have a temporary directory for convenience.  Make it in the build tree
-# simply because there is no reason to put it here, and in addition,
-# creating and moving files from /tmp can sometimes cause problems.
-# Create a temporary directory, and hook for its removal unless debugging.
-$debug ||
-{
-  trap 'exit_status=$?; rm -rf $tmp && exit $exit_status' 0
-  trap '{ (exit 1); exit 1; }' 1 2 13 15
-}
-
-# Create a (secure) tmp directory for tmp files.
-
-{
-  tmp=`(umask 077 && mktemp -d -q "./confstatXXXXXX") 2>/dev/null` &&
-  test -n "$tmp" && test -d "$tmp"
-}  ||
-{
-  tmp=./confstat$$-$RANDOM
-  (umask 077 && mkdir $tmp)
-} ||
-{
-   echo "$me: cannot create a temporary directory in ." >&2
-   { (exit 1); exit 1; }
-}
-
-_ACEOF
-
-cat >>$CONFIG_STATUS <<_ACEOF
-
-#
-# CONFIG_FILES section.
-#
-
-# No need to generate the scripts if there are no CONFIG_FILES.
-# This happens for instance when ./config.status config.h
-if test -n "\$CONFIG_FILES"; then
-  # Protect against being on the right side of a sed subst in config.status.
-  sed 's/,@/@@/; s/@,/@@/; s/,;t t\$/@;t t/; /@;t t\$/s/[\\\\&,]/\\\\&/g;
-   s/@@/,@/; s/@@/@,/; s/@;t t\$/,;t t/' >\$tmp/subs.sed <<\\CEOF
-s, at SHELL@,$SHELL,;t t
-s, at PATH_SEPARATOR@,$PATH_SEPARATOR,;t t
-s, at PACKAGE_NAME@,$PACKAGE_NAME,;t t
-s, at PACKAGE_TARNAME@,$PACKAGE_TARNAME,;t t
-s, at PACKAGE_VERSION@,$PACKAGE_VERSION,;t t
-s, at PACKAGE_STRING@,$PACKAGE_STRING,;t t
-s, at PACKAGE_BUGREPORT@,$PACKAGE_BUGREPORT,;t t
-s, at exec_prefix@,$exec_prefix,;t t
-s, at prefix@,$prefix,;t t
-s, at program_transform_name@,$program_transform_name,;t t
-s, at bindir@,$bindir,;t t
-s, at sbindir@,$sbindir,;t t
-s, at libexecdir@,$libexecdir,;t t
-s, at datadir@,$datadir,;t t
-s, at sysconfdir@,$sysconfdir,;t t
-s, at sharedstatedir@,$sharedstatedir,;t t
-s, at localstatedir@,$localstatedir,;t t
-s, at libdir@,$libdir,;t t
-s, at includedir@,$includedir,;t t
-s, at oldincludedir@,$oldincludedir,;t t
-s, at infodir@,$infodir,;t t
-s, at mandir@,$mandir,;t t
-s, at build_alias@,$build_alias,;t t
-s, at host_alias@,$host_alias,;t t
-s, at target_alias@,$target_alias,;t t
-s, at DEFS@,$DEFS,;t t
-s, at ECHO_C@,$ECHO_C,;t t
-s, at ECHO_N@,$ECHO_N,;t t
-s, at ECHO_T@,$ECHO_T,;t t
-s, at LIBS@,$LIBS,;t t
-s, at MAINTAINER_MODE@,$MAINTAINER_MODE,;t t
-s, at QM_MAJOR_VER@,$QM_MAJOR_VER,;t t
-s, at QM_MINOR_VER@,$QM_MINOR_VER,;t t
-s, at QM_RELEASE_VER@,$QM_RELEASE_VER,;t t
-s, at QM_VERSION@,$QM_VERSION,;t t
-s, at PYTHON@,$PYTHON,;t t
-s, at PYTHON_PLATFORM@,$PYTHON_PLATFORM,;t t
-s, at HAPPYDOC@,$HAPPYDOC,;t t
-s, at JADE@,$JADE,;t t
-s, at TIDY@,$TIDY,;t t
-s, at XML_DCL@,$XML_DCL,;t t
-s, at DOCBOOK_STYLESHEETS@,$DOCBOOK_STYLESHEETS,;t t
-s, at DOCBOOK_DTD@,$DOCBOOK_DTD,;t t
-s, at DOCUMENTATION@,$DOCUMENTATION,;t t
-s, at INSTALL_DOCUMENTATION@,$INSTALL_DOCUMENTATION,;t t
-s, at LIBOBJS@,$LIBOBJS,;t t
-s, at LTLIBOBJS@,$LTLIBOBJS,;t t
-CEOF
 
-_ACEOF
+  # Adjust a relative srcdir, top_srcdir, and INSTALL for subdirectories.
 
-  cat >>$CONFIG_STATUS <<\_ACEOF
-  # Split the substitutions into bite-sized pieces for seds with
-  # small command number limits, like on Digital OSF/1 and HP-UX.
-  ac_max_sed_lines=48
-  ac_sed_frag=1 # Number of current file.
-  ac_beg=1 # First line for current file.
-  ac_end=$ac_max_sed_lines # Line after last line for current file.
-  ac_more_lines=:
-  ac_sed_cmds=
-  while $ac_more_lines; do
-    if test $ac_beg -gt 1; then
-      sed "1,${ac_beg}d; ${ac_end}q" $tmp/subs.sed >$tmp/subs.frag
-    else
-      sed "${ac_end}q" $tmp/subs.sed >$tmp/subs.frag
-    fi
-    if test ! -s $tmp/subs.frag; then
-      ac_more_lines=false
-    else
-      # The purpose of the label and of the branching condition is to
-      # speed up the sed processing (if there are no `@' at all, there
-      # is no need to browse any of the substitutions).
-      # These are the two extra sed commands mentioned above.
-      (echo ':t
-  /@[a-zA-Z_][a-zA-Z_0-9]*@/!b' && cat $tmp/subs.frag) >$tmp/subs-$ac_sed_frag.sed
-      if test -z "$ac_sed_cmds"; then
-  	ac_sed_cmds="sed -f $tmp/subs-$ac_sed_frag.sed"
-      else
-  	ac_sed_cmds="$ac_sed_cmds | sed -f $tmp/subs-$ac_sed_frag.sed"
-      fi
-      ac_sed_frag=`expr $ac_sed_frag + 1`
-      ac_beg=$ac_end
-      ac_end=`expr $ac_end + $ac_max_sed_lines`
-    fi
-  done
-  if test -z "$ac_sed_cmds"; then
-    ac_sed_cmds=cat
+  # Remove last slash and all that follows it.  Not all systems have dirname.
+  ac_dir=`echo $ac_file|sed 's%/[^/][^/]*$%%'`
+  if test "$ac_dir" != "$ac_file" && test "$ac_dir" != .; then
+    # The file is in a subdirectory.
+    test ! -d "$ac_dir" && mkdir "$ac_dir"
+    ac_dir_suffix="/`echo $ac_dir|sed 's%^\./%%'`"
+    # A "../" for each directory in $ac_dir_suffix.
+    ac_dots=`echo $ac_dir_suffix|sed 's%/[^/]*%../%g'`
+  else
+    ac_dir_suffix= ac_dots=
   fi
-fi # test -n "$CONFIG_FILES"
 
-_ACEOF
-cat >>$CONFIG_STATUS <<\_ACEOF
-for ac_file in : $CONFIG_FILES; do test "x$ac_file" = x: && continue
-  # Support "outfile[:infile[:infile...]]", defaulting infile="outfile.in".
-  case $ac_file in
-  - | *:- | *:-:* ) # input from stdin
-        cat >$tmp/stdin
-        ac_file_in=`echo "$ac_file" | sed 's,[^:]*:,,'`
-        ac_file=`echo "$ac_file" | sed 's,:.*,,'` ;;
-  *:* ) ac_file_in=`echo "$ac_file" | sed 's,[^:]*:,,'`
-        ac_file=`echo "$ac_file" | sed 's,:.*,,'` ;;
-  * )   ac_file_in=$ac_file.in ;;
-  esac
-
-  # Compute @srcdir@, @top_srcdir@, and @INSTALL@ for subdirectories.
-  ac_dir=`(dirname "$ac_file") 2>/dev/null ||
-$as_expr X"$ac_file" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
-         X"$ac_file" : 'X\(//\)[^/]' \| \
-         X"$ac_file" : 'X\(//\)$' \| \
-         X"$ac_file" : 'X\(/\)' \| \
-         .     : '\(.\)' 2>/dev/null ||
-echo X"$ac_file" |
-    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{ s//\1/; q; }
-  	  /^X\(\/\/\)[^/].*/{ s//\1/; q; }
-  	  /^X\(\/\/\)$/{ s//\1/; q; }
-  	  /^X\(\/\).*/{ s//\1/; q; }
-  	  s/.*/./; q'`
-  { if $as_mkdir_p; then
-    mkdir -p "$ac_dir"
-  else
-    as_dir="$ac_dir"
-    as_dirs=
-    while test ! -d "$as_dir"; do
-      as_dirs="$as_dir $as_dirs"
-      as_dir=`(dirname "$as_dir") 2>/dev/null ||
-$as_expr X"$as_dir" : 'X\(.*[^/]\)//*[^/][^/]*/*$' \| \
-         X"$as_dir" : 'X\(//\)[^/]' \| \
-         X"$as_dir" : 'X\(//\)$' \| \
-         X"$as_dir" : 'X\(/\)' \| \
-         .     : '\(.\)' 2>/dev/null ||
-echo X"$as_dir" |
-    sed '/^X\(.*[^/]\)\/\/*[^/][^/]*\/*$/{ s//\1/; q; }
-  	  /^X\(\/\/\)[^/].*/{ s//\1/; q; }
-  	  /^X\(\/\/\)$/{ s//\1/; q; }
-  	  /^X\(\/\).*/{ s//\1/; q; }
-  	  s/.*/./; q'`
-    done
-    test ! -n "$as_dirs" || mkdir $as_dirs
-  fi || { { echo "$as_me:$LINENO: error: cannot create directory \"$ac_dir\"" >&5
-echo "$as_me: error: cannot create directory \"$ac_dir\"" >&2;}
-   { (exit 1); exit 1; }; }; }
-
-  ac_builddir=.
-
-if test "$ac_dir" != .; then
-  ac_dir_suffix=/`echo "$ac_dir" | sed 's,^\.[\\/],,'`
-  # A "../" for each directory in $ac_dir_suffix.
-  ac_top_builddir=`echo "$ac_dir_suffix" | sed 's,/[^\\/]*,../,g'`
-else
-  ac_dir_suffix= ac_top_builddir=
-fi
-
-case $srcdir in
-  .)  # No --srcdir option.  We are building in place.
-    ac_srcdir=.
-    if test -z "$ac_top_builddir"; then
-       ac_top_srcdir=.
-    else
-       ac_top_srcdir=`echo $ac_top_builddir | sed 's,/$,,'`
-    fi ;;
-  [\\/]* | ?:[\\/]* )  # Absolute path.
-    ac_srcdir=$srcdir$ac_dir_suffix;
-    ac_top_srcdir=$srcdir ;;
+  case "$ac_given_srcdir" in
+  .)  srcdir=.
+      if test -z "$ac_dots"; then top_srcdir=.
+      else top_srcdir=`echo $ac_dots|sed 's%/$%%'`; fi ;;
+  /*) srcdir="$ac_given_srcdir$ac_dir_suffix"; top_srcdir="$ac_given_srcdir" ;;
   *) # Relative path.
-    ac_srcdir=$ac_top_builddir$srcdir$ac_dir_suffix
-    ac_top_srcdir=$ac_top_builddir$srcdir ;;
-esac
-# Don't blindly perform a `cd "$ac_dir"/$ac_foo && pwd` since $ac_foo can be
-# absolute.
-ac_abs_builddir=`cd "$ac_dir" && cd $ac_builddir && pwd`
-ac_abs_top_builddir=`cd "$ac_dir" && cd ${ac_top_builddir}. && pwd`
-ac_abs_srcdir=`cd "$ac_dir" && cd $ac_srcdir && pwd`
-ac_abs_top_srcdir=`cd "$ac_dir" && cd $ac_top_srcdir && pwd`
-
+    srcdir="$ac_dots$ac_given_srcdir$ac_dir_suffix"
+    top_srcdir="$ac_dots$ac_given_srcdir" ;;
+  esac
 
 
-  if test x"$ac_file" != x-; then
-    { echo "$as_me:$LINENO: creating $ac_file" >&5
-echo "$as_me: creating $ac_file" >&6;}
-    rm -f "$ac_file"
-  fi
-  # Let's still pretend it is `configure' which instantiates (i.e., don't
-  # use $as_me), people would be surprised to read:
-  #    /* config.h.  Generated by config.status.  */
-  if test x"$ac_file" = x-; then
-    configure_input=
-  else
-    configure_input="$ac_file.  "
-  fi
-  configure_input=$configure_input"Generated from `echo $ac_file_in |
-                                     sed 's,.*/,,'` by configure."
+  echo creating "$ac_file"
+  rm -f "$ac_file"
+  configure_input="Generated automatically from `echo $ac_file_in|sed 's%.*/%%'` by configure."
+  case "$ac_file" in
+  *Makefile*) ac_comsub="1i\\
+# $configure_input" ;;
+  *) ac_comsub= ;;
+  esac
 
-  # First look for the input files in the build tree, otherwise in the
-  # src tree.
-  ac_file_inputs=`IFS=:
-    for f in $ac_file_in; do
-      case $f in
-      -) echo $tmp/stdin ;;
-      [\\/$]*)
-         # Absolute (can't be DOS-style, as IFS=:)
-         test -f "$f" || { { echo "$as_me:$LINENO: error: cannot find input file: $f" >&5
-echo "$as_me: error: cannot find input file: $f" >&2;}
-   { (exit 1); exit 1; }; }
-         echo $f;;
-      *) # Relative
-         if test -f "$f"; then
-           # Build tree
-           echo $f
-         elif test -f "$srcdir/$f"; then
-           # Source tree
-           echo $srcdir/$f
-         else
-           # /dev/null tree
-           { { echo "$as_me:$LINENO: error: cannot find input file: $f" >&5
-echo "$as_me: error: cannot find input file: $f" >&2;}
-   { (exit 1); exit 1; }; }
-         fi;;
-      esac
-    done` || { (exit 1); exit 1; }
-_ACEOF
-cat >>$CONFIG_STATUS <<_ACEOF
-  sed "$ac_vpsub
-$extrasub
-_ACEOF
-cat >>$CONFIG_STATUS <<\_ACEOF
-:t
-/@[a-zA-Z_][a-zA-Z_0-9]*@/!b
-s, at configure_input@,$configure_input,;t t
-s, at srcdir@,$ac_srcdir,;t t
-s, at abs_srcdir@,$ac_abs_srcdir,;t t
-s, at top_srcdir@,$ac_top_srcdir,;t t
-s, at abs_top_srcdir@,$ac_abs_top_srcdir,;t t
-s, at builddir@,$ac_builddir,;t t
-s, at abs_builddir@,$ac_abs_builddir,;t t
-s, at top_builddir@,$ac_top_builddir,;t t
-s, at abs_top_builddir@,$ac_abs_top_builddir,;t t
-" $ac_file_inputs | (eval "$ac_sed_cmds") >$tmp/out
-  rm -f $tmp/stdin
-  if test x"$ac_file" != x-; then
-    mv $tmp/out $ac_file
-  else
-    cat $tmp/out
-    rm -f $tmp/out
-  fi
+  ac_file_inputs=`echo $ac_file_in|sed -e "s%^%$ac_given_srcdir/%" -e "s%:% $ac_given_srcdir/%g"`
+  sed -e "$ac_comsub
+s%@configure_input@%$configure_input%g
+s%@srcdir@%$srcdir%g
+s%@top_srcdir@%$top_srcdir%g
+" $ac_file_inputs | (eval "$ac_sed_cmds") > $ac_file
+fi; done
+rm -f conftest.s*
 
-done
-_ACEOF
+EOF
+cat >> $CONFIG_STATUS <<EOF
 
-cat >>$CONFIG_STATUS <<\_ACEOF
+EOF
+cat >> $CONFIG_STATUS <<\EOF
 
-{ (exit 0); exit 0; }
-_ACEOF
+exit 0
+EOF
 chmod +x $CONFIG_STATUS
-ac_clean_files=$ac_clean_files_save
-
-
-# configure is writing to config.log, and then calls config.status.
-# config.status does its own redirection, appending to config.log.
-# Unfortunately, on DOS this fails, as config.log is still kept open
-# by configure, so config.status won't be able to write to it; its
-# output is simply discarded.  So we exec the FD to /dev/null,
-# effectively closing config.log, so it can be properly (re)opened and
-# appended to by config.status.  When coming back to configure, we
-# need to make the FD available again.
-if test "$no_create" != yes; then
-  ac_cs_success=:
-  ac_config_status_args=
-  test "$silent" = yes &&
-    ac_config_status_args="$ac_config_status_args --quiet"
-  exec 5>/dev/null
-  $SHELL $CONFIG_STATUS $ac_config_status_args || ac_cs_success=false
-  exec 5>>config.log
-  # Use ||, not &&, to avoid exiting from the if with $? = 1, which
-  # would make configure fail if this is the last instruction.
-  $ac_cs_success || { (exit 1); exit 1; }
-fi
+rm -fr confdefs* $ac_clean_files
+test "$no_create" = yes || ${CONFIG_SHELL-/bin/sh} $CONFIG_STATUS || exit 1
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/configure.in qm-version-handling/configure.in
--- qm-clean/configure.in	2003-06-21 00:57:48.000000000 -0700
+++ qm-version-handling/configure.in	2003-08-10 01:21:30.000000000 -0700
@@ -217,5 +217,5 @@
 AC_OUTPUT(
   GNUmakefile
   qm.spec
-  qm/setup_path.py
+  qm/version.py
 )
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/__init__.py qm-version-handling/qm/__init__.py
--- qm-clean/qm/__init__.py	2002-05-27 18:37:53.000000000 -0700
+++ qm-version-handling/qm/__init__.py	2003-08-10 01:24:20.000000000 -0700
@@ -17,6 +17,7 @@
 # imports
 ########################################################################
 
+from qm.version import version, version_info
 from qm.common import *
 from qm.diagnostic import error, warning, message
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/setup_path.py qm-version-handling/qm/setup_path.py
--- qm-clean/qm/setup_path.py	1969-12-31 16:00:00.000000000 -0800
+++ qm-version-handling/qm/setup_path.py	2003-08-10 01:39:24.000000000 -0700
@@ -0,0 +1,50 @@
+########################################################################
+#
+# File:   setup_path.py
+# Author: Alex Samuel
+# Date:   2001-02-08
+#
+# Contents:
+#   Python fragment to set up the Python lookup path to find QM modules.
+#
+# Copyright (c) 2001, 2002 by CodeSourcery, LLC.  All rights reserved. 
+#
+# For license terms see the file COPYING.
+#
+########################################################################
+
+########################################################################
+# imports
+########################################################################
+
+import string
+import sys
+import os.path
+
+########################################################################
+# script
+########################################################################
+
+# The root of the QM installation.
+__home_dir = os.environ['QM_HOME']
+
+if os.environ['QM_BUILD'] == '1':
+    __lib_dir = __home_dir
+    __share_dir = os.path.join(__home_dir, 'share')
+    __doc_dir = os.path.join(__home_dir, 'qm')
+else:
+    __lib_dir = os.path.join(__home_dir, 'lib/qm')
+    __share_dir = os.path.join(__home_dir, 'share/qm')
+    __doc_dir = os.path.join(__home_dir, 'share/doc/qm')
+
+# Now store the QM directories in the environment, so that other modules
+# can access them.
+os.environ["QM_LIB_PATH"] = os.path.normpath(__lib_dir)
+os.environ["QM_SHARE_PATH"] = os.path.normpath(__share_dir)
+os.environ["QM_DOC_PATH"] = os.path.normpath(__doc_dir)
+
+#######################################################################
+# Local Variables:
+# mode: python
+# indent-tabs-mode: nil
+# End:
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/setup_path.py.in qm-version-handling/qm/setup_path.py.in
--- qm-clean/qm/setup_path.py.in	2003-06-16 16:47:47.000000000 -0700
+++ qm-version-handling/qm/setup_path.py.in	1969-12-31 16:00:00.000000000 -0800
@@ -1,54 +0,0 @@
-########################################################################
-#
-# File:   setup_path.py
-# Author: Alex Samuel
-# Date:   2001-02-08
-#
-# Contents:
-#   Python fragment to set up the Python lookup path to find QM modules.
-#
-# Copyright (c) 2001, 2002 by CodeSourcery, LLC.  All rights reserved. 
-#
-# For license terms see the file COPYING.
-#
-########################################################################
-
-########################################################################
-# imports
-########################################################################
-
-import string
-import sys
-import os.path
-
-########################################################################
-# script
-########################################################################
-
-# The root of the QM installation.
-__home_dir = os.environ['QM_HOME']
-
-if os.environ['QM_BUILD'] == '1':
-    __lib_dir = __home_dir
-    __share_dir = os.path.join(__home_dir, 'share')
-    __doc_dir = os.path.join(__home_dir, 'qm')
-else:
-    __lib_dir = os.path.join(__home_dir, 'lib/qm')
-    __share_dir = os.path.join(__home_dir, 'share/qm')
-    __doc_dir = os.path.join(__home_dir, 'share/doc/qm')
-
-# Now store the QM directories in the environment, so that other modules
-# can access them.
-os.environ["QM_LIB_PATH"] = os.path.normpath(__lib_dir)
-os.environ["QM_SHARE_PATH"] = os.path.normpath(__share_dir)
-os.environ["QM_DOC_PATH"] = os.path.normpath(__doc_dir)
-
-major_version = @QM_MAJOR_VER@
-minor_version = @QM_MINOR_VER@
-release_version = @QM_RELEASE_VER@
-
-#######################################################################
-# Local Variables:
-# mode: python
-# indent-tabs-mode: nil
-# End:
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/test/cmdline.py qm-version-handling/qm/test/cmdline.py
--- qm-clean/qm/test/cmdline.py	2003-08-06 13:00:29.000000000 -0700
+++ qm-version-handling/qm/test/cmdline.py	2003-08-10 01:30:29.000000000 -0700
@@ -491,8 +491,7 @@
     There is one fill-in, for a string, which should contain the version
     number."""
     
-    def __init__(self, argument_list,
-                 major_version, minor_version, release_version):
+    def __init__(self, argument_list):
         """Construct a new QMTest.
 
         Parses the argument list but does not execute the command.
@@ -535,11 +534,6 @@
         # If available, record the path to the qmtest executable.
         self.__qmtest_path = os.environ.get("QM_PATH")
         
-        # Record the version information.
-        self._major_version = major_version
-        self._minor_version = minor_version
-        self._release_version = release_version
-
         # We have not yet loaded the database.
         self.__database = None
         # We have not yet computed the set of available targets.
@@ -564,8 +558,7 @@
         'major' will be X, 'minor' will be 'Y', and 'release' will be
         'Z'."""
 
-        return (self._major_version, self._minor_version,
-                self._release_version)
+        return qm.version_info
 
         
     def HasGlobalOption(self, option):
@@ -625,8 +618,7 @@
         # (The GNU coding standards require that the program take no
         # further action after seeing --version.)
         if self.HasGlobalOption("version"):
-            self._stderr.write(self.__version_output
-                               % self._GetVersionString())
+            self._stderr.write(self.__version_output % qm.version)
             return 0
         # If the global help option was specified, display it and stop.
         if (self.GetGlobalOption("help") is not None 
@@ -860,18 +852,6 @@
                                    "result_stream",
                                    self.GetDatabase())
         
-    def _GetVersionString(self):
-        """Return the version string for this version of QMTest.
-
-        returns -- The version string for this version of QMTest.  The
-        string returned does not contain the name of the application; it
-        contains only the version numbers."""
-
-        version_string = "%d.%d" % (self._major_version, self._minor_version)
-        if self._release_version:
-            version_string += ".%d" % self._release_version
-        return version_string
-        
 
     def __GetAttributeOptions(self):
         """Return the attributes specified on the command line.
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/test/qmtest.py qm-version-handling/qm/test/qmtest.py
--- qm-clean/qm/test/qmtest.py	2003-06-21 00:57:48.000000000 -0700
+++ qm-version-handling/qm/test/qmtest.py	2003-08-10 01:26:38.000000000 -0700
@@ -84,9 +84,8 @@
     check_python_version()
 
     # Parse the command line.
-    command = qm.test.cmdline.QMTest(sys.argv[1:],
-                                     major_version, minor_version,
-                                     release_version)
+    command = qm.test.cmdline.QMTest(sys.argv[1:])
+
     # Execute the command.
     exit_code = command.Execute()
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/version.py.in qm-version-handling/qm/version.py.in
--- qm-clean/qm/version.py.in	1969-12-31 16:00:00.000000000 -0800
+++ qm-version-handling/qm/version.py.in	2003-08-10 01:36:34.000000000 -0700
@@ -0,0 +1,34 @@
+########################################################################
+#
+# File:   version.py
+# Author: Nathaniel Smith
+# Date:   2003-08-10
+#
+# Contents:
+#   Variables to query the version of QM in use.
+#
+# Copyright (c) 2003 by CodeSourcery, LLC.  All rights reserved. 
+#
+# For license terms see the file COPYING.
+#
+########################################################################
+
+########################################################################
+# Variables
+########################################################################
+
+version_info = (@QM_MAJOR_VER@, @QM_MINOR_VER@, @QM_RELEASE_VER@)
+"""The version of QM as a tuple of (major, minor, release)."""
+
+version = "%d.%d" % version_info[:-1]
+"""The version of QM as a string suitable for printing."""
+
+if version_info[-1]:
+    version += ".%d" % version_info[-1]
+
+########################################################################
+# Local Variables:
+# mode: python
+# indent-tabs-mode: nil
+# fill-column: 72
+# End:

From mark at codesourcery.com  Sun Aug 10 20:50:56 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 10 Aug 2003 13:50:56 -0700
Subject: [qmtest] [PATCH] Revamp QMTest version number handling.
In-Reply-To: <20030810090413.GA7464@njs.dhis.org>
References: <20030810090413.GA7464@njs.dhis.org>
Message-ID: <1060548656.3353.7.camel@minax.codesourcery.com>

On Sun, 2003-08-10 at 02:04, Nathaniel Smith wrote:
> Attached patch contains no user-visible change in functionality, but
> does clean up the handling of the overall QMTest version number.
> 
> This can be considered part n of my long-term quest to kill
> setup_path.py.in.  In some sense with this patch I've succeeded, since
> setup_path.py.in no longer needs to undergo @@ substitution, and is
> renamed to setup_path.py...
> 
> The general idea is to provide variables qm.version and
> qm.version_info exactly analogous to the standard python variables
> sys.version and sys.version_info.  The current code has a very strange
> idea of version numbers; it stores them in a single QMTest object and
> provides a method to read them.  This is strange because firstly, the
> version numbers are necessarily immutable over the life of an
> interpreter, so having a function to fetch them is odd.  Secondly, and
> more importantly, the version number is a property of the qm package
> as a whole, not any particular QMTest object; it makes perfect sense
> to want to know the version of the qm package without first
> instantiating a QMTest object.  Especially since prior to this patch,
> on can't instantiate a QMTest object without knowing the version
> number :-).
> 
> This patch leaves 'QMTest.GetVersion' working, but if Jeffrey is the
> only one using it, then I'd suggest removing it altogether.  Its new
> implementation is just "return qm.version_info".
> 
> Comments?

I think the patch is fine.  I don't think there's any harm in leaving
GetVersion there, but then again there's not really any harm in taking
it out either.  You can make that decision, but make sure to let me
know; we'll have to tweak the ABI testsuite again if you take that out.

Thanks,

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From njs at pobox.com  Sun Aug 10 20:59:52 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Sun, 10 Aug 2003 13:59:52 -0700
Subject: [qmtest] [PATCH] Revamp QMTest version number handling.
In-Reply-To: <1060548656.3353.7.camel@minax.codesourcery.com>
References: <20030810090413.GA7464@njs.dhis.org> <1060548656.3353.7.camel@minax.codesourcery.com>
Message-ID: <20030810205951.GA23188@njs.dhis.org>

On Sun, Aug 10, 2003 at 01:50:56PM -0700, Mark Mitchell wrote:
> 
> I think the patch is fine.  I don't think there's any harm in leaving
> GetVersion there, but then again there's not really any harm in taking
> it out either.  You can make that decision, but make sure to let me
> know; we'll have to tweak the ABI testsuite again if you take that out.

You should know by now that I can't resist deleting code whenever
possible :-).  Out it goes!

Patch committed.

-- Nathaniel

-- 
So let us espouse a less contested notion of truth and falsehood, even
if it is philosophically debatable (if we listen to philosophers, we
must debate everything, and there would be no end to the discussion).
  -- Serendipities, Umberto Eco


From njs at pobox.com  Sun Aug 10 22:19:18 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Sun, 10 Aug 2003 15:19:18 -0700
Subject: [PATCH] Remove setup_path.py.
Message-ID: <20030810221918.GA23895@njs.dhis.org>

Ding-dong, the file is dead, and all that.  With this patch, one still
has to set QM_HOME and optionally QM_BUILD before loading the qm
modules, but that's incremental for you.

-- Nathaniel

-- 
"...these, like all words, have single, decontextualized meanings: everyone
knows what each of these words means, everyone knows what constitutes an
instance of each of their referents.  Language is fixed.  Meaning is
certain.  Santa Claus comes down the chimney at midnight on December 24."
  -- The Language War, Robin Lakoff
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/ChangeLog qm-remove-setup_path.py/ChangeLog
--- qm-clean/ChangeLog	2003-08-10 14:35:34.000000000 -0700
+++ qm-remove-setup_path.py/ChangeLog	2003-08-10 14:40:48.000000000 -0700
@@ -1,4 +1,16 @@
 2003-08-10  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/common.py (get_lib_directory): Remove.
+	(get_share_directory): Move path lookup logic to here from
+	setup_path.py.  Clarify docstring.
+	(get_doc_directory): Move path lookup logic to here from
+	setup_path.py.  Clarify docstring.
+	* qm/setup_path.py: Remove file.
+	* qm/test/qmtest.py: Don't execfile setup_path.py.
+	* GNUmakefile.in ($(SCRIPTS)): Don't set QM_TRUE_LIBDIR.
+	* qm/qm.sh: Don't set QM_TRUE_LIBDIR.
+	
+2003-08-10  Nathaniel Smith  <njs at codesourcery.com>
 	
 	* qm/version.py.in: Rename to...
 	* qm/__version.py.in: ...this.
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/GNUmakefile.in qm-remove-setup_path.py/GNUmakefile.in
--- qm-clean/GNUmakefile.in	2003-08-10 14:35:34.000000000 -0700
+++ qm-remove-setup_path.py/GNUmakefile.in	2003-08-10 14:36:49.000000000 -0700
@@ -172,7 +172,6 @@
 	echo -e "@echo off\r" > $@
 	echo -e "set QM_HOME=C:\\progra~1\qm\r" >> $@
 	echo -e "set QM_BUILD=0\r" >> $@
-	echo -e "set QM_TRUE_LIBDIR=%QM_HOME%\\$(RELLIBDIR)\\qm\r" >> $@
 	echo -e "set PYTHONPATH=%C:\\Program Files\\QM\\$(RELLIBDIR);%PYTHONPATH%\r" >> $@
 	echo -n "$(PYTHONEXE)" \
                  \"%QM_HOME%\\$(RELLIBDIR)\\$(subst /,\\,$(basename $@)).py\" \
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/common.py qm-remove-setup_path.py/qm/common.py
--- qm-clean/qm/common.py	2003-07-03 12:32:04.000000000 -0700
+++ qm-remove-setup_path.py/qm/common.py	2003-08-10 02:26:53.000000000 -0700
@@ -219,25 +219,24 @@
 # functions
 ########################################################################
 
-def get_lib_directory(*components):
-    """Return the absolute path to the top QM Python directory."""
-
-    path = os.environ["QM_LIB_PATH"]
-    return apply(os.path.join, (path, ) + components)
-
-
 def get_share_directory(*components):
-    """Return the path to the directory containing QM data files."""
+    """Return the path to a file in the QM data file directory."""
 
-    path = os.environ["QM_SHARE_PATH"]
-    return apply(os.path.join, (path, ) + components)
+    home_dir = os.environ["QM_HOME"]
+    if os.environ.get("QM_BUILD") == "1":
+        return os.path.join(home_dir, "share", *components)
+    else:
+        return os.path.join(home_dir, "share", "qm", *components)
 
 
 def get_doc_directory(*components):
-    """Return the path to the directory containing QM documentation files."""
+    """Return a path to a file in the QM documentation file directory."""
 
-    path = os.environ["QM_DOC_PATH"]
-    return apply(os.path.join, (path, ) + components)
+    home_dir = os.environ["QM_HOME"]
+    if os.environ.get("QM_BUILD") == "1":
+        return os.path.join(home_dir, "qm", *components)
+    else:
+        return os.path.join(home_dir, "share", "doc", "qm", *components)
 
 
 def format_exception(exc_info):
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/setup_path.py qm-remove-setup_path.py/qm/setup_path.py
--- qm-clean/qm/setup_path.py	2003-08-10 13:57:14.000000000 -0700
+++ qm-remove-setup_path.py/qm/setup_path.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,50 +0,0 @@
-########################################################################
-#
-# File:   setup_path.py
-# Author: Alex Samuel
-# Date:   2001-02-08
-#
-# Contents:
-#   Python fragment to set up the Python lookup path to find QM modules.
-#
-# Copyright (c) 2001, 2002 by CodeSourcery, LLC.  All rights reserved. 
-#
-# For license terms see the file COPYING.
-#
-########################################################################
-
-########################################################################
-# imports
-########################################################################
-
-import string
-import sys
-import os.path
-
-########################################################################
-# script
-########################################################################
-
-# The root of the QM installation.
-__home_dir = os.environ['QM_HOME']
-
-if os.environ['QM_BUILD'] == '1':
-    __lib_dir = __home_dir
-    __share_dir = os.path.join(__home_dir, 'share')
-    __doc_dir = os.path.join(__home_dir, 'qm')
-else:
-    __lib_dir = os.path.join(__home_dir, 'lib/qm')
-    __share_dir = os.path.join(__home_dir, 'share/qm')
-    __doc_dir = os.path.join(__home_dir, 'share/doc/qm')
-
-# Now store the QM directories in the environment, so that other modules
-# can access them.
-os.environ["QM_LIB_PATH"] = os.path.normpath(__lib_dir)
-os.environ["QM_SHARE_PATH"] = os.path.normpath(__share_dir)
-os.environ["QM_DOC_PATH"] = os.path.normpath(__doc_dir)
-
-#######################################################################
-# Local Variables:
-# mode: python
-# indent-tabs-mode: nil
-# End:
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qm.sh --exclude=qmtest --exclude=qm.spec --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/test/qmtest.py qm-remove-setup_path.py/qm/test/qmtest.py
--- qm-clean/qm/test/qmtest.py	2003-08-10 13:57:14.000000000 -0700
+++ qm-remove-setup_path.py/qm/test/qmtest.py	2003-08-10 14:35:56.000000000 -0700
@@ -27,8 +27,6 @@
 # the same name.
 sys.path = sys.path[1:]
 
-execfile(os.path.join(os.environ["QM_TRUE_LIBDIR"], "setup_path.py"))
-
 ########################################################################
 # imports
 ########################################################################
Binary files qm-clean/results.qmr and qm-remove-setup_path.py/results.qmr differ

From njs at pobox.com  Mon Aug 11 18:11:59 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Mon, 11 Aug 2003 11:11:59 -0700
Subject: [PATCH] Make dotted context keys available in the environment.
Message-ID: <20030811181159.GA21211@njs.dhis.org>

See attached.

-- Nathaniel

-- 
"...All of this suggests that if we wished to find a modern-day model
for British and American speech of the late eighteenth century, we could
probably do no better than Yosemite Sam."
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/ChangeLog qm-dots-in-context-vars/ChangeLog
--- qm-clean/ChangeLog	2003-08-10 23:44:30.000000000 -0700
+++ qm-dots-in-context-vars/ChangeLog	2003-08-11 11:09:30.000000000 -0700
@@ -1,3 +1,27 @@
+2003-08-11  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/test/classes/command.py (ExecTestBase.MakeEnvironment):
+	Replace "." with "__" when turning context keys into environment
+	variables.  Document in class docstring.
+	(ExecTest.Run): Fix indentation.
+	* qm/test/doc/reference.xml: Document new handling of context
+	variables with "."s in them.
+	* tests/regress/QMTest/selftest.py: Import os.path.  Add more
+	documentation.
+	(RegTest.Run): Check for a context file, and if one is found,
+	use it.
+	* tests/regress/env_context1: New directory.
+	* tests/regress/env_context1/QMTest: New directory.
+	* tests/regress/env_context1/QMTest/configuration: New file.
+	* tests/regress/env_context1/context: New file.
+	* tests/regress/env_context1/results.qmr: New file.
+	* tests/regress/env_context1/exectest_nodot.qmt: New file.
+	* tests/regress/env_context1/exectest_dot.qmt: New file.
+	* tests/regress/env_context1/shellcommandtest_nodot.qmt: New file.
+	* tests/regress/env_context1/shellcommandtest_dot.qmt: New file.
+	* tests/regress/env_context1/shellscripttest_nodot.qmt: New file.
+	* tests/regress/env_context1/shellscripttest_dot.qmt: New file.
+	
 2003-08-10  Nathaniel Smith  <njs at codesourcery.com>
 
 	* qm/common.py (get_lib_directory): Remove.
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/test/classes/command.py qm-dots-in-context-vars/qm/test/classes/command.py
--- qm-clean/qm/test/classes/command.py	2003-07-30 15:25:00.000000000 -0700
+++ qm-dots-in-context-vars/qm/test/classes/command.py	2003-08-11 11:04:35.000000000 -0700
@@ -79,7 +79,10 @@
             of the environment variable is the name of the context
             property, prefixed with 'QMV_'.  For example, if the value
             of the context property named 'target' is available in the
-            environment variable 'QMV_target'.""" )),
+            environment variable 'QMV_target'.  Any dots in the context
+            key are replaced by a double-underscore; e.g.,
+            "CompilerTable.c_path" will become
+            "QMV_CompilerTable__c_path".""" )),
         
         qm.fields.IntegerField(
             name="exit_code",
@@ -137,8 +140,8 @@
         environment = os.environ.copy()
         # Copy context variables into the environment.
         for key, value in context.items():
-            if "." not in key and type(value) == types.StringType:
-                name = "QMV_" + key
+            if  isinstance(value, str):
+                name = "QMV_" + key.replace(".", "__")
                 environment[name] = value
         # Extract additional environment variable assignments from the
         # 'Environment' field.
@@ -296,7 +299,7 @@
             return
 
         self.RunProgram(self.program, 
-			[ self.program ] + self.arguments,
+                        [ self.program ] + self.arguments,
                         context, result)
 
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/test/doc/reference.xml qm-dots-in-context-vars/qm/test/doc/reference.xml
--- qm-clean/qm/test/doc/reference.xml	2003-06-22 23:46:47.000000000 -0700
+++ qm-dots-in-context-vars/qm/test/doc/reference.xml	2003-08-11 11:03:29.000000000 -0700
@@ -1633,11 +1633,15 @@
        <para><classname>command.ExecTest</classname> adds additional
        environment variables automatically.</para>
 
-       <para>In addition, every context property whose key does not
-       contain a &quot;.&quot; and whose value is a string is
-       accessible as an environment variable; the name of the
+       <para>In addition, every context property whose value is a string
+       is accessible as an environment variable; the name of the
        environment variable is the name of the context property,
-       prefixed with &quot;<envar>QMV_</envar>&quot;.</para>
+       prefixed with &quot;<envar>QMV_</envar>&quot; and with any dots
+       (&quot;.&quot;) replaced by a double underscore
+       (&quot;__&quot;).  For example, a context variable
+       &quot;CompilerTable.c_path&quot; would correspond to an
+       environment variable
+       &quot;<envar>QMV_CompilerTable__c_path</envar>&quot;.</para>
       </glossdef>
      </glossentry>
 
Binary files qm-clean/results.qmr and qm-dots-in-context-vars/results.qmr differ
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/regress/QMTest/selftest.py qm-dots-in-context-vars/tests/regress/QMTest/selftest.py
--- qm-clean/tests/regress/QMTest/selftest.py	2003-08-07 10:05:20.000000000 -0700
+++ qm-dots-in-context-vars/tests/regress/QMTest/selftest.py	2003-08-11 10:28:22.000000000 -0700
@@ -18,6 +18,7 @@
 ########################################################################
 
 import os
+import os.path
 import re
 import qm.executable
 from   qm.test.test import *
@@ -34,7 +35,13 @@
     directory.  Each such subdirectory is a complete test database in
     itself, such that running "qmtest -D . run -O results.qmr" in that
     directory should succeed, reporting all tests completed as
-    expected.  The test is judged to have succeeded if so."""
+    expected.  The test is judged to have succeeded if so.
+
+    The context key "qmtest_path" should contain the path to the qmtest
+    executable.  If the context key "qmtest_target" is defined, the
+    test database will be run using that target.  If the test database
+    contains a file "context", then the test database will be run with
+    it as a context file."""
 
     arguments = [
         qm.fields.TextField(
@@ -60,6 +67,7 @@
         path = self.path
         results = os.path.join(path, "results.qmr")
         output = os.path.join(path, "output.qmr")
+        context_file = os.path.join(path, "context")
 
         # Sanity check the target location.
         assert os.path.isdir(os.path.join(path, "QMTest"))
@@ -75,6 +83,10 @@
         if context.has_key("qmtest_target"):
             argv += ("-T", context["qmtest_target"])
 
+        # And if there is a context file, use it.
+        if os.path.exists(context_file):
+            argv += ("-C", context_file)
+
         e = qm.executable.RedirectedExecutable()
         status = e.Run(argv)
         stdout = e.stdout
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/regress/env_context1/QMTest/configuration qm-dots-in-context-vars/tests/regress/env_context1/QMTest/configuration
--- qm-clean/tests/regress/env_context1/QMTest/configuration	1969-12-31 16:00:00.000000000 -0800
+++ qm-dots-in-context-vars/tests/regress/env_context1/QMTest/configuration	2003-08-11 10:36:16.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="xml_database.XMLDatabase" kind="database"/>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/regress/env_context1/context qm-dots-in-context-vars/tests/regress/env_context1/context
--- qm-clean/tests/regress/env_context1/context	1969-12-31 16:00:00.000000000 -0800
+++ qm-dots-in-context-vars/tests/regress/env_context1/context	2003-08-11 11:07:29.000000000 -0700
@@ -0,0 +1,2 @@
+foo=foo
+foo.bar=foo.bar
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/regress/env_context1/exectest_dot.qmt qm-dots-in-context-vars/tests/regress/env_context1/exectest_dot.qmt
--- qm-clean/tests/regress/env_context1/exectest_dot.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-dots-in-context-vars/tests/regress/env_context1/exectest_dot.qmt	2003-08-11 10:41:19.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="command.ExecTest" kind="test"><argument name="target_group"><text>.*</text></argument><argument name="stderr"><text/></argument><argument name="stdout"><text>foo.bar</text></argument><argument name="prerequisites"><set/></argument><argument name="stdin"><text/></argument><argument name="exit_code"><integer>0</integer></argument><argument name="environment"><set/></argument><argument name="program"><text>printenv</text></argument><argument name="arguments"><set><text>QMV_foo__bar</text></set></argument><argument name="timeout"><integer>-1</integer></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/regress/env_context1/exectest_nodot.qmt qm-dots-in-context-vars/tests/regress/env_context1/exectest_nodot.qmt
--- qm-clean/tests/regress/env_context1/exectest_nodot.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-dots-in-context-vars/tests/regress/env_context1/exectest_nodot.qmt	2003-08-11 10:42:12.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="command.ExecTest" kind="test"><argument name="target_group"><text>.*</text></argument><argument name="stderr"><text/></argument><argument name="stdout"><text>foo</text></argument><argument name="prerequisites"><set/></argument><argument name="stdin"><text/></argument><argument name="exit_code"><integer>0</integer></argument><argument name="environment"><set/></argument><argument name="program"><text>printenv</text></argument><argument name="arguments"><set><text>QMV_foo</text></set></argument><argument name="timeout"><integer>-1</integer></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
Binary files qm-clean/tests/regress/env_context1/results.qmr and qm-dots-in-context-vars/tests/regress/env_context1/results.qmr differ
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/regress/env_context1/shellcommandtest_dot.qmt qm-dots-in-context-vars/tests/regress/env_context1/shellcommandtest_dot.qmt
--- qm-clean/tests/regress/env_context1/shellcommandtest_dot.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-dots-in-context-vars/tests/regress/env_context1/shellcommandtest_dot.qmt	2003-08-11 10:43:23.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="command.ShellCommandTest" kind="test"><argument name="environment"><set/></argument><argument name="target_group"><text>.*</text></argument><argument name="command"><text>echo ${QMV_foo__bar}</text></argument><argument name="timeout"><integer>-1</integer></argument><argument name="stderr"><text/></argument><argument name="stdout"><text>foo.bar</text></argument><argument name="prerequisites"><set/></argument><argument name="stdin"><text/></argument><argument name="exit_code"><integer>0</integer></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/regress/env_context1/shellcommandtest_nodot.qmt qm-dots-in-context-vars/tests/regress/env_context1/shellcommandtest_nodot.qmt
--- qm-clean/tests/regress/env_context1/shellcommandtest_nodot.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-dots-in-context-vars/tests/regress/env_context1/shellcommandtest_nodot.qmt	2003-08-11 10:42:54.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="command.ShellCommandTest" kind="test"><argument name="environment"><set/></argument><argument name="target_group"><text>.*</text></argument><argument name="command"><text>echo ${QMV_foo}</text></argument><argument name="timeout"><integer>-1</integer></argument><argument name="stderr"><text/></argument><argument name="stdout"><text>foo</text></argument><argument name="prerequisites"><set/></argument><argument name="stdin"><text/></argument><argument name="exit_code"><integer>0</integer></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/regress/env_context1/shellscripttest_dot.qmt qm-dots-in-context-vars/tests/regress/env_context1/shellscripttest_dot.qmt
--- qm-clean/tests/regress/env_context1/shellscripttest_dot.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-dots-in-context-vars/tests/regress/env_context1/shellscripttest_dot.qmt	2003-08-11 10:44:29.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="command.ShellScriptTest" kind="test"><argument name="stdin"><text/></argument><argument name="stdout"><text>foo.bar</text></argument><argument name="stderr"><text/></argument><argument name="script"><text>echo ${QMV_foo__bar}</text></argument><argument name="prerequisites"><set/></argument><argument name="target_group"><text>.*</text></argument><argument name="exit_code"><integer>0</integer></argument><argument name="environment"><set/></argument><argument name="arguments"><set/></argument><argument name="timeout"><integer>-1</integer></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/tests/regress/env_context1/shellscripttest_nodot.qmt qm-dots-in-context-vars/tests/regress/env_context1/shellscripttest_nodot.qmt
--- qm-clean/tests/regress/env_context1/shellscripttest_nodot.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-dots-in-context-vars/tests/regress/env_context1/shellscripttest_nodot.qmt	2003-08-11 10:43:55.000000000 -0700
@@ -0,0 +1,5 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="command.ShellScriptTest" kind="test"><argument name="stdin"><text/></argument><argument name="stdout"><text>foo</text></argument><argument name="stderr"><text/></argument><argument name="script"><text>echo ${QMV_foo}</text></argument><argument name="prerequisites"><set/></argument><argument name="target_group"><text>.*</text></argument><argument name="exit_code"><integer>0</integer></argument><argument name="environment"><set/></argument><argument name="arguments"><set/></argument><argument name="timeout"><integer>-1</integer></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file

From mark at codesourcery.com  Mon Aug 11 19:13:12 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 11 Aug 2003 12:13:12 -0700
Subject: [qmtest] [PATCH] Make dotted context keys available in the environment.
References: <20030811181159.GA21211@njs.dhis.org>
Message-ID: <001901c3603c$9c5c1310$6900a8c0@minax>

Cool.

+ For example, a context variable
+       &quot;CompilerTable.c_path&quot; would correspond to an
+       environment variable
+       &quot;<envar>QMV_CompilerTable__c_path</envar>&quot;.</para>

I suggest you reword this as:

  For example, the value of the context property "CompilerTable.c_path" is
available as the
  value of the environment variable "QMV_CompilerTable__c_path".

+        # And if there is a context file, use it.
+        if os.path.exists(context_file):
+            argv += ("-C", context_file)

I believe that (from looking at cmdline.py) that a file named "context" will
be used implicitly if no other context file is provided.  So, this code is
probably redundant and can be omitted.

OK with those changes.

Thanks!

----- Original Message ----- 
From: "Nathaniel Smith" <njs at pobox.com>
To: <qmtest at codesourcery.com>
Sent: Monday, August 11, 2003 11:11 AM
Subject: [qmtest] [PATCH] Make dotted context keys available in the
environment.


> See attached.
>
> -- Nathaniel
>
> -- 
> "...All of this suggests that if we wished to find a modern-day model
> for British and American speech of the late eighteenth century, we could
> probably do no better than Yosemite Sam."
>



From njs at pobox.com  Mon Aug 11 19:37:38 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Mon, 11 Aug 2003 12:37:38 -0700
Subject: [qmtest] [PATCH] Make dotted context keys available in the environment.
In-Reply-To: <001901c3603c$9c5c1310$6900a8c0@minax>
References: <20030811181159.GA21211@njs.dhis.org> <001901c3603c$9c5c1310$6900a8c0@minax>
Message-ID: <20030811193738.GA27100@njs.dhis.org>

On Mon, Aug 11, 2003 at 12:13:12PM -0700, Mark Mitchell wrote:
> Cool.
> 
> + For example, a context variable
> +       &quot;CompilerTable.c_path&quot; would correspond to an
> +       environment variable
> +       &quot;<envar>QMV_CompilerTable__c_path</envar>&quot;.</para>
> 
> I suggest you reword this as:
> 
>   For example, the value of the context property "CompilerTable.c_path" is
> available as the
>   value of the environment variable "QMV_CompilerTable__c_path".

Yeah, that is better.

> +        # And if there is a context file, use it.
> +        if os.path.exists(context_file):
> +            argv += ("-C", context_file)
> 
> I believe that (from looking at cmdline.py) that a file named "context" will
> be used implicitly if no other context file is provided.  So, this code is
> probably redundant and can be omitted.

It's not, actually; cmdline.py checks for a file "context" in the
current directory only, and we don't chdir to the test directories
while running the regression suite.  I suppose I could add logic for
that instead, but this way seems cleaner.

-- Nathaniel

-- 
Sentience can be such a burden.


From mark at codesourcery.com  Mon Aug 11 19:54:27 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 11 Aug 2003 12:54:27 -0700
Subject: [qmtest] [PATCH] Make dotted context keys available in the environment.
References: <20030811181159.GA21211@njs.dhis.org> <001901c3603c$9c5c1310$6900a8c0@minax> <20030811193738.GA27100@njs.dhis.org>
Message-ID: <005601c36042$5fb2fea0$6900a8c0@minax>


> > I believe that (from looking at cmdline.py) that a file named "context"
will
> > be used implicitly if no other context file is provided.  So, this code
is
> > probably redundant and can be omitted.
>
> It's not, actually; cmdline.py checks for a file "context" in the
> current directory only, and we don't chdir to the test directories
> while running the regression suite.  I suppose I could add logic for
> that instead, but this way seems cleaner.

Agreed.

(Doing "chdir" would be bad because it does not work when running threaded.
Poking around some other way would be complicated.)

Thanks,

-- Mark



From mark at codesourcery.com  Mon Aug 11 22:55:56 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 11 Aug 2003 15:55:56 -0700
Subject: PATCH: Improve handling of SIGTERM and SIGINT
Message-ID: <200308112255.h7BMtuee021307@sirius.codesourcery.com>


This patch restores the correct handling of SIGINT (namely,
termination of QMTest) and adds similar behavior for SIGTERM.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-08-11  Mark Mitchell  <mark at codesourcery.com>

	* qm/platform_unix.py (SignalException.__init__): Tweak message
	formatting.
	(_initialize): Tidy.
	* qm/test/execution_engine.py (ExecutionEngine._RunTests): Honor
	termination requests.
	* qm/test/target.py: Import qm.platform and signal.
	(Target.RunTest): Honor temination requests in the form of
	SIGTERM.

Index: qm/platform_unix.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/platform_unix.py,v
retrieving revision 1.12
diff -c -5 -p -r1.12 platform_unix.py
*** qm/platform_unix.py	9 May 2003 22:17:44 -0000	1.12
--- qm/platform_unix.py	11 Aug 2003 22:52:24 -0000
*************** class SignalException(common.QMException
*** 56,66 ****
          """Create a new signal exception.
  
          'signal_number' -- The signal number."""
  
          # Construct a text argument for the exception.
!         message = "signal %d" % signal_number
          # Include the signal name, if available.
          signal_name = get_signal_name(signal_number)
          if signal_name is not None:
              message = message + " (%s)" % signal_name
          # Initialize the base class.
--- 56,66 ----
          """Create a new signal exception.
  
          'signal_number' -- The signal number."""
  
          # Construct a text argument for the exception.
!         message = "Signal %d" % signal_number
          # Include the signal name, if available.
          signal_name = get_signal_name(signal_number)
          if signal_name is not None:
              message = message + " (%s)" % signal_name
          # Initialize the base class.
*************** def get_host_name():
*** 274,292 ****
  
  def _initialize():
      """Perform module initialization."""
  
      # Install signal handlers for several common signals.
!     map(install_signal_handler,
!         [
!         signal.SIGALRM,
!         signal.SIGHUP,
!         signal.SIGTERM,
!         signal.SIGUSR1,
!         signal.SIGUSR2,
!         ])
!         
  
  _initialize()
  
  ########################################################################
  # Local Variables:
--- 274,289 ----
  
  def _initialize():
      """Perform module initialization."""
  
      # Install signal handlers for several common signals.
!     for s in (signal.SIGALRM,
!               signal.SIGHUP,
!               signal.SIGTERM,
!               signal.SIGUSR1,
!               signal.SIGUSR2):
!         install_signal_handler(s)
  
  _initialize()
  
  ########################################################################
  # Local Variables:
Index: qm/test/execution_engine.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/execution_engine.py,v
retrieving revision 1.23
diff -c -5 -p -r1.23 execution_engine.py
*** qm/test/execution_engine.py	7 Aug 2003 17:05:20 -0000	1.23
--- qm/test/execution_engine.py	11 Aug 2003 22:52:24 -0000
*************** class ExecutionEngine:
*** 339,349 ****
          self.__patterns = {}
          # A map from target patterns to lists of test descriptors ready
          # to run.
          self.__target_pattern_queues = {}
          
!         while self.__num_tests_started < num_tests:
              # Process any responses and update the count of idle targets.
              while self.__CheckForResponse(wait=0):
                  pass
  
              # Now look for idle targets.
--- 339,350 ----
          self.__patterns = {}
          # A map from target patterns to lists of test descriptors ready
          # to run.
          self.__target_pattern_queues = {}
          
!         while (self.__num_tests_started < num_tests
!                and not self.IsTerminationRequested()):
              # Process any responses and update the count of idle targets.
              while self.__CheckForResponse(wait=0):
                  pass
  
              # Now look for idle targets.
Index: qm/test/target.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/target.py,v
retrieving revision 1.20
diff -c -5 -p -r1.20 target.py
*** qm/test/target.py	9 May 2003 22:17:44 -0000	1.20
--- qm/test/target.py	11 Aug 2003 22:52:24 -0000
***************
*** 17,30 ****
--- 17,32 ----
  # imports
  ########################################################################
  
  import qm
  import qm.extension
+ import qm.platform
  from   qm.test.context import *
  from   qm.test.result import *
  from   qm.test.database import NoSuchResourceError
  import re
+ import signal
  import sys
  
  ########################################################################
  # classes
  ########################################################################
*************** class Target(qm.extension.Extension):
*** 204,219 ****
              # Set up any required resources.
              self.__SetUpResources(descriptor, context)
              # Run the test.
              descriptor.Run(context, result)
          except KeyboardInterrupt:
!             result.NoteException(cause = "Interrupted.")
              # We received a KeyboardInterrupt, indicating that the
              # user would like to exit QMTest.  Ask the execution
              # engine to stop.
              if self.__engine:
                  self.__engine.RequestTermination()
          except self.__ResourceSetUpException, e:
              result.SetOutcome(Result.UNTESTED)
              result[Result.CAUSE] = qm.message("failed resource")
              result[Result.RESOURCE] = e.resource
          except:
--- 206,235 ----
              # Set up any required resources.
              self.__SetUpResources(descriptor, context)
              # Run the test.
              descriptor.Run(context, result)
          except KeyboardInterrupt:
!             result.NoteException(cause = "Interrupted by user.")
              # We received a KeyboardInterrupt, indicating that the
              # user would like to exit QMTest.  Ask the execution
              # engine to stop.
              if self.__engine:
                  self.__engine.RequestTermination()
+         except qm.platform.SignalException, e:
+             # Note the exception.
+             result.NoteException(cause = str(e))
+             # If we get a SIGTERM, propagate it so that QMTest
+             # terminates.
+             if e.GetSignalNumber() == signal.SIGTERM:
+                 # Record the result so that the traceback is
+                 # available.
+                 self._RecordResult(result)
+                 # Ask the execution engine to stop running tests.
+                 if self.__engine:
+                     self.__engine.RequestTermination()
+                 # Re-raise the exception.
+                 raise
          except self.__ResourceSetUpException, e:
              result.SetOutcome(Result.UNTESTED)
              result[Result.CAUSE] = qm.message("failed resource")
              result[Result.RESOURCE] = e.resource
          except:


From mark at codesourcery.com  Mon Aug 11 23:36:47 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 11 Aug 2003 16:36:47 -0700
Subject: Correct handling of exit codes on Windows
Message-ID: <00ef01c36061$6ee68080$6900a8c0@minax>

This patch takes advantage of the fact that we now have access to correct
exit codes on Windows.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
-------------- next part --------------
A non-text attachment was scrubbed...
Name: diffs
Type: application/octet-stream
Size: 1322 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030811/188d5fce/attachment.obj>

From njs at pobox.com  Thu Aug 14 08:17:33 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 14 Aug 2003 01:17:33 -0700
Subject: [PATCH] Mark fd's close-on-exec in qm.executable.
Message-ID: <20030814081733.GA31803@njs.dhis.org>

This patch marks all pipe fd's close-on-exec in
qm.executable.RedirectedExecutable.

-- Nathaniel

-- 
"If you can explain how you do something, then you're very very bad at it."
  -- John Hopfield
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/ChangeLog qm-close-fds/ChangeLog
--- qm-clean/ChangeLog	2003-08-14 01:12:49.000000000 -0700
+++ qm-close-fds/ChangeLog	2003-08-14 00:59:25.000000000 -0700
@@ -1,3 +1,11 @@
+2003-08-14  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/executable.py (Executable._MakeCloseOnExec): New function.
+	(Executable.Run): Use it.
+	(RedirectedExecutable._CreatePipe): Use it; document that fds
+	will be closed on exec.  Add dup logic; document that returned
+	fds will always be >= 3.
+
 2003-08-13  Nathaniel Smith  <njs at codesourcery.com>
 
 	* qm/executable.py (Executable): Typo in docstring.
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=thread_target --exclude=process_target qm-clean/qm/executable.py qm-close-fds/qm/executable.py
--- qm-clean/qm/executable.py	2003-08-14 01:12:49.000000000 -0700
+++ qm-close-fds/qm/executable.py	2003-08-14 01:15:10.000000000 -0700
@@ -232,9 +232,7 @@
             exception_pipe = os.pipe()
             # Mark the write end as close-on-exec so that the file
             # descriptor is not passed on to the child.
-            fd = exception_pipe[1]
-            fcntl.fcntl(fd, fcntl.F_SETFD,
-                        fcntl.fcntl(fd, fcntl.F_GETFD) | fcntl.FD_CLOEXEC)
+            self._MakeCloseOnExec(exception_pipe[1])
         else:
             exception_pipe = None
 
@@ -324,6 +322,17 @@
         return self.__child
     
         
+    def _MakeCloseOnExec(self, fd):
+        """Modifies 'fd' to not be inherited across 'exec'.
+
+        UNIX only."""
+
+        assert sys.platform != "win32"
+
+        old_flags = fcntl.fcntl(fd, fcntl.F_GETFD)
+        fcntl.fcntl(fd, fcntl.F_SETFD, old_flags | fcntl.FD_CLOEXEC)
+
+
     def __CreateCommandLine(self, arguments):
         """Return a string giving the process command line.
 
@@ -772,7 +781,8 @@
         returns -- A tuple (under UNIX) or list (under Windows)
         consisting of the file descriptors (UNIX) or handles (Windows)
         for the read end and write end of a new pipe.  The pipe is
-        inheritable by child processes."""
+        inheritable by child processes.  On UNIX the fds will always be
+        >= 3 and in close-on-exec mode."""
 
         if sys.platform == "win32":
             # Create a security descriptor so that we can mark the handles
@@ -785,8 +795,20 @@
             r, w = win32pipe.CreatePipe(sa, 0)
             return [r, w]
         else:
-            return os.pipe()
-            
+            pipe = os.pipe()
+            for fd in pipe:
+                # Push the fd up above 2, to make sure it won't conflict
+                # with stdin/stdout/stderr.
+                closable = []
+                while fd <= 2:
+                    closable.append(fd)
+                    fd = os.dup(fd)
+                for old in closable:
+                    os.close(old)
+                # And make it close-on-exec.
+                self._MakeCloseOnExec(fd)
+            return pipe
+
 
     def __CallUntilNone(self, f, attribute):
         """Call 'f' until 'self.attribute' is 'None'.
Binary files qm-clean/results.qmr and qm-close-fds/results.qmr differ

From mark at codesourcery.com  Thu Aug 14 08:33:42 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 14 Aug 2003 01:33:42 -0700
Subject: [qmtest] [PATCH] Mark fd's close-on-exec in qm.executable.
In-Reply-To: <20030814081733.GA31803@njs.dhis.org>
References: <20030814081733.GA31803@njs.dhis.org>
Message-ID: <1060850022.1619.110.camel@doubledemon.codesourcery.com>

> +    def _MakeCloseOnExec(self, fd):
> +        """Modifies 'fd' to not be inherited across 'exec'.

"""Prevent 'fd' from being inherited across 'exec'."""

> +
> +        UNIX only."""

Needs documentation for 'fd'.

> +        inheritable by child processes.  On UNIX the fds will always be
> +        >= 3 and in close-on-exec mode."""

I'd just say "and not inherited across 'exec'."

> +            pipe = os.pipe()
> +            for fd in pipe:
> +                # Push the fd up above 2, to make sure it won't conflict
> +                # with stdin/stdout/stderr.
> +                closable = []
> +                while fd <= 2:
> +                    closable.append(fd)
> +                    fd = os.dup(fd)
> +                for old in closable:
> +                    os.close(old)
> +                # And make it close-on-exec.
> +                self._MakeCloseOnExec(fd)
> +            return pipe

This logic has an inefficiency and a corner-case bug.

The former is that you might as well accumulate closable across both
iterations.  In other words, move it outside the loop.  That could save
some open/close calls.

The latter is that if there are no new available fds when you call dup,
we will (a) crash, and (b) leak the fds in closable.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Thu Aug 14 10:06:45 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 14 Aug 2003 03:06:45 -0700
Subject: PATCH: Making process handling more robust
Message-ID: <200308141006.h7EA6jQa006906@doubledemon.codesourcery.com>


This patch improves the handling of tests that spawn new processes.
In particular, orphaned grandchildren are now killed when the child
process exits.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


2003-08-14  Mark Mitchell  <mark at codesourcery.com>

	* qm/executable.py (TimeoutExecutable.__init__): Document -2 value
	for timeout.
	(TimeoutExecutable._InitializeChild): Create the monitor pid in
	the -2 case as well.
	(TimeoutExectuable.Run): Kill the entire process group, not just
	the monitor pid.
	(TimeoutExectuable.__UseSeparateProcessGroupForChild): New
	method.
	(Filter.__init__): Adjust documentation of timeout parameter.
	* qm/test/classes/command.py (ExecTestBase.RunProgram): Pass -2 to
	Filter when no timeout is specified.

Index: qm/executable.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/executable.py,v
retrieving revision 1.12
diff -c -5 -p -r1.12 executable.py
*** qm/executable.py	14 Aug 2003 02:24:40 -0000	1.12
--- qm/executable.py	14 Aug 2003 09:59:48 -0000
*************** class TimeoutExecutable(Executable):
*** 383,422 ****
      def __init__(self, timeout = -1):
          """Construct a new 'TimeoutExecutable'.
  
          'timeout' -- The number of seconds that the child is permitted
          to run.  This value may be a floating-point value.  However,
!         the value may be rounded to an integral value on some
!         systems.  If the 'timeout' is negative, this class behaves
!         like 'Executable'."""
  
          super(TimeoutExecutable, self).__init__()
          
          # This functionality is not yet supported under Windows.
!         if timeout >= 0:
              assert sys.platform != "win32"
          
-         self.__timeout = timeout
- 
  
      def _InitializeChild(self):
  
          # Put the child into its own process group.  This step is
          # performed in both the parent and the child; therefore both
          # processes can safely assume that the creation of the process
          # group has taken place.
!         if self.__timeout >= 0:
              os.setpgid(0, 0)
  
          super(TimeoutExecutable, self)._InitializeChild()
  
  
      def _HandleChild(self):
  
          super(TimeoutExecutable, self)._HandleChild()
          
!         if self.__timeout >= 0:
              # Put the child into its own process group.  This step is
              # performed in both the parent and the child; therefore both
              # processes can safely assume that the creation of the process
              # group has taken place.
              child_pid = self._GetChildPID()
--- 383,428 ----
      def __init__(self, timeout = -1):
          """Construct a new 'TimeoutExecutable'.
  
          'timeout' -- The number of seconds that the child is permitted
          to run.  This value may be a floating-point value.  However,
!         the value may be rounded to an integral value on some systems.
!         Once the timeout expires, the child and its entire process
!         group is killed.  (The processes in the process group are sent
!         the 'SIGKILL' signal.)  If the 'timeout' is -2, the child is
!         allowed to run forever, but when it terminates the child's
!         process group is killed.
!         
!         If the 'timeout' is -1, this class behaves exactly like
!         'Executable'."""
  
          super(TimeoutExecutable, self).__init__()
          
+         self.__timeout = timeout
+ 
          # This functionality is not yet supported under Windows.
!         if self.__UseSeparateProcessGroupForChild():
              assert sys.platform != "win32"
          
  
      def _InitializeChild(self):
  
          # Put the child into its own process group.  This step is
          # performed in both the parent and the child; therefore both
          # processes can safely assume that the creation of the process
          # group has taken place.
!         if self.__UseSeparateProcessGroupForChild():
              os.setpgid(0, 0)
  
          super(TimeoutExecutable, self)._InitializeChild()
  
  
      def _HandleChild(self):
  
          super(TimeoutExecutable, self)._HandleChild()
          
!         if self.__UseSeparateProcessGroupForChild():
              # Put the child into its own process group.  This step is
              # performed in both the parent and the child; therefore both
              # processes can safely assume that the creation of the process
              # group has taken place.
              child_pid = self._GetChildPID()
*************** class TimeoutExecutable(Executable):
*** 450,463 ****
                      # Put the monitoring process into the child's process
                      # group.  We know the process group still exists at this
                      # point because either (a) we are in the process
                      # group, or (b) the parent has not yet called waitpid.
                      os.setpgid(0, child_pid)
!                     # Give the child time to run.
!                     time.sleep (self.__timeout)
!                     # Kill all processes in the child process group.
!                     os.kill(0, signal.SIGKILL)
                  finally:
                      # Exit.  This code is in a finally clause so that
                      # we are guaranteed to get here no matter what.
                      os._exit(0)
  
--- 456,473 ----
                      # Put the monitoring process into the child's process
                      # group.  We know the process group still exists at this
                      # point because either (a) we are in the process
                      # group, or (b) the parent has not yet called waitpid.
                      os.setpgid(0, child_pid)
!                     if self.__timeout >= 0:
!                         # Give the child time to run.
!                         time.sleep (self.__timeout)
!                         # Kill all processes in the child process group.
!                         os.kill(0, signal.SIGKILL)
!                     else:
!                         # This call to select will never terminate.
!                         select.select ([], [], [])
                  finally:
                      # Exit.  This code is in a finally clause so that
                      # we are guaranteed to get here no matter what.
                      os._exit(0)
  
*************** class TimeoutExecutable(Executable):
*** 471,487 ****
                                                          environment,
                                                          dir,
                                                          path)
          finally:
              # Clean up the monitoring program; it is no longer needed.
!             if self.__timeout >= 0:
!                 os.kill(self.__monitor_pid, signal.SIGKILL)
                  os.waitpid(self.__monitor_pid, 0)
                  
          return status
  
  
  
  class RedirectedExecutable(TimeoutExecutable):
      """A 'RedirectedExecutable' redirects the standard I/O streams."""
  
      def _InitializeParent(self):
--- 481,507 ----
                                                          environment,
                                                          dir,
                                                          path)
          finally:
              # Clean up the monitoring program; it is no longer needed.
!             if self.__UseSeparateProcessGroupForChild():
!                 os.kill(-self._GetChildPID(), signal.SIGKILL)
                  os.waitpid(self.__monitor_pid, 0)
                  
          return status
  
  
+     def __UseSeparateProcessGroupForChild(self):
+         """Returns true if the child wil be placed in its own process group.
+ 
+         returns -- True if the child wil be placed in its own process
+         group.  In that case, a separate monitoring process will also
+         be created."""
+         
+         return self.__timeout >= 0 or self.__timeout == -2
+ 
+ 
  
  class RedirectedExecutable(TimeoutExecutable):
      """A 'RedirectedExecutable' redirects the standard I/O streams."""
  
      def _InitializeParent(self):
*************** class Filter(RedirectedExecutable):
*** 832,843 ****
          """Create a new 'Filter'.
  
          'input' -- The string containing the input to provide to the
          child process.
  
!         'timeout' -- If non-negative, the number of seconds to wait
!         for the child to complete its processing."""
  
          super(Filter, self).__init__(timeout)
          self.__input = input
          self.__next = 0
  
--- 852,862 ----
          """Create a new 'Filter'.
  
          'input' -- The string containing the input to provide to the
          child process.
  
!         'timeout' -- As for 'TimeoutExecutable.__init__'."""
  
          super(Filter, self).__init__(timeout)
          self.__input = input
          self.__next = 0
  
Index: qm/test/classes/command.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/classes/command.py,v
retrieving revision 1.39
diff -c -5 -p -r1.39 command.py
*** qm/test/classes/command.py	11 Aug 2003 23:33:58 -0000	1.39
--- qm/test/classes/command.py	14 Aug 2003 09:59:48 -0000
*************** class ExecTestBase(Test):
*** 174,184 ****
          'Result.PASS' or to add annotations."""
  
          # Construct the environment.
          environment = self.MakeEnvironment(context)
          # Create the executable.
!         e = qm.executable.Filter(self.stdin, self.timeout)
          # Run it.
          exit_status = e.Run(arguments, environment, path = program)
  
          # If the process terminated normally, check the outputs.
          if sys.platform == "win32" or os.WIFEXITED(exit_status):
--- 174,193 ----
          'Result.PASS' or to add annotations."""
  
          # Construct the environment.
          environment = self.MakeEnvironment(context)
          # Create the executable.
!         if self.timeout >= 0:
!             timeout = self.timeout
!         else:
!             # If no timeout was specified, we sill run this process in a
!             # separate process group and kill the entire process group
!             # when the child is done executing.  That means that
!             # orphaned child processes created by the test will be
!             # cleaned up.
!             timeout = -2
!         e = qm.executable.Filter(self.stdin, timeout)
          # Run it.
          exit_status = e.Run(arguments, environment, path = program)
  
          # If the process terminated normally, check the outputs.
          if sys.platform == "win32" or os.WIFEXITED(exit_status):


From njs at pobox.com  Thu Aug 14 23:38:53 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 14 Aug 2003 16:38:53 -0700
Subject: [PATCH] Reliably close stdin in 'qm.executable.Filter'
Message-ID: <20030814233853.GA3244@njs.dhis.org>

This patch modifies 'TimeoutExecutable' so that the monitor process it
creates closes all fds; this fixes a bug where children spawned by
'Filter' would not see their stdin closed at the appropriate time.
Also adds a new test for this.

-- Nathaniel

-- 
"But in Middle-earth, the distinct accusative case disappeared from
the speech of the Noldor (such things happen when you are busy
fighting Orcs, Balrogs, and Dragons)."
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/ChangeLog qm-close-stdin/ChangeLog
--- qm-clean/ChangeLog	2003-08-14 12:16:07.000000000 -0700
+++ qm-close-stdin/ChangeLog	2003-08-14 16:34:48.000000000 -0700
@@ -1,5 +1,12 @@
 2003-08-14  Nathaniel Smith  <njs at codesourcery.com>
 
+	* qm/executable.py (TimeoutExecutable._HandleChild): Close all
+	fds in the monitor process.
+	* tests/xmldb/test.qms/classes.qms/scripttest_closes_stdin.qmt:
+	New test.
+	
+2003-08-14  Nathaniel Smith  <njs at codesourcery.com>
+
 	* qm/executable.py (RedirectedExecutable._InitializeChild): Fix
 	indentation.
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/executable.py qm-close-stdin/qm/executable.py
--- qm-clean/qm/executable.py	2003-08-14 12:15:59.000000000 -0700
+++ qm-close-stdin/qm/executable.py	2003-08-14 16:34:56.000000000 -0700
@@ -464,6 +464,19 @@
                 # group as the child 
                 os.setpgid(self.__monitor_pid, child_pid)
             else:
+                # Close all fds.  This is especially important to avoid
+                # keeping any pipes to the child process open after our
+                # parent has closed them.
+                try:
+                    max_fds = os.sysconf("SC_OPEN_MAX")
+                except:
+                    max_fds = 256
+                for fd in range(max_fds):
+                    try:
+                        os.close(fd)
+                    except:
+                        pass
+
                 try:
                     # Put the monitoring process into the child's process
                     # group.  We know the process group still exists at this
Binary files qm-clean/results.qmr and qm-close-stdin/results.qmr differ
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/tests/xmldb/test.qms/classes.qms/scripttest_closes_stdin.qmt qm-close-stdin/tests/xmldb/test.qms/classes.qms/scripttest_closes_stdin.qmt
--- qm-clean/tests/xmldb/test.qms/classes.qms/scripttest_closes_stdin.qmt	1969-12-31 16:00:00.000000000 -0800
+++ qm-close-stdin/tests/xmldb/test.qms/classes.qms/scripttest_closes_stdin.qmt	2003-08-14 13:22:55.000000000 -0700
@@ -0,0 +1,13 @@
+<?xml version="1.0" ?>
+<!DOCTYPE extension
+  PUBLIC '-//Software Carpentry//QMTest Extension V0.1//EN'
+  'http://www.software-carpentry.com/qm/xml/extension'>
+<extension class="command.ShellScriptTest" kind="test"><argument name="stdin"><text>foo</text></argument><argument name="stdout"><text>Going to read, expecting data
+Read foo
+Going to read, expecting nothing
+Read </text></argument><argument name="stderr"><text/></argument><argument name="script"><text>echo &quot;Going to read, expecting data&quot;
+read FOO
+echo &quot;Read $FOO&quot;
+echo &quot;Going to read, expecting nothing&quot;
+read BAR
+echo &quot;Read $BAR&quot;</text></argument><argument name="prerequisites"><set/></argument><argument name="target_group"><text>.*</text></argument><argument name="exit_code"><integer>0</integer></argument><argument name="environment"><set/></argument><argument name="arguments"><set/></argument><argument name="timeout"><integer>5</integer></argument><argument name="resources"><set/></argument></extension>
\ No newline at end of file

From mark at codesourcery.com  Fri Aug 15 00:24:16 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 14 Aug 2003 17:24:16 -0700
Subject: [qmtest] [PATCH] Reliably close stdin in 'qm.executable.Filter'
In-Reply-To: <20030814233853.GA3244@njs.dhis.org>
References: <20030814233853.GA3244@njs.dhis.org>
Message-ID: <1060907056.3321.6.camel@minax.codesourcery.com>

On Thu, 2003-08-14 at 16:38, Nathaniel Smith wrote:
> This patch modifies 'TimeoutExecutable' so that the monitor process it
> creates closes all fds; this fixes a bug where children spawned by
> 'Filter' would not see their stdin closed at the appropriate time.
> Also adds a new test for this.

Cool.

+                # Close all fds.  This is especially important to avoid
+                # keeping any pipes to the child process open after our
+                # parent has closed them.

Let's be a little more specific.  How about:

Close all open file descriptors.  They are not needed in the monitor
process.  Furthermore, when the parent closes the write end of the stdin
pipe to the child, we do not want the pipe to remain open; leaving the
pipe open might cause the child to block waiting for additional input.

?

+                for fd in range(max_fds):

Should that use xrange?  I'm never quite sure when one is a win over the
other.  I'll trust your judgement.

Thanks!

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From njs at pobox.com  Fri Aug 15 04:54:43 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 14 Aug 2003 21:54:43 -0700
Subject: [qmtest] [PATCH] Reliably close stdin in 'qm.executable.Filter'
In-Reply-To: <1060907056.3321.6.camel@minax.codesourcery.com>
References: <20030814233853.GA3244@njs.dhis.org> <1060907056.3321.6.camel@minax.codesourcery.com>
Message-ID: <20030815045443.GA18557@njs.dhis.org>

On Thu, Aug 14, 2003 at 05:24:16PM -0700, Mark Mitchell wrote:
> On Thu, 2003-08-14 at 16:38, Nathaniel Smith wrote:
> > This patch modifies 'TimeoutExecutable' so that the monitor process it
> > creates closes all fds; this fixes a bug where children spawned by
> > 'Filter' would not see their stdin closed at the appropriate time.
> > Also adds a new test for this.
> 
> Cool.
> 
> +                # Close all fds.  This is especially important to avoid
> +                # keeping any pipes to the child process open after our
> +                # parent has closed them.
> 
> Let's be a little more specific.  How about:
> 
> Close all open file descriptors.  They are not needed in the monitor
> process.  Furthermore, when the parent closes the write end of the stdin
> pipe to the child, we do not want the pipe to remain open; leaving the
> pipe open might cause the child to block waiting for additional input.
> 
> ?

Sure, that is more informative.

> +                for fd in range(max_fds):
> 
> Should that use xrange?  I'm never quite sure when one is a win over the
> other.  I'll trust your judgement.

Eh, I'm never really sure either.  I think I'll switch to xrange on
the principle that it generally makes more sense to worry about
scaling to large numbers than to small ones, and I've never really
understood how xrange could be slower than range anyway.

Committed with these changes.

-- Nathaniel

-- 
Details are all that matters; God dwells there, and you never get to
see Him if you don't struggle to get them right. -- Stephen Jay Gould


From njs at pobox.com  Fri Aug 15 06:23:42 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 14 Aug 2003 23:23:42 -0700
Subject: [PATCH] misc. cleanups
Message-ID: <20030815062342.GA6270@njs.dhis.org>

Went through my list of assorted QMTest gripes today, so here's a
patch with all the trivial changes.

-- Nathaniel

-- 
Details are all that matters; God dwells there, and you never get to
see Him if you don't struggle to get them right. -- Stephen Jay Gould
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/ChangeLog qm-misc-cleanups/ChangeLog
--- qm-clean/ChangeLog	2003-08-14 23:20:43.000000000 -0700
+++ qm-misc-cleanups/ChangeLog	2003-08-14 22:51:22.000000000 -0700
@@ -1,5 +1,22 @@
 2003-08-14  Nathaniel Smith  <njs at codesourcery.com>
 
+	* qm/executable.py (Executable.Spawn): Remove __has_*_run variables.
+	(Executable._InitializeParent): Likewise.
+	(Executable._HandleChild): Likewise.
+	(Executable._InitializeChild): Likewise.
+	(Executable._DoParent): Likewise.
+	* qm/platform_win32.py (get_user_name): Remove.
+	* qm/platform_unix.py (send_email): Remove.
+	(get_user_name): Remove.
+	* qm/regression_test.py: Remove file.	
+	
+	* qm/test/doc/reference.xml (Field Classes): Fix typo.
+
+	* qm/test/file_result_stream.py (FileResultStream.__init__): Fix
+	indentation.
+	
+2003-08-14  Nathaniel Smith  <njs at codesourcery.com>
+
 	* qm/executable.py (TimeoutExecutable._HandleChild): Close all
 	fds in the monitor process.
 	* tests/xmldb/test.qms/classes.qms/scripttest_closes_stdin.qmt:
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/executable.py qm-misc-cleanups/qm/executable.py
--- qm-clean/qm/executable.py	2003-08-14 23:20:43.000000000 -0700
+++ qm-misc-cleanups/qm/executable.py	2003-08-14 22:46:17.000000000 -0700
@@ -97,15 +97,6 @@
         path using 'dir' as the base, or the current directory if
         'dir' is not set."""
 
-        # None of the hook functions have been run yet.  These flags
-        # are maintained so as to support multiple inheritance; in
-        # that situation these functions in this class may be called
-        # more than once.
-        self.__has_initialize_child_run = 0
-        self.__has_initialize_parent_run = 0
-        self.__has_handle_child_run = 1
-        self.__has_do_parent_run = 0
-        
         # Remember the directory in which the execution will occur.
         self.__dir = dir
 
@@ -272,10 +263,8 @@
         explaining how the child should be initialized.  On other
         systems, the return value is ignored."""
 
-        if not self.__has_initialize_parent_run:
-            self.__has_initialize_parent_run = 1
-            if sys.platform == "win32":
-                return win32process.STARTUPINFO()
+        if sys.platform == "win32":
+            return win32process.STARTUPINFO()
 
 
     def _HandleChild(self):
@@ -287,7 +276,7 @@
 
         Derived class versions must call this method."""
 
-        self.__has_handle_child_run = 1
+        pass
     
         
     def _InitializeChild(self):
@@ -301,16 +290,14 @@
 
         assert sys.platform != "win32"
 
-        if not self.__has_initialize_child_run:
-            self.__has_initialize_child_run = 1
-            if self.__dir:
-                os.chdir(self.__dir)
+        if self.__dir:
+            os.chdir(self.__dir)
 
 
     def _DoParent(self):
         """Perform actions required in the parent after 'Spawn'."""
 
-        self.__has_do_parent_run = 1
+        pass
     
 
     def _GetChildPID(self):
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/platform_unix.py qm-misc-cleanups/qm/platform_unix.py
--- qm-clean/qm/platform_unix.py	2003-08-14 23:20:43.000000000 -0700
+++ qm-misc-cleanups/qm/platform_unix.py	2003-08-14 22:44:02.000000000 -0700
@@ -93,128 +93,6 @@
     os.system("%s '%s' &" % (browser, url))
 
 
-def send_email(body_text,
-               subject,
-               recipients,
-               ccs=[],
-               bccs=[],
-               from_address=None,
-               attachments=[],
-               headers={}):
-    """Send an email message.
-
-    'body_text' -- The message body text.
-
-    'subject' -- The message subject.
-
-    'recipients' -- A sequence of email addresses of message
-    recipients.
-
-    'ccs' -- A sequence of email addresses of recipients of carbon
-    copies.
-
-    'bccs' -- A sequence of email addresses of recipients of blind
-    carbon copies.
-
-    'from_address' -- The message's originating address.  If 'None',
-    the system will fill in the sending user's address.
-
-    'attachments' -- A sequence of email attachments.  Each attachment
-    is a tuple containing '(description, mime_type, file_name,
-    attachment_data)'.  An appropriate encoding is chosen for the data
-    based on the MIME type.
-
-    'headers' -- Additional RFC 822 headers in a map.  Keys are
-    header names and values are corresponding header contents."""
-
-    # Figure out which sendmail (or equivalent) to use.
-    sendmail_path = common.rc.Get("sendmail", "/usr/lib/sendmail",
-                                  "common")
-    # Make sure it exists and is executable.
-    if not os.access(sendmail_path, os.X_OK):
-        raise common.QMException, \
-              qm.error("sendmail error",
-                       sendmail_path=sendmail_path)
-
-    # Start a sendmail process.
-    addresses = map(lambda a: "'%s'" % a, recipients + ccs + bccs)
-    sendmail_command = sendmail_path + " " + string.join(addresses, " ")
-    sendmail = os.popen(sendmail_command, "w")
-    message = MimeWriter.MimeWriter(sendmail)
-
-    # Construct mail headers.
-    if from_address is not None:
-        message.addheader("From", from_address)
-    message.addheader("To", string.join(recipients, ", "))
-    if len(ccs) > 0:
-        message.addheader("CC", string.join(ccs, ", "))
-    if len(bccs) > 0:
-        message.addheader("BCC", string.join(bccs, ", "))
-    for name, value in headers.items():
-        message.addheader(name, value)
-    message.addheader("Subject", subject)
-
-    # Handle messages with attachments differently.
-    if len(attachments) > 0:
-        # Set the MIME version header.
-        message.addheader("MIME-Version", "1.0")
-        # A message with attachments has a content type
-        # "multipart/mixed". 
-        body = message.startmultipartbody("mixed")
-
-        # The text of the message body goes in the first message part.
-        body_part = message.nextpart()
-        body_part.addheader("Content-Description", "message body text")
-        body_part.addheader("Content-Transfer-Encoding", "7bit")
-        body_part_body = body_part.startbody("text/plain")
-        body_part_body.write(body_text)
-
-        # Add the attachments, each in a separate message part.
-        for attachment in attachments:
-            # Unpack the attachment tuple.
-            description, mime_type, file_name, data = attachment
-            # Choose an encoding based on the MIME type.
-            if mime_type == "text/plain":
-                # Plain text encoded as-is.
-                encoding = "7bit"
-            elif mime_type[:4] == "text":
-                # Other types of text are encoded quoted-printable.
-                encoding = "quoted-printable"
-            else:
-                # Everything else is base 64-encoded.
-                encoding = "base64"
-            # Create a new message part for the attachment.
-            part = message.nextpart()
-            part.addheader("Content-Description", description)
-            part.addheader("Content-Disposition",
-                           'attachment; filename="%s"' % file_name)
-            part.addheader("Content-Transfer-Encoding", encoding)
-            part_body = part.startbody('%s; name="%s"'
-                                       % (mime_type, file_name))
-            # Write the attachment data, encoded appropriately.
-            if encoding is "7bit":
-                part_body.write(data)
-            elif encoding is "quoted-printable":
-                quopri.encode(cStringIO.StringIO(data), part_body, quotetabs=0)
-            elif encoding is "base64":
-                base64.encode(cStringIO.StringIO(data), part_body)
-
-        # End the multipart message. 
-        message.lastpart()
-
-    else:
-        # If the message has no attachments, don't use a multipart
-        # format.  Instead, just write the essage bdoy.
-        body = message.startbody("text/plain")
-        body.write(body_text)
-
-    # Finish up.
-    exit_code = sendmail.close()
-    if exit_code is not None:
-        raise MailError, "%s returned with exit code %d" \
-              % (sendmail_path, exit_code)
-
-
 def get_signal_name(signal_number):
     """Return the name for signal 'signal_number'.
 
@@ -246,23 +124,6 @@
     raise SignalException(signal_number)
 
 
-def get_user_name():
-    """Return the name user running the current program."""
-
-    # Get the numerical user ID.
-    user_id = os.getuid()
-    # To convert it to a name, we have to consult the system password file.
-    for line in open("/etc/passwd", "r").readlines():
-        # Each row is constructed of parts delimited by colons.
-        parts = string.split(line, ":")
-        # The third element is the user ID.  Does it match?
-        if int(parts[2]) == user_id:
-            # Yes.  Return the first part, the user name.
-            return parts[0]
-    # No match.
-    raise common.QMException, "user not found in /etc/passwd"
-
-
 def get_host_name():
     """Return the name of this computer."""
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/platform_win32.py qm-misc-cleanups/qm/platform_win32.py
--- qm-clean/qm/platform_win32.py	2003-08-14 23:20:43.000000000 -0700
+++ qm-misc-cleanups/qm/platform_win32.py	2003-08-14 22:44:29.000000000 -0700
@@ -48,12 +48,6 @@
 # functions
 ########################################################################
 
-def get_user_name():
-    """Return the name user running the current program."""
-
-    return os.environ["USERNAME"]
-
-
 def get_host_name():
     """Return the name of this computer."""
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/regression_test.py qm-misc-cleanups/qm/regression_test.py
--- qm-clean/qm/regression_test.py	2003-08-14 23:20:43.000000000 -0700
+++ qm-misc-cleanups/qm/regression_test.py	1969-12-31 16:00:00.000000000 -0800
@@ -1,93 +0,0 @@
-########################################################################
-#
-# File:   regression_test.py
-# Author: Alex Samuel
-# Date:   2000-12-20
-#
-# Contents:
-#   Very simple provisional regression test framework for qm components
-#   to tie us over until qmtest is up and running.
-#
-# Copyright (c) 2000 by CodeSourcery, LLC.  All rights reserved. 
-#
-# For license terms see the file COPYING.
-#
-########################################################################
-
-########################################################################
-# imports
-########################################################################
-
-import getopt
-import string
-import sys
-import traceback
-
-########################################################################
-# functions
-########################################################################
-
-def run_regression_test_driver(regression_tests):
-    """Run regression tests.
-
-    Each regression test is a callable object that takes zero
-    arguments, and returns a true value if the test passes or a false
-    value if the test failes.  Exits the program with a zero exit code
-    if all tests pass, or with a non-zero exit code if some tests
-    fail.
-
-    'regression_tests' -- A sequence of regression tests."""
-
-    keep_going = 0
-    verbosity = 0
-
-    # Parse command-line options.
-    options, args = getopt.getopt(sys.argv[1:], "kv")
-    for option, option_arg in options:
-        if option == "-k":
-            keep_going = 1
-        elif option == "-v":
-            verbosity = verbosity + 1
-
-    def message(min_verbosity, message_text, verbosity=verbosity):
-        if verbosity >= min_verbosity:
-            sys.stdout.write(message_text)
-
-    # Count failures.
-    failures = 0
-    # Run tests.
-    for test in regression_tests:
-        # Invoke the test, handling all exceptions.
-        try:
-            result = apply(test, ())
-            exception = None
-        except:
-            exception = sys.exc_info()
-            
-        # Print the result.
-        message(1, "test %-40s: " % ('"' + test.__name__ + '"'))
-        if exception != None:
-            # The test raised an unhandled exception.  Print a
-            # traceback and the exception info.
-            message(1, "unhandled exception\n")
-            message(2, "Traceback:\n"
-                    + string.join(traceback.format_tb(exception[2]), "")
-                    + "\n%s: %s\n" % (exception[0], exception[1]))
-            failures = failures + 1
-            # Don't continue past an exception, unless asked to.
-            if not keep_going:
-                break
-        elif result:
-            message(1, "passed\n")
-        else:
-            message(1, "failed\n")
-            failures = failures + 1
-
-    return failures
-        
-
-########################################################################
-# Local Variables:
-# mode: python
-# indent-tabs-mode: nil
-# End:
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/test/doc/reference.xml qm-misc-cleanups/qm/test/doc/reference.xml
--- qm-clean/qm/test/doc/reference.xml	2003-08-14 23:20:43.000000000 -0700
+++ qm-misc-cleanups/qm/test/doc/reference.xml	2003-08-14 22:38:45.000000000 -0700
@@ -2070,7 +2070,7 @@
   <para>A &field_class; is a named, typed component of a data
   structure.  A <classname>Field</classname> can read and write XML
   representations of values, generate HTML representations of values,
-  or present HTML forms that permit the user to pudate the value of
+  or present HTML forms that permit the user to update the value of
   the field.  There are several classes derived from
   <classname>Field</classname> that you can use in extension classes.
   If none of those classes satisfy your needs, you can create a new
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/test/file_result_stream.py qm-misc-cleanups/qm/test/file_result_stream.py
--- qm-clean/qm/test/file_result_stream.py	2003-08-14 23:20:43.000000000 -0700
+++ qm-misc-cleanups/qm/test/file_result_stream.py	2003-08-14 22:51:14.000000000 -0700
@@ -64,7 +64,7 @@
                     mode = "wb"
                 else:
                     mode = "w"
-                    self.file = open(self.filename, mode, 0)
+                self.file = open(self.filename, mode, 0)
             else:
                 self.file = sys.stdout
             
Binary files qm-clean/results.qmr and qm-misc-cleanups/results.qmr differ

From mark at codesourcery.com  Fri Aug 15 09:05:42 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 15 Aug 2003 02:05:42 -0700
Subject: [qmtest] [PATCH] misc. cleanups
In-Reply-To: <20030815062342.GA6270@njs.dhis.org>
References: <20030815062342.GA6270@njs.dhis.org>
Message-ID: <1060938341.5680.0.camel@minax.codesourcery.com>

On Thu, 2003-08-14 at 23:23, Nathaniel Smith wrote:
> Went through my list of assorted QMTest gripes today, so here's a
> patch with all the trivial changes.

OK.  Thanks!

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From njs at pobox.com  Tue Aug 19 06:02:08 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Mon, 18 Aug 2003 23:02:08 -0700
Subject: [PATCH] Remove -v/--verbose switch.
Message-ID: <20030819060208.GA12359@njs.dhis.org>

I noticed the -v/--verbose switch today, and was curious what it did.
Answer: absolutely nothing, under any circumstances.

-- Nathaniel

-- 
The Universe may  /  Be as large as they say
But it wouldn't be missed  /  If it didn't exist.
  -- Piet Hein
-------------- next part --------------
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/ChangeLog qm-remove-verbose/ChangeLog
--- qm-clean/ChangeLog	2003-08-16 16:04:58.000000000 -0700
+++ qm-remove-verbose/ChangeLog	2003-08-18 22:53:18.000000000 -0700
@@ -1,3 +1,11 @@
+2003-08-18  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/common.py (verbose): Remove variable.
+	* qm/test/cmdline.py (QMTest.verbose_option_spec): Remove.
+	(QMTest.global_options_spec): Remove 'verbose_option_spec'.
+	(QMTest.Execute): Don't set 'qm.common.verbose'.
+	* qm/test/doc/reference.xml: Don't document -v/--verbose switch.
+
 2003-08-14  Nathaniel Smith  <njs at codesourcery.com>
 
 	* qm/executable.py (Executable.Spawn): Remove __has_*_run variables.
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/common.py qm-remove-verbose/qm/common.py
--- qm-clean/qm/common.py	2003-08-10 23:44:30.000000000 -0700
+++ qm-remove-verbose/qm/common.py	2003-08-18 22:49:44.000000000 -0700
@@ -832,9 +832,6 @@
 # variables
 ########################################################################
 
-verbose = 0
-"""The verbosity level.  Higher values specify more output."""
-
 rc = RcConfiguration()
 """The configuration stored in system and user rc files."""
 
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/test/cmdline.py qm-remove-verbose/qm/test/cmdline.py
--- qm-clean/qm/test/cmdline.py	2003-08-10 13:57:14.000000000 -0700
+++ qm-remove-verbose/qm/test/cmdline.py	2003-08-18 22:52:37.000000000 -0700
@@ -118,13 +118,6 @@
         "Display usage summary."
         )
 
-    verbose_option_spec = (
-        "v",
-        "verbose",
-        None,
-        "Display informational messages."
-        )
-
     version_option_spec = (
         None,
         "version",
@@ -301,7 +294,6 @@
 
     global_options_spec = [
         help_option_spec,
-        verbose_option_spec,
         version_option_spec,
         db_path_option_spec,
         ]
@@ -619,10 +611,6 @@
             self.__WriteCommandHelp(self.__command)
             return 0
 
-        # Handle the verbose option.  The verbose level is the number of
-        # times the verbose option was specified.
-        qm.common.verbose = self.__global_options.count(("verbose", ""))
-
         # Make sure a command was specified.
         if self.__command == "":
             raise qm.cmdline.CommandError, qm.error("missing command")
diff -urN --exclude='*~' --exclude='.*' --exclude=CVS --exclude='*.pyo' --exclude='*.pyc' --exclude=build --exclude=GNUmakefile --exclude=config.log --exclude=config.status --exclude=config.cache --exclude=qmtest --exclude=qm.spec --exclude='*.html' --exclude='*.dtd' --exclude=CATALOG --exclude=__version.py --exclude=thread_target --exclude=process_target qm-clean/qm/test/doc/reference.xml qm-remove-verbose/qm/test/doc/reference.xml
--- qm-clean/qm/test/doc/reference.xml	2003-08-16 16:04:58.000000000 -0700
+++ qm-remove-verbose/qm/test/doc/reference.xml	2003-08-18 22:53:24.000000000 -0700
@@ -598,17 +598,6 @@
      </varlistentry>
 
      <varlistentry>
-      <term><option>-v</option></term>
-      <term><option>&dashdash;verbose</option></term>
-      <listitem>
-       <para>Generate progress and status messages while executing.  This
-       option may be specified more than once; the more times it is
-       specified, the higher the verbose level, and the more messages are
-       printed.</para>
-      </listitem>
-     </varlistentry>
-    
-     <varlistentry>
       <term><option>&dashdash;version</option></term>
       <listitem>
        <para>Describe the version of &qmtest; in use.</para>

From mark at codesourcery.com  Tue Aug 19 06:05:54 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 18 Aug 2003 23:05:54 -0700
Subject: [qmtest] [PATCH] Remove -v/--verbose switch.
In-Reply-To: <20030819060208.GA12359@njs.dhis.org>
References: <20030819060208.GA12359@njs.dhis.org>
Message-ID: <1061273154.16095.7.camel@minax.codesourcery.com>

On Mon, 2003-08-18 at 23:02, Nathaniel Smith wrote:
> I noticed the -v/--verbose switch today, and was curious what it did.
> Answer: absolutely nothing, under any circumstances.

Patch OK.

Thanks,

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From pcisar at users.sourceforge.net  Tue Aug 19 08:03:40 2003
From: pcisar at users.sourceforge.net (Pavel Cisar)
Date: Tue, 19 Aug 2003 10:03:40 +0200
Subject: Natonal characters in tests
Message-ID: <3F41F5FC.27700.31BECCB@localhost>

Hi all,

It's maybe a lame question, but how can I create my own test class that 
can handle national characters in fields ? When I use qm.fields.TextField 
and store national characters in it, I got one from next errors:

Exception type: exceptions.UnicodeError
Exception value: UTF-8 decoding error: invalid data

or

Exception type: xml_database.TestFileError
Exception value: A problem occurred while loading the XML test file 
"isql.exception.create.create_exception_02": <unknown>:16:23: not well-
formed (invalid token).

Depends on national characters used.

qmtest 2.0.3

Any help appreciated
Pavel Cisar
Firebird - Relational Database for the New Millennium
http://www.firebirdsql.org




From stefan.seefeld at orthosoft.ca  Tue Aug 19 16:02:17 2003
From: stefan.seefeld at orthosoft.ca (Stefan Seefeld)
Date: Tue, 19 Aug 2003 12:02:17 -0400
Subject: running qmtest on bash in cygwin...
Message-ID: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>

hi there,

I hope this is not considered offtopic...

I'm trying to run my tests on windows (cygwin), so I set up
everything as usual. However, when calling 'qmtest run...' I get output
of the form

qmtest run --result-stream=xml_result_stream.XMLResultStream > 
test-results.xml
       5 [main] python 1904 sync_with_child: child 1876(0xD0) died 
before initialization with status code 0x1
   10416 [main] python 1904 sync_with_child: *** child state child 
loading dlls

with the last two output lines repeated many times. The test classes
I'm using are built around the qm.executable.RedirectedExecutable class.

Can anybody shed some light on the above error ? What is going wrong ?

Thanks,
		Stefan



From stefan.seefeld at orthosoft.ca  Tue Aug 19 14:03:57 2003
From: stefan.seefeld at orthosoft.ca (Stefan Seefeld)
Date: Tue, 19 Aug 2003 10:03:57 -0400
Subject: RFE: distinguish qmtest failure and test failures in qmtest's return
 value
Message-ID: <f7c1117f145b2982603f734fa517b2d33f422a74@Orthosoft.ca>

hi there,

I'm trying to execute 'qmtest run' from within a Makefile. Unfortunately
with the current qmtest code base there is no way to detect whether
qmtest's execution itself failed (say, because the 'qmtest' command
couldn't be found) or whether the error stems from an (unexpected)
failure of a test execution.

qmtest should use different return codes to indicate the type of
failure, such as '-1' for an internal error and any other non-zero
number to indicate test failures. Then I can write my Makefile to
just ignore failed tests as I deal with these failures on a different
level.

Thanks,
		Stefan



From seefeld at sympatico.ca  Tue Aug 19 20:13:16 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Tue, 19 Aug 2003 16:13:16 -0400
Subject: [qmtest] running qmtest on bash in cygwin...
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
Message-ID: <3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>

just for the record, as Nathaniel told me the problem may be
related to cygwin's sub-process handling, and suggested I use
the win32 python installation instead...

I installed a 'native' python version, and then run
'configure --with-python=/cygdrive/c/python22/python'.
However, even though configure detects now the 'win32' python
executable, this knowledge gets lost. 'make install' will
install the qm package in /usr/local/lib/python2.2/...
(the path of the cygwin python version). Further, qmtest doesn't
remember the python version either, so I have to set the QM_PYTHON
variable.

What is the correct way to make qmtest work with the win32 python
installation ?

Kind regards,
		Stefan



From seefeld at sympatico.ca  Wed Aug 20 14:31:33 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Wed, 20 Aug 2003 10:31:33 -0400
Subject: [qmtest] running qmtest on bash in cygwin...
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca> <3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
Message-ID: <0df83746cc8eb64d2020f01553bcd2d23f43827a@Orthosoft.ca>

Trying to get qmtest up and running on windows with both,
the win32 and the cygwin versions of python, I'm looking
into the toplevel GNUMakefile, and I find the following
lines for a win32 installation:

NATPREFIX       := $(shell cygpath -a -w "$(prefix)")
PYTHON_PKG_PREFIX := $(NATPREFIX)\lib
RELLIBDIR       := lib

Why isn't PYTHON_PKG_PREFIX determined the same way
as it is done for cygwin ? Something like

PYTHON_PKG_PREFIX := $(shell $(PYTHON) -c "import distutils.sysconfig; 
print distutils.sysconfig.get_python_lib()")

returns

c:\python22\Lib\site-packages

which is where third party packages are searched for by default.
Right now the 'qm' package is installed into '/usr/local/lib', which
requires an extra PYTHONPATH environment variable.

Regards,
		Stefan



From mark at codesourcery.com  Wed Aug 20 17:58:52 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 20 Aug 2003 10:58:52 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca> 
	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
Message-ID: <1061402332.22692.25.camel@doubledemon.codesourcery.com>

On Tue, 2003-08-19 at 13:13, Stefan Seefeld wrote:
> just for the record, as Nathaniel told me the problem may be
> related to cygwin's sub-process handling, and suggested I use
> the win32 python installation instead...
> 
> I installed a 'native' python version, and then run
> 'configure --with-python=/cygdrive/c/python22/python'.
> However, even though configure detects now the 'win32' python
> executable, this knowledge gets lost. 'make install' will
> install the qm package in /usr/local/lib/python2.2/...
> (the path of the cygwin python version). Further, qmtest doesn't
> remember the python version either, so I have to set the QM_PYTHON
> variable.
> 
> What is the correct way to make qmtest work with the win32 python
> installation ?

We've never tried using the Cygwin version of Python, so I can't speak
to that.  It might work, but there are places where QMTest makes
OS-dependent decisions, and it may be that it would use Windows behavior
where it should use UNIX-like behavior.

We do use the native Windows version of Python regularly.  The build
process we use can be found in scripts/qm-release.  See the build_exec
function for how we build the Windows binary releases.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Wed Aug 20 18:51:11 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 20 Aug 2003 11:51:11 -0700
Subject: [qmtest] RFE: distinguish qmtest failure and test failures in
	qmtest's return value
In-Reply-To: <f7c1117f145b2982603f734fa517b2d33f422a74@Orthosoft.ca>
References: <f7c1117f145b2982603f734fa517b2d33f422a74@Orthosoft.ca>
Message-ID: <1061405471.3325.5.camel@minax.codesourcery.com>

On Tue, 2003-08-19 at 07:03, Stefan Seefeld wrote:
> hi there,
> 
> I'm trying to execute 'qmtest run' from within a Makefile. Unfortunately
> with the current qmtest code base there is no way to detect whether
> qmtest's execution itself failed (say, because the 'qmtest' command
> couldn't be found) or whether the error stems from an (unexpected)
> failure of a test execution.
> 
> qmtest should use different return codes to indicate the type of
> failure, such as '-1' for an internal error and any other non-zero
> number to indicate test failures. Then I can write my Makefile to
> just ignore failed tests as I deal with these failures on a different
> level.

Stefan --

I think this is a great idea.

I checked in the attached patch, which makes QMTest return 2 for failing
tests and 1 for all other errors.  I've also documented this behavior;
until now the documentation made no promises about the return code.

Thanks,

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
2003-08-20  Mark Mitchell  <mark at codesourcery.com>

	* NEWS: Mention documentation of exit status.
	* qm/test/cmdline.py (QMTest.Execute): Use the return value from
	__ExecuteCreateTdb.
	(QMTest.__ExecuteCreate): Return a value explicitly.
	(QMTest.__ExecuteCreateTdb): Likewise.
	(QMTest.__ExecuteCreateTarget): Likewise.
	(QMTest.__ExecuteSummarize): Likewise.
	(QMTest.__ExecuteRun): Likewise.
	* qm/test/qmtest.py: Simplify handling of exit codes.
	* qm/test/classes/mount_database.py: Fix typo in doc-string.
	* qm/test/doc/reference.xml: Document exit status.

Index: NEWS
===================================================================
RCS file: /home/sc/Repository/qm/NEWS,v
retrieving revision 1.25
diff -c -5 -p -r1.25 NEWS
*** NEWS	30 Jul 2003 22:25:00 -0000	1.25
--- NEWS	20 Aug 2003 18:36:17 -0000
*************** There is now a "-O" or "--outcomes" opti
*** 28,37 ****
--- 28,41 ----
  outcomes, even when working within in the GUI.
  
  There is a new "--result-stream" option to "qmtest run" and "qmtest
  summarize" that allows users to specify custom result streams.
  
+ The exit code returned by QMTest is now documented, and now
+ distinguishes between a failure of QMTest to carry out the action
+ requested by the user and the failure of a test run by QMTest.
+ 
  A defect that could cause a multi-threaded or multi-process tests run
  to hang if a resource could not be set up has been corrected.
  
  Comparisions between the expected standard output and actual standard
  output done by test classes in the "command" module now ignore line
Index: qm/test/cmdline.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/cmdline.py,v
retrieving revision 1.92
diff -c -5 -p -r1.92 cmdline.py
*** qm/test/cmdline.py	10 Aug 2003 20:57:14 -0000	1.92
--- qm/test/cmdline.py	20 Aug 2003 18:36:18 -0000
*************** Valid formats are "full", "brief" (the d
*** 648,659 ****
  
          error_occurred = 0
          
          # Dispatch to the appropriate method.
          if self.__command == "create-tdb":
!             self.__ExecuteCreateTdb(db_path)
!             return 0
          
          method = {
              "create" : self.__ExecuteCreate,
              "create-target" : self.__ExecuteCreateTarget,
              "extensions" : self.__ExecuteExtensions,
--- 648,658 ----
  
          error_occurred = 0
          
          # Dispatch to the appropriate method.
          if self.__command == "create-tdb":
!             return self.__ExecuteCreateTdb(db_path)
          
          method = {
              "create" : self.__ExecuteCreate,
              "create-target" : self.__ExecuteCreateTarget,
              "extensions" : self.__ExecuteExtensions,
*************** Valid formats are "full", "brief" (the d
*** 903,913 ****
          else:
              file = sys.stdout
                                       
          # Write out the file.
          qm.extension.write_extension_file(extension_class, arguments, file)
!         
          
      def __ExecuteCreateTdb(self, db_path):
          """Handle the command for creating a new test database.
  
          'db_path' -- The path at which to create the new test database."""
--- 902,914 ----
          else:
              file = sys.stdout
                                       
          # Write out the file.
          qm.extension.write_extension_file(extension_class, arguments, file)
! 
!         return 0
!     
          
      def __ExecuteCreateTdb(self, db_path):
          """Handle the command for creating a new test database.
  
          'db_path' -- The path at which to create the new test database."""
*************** Valid formats are "full", "brief" (the d
*** 937,947 ****
--- 938,950 ----
          # Now process this just like "qmtest create".
          self.__ExecuteCreate()
          # Print a helpful message.
          self._stdout.write(qm.message("new db message", path=db_path) + "\n")
  
+         return 0
  
+     
      def __ExecuteCreateTarget(self):
          """Create a new target file."""
  
          # Make sure that the arguments are correct.
          if (len(self.__arguments) < 2 or len(self.__arguments) > 3):
*************** Valid formats are "full", "brief" (the d
*** 1060,1069 ****
--- 1063,1074 ----
                      description += ("No description available: "
                                      "could not load class.")
                  description += "\n\n"
                  
              self._stdout.write(qm.structured_text.to_text(description))
+ 
+         return 0
              
  
      def __ExecuteRegister(self):
          """Register a new extension class."""
  
*************** Valid formats are "full", "brief" (the d
*** 1231,1241 ****
                      != outcomes.get(r.GetId(), Result.PASS)):
                      any_unexpected_outcomes = 1
          for s in streams:
              s.Summarize()
  
!         return any_unexpected_outcomes
          
  
      def __ExecuteRemote(self):
          """Execute the 'remote' command."""
  
--- 1236,1249 ----
                      != outcomes.get(r.GetId(), Result.PASS)):
                      any_unexpected_outcomes = 1
          for s in streams:
              s.Summarize()
  
!         if any_unexpected_outcomes:
!             return 2
!         
!         return 0
          
  
      def __ExecuteRemote(self):
          """Execute the 'remote' command."""
  
*************** Valid formats are "full", "brief" (the d
*** 1364,1374 ****
  
          # Run the tests.
          engine = ExecutionEngine(database, test_ids, context, targets,
                                   result_streams,
                                   self.__GetExpectedOutcomes())
!         return engine.Run()
                                                      
  
      def __ExecuteServer(self):
          """Process the server command."""
  
--- 1372,1385 ----
  
          # Run the tests.
          engine = ExecutionEngine(database, test_ids, context, targets,
                                   result_streams,
                                   self.__GetExpectedOutcomes())
!         if engine.Run():
!             return 2
! 
!         return 0
                                                      
  
      def __ExecuteServer(self):
          """Process the server command."""
  
Index: qm/test/qmtest.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/qmtest.py,v
retrieving revision 1.21
diff -c -5 -p -r1.21 qmtest.py
*** qm/test/qmtest.py	11 Aug 2003 06:43:16 -0000	1.21
--- qm/test/qmtest.py	20 Aug 2003 18:36:18 -0000
*************** def main():
*** 91,100 ****
--- 91,103 ----
      
  ########################################################################
  # script
  ########################################################################
  
+ # Assume that something will go wrong.
+ exit_code = 1
+ 
  try:
      # Set the program name.
      qm.common.program_name = "QMTest"
  
      # Load messages.
*************** try:
*** 107,137 ****
          exit_code = main()
      except qm.cmdline.CommandError, msg:
          print_error_message(msg)
          sys.stderr.write(
              "Run 'qmtest --help' to get instructions about how to use QMTest.\n")
-         exit_code = 2
      except qm.common.QMException, msg:
          print_error_message(msg)
-         exit_code = 1
      except NotImplementedError:
          exc_info = sys.exc_info()
          method_name = traceback.extract_tb(exc_info[2])[-1][2]
          print_error_message(qm.message("not implemented",
                                         method_name = method_name))
          sys.stderr.write(qm.common.format_traceback(exc_info))
-         exit_code = 1
      except KeyboardInterrupt:
-         # User killed it; that's OK.
          sys.stderr.write("\nqmtest: Interrupted.\n")
-         exit_code = 0
      except qm.platform.SignalException, se:
!         # SIGTERM indicates a request to shut down.
!         if se.GetSignalNumber() == signal.SIGTERM:
!             exit_code = 1
!         # Other signals should be handled earlier.
!         else:
              raise
  finally:
      # Collect garbage so that any "__del__" methods with externally
      # visible side-effects are executed.
      del qm.test.cmdline._the_qmtest
--- 110,133 ----
          exit_code = main()
      except qm.cmdline.CommandError, msg:
          print_error_message(msg)
          sys.stderr.write(
              "Run 'qmtest --help' to get instructions about how to use QMTest.\n")
      except qm.common.QMException, msg:
          print_error_message(msg)
      except NotImplementedError:
          exc_info = sys.exc_info()
          method_name = traceback.extract_tb(exc_info[2])[-1][2]
          print_error_message(qm.message("not implemented",
                                         method_name = method_name))
          sys.stderr.write(qm.common.format_traceback(exc_info))
      except KeyboardInterrupt:
          sys.stderr.write("\nqmtest: Interrupted.\n")
      except qm.platform.SignalException, se:
!         # SIGTERM indicates a request to shut down.  Other signals
!         # should be handled earlier.
!         if se.GetSignalNumber() != signal.SIGTERM:
              raise
  finally:
      # Collect garbage so that any "__del__" methods with externally
      # visible side-effects are executed.
      del qm.test.cmdline._the_qmtest
Index: qm/test/classes/mount_database.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/classes/mount_database.py,v
retrieving revision 1.2
diff -c -5 -p -r1.2 mount_database.py
*** qm/test/classes/mount_database.py	13 Apr 2003 05:57:29 -0000	1.2
--- qm/test/classes/mount_database.py	20 Aug 2003 18:36:18 -0000
*************** class MountDatabase(Database):
*** 33,43 ****
      database with a mount point of "y" has the ID "x.y" in the
      containing database.
  
      The contained databases are found by looking for subdirectories of
      the 'MountDatabase' directory.  Every immediate subdirectory which
!     is itself a QMTest database is mounted; it's mount point is the
      name of the subdirectory."""
  
      class MountedSuite(Suite):
          """A 'MountedSuite' is a suite from a mounted database."""
  
--- 33,43 ----
      database with a mount point of "y" has the ID "x.y" in the
      containing database.
  
      The contained databases are found by looking for subdirectories of
      the 'MountDatabase' directory.  Every immediate subdirectory which
!     is itself a QMTest database is mounted; its mount point is the
      name of the subdirectory."""
  
      class MountedSuite(Suite):
          """A 'MountedSuite' is a suite from a mounted database."""
  
Index: qm/test/doc/reference.xml
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/doc/reference.xml,v
retrieving revision 1.29
diff -c -5 -p -r1.29 reference.xml
*** qm/test/doc/reference.xml	15 Aug 2003 09:05:23 -0000	1.29
--- qm/test/doc/reference.xml	20 Aug 2003 18:36:19 -0000
***************
*** 1557,1566 ****
--- 1557,1588 ----
        </glossdef>
       </glossentry>
      </glosslist>
  
    </section> <!-- sec-config-file -->
+ 
+   <section id="sec-return-value">
+    <title>Return Value</title>
+ 
+    <para>If QMTest successfully performed the action requested,
+    &qmtest; returns 0.  For the <command>&qmtest-cmd; run</command> or
+    <command>&qmtest-cmd; summarize</command> commands, success implies
+    not only that the tests ran, but also that all of the tests passed
+    (if the <option>&dashdash;outcomes</option> option was not used) or
+    had their expected outcomes (if the
+    <option>&dashdash;outcomes</option> option was used).</para>
+ 
+    <para>If QMTest could not perform the action requested,
+    &qmtest-cmd; returns 1.</para>
+ 
+    <para>If either the <command>run</command> command or the
+    <command>summarize</command> command was used, and at least one
+    test failed (if the <option>&dashdash;outcomes</option> option was
+    not used) or had an unexpected outcome (if the
+    <option>&dashdash;outcomes</option> option was used), &qmtest-cmd;
+    returns 2.</para> 
+   </section> <!-- sec-return-value -->
    
   </section>
  
   <section id="sec-ref-classes">
    <title>Test and Resource Classes</title>

From mark at codesourcery.com  Wed Aug 20 18:57:48 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 20 Aug 2003 11:57:48 -0700
Subject: [qmtest] Natonal characters in tests
In-Reply-To: <3F41F5FC.27700.31BECCB@localhost>
References: <3F41F5FC.27700.31BECCB@localhost>
Message-ID: <1061405868.3325.12.camel@minax.codesourcery.com>

On Tue, 2003-08-19 at 01:03, Pavel Cisar wrote:
> Hi all,
> 
> It's maybe a lame question, but how can I create my own test class that 
> can handle national characters in fields ? When I use qm.fields.TextField 
> and store national characters in it, I got one from next errors:

I think you'd want to create your own Field class, rather than your own
test class.

However, it would be better if we could add Unicode support to
TextField.

I can think of (at least) two issues that will have to be solved:

1. The TextField.MakeDomNodeForValue routine may have to be 
   modified to generate appropriate XML.  Similarly, the 
   GetValueFromDomNode may need modification.

2. The FormatValueAsHtml function will probably need to know how
    to display Unicode.

Is there a way that I can replicate your results, as a U.S. user?

How are you running QMTest and putting in the international characters?

Thanks!

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From zack at codesourcery.com  Wed Aug 20 19:15:09 2003
From: zack at codesourcery.com (Zack Weinberg)
Date: Wed, 20 Aug 2003 12:15:09 -0700
Subject: [qmtest] RFE: distinguish qmtest failure and test failures in
 qmtest's return value
In-Reply-To: <1061405471.3325.5.camel@minax.codesourcery.com> (Mark
 Mitchell's message of "20 Aug 2003 11:51:11 -0700")
References: <f7c1117f145b2982603f734fa517b2d33f422a74@Orthosoft.ca>
	<1061405471.3325.5.camel@minax.codesourcery.com>
Message-ID: <873cfw87k2.fsf@egil.codesourcery.com>

Mark Mitchell <mark at codesourcery.com> writes:

> I checked in the attached patch, which makes QMTest return 2 for failing
> tests and 1 for all other errors.  I've also documented this behavior;
> until now the documentation made no promises about the return code.

Can I suggest it be the other way around - 1 for failing tests, 2 for
errors?  That is consistent with, for instance, GNU cmp.

zw


From mark at codesourcery.com  Wed Aug 20 19:47:46 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 20 Aug 2003 12:47:46 -0700
Subject: [qmtest] RFE: distinguish qmtest failure and test failures in
	qmtest's return value
In-Reply-To: <873cfw87k2.fsf@egil.codesourcery.com>
References: <f7c1117f145b2982603f734fa517b2d33f422a74@Orthosoft.ca>
	<1061405471.3325.5.camel@minax.codesourcery.com> 
	<873cfw87k2.fsf@egil.codesourcery.com>
Message-ID: <1061408867.23232.1.camel@doubledemon.codesourcery.com>

On Wed, 2003-08-20 at 12:15, Zack Weinberg wrote:
> Mark Mitchell <mark at codesourcery.com> writes:
> 
> > I checked in the attached patch, which makes QMTest return 2 for failing
> > tests and 1 for all other errors.  I've also documented this behavior;
> > until now the documentation made no promises about the return code.
> 
> Can I suggest it be the other way around - 1 for failing tests, 2 for
> errors?  That is consistent with, for instance, GNU cmp.

Sure; patch committed.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
-------------- next part --------------
2003-08-20  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/cmdline.py (QMTest.__ExecuteCreate): Return 2 for
	failure, not 1.
	(QMTest.__ExecuteCreateTdb): Likewise.
	(QMTest.__ExecuteCreateTarget): Likewise.
	(QMTest.__ExecuteExtensions): Likewise.
	(QMTest.__ExecuteRegister): Likewise.
	(QMTest.__ExecuteSummarize): Return 2 when a test fails, not 1.
	(QMTest.__ExecuteRun): Likewise.
	* qm/test/qmtest.py: Use 2 as the default exit code, not 1.
	* qm/test/doc/reference.xml: Update accordingly.

Index: qm/test/cmdline.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/cmdline.py,v
retrieving revision 1.94
diff -c -5 -p -r1.94 cmdline.py
*** qm/test/cmdline.py	20 Aug 2003 18:46:57 -0000	1.94
--- qm/test/cmdline.py	20 Aug 2003 19:37:56 -0000
*************** Valid formats are "full", "brief" (the d
*** 852,862 ****
          """Create a new extension file."""
  
          # Check that the right number of arguments are present.
          if len(self.__arguments) != 2:
              self.__WriteCommandHelp("create")
!             return 1
  
          # Figure out what database (if any) we are using.
          try:
              database = self.GetDatabase()
          except:
--- 852,862 ----
          """Create a new extension file."""
  
          # Check that the right number of arguments are present.
          if len(self.__arguments) != 2:
              self.__WriteCommandHelp("create")
!             return 2
  
          # Figure out what database (if any) we are using.
          try:
              database = self.GetDatabase()
          except:
*************** Valid formats are "full", "brief" (the d
*** 901,911 ****
  
          'db_path' -- The path at which to create the new test database."""
  
          if len(self.__arguments) != 0:
              self.__WriteCommandHelp("create-tdb")
!             return 1
          
          # Create the directory if it does not already exists.
          if not os.path.isdir(db_path):
              os.mkdir(db_path)
          # Create the configuration directory.
--- 901,911 ----
  
          'db_path' -- The path at which to create the new test database."""
  
          if len(self.__arguments) != 0:
              self.__WriteCommandHelp("create-tdb")
!             return 2
          
          # Create the directory if it does not already exists.
          if not os.path.isdir(db_path):
              os.mkdir(db_path)
          # Create the configuration directory.
*************** Valid formats are "full", "brief" (the d
*** 935,945 ****
          """Create a new target file."""
  
          # Make sure that the arguments are correct.
          if (len(self.__arguments) < 2 or len(self.__arguments) > 3):
              self.__WriteCommandHelp("create-target")
!             return 1
  
          # Pull the required arguments out of the command line.
          target_name = self.__arguments[0]
          class_name = self.__arguments[1]
          if (len(self.__arguments) > 2):
--- 935,945 ----
          """Create a new target file."""
  
          # Make sure that the arguments are correct.
          if (len(self.__arguments) < 2 or len(self.__arguments) > 3):
              self.__WriteCommandHelp("create-target")
!             return 2
  
          # Pull the required arguments out of the command line.
          target_name = self.__arguments[0]
          class_name = self.__arguments[1]
          if (len(self.__arguments) > 2):
*************** Valid formats are "full", "brief" (the d
*** 1012,1022 ****
          """List the available extension classes."""
  
          # Check that the right number of arguments are present.
          if len(self.__arguments) != 0:
              self.__WriteCommandHelp("extensions")
!             return 1
              
          try:
              database = self.GetDatabase()
          except:
              # If the database could not be opened that's OK; this
--- 1012,1022 ----
          """List the available extension classes."""
  
          # Check that the right number of arguments are present.
          if len(self.__arguments) != 0:
              self.__WriteCommandHelp("extensions")
!             return 2
              
          try:
              database = self.GetDatabase()
          except:
              # If the database could not be opened that's OK; this
*************** Valid formats are "full", "brief" (the d
*** 1061,1071 ****
          """Register a new extension class."""
  
          # Make sure that the KIND and CLASS were specified.
          if (len(self.__arguments) != 2):
              self.__WriteCommandHelp("register")
!             return 1
          kind = self.__arguments[0]
          class_name = self.__arguments[1]
  
          # Check that the KIND is valid.
          if kind not in base.extension_kinds:
--- 1061,1071 ----
          """Register a new extension class."""
  
          # Make sure that the KIND and CLASS were specified.
          if (len(self.__arguments) != 2):
              self.__WriteCommandHelp("register")
!             return 2
          kind = self.__arguments[0]
          class_name = self.__arguments[1]
  
          # Check that the KIND is valid.
          if kind not in base.extension_kinds:
*************** Valid formats are "full", "brief" (the d
*** 1225,1235 ****
                      any_unexpected_outcomes = 1
          for s in streams:
              s.Summarize()
  
          if any_unexpected_outcomes:
!             return 2
          
          return 0
          
  
      def __ExecuteRemote(self):
--- 1225,1235 ----
                      any_unexpected_outcomes = 1
          for s in streams:
              s.Summarize()
  
          if any_unexpected_outcomes:
!             return 1
          
          return 0
          
  
      def __ExecuteRemote(self):
*************** Valid formats are "full", "brief" (the d
*** 1361,1371 ****
          # Run the tests.
          engine = ExecutionEngine(database, test_ids, context, targets,
                                   result_streams,
                                   self.__GetExpectedOutcomes())
          if engine.Run():
!             return 2
  
          return 0
                                                      
  
      def __ExecuteServer(self):
--- 1361,1371 ----
          # Run the tests.
          engine = ExecutionEngine(database, test_ids, context, targets,
                                   result_streams,
                                   self.__GetExpectedOutcomes())
          if engine.Run():
!             return 1
  
          return 0
                                                      
  
      def __ExecuteServer(self):
Index: qm/test/qmtest.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/qmtest.py,v
retrieving revision 1.22
diff -c -5 -p -r1.22 qmtest.py
*** qm/test/qmtest.py	20 Aug 2003 18:46:57 -0000	1.22
--- qm/test/qmtest.py	20 Aug 2003 19:37:57 -0000
*************** def main():
*** 92,102 ****
  ########################################################################
  # script
  ########################################################################
  
  # Assume that something will go wrong.
! exit_code = 1
  
  try:
      # Set the program name.
      qm.common.program_name = "QMTest"
  
--- 92,102 ----
  ########################################################################
  # script
  ########################################################################
  
  # Assume that something will go wrong.
! exit_code = 2
  
  try:
      # Set the program name.
      qm.common.program_name = "QMTest"
  
Index: qm/test/doc/reference.xml
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/doc/reference.xml,v
retrieving revision 1.31
diff -c -5 -p -r1.31 reference.xml
*** qm/test/doc/reference.xml	20 Aug 2003 18:46:57 -0000	1.31
--- qm/test/doc/reference.xml	20 Aug 2003 19:37:58 -0000
***************
*** 1558,1576 ****
     not only that the tests ran, but also that all of the tests passed
     (if the <option>&dashdash;outcomes</option> option was not used) or
     had their expected outcomes (if the
     <option>&dashdash;outcomes</option> option was used).</para>
  
-    <para>If QMTest could not perform the action requested,
-    &qmtest-cmd; returns 1.</para>
- 
     <para>If either the <command>run</command> command or the
     <command>summarize</command> command was used, and at least one
     test failed (if the <option>&dashdash;outcomes</option> option was
     not used) or had an unexpected outcome (if the
     <option>&dashdash;outcomes</option> option was used), &qmtest-cmd;
!    returns 2.</para> 
    </section> <!-- sec-return-value -->
    
   </section>
  
   <section id="sec-ref-classes">
--- 1558,1577 ----
     not only that the tests ran, but also that all of the tests passed
     (if the <option>&dashdash;outcomes</option> option was not used) or
     had their expected outcomes (if the
     <option>&dashdash;outcomes</option> option was used).</para>
  
     <para>If either the <command>run</command> command or the
     <command>summarize</command> command was used, and at least one
     test failed (if the <option>&dashdash;outcomes</option> option was
     not used) or had an unexpected outcome (if the
     <option>&dashdash;outcomes</option> option was used), &qmtest-cmd;
!    returns 1.</para>
! 
!    <para>If QMTest could not perform the action requested,
!    &qmtest-cmd; returns 2.</para>
! 
    </section> <!-- sec-return-value -->
    
   </section>
  
   <section id="sec-ref-classes">

From seefeld at sympatico.ca  Wed Aug 20 19:54:31 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Wed, 20 Aug 2003 15:54:31 -0400
Subject: [qmtest] running qmtest on bash in cygwin...
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca> 	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca> <1061402332.22692.25.camel@doubledemon.codesourcery.com>
Message-ID: <548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>

Mark Mitchell wrote:

> We've never tried using the Cygwin version of Python, so I can't speak
> to that.  It might work, but there are places where QMTest makes
> OS-dependent decisions, and it may be that it would use Windows behavior
> where it should use UNIX-like behavior.
> 
> We do use the native Windows version of Python regularly.  The build
> process we use can be found in scripts/qm-release.  See the build_exec
> function for how we build the Windows binary releases.

just from looking at the GNUMakefile, I see that the version of python
being used decides also whether to install the qmtest (cygwin shell)
script or the qmtest.bat batch file. Does this really make sense ?

As I didn't manage to run qmtest with the cywin python (see the other
post), I'm now trying the win32 python. However, my build system is
still cygwin based, so I still want to run qmtest from a cygwin shell.

Regards,
		Stefan






From mark at codesourcery.com  Wed Aug 20 20:02:43 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 20 Aug 2003 13:02:43 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
		<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
	<1061402332.22692.25.camel@doubledemon.codesourcery.com> 
	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
Message-ID: <1061409763.23203.17.camel@doubledemon.codesourcery.com>

On Wed, 2003-08-20 at 12:54, Stefan Seefeld wrote:
> Mark Mitchell wrote:
> 
> > We've never tried using the Cygwin version of Python, so I can't speak
> > to that.  It might work, but there are places where QMTest makes
> > OS-dependent decisions, and it may be that it would use Windows behavior
> > where it should use UNIX-like behavior.
> > 
> > We do use the native Windows version of Python regularly.  The build
> > process we use can be found in scripts/qm-release.  See the build_exec
> > function for how we build the Windows binary releases.
> 
> just from looking at the GNUMakefile, I see that the version of python
> being used decides also whether to install the qmtest (cygwin shell)
> script or the qmtest.bat batch file. Does this really make sense ?

I'm not sure.  We don't want to key off of config.guess output, because
that will always indicate Cygwin, even when using the native Win32
Python.  Ideally, we'd like to get rid of the shell script/batch file
that is used to bootstrap QMTest, but that's another project...

> As I didn't manage to run qmtest with the cywin python (see the other
> post), I'm now trying the win32 python. However, my build system is
> still cygwin based, so I still want to run qmtest from a cygwin shell.

It should work to use the shell script; you could hack up the
GNUmakefile to use that version.  We'd certainly like if QMTest worked 
under Cygwin, but we haven't tried to do that.  There are probably other
things that will need to change if you use the Cygwin Python; for
example, platform_win32.py should probably not be used in that
environment.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From seefeld at sympatico.ca  Fri Aug 22 14:38:06 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 22 Aug 2003 10:38:06 -0400
Subject: [qmtest] running qmtest on bash in cygwin...
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>	<1061402332.22692.25.camel@doubledemon.codesourcery.com> 	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca> <1061409763.23203.17.camel@doubledemon.codesourcery.com>
Message-ID: <e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>

Mark Mitchell wrote:

>>just from looking at the GNUMakefile, I see that the version of python
>>being used decides also whether to install the qmtest (cygwin shell)
>>script or the qmtest.bat batch file. Does this really make sense ?
> 
> 
> I'm not sure.  We don't want to key off of config.guess output, because
> that will always indicate Cygwin, even when using the native Win32
> Python.  Ideally, we'd like to get rid of the shell script/batch file
> that is used to bootstrap QMTest, but that's another project...

well, the generated qmtest.bat file is broken, as the GNUMakefile.in
currently hardcodes the (wrong !) paths. Appended is a fix that uses
the $(NATPREFIX) instead, consistent with the rest of the Makefile...

Regards,
		Stefan


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: GNUmakefile.in.diff
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030822/f1829696/attachment.ksh>

From seefeld at sympatico.ca  Sat Aug 23 02:07:05 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 22 Aug 2003 22:07:05 -0400
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <1061409763.23203.17.camel@doubledemon.codesourcery.com>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>	<1061402332.22692.25.camel@doubledemon.codesourcery.com> 	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca> <1061409763.23203.17.camel@doubledemon.codesourcery.com>
Message-ID: <3F46CC49.9060506@sympatico.ca>

Mark Mitchell wrote:

 >>just from looking at the GNUMakefile, I see that the version of python
 >>being used decides also whether to install the qmtest (cygwin shell)
 >>script or the qmtest.bat batch file. Does this really make sense ?
 >
 >
 > I'm not sure.  We don't want to key off of config.guess output, because
 > that will always indicate Cygwin, even when using the native Win32
 > Python.  Ideally, we'd like to get rid of the shell script/batch file
 > that is used to bootstrap QMTest, but that's another project...

...speaking of which: I had a closer look at the current build procedure
qmtest is using. I also had a little discussion with Nathaniel concerning
the specific requirements this build system should meet.

What about a build procedure purely based on python's distutils package ?
The setup.py scripts can contain different sets of files to install:

* python modules
* data files
* scripts

And with 'python setup.py --prefix=...' or 'python setup.py --home=...' you
have pretty much complete control over where everything is installed. There
are even more fine-grained options to specifically control scripts, data files,
and modules, if the above isn't sufficient.

The default installation would put the modules under python's site-packages,
and the rest into /usr/local/[share, bin], which is what I would expect
from a typical debian / rpm package.

And for those who want everything in a single isolated place, an installation
using the '--home' parameter would probably do the trick. In any case, the
main executable could be a python script, and some little experimentation
suggests that the qm/test/qmtest.py file is almost ready to serve, i.e.
the qmtest.[bat, sh] files aren't really needed then.
There are only two parameters: the PYTHONPATH, if the modules are not
in the default location, and a variable (which could be substituted into
an installed module) that indicates the location of the data files.
That's about it.

Am I missing anything ?
I would volunteer to provide the needed patches, if you agree that this
is the right thing to do...

Kind regards,
		Stefan

PS: to be able to execute qmtest from within the working directory the cvs
     repo file layout should probably be adjusted a little, but that is, as
     njs told me, something you'd consider in a cleanup anyways ;-)



From zack at codesourcery.com  Sat Aug 23 02:24:56 2003
From: zack at codesourcery.com (Zack Weinberg)
Date: Fri, 22 Aug 2003 19:24:56 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <3F46CC49.9060506@sympatico.ca> (Stefan Seefeld's message of
 "Fri, 22 Aug 2003 22:07:05 -0400")
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
	<1061402332.22692.25.camel@doubledemon.codesourcery.com>
	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
	<1061409763.23203.17.camel@doubledemon.codesourcery.com>
	<3F46CC49.9060506@sympatico.ca>
Message-ID: <87bruht8jr.fsf@egil.codesourcery.com>

Stefan Seefeld <seefeld at sympatico.ca> writes:

> What about a build procedure purely based on python's distutils package ?
> The setup.py scripts can contain different sets of files to install:
>
> * python modules
> * data files
> * scripts
>
> And with 'python setup.py --prefix=...' or 'python setup.py
> --home=...' you have pretty much complete control over where
> everything is installed. There are even more fine-grained options to
> specifically control scripts, data files, and modules, if the above
> isn't sufficient.
>
> The default installation would put the modules under python's site-packages,
> and the rest into /usr/local/[share, bin], which is what I would expect
> from a typical debian / rpm package.
>
> And for those who want everything in a single isolated place, an installation
> using the '--home' parameter would probably do the trick. In any case, the
> main executable could be a python script, and some little experimentation
> suggests that the qm/test/qmtest.py file is almost ready to serve, i.e.
> the qmtest.[bat, sh] files aren't really needed then.
> There are only two parameters: the PYTHONPATH, if the modules are not
> in the default location, and a variable (which could be substituted into
> an installed module) that indicates the location of the data files.
> That's about it.

My understanding is that this is a desired change, but none of us know
how to do it.  I know I looked into this at one point and found that
distutils was not sufficiently documented for me to be able to do
anything with it.

Mark may have more specific concerns.

zw


From mark at codesourcery.com  Sat Aug 23 17:11:09 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 23 Aug 2003 10:11:09 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <87bruht8jr.fsf@egil.codesourcery.com>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
	<1061402332.22692.25.camel@doubledemon.codesourcery.com>
	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
	<1061409763.23203.17.camel@doubledemon.codesourcery.com>
	<3F46CC49.9060506@sympatico.ca>  <87bruht8jr.fsf@egil.codesourcery.com>
Message-ID: <1061658669.28926.115.camel@doubledemon.codesourcery.com>

On Fri, 2003-08-22 at 19:24, Zack Weinberg wrote:
> Stefan Seefeld <seefeld at sympatico.ca> writes:
> 
> > What about a build procedure purely based on python's distutils package ?
> > The setup.py scripts can contain different sets of files to install:
> >
> > * python modules
> > * data files
> > * scripts
> >
> > And with 'python setup.py --prefix=...' or 'python setup.py
> > --home=...' you have pretty much complete control over where
> > everything is installed. There are even more fine-grained options to
> > specifically control scripts, data files, and modules, if the above
> > isn't sufficient.

Certainly, if distutils can do the whole job, we'd prefer that.

We started out with "make" several years ago (when Python 1.5 was our
standard version of Python and distutils was a separate module); nobody
has ever tried to go back and eliminate make.

> > The default installation would put the modules under python's site-packages,
> > and the rest into /usr/local/[share, bin], which is what I would expect
> > from a typical debian / rpm package.

Yes, that sounds right.

> > And for those who want everything in a single isolated place, an installation
> > using the '--home' parameter would probably do the trick. In any case, the

"./configure --prefix" should still have that effect.

That's very important because one mode in which QMTest is distributed is
as a tarball containing binaries for both QMTest and Python.  That's
important for users on systems where Python isn't installed by default.

The high-level concept is that while we'd like QMTest to play better
with Python, we want to keep it usable as an independent application as
well.

> > main executable could be a python script, and some little experimentation
> > suggests that the qm/test/qmtest.py file is almost ready to serve, i.e.
> > the qmtest.[bat, sh] files aren't really needed then.

That is also a desirable goal.  

However, the logic where by qmtest.sh finds a version of Python
installed in /path/to/qmtest/bin is required for the set-up above. 
Therefore, something has to be done to preserve that behavior, or
something equivalent.

Perhaps playing these kind of games with the script:

  #! /bin/sh exec $0

(with something more advanced) would work.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From seefeld at sympatico.ca  Sat Aug 23 17:40:51 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Sat, 23 Aug 2003 13:40:51 -0400
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <1061658669.28926.115.camel@doubledemon.codesourcery.com>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>	<1061402332.22692.25.camel@doubledemon.codesourcery.com>	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>	<1061409763.23203.17.camel@doubledemon.codesourcery.com>	<3F46CC49.9060506@sympatico.ca>  <87bruht8jr.fsf@egil.codesourcery.com> <1061658669.28926.115.camel@doubledemon.codesourcery.com>
Message-ID: <3F47A723.2070701@sympatico.ca>

Mark Mitchell wrote:

>>>The default installation would put the modules under python's site-packages,
>>>and the rest into /usr/local/[share, bin], which is what I would expect
>>>from a typical debian / rpm package.
> 
> 
> Yes, that sounds right.
> 
> 
>>>And for those who want everything in a single isolated place, an installation
>>>using the '--home' parameter would probably do the trick. In any case, the
> 
> 
> "./configure --prefix" should still have that effect.

hmm, I thought to eliminate configure, too.

> That's very important because one mode in which QMTest is distributed is
> as a tarball containing binaries for both QMTest and Python.  That's
> important for users on systems where Python isn't installed by default.

could you elaborate a bit on that ? Usually when distributing binary
packages, there isn't any configure script (involved any more).

> The high-level concept is that while we'd like QMTest to play better
> with Python, we want to keep it usable as an independent application as
> well.

independent in the sense that it is bundled together with a python distro
such that there are no external dependencies ?

How do you package python then ? It sounds all you need for this case
is an installer that first unpacks python at a specific place and then
calls the python binary with the 'setup.py' script that is part of the
QMTest distribution.

>>>main executable could be a python script, and some little experimentation
>>>suggests that the qm/test/qmtest.py file is almost ready to serve, i.e.
>>>the qmtest.[bat, sh] files aren't really needed then.
> 
> 
> That is also a desirable goal.  
> 
> However, the logic where by qmtest.sh finds a version of Python
> installed in /path/to/qmtest/bin is required for the set-up above. 

the 'python setup.py build' command usually replaces the
'#! /usr/bin/env python' line in all installed scripts with the
real path to the python interpreter you use for the installation.
Sounds like that would meet your requirement.


> Therefore, something has to be done to preserve that behavior, or
> something equivalent.

see above.

Regards,
		Stefan




From zack at codesourcery.com  Sat Aug 23 18:11:52 2003
From: zack at codesourcery.com (Zack Weinberg)
Date: Sat, 23 Aug 2003 11:11:52 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <1061658669.28926.115.camel@doubledemon.codesourcery.com> (Mark
 Mitchell's message of "23 Aug 2003 10:11:09 -0700")
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
	<1061402332.22692.25.camel@doubledemon.codesourcery.com>
	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
	<1061409763.23203.17.camel@doubledemon.codesourcery.com>
	<3F46CC49.9060506@sympatico.ca> <87bruht8jr.fsf@egil.codesourcery.com>
	<1061658669.28926.115.camel@doubledemon.codesourcery.com>
Message-ID: <87u188s0pj.fsf@egil.codesourcery.com>

Mark Mitchell <mark at codesourcery.com> writes:

> However, the logic where by qmtest.sh finds a version of Python
> installed in /path/to/qmtest/bin is required for the set-up above. 
> Therefore, something has to be done to preserve that behavior, or
> something equivalent.

I normally hate the #! /usr/bin/env python trick, but this seems like
exactly the case it was meant to handle - where all that is known is
that the python interpreter is somewhere on the user's path.  The Unix
just-unpack-this-tarball distribution could use that, and the
documentation say that you have to put /path/to/qmtest/bin in your
PATH.

The "RPM package installation" mode, where we can assume the existence
of a preinstalled python interpreter, can just use #! /usr/bin/python
as usual.

I don't know what to do on Windows.

zw


From mark at codesourcery.com  Sat Aug 23 20:57:24 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 23 Aug 2003 13:57:24 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <3F47A723.2070701@sympatico.ca>
References: 	<9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>	<3f5c5fb36a96e70ca5f
	1903caa281d5b3f428101@Orthosoft.ca>	<1061402332.22692.25.camel@doubledemon.c
	odesourcery.com>	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>	<10
	61409763.23203.17.camel@doubledemon.codesourcery.com>	<3F46CC49.9060506@symp
	atico.ca>  <87bruht8jr.fsf@egil.codesourcery.com>
	<1061658669.28926.115.camel@doubledemon.codesourcery.com> 
	<3F47A723.2070701@sympatico.ca>
Message-ID: <1061672244.28926.127.camel@doubledemon.codesourcery.com>

On Sat, 2003-08-23 at 10:40, Stefan Seefeld wrote:
> Mark Mitchell wrote:
> 
> >>>The default installation would put the modules under python's site-packages,
> >>>and the rest into /usr/local/[share, bin], which is what I would expect
> >>>from a typical debian / rpm package.
> > 
> > 
> > Yes, that sounds right.
> > 
> > 
> >>>And for those who want everything in a single isolated place, an installation
> >>>using the '--home' parameter would probably do the trick. In any case, the
> > 
> > 
> > "./configure --prefix" should still have that effect.
> 
> hmm, I thought to eliminate configure, too.

That's fine, if you can make it work.

However, we don't want to assume the user is installing the binary
package on some nicely configured GNU/Linux box.

Imagine it's a HP-UX or AIX box, with no Python (or, worse, an old
broken Python) installed.  

Just getting Python *built* correctly on such a box is hard; ask Zack
about that. :-)  So, we want to distribute Python binaries along with
QMTest, and the installation procedure for the combined package should
be:

  gunzip qmtest-x.y-binary.tar.gz
  tar xvf qmtest-x.y-binary.tar

The user shouldn't have to modify their PATH, configuration files, etc.

For example, that's why we don't just want to pick the Python in the
user's path.  There's a good chance the Python in the user's path is
broken, old, or wrong in this situation.  The "find the Python next to
QMTest" trick in qm.sh is designed precisely for this case.

It would be fine to make using that trick optional (so that on a nicely
set up Debian box it wasn't necessary, for example), but we can't
eliminate it -- unless somebody can come up with a better plan.

> > The high-level concept is that while we'd like QMTest to play better
> > with Python, we want to keep it usable as an independent application as
> > well.
> 
> independent in the sense that it is bundled together with a python distro
> such that there are no external dependencies ?

Correct.

> How do you package python then ? It sounds all you need for this case
> is an installer that first unpacks python at a specific place and then
> calls the python binary with the 'setup.py' script that is part of the
> QMTest distribution.

It's possible that could work.  

If there were one more step added to the installation procedure above,
like, say:

  qmtest-x.y/bin/python qmtest-x.y/share/setup.py

That would be OK.

We're not particular about how exactly this works, but it must work in
such a way that a newbie user/sysadmin can easily get QMTest installed.

It's like those Apple adds for the I-mac -- "There is no step 3." :-)

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Sat Aug 23 21:01:23 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 23 Aug 2003 14:01:23 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <87u188s0pj.fsf@egil.codesourcery.com>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
	<1061402332.22692.25.camel@doubledemon.codesourcery.com>
	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
	<1061409763.23203.17.camel@doubledemon.codesourcery.com>
	<3F46CC49.9060506@sympatico.ca> <87bruht8jr.fsf@egil.codesourcery.com>
	<1061658669.28926.115.camel@doubledemon.codesourcery.com> 
	<87u188s0pj.fsf@egil.codesourcery.com>
Message-ID: <1061672483.21778.132.camel@doubledemon.codesourcery.com>

On Sat, 2003-08-23 at 11:11, Zack Weinberg wrote:
> Mark Mitchell <mark at codesourcery.com> writes:
> 
> > However, the logic where by qmtest.sh finds a version of Python
> > installed in /path/to/qmtest/bin is required for the set-up above. 
> > Therefore, something has to be done to preserve that behavior, or
> > something equivalent.
> 
> I normally hate the #! /usr/bin/env python trick, but this seems like
> exactly the case it was meant to handle - where all that is known is
> that the python interpreter is somewhere on the user's path.  The Unix
> just-unpack-this-tarball distribution could use that, and the
> documentation say that you have to put /path/to/qmtest/bin in your
> PATH.

We actually should not require that.  Some people don't know how to do
that, and some people will forget and get the wrong PATH.

Now, if we can fancy up the /usr/bin/env trick to get us the Python next
to QMTest (if it exists), that would be fine.  We should also preserve
the QM_PYTHON/QM_HOME bits from the current shell script.

I bet thiis is possible if we get clever enough, somehow.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From zack at codesourcery.com  Sun Aug 24 02:02:03 2003
From: zack at codesourcery.com (Zack Weinberg)
Date: Sat, 23 Aug 2003 19:02:03 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <1061672483.21778.132.camel@doubledemon.codesourcery.com> (Mark
 Mitchell's message of "23 Aug 2003 14:01:23 -0700")
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
	<1061402332.22692.25.camel@doubledemon.codesourcery.com>
	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
	<1061409763.23203.17.camel@doubledemon.codesourcery.com>
	<3F46CC49.9060506@sympatico.ca> <87bruht8jr.fsf@egil.codesourcery.com>
	<1061658669.28926.115.camel@doubledemon.codesourcery.com>
	<87u188s0pj.fsf@egil.codesourcery.com>
	<1061672483.21778.132.camel@doubledemon.codesourcery.com>
Message-ID: <87ekzbstic.fsf@egil.codesourcery.com>

Mark Mitchell <mark at codesourcery.com> writes:

> On Sat, 2003-08-23 at 11:11, Zack Weinberg wrote:
>> I normally hate the #! /usr/bin/env python trick, but this seems like
>> exactly the case it was meant to handle - where all that is known is
>> that the python interpreter is somewhere on the user's path.  The Unix
>> just-unpack-this-tarball distribution could use that, and the
>> documentation say that you have to put /path/to/qmtest/bin in your
>> PATH.
>
> We actually should not require that.  Some people don't know how to do
> that, and some people will forget and get the wrong PATH.
>
> Now, if we can fancy up the /usr/bin/env trick to get us the Python next
> to QMTest (if it exists), that would be fine.  We should also preserve
> the QM_PYTHON/QM_HOME bits from the current shell script.
>
> I bet thiis is possible if we get clever enough, somehow.

It's not clear to me just how much cleverness we need.  On the Unix
side of things, there are three cases:

* a good python is installed in a well-known location.
  #! /usr/bin/python will work.

* a good python is installed in a strange location, but it's on the path.
  #! /usr/bin/env python will work.

* there is no good python interpreter on the system other than the one
  that got unpacked from the tarball.

  A small shell script to invoke the python interpreter is necessary.

It may be possible to do very clever things so that the shell script
is embedded in qmtest.py -- like this:

#! /bin/sh
""":" # null command to sh, beginning of docstring to python
case "$0" in
  */*)
    pydir=`echo "$0" | sed 's|/[^/]*$|/|'` ;;
  *)
    pydir=./
esac
exec "$pydir"python "$0" "$@" # shell never sees past this line
""" # end docstring

python code here

but frankly I would rather that the just-unpack-the-tarball distro
continue to contain separate "qmtest" shell wrapper and "qmtest.py"
real program.  The above hasn't a prayer of working on Windows, and is
liable to break in other places too.

zw



From mark at codesourcery.com  Sun Aug 24 03:07:50 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 23 Aug 2003 20:07:50 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <87ekzbstic.fsf@egil.codesourcery.com>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
	<1061402332.22692.25.camel@doubledemon.codesourcery.com>
	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
	<1061409763.23203.17.camel@doubledemon.codesourcery.com>
	<3F46CC49.9060506@sympatico.ca> <87bruht8jr.fsf@egil.codesourcery.com>
	<1061658669.28926.115.camel@doubledemon.codesourcery.com>
	<87u188s0pj.fsf@egil.codesourcery.com>
	<1061672483.21778.132.camel@doubledemon.codesourcery.com> 
	<87ekzbstic.fsf@egil.codesourcery.com>
Message-ID: <1061694470.21778.145.camel@doubledemon.codesourcery.com>

On Sat, 2003-08-23 at 19:02, Zack Weinberg wrote:
> Mark Mitchell <mark at codesourcery.com> writes:
> 
> > On Sat, 2003-08-23 at 11:11, Zack Weinberg wrote:
> >> I normally hate the #! /usr/bin/env python trick, but this seems like
> >> exactly the case it was meant to handle - where all that is known is
> >> that the python interpreter is somewhere on the user's path.  The Unix
> >> just-unpack-this-tarball distribution could use that, and the
> >> documentation say that you have to put /path/to/qmtest/bin in your
> >> PATH.
> >
> > We actually should not require that.  Some people don't know how to do
> > that, and some people will forget and get the wrong PATH.
> >
> > Now, if we can fancy up the /usr/bin/env trick to get us the Python next
> > to QMTest (if it exists), that would be fine.  We should also preserve
> > the QM_PYTHON/QM_HOME bits from the current shell script.
> >
> > I bet thiis is possible if we get clever enough, somehow.
> 
> It's not clear to me just how much cleverness we need.  On the Unix
> side of things, there are three cases:
> 
> * a good python is installed in a well-known location.
>   #! /usr/bin/python will work.
> 
> * a good python is installed in a strange location, but it's on the path.
>   #! /usr/bin/env python will work.
> 
> * there is no good python interpreter on the system other than the one
>   that got unpacked from the tarball.
> 
>   A small shell script to invoke the python interpreter is necessary.
> 
> It may be possible to do very clever things so that the shell script
> is embedded in qmtest.py -- like this:
> 
> #! /bin/sh
> """:" # null command to sh, beginning of docstring to python
> case "$0" in
>   */*)
>     pydir=`echo "$0" | sed 's|/[^/]*$|/|'` ;;
>   *)
>     pydir=./
> esac
> exec "$pydir"python "$0" "$@" # shell never sees past this line
> """ # end docstring

Oh my, that is clever. :-)
> 

> but frankly I would rather that the just-unpack-the-tarball distro
> continue to contain separate "qmtest" shell wrapper and "qmtest.py"
> real program.  The above hasn't a prayer of working on Windows, and is
> liable to break in other places too.

I think in Windows we do not need to worry about this issue; for
Windows, there are nice tidy Python installers and people seem to have
no problem installing them.

On UNIX, we need to either something like your cleverness above, or have
a separate shell script.

I suppose we could also have a qmtest.py that just had "#! /usr/bin/env
python" and a "qmtest" shell script with more logic.  You could then run
either one, and for an RPM / Debian package you would make a symlink
from "qmtest" to "qmtest.py", instead of installing the qmtest shell
script.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Mon Aug 25 03:19:32 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 24 Aug 2003 20:19:32 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
	 <3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>
	 <1061402332.22692.25.camel@doubledemon.codesourcery.com>
	 <548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
	 <1061409763.23203.17.camel@doubledemon.codesourcery.com>
	 <e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>
Message-ID: <1061781572.10827.72.camel@minax.codesourcery.com>

On Fri, 2003-08-22 at 07:38, Stefan Seefeld wrote:
> Mark Mitchell wrote:
> 
> >>just from looking at the GNUMakefile, I see that the version of python
> >>being used decides also whether to install the qmtest (cygwin shell)
> >>script or the qmtest.bat batch file. Does this really make sense ?
> > 
> > 
> > I'm not sure.  We don't want to key off of config.guess output, because
> > that will always indicate Cygwin, even when using the native Win32
> > Python.  Ideally, we'd like to get rid of the shell script/batch file
> > that is used to bootstrap QMTest, but that's another project...
> 
> well, the generated qmtest.bat file is broken, as the GNUMakefile.in
> currently hardcodes the (wrong !) paths. Appended is a fix that uses
> the $(NATPREFIX) instead, consistent with the rest of the Makefile...

It certainly hardcodes them, but why do you say they are the "wrong"
paths?  Those are the paths where the Windows package puts QMTest, if I
recall correctly.

In any case, I think your patch is an improvement.  Older versions of
Python in combination with older versions of Windows didn't like having
a space in QM_HOME, but I don't think we need to worry about that now.

Have you tested your patch?

I'll check it in after I do so.

Thanks,

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From seefeld at sympatico.ca  Mon Aug 25 12:53:52 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Mon, 25 Aug 2003 08:53:52 -0400
Subject: [qmtest] running qmtest on bash in cygwin...
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>	 <3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>	 <1061402332.22692.25.camel@doubledemon.codesourcery.com>	 <548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>	 <1061409763.23203.17.camel@doubledemon.codesourcery.com>	 <e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca> <1061781572.10827.72.camel@minax.codesourcery.com>
Message-ID: <047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca>

Mark Mitchell wrote:
> On Fri, 2003-08-22 at 07:38, Stefan Seefeld wrote:
> 
>>Mark Mitchell wrote:
>>
>>
>>>>just from looking at the GNUMakefile, I see that the version of python
>>>>being used decides also whether to install the qmtest (cygwin shell)
>>>>script or the qmtest.bat batch file. Does this really make sense ?
>>>
>>>
>>>I'm not sure.  We don't want to key off of config.guess output, because
>>>that will always indicate Cygwin, even when using the native Win32
>>>Python.  Ideally, we'd like to get rid of the shell script/batch file
>>>that is used to bootstrap QMTest, but that's another project...
>>
>>well, the generated qmtest.bat file is broken, as the GNUMakefile.in
>>currently hardcodes the (wrong !) paths. Appended is a fix that uses
>>the $(NATPREFIX) instead, consistent with the rest of the Makefile...
> 
> 
> It certainly hardcodes them, but why do you say they are the "wrong"
> paths?  Those are the paths where the Windows package puts QMTest, if I
> recall correctly.

hmm, apparently that was the path for python 1.x.
I installed python 2.2 and it got installed in c:\python22.

> In any case, I think your patch is an improvement.  Older versions of
> Python in combination with older versions of Windows didn't like having
> a space in QM_HOME, but I don't think we need to worry about that now.
> 
> Have you tested your patch?

well, I run 'make install' and then called 'qmtest extensions' which
reported its extensions correctly, so I assume it works.

Hopefully I'll submit a new setup.py script later today as discussed
in another thread so no scripts are needed any more. In case you'd
rather wait...

Regards,
		Stefan




From mark at codesourcery.com  Mon Aug 25 15:17:00 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 25 Aug 2003 08:17:00 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>	
	<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>	
	<1061402332.22692.25.camel@doubledemon.codesourcery.com>	
	<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>	
	<1061409763.23203.17.camel@doubledemon.codesourcery.com>	
	<e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>
	<1061781572.10827.72.camel@minax.codesourcery.com> 
	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca>
Message-ID: <1061824620.29338.12.camel@doubledemon.codesourcery.com>


> well, I run 'make install' and then called 'qmtest extensions' which
> reported its extensions correctly, so I assume it works.
> 
> Hopefully I'll submit a new setup.py script later today as discussed
> in another thread so no scripts are needed any more. In case you'd
> rather wait...

OK, sounds great!

Please make sure that you read:

  http://www.codesourcery.com/contributions?program=QMTest

We'll need some paperwork from you before we can accept your
contributions.

I look forward to your patch!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From seefeld at sympatico.ca  Mon Aug 25 20:11:15 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Mon, 25 Aug 2003 16:11:15 -0400
Subject: [qmtest] running qmtest on bash in cygwin...
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>		<1061402332.22692.25.camel@doubledemon.codesourcery.com>		<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>		<1061409763.23203.17.camel@doubledemon.codesourcery.com>		<e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>	<1061781572.10827.72.camel@minax.codesourcery.com> 	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca> <1061824620.29338.12.camel@doubledemon.codesourcery.com>
Message-ID: <3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca>

Mark Mitchell wrote:

>>Hopefully I'll submit a new setup.py script later today as discussed
>>in another thread so no scripts are needed any more. In case you'd
>>rather wait...
> 
> 
> OK, sounds great!
> 
> Please make sure that you read:
> 
>   http://www.codesourcery.com/contributions?program=QMTest
> 
> We'll need some paperwork from you before we can accept your
> contributions.

ok, paper sent in, and here is a first patch.
As you will see from the diff, the changes are very conservative,
i.e. the only changes to the code are an attempted import of a
'config' module that is generated during the installation. If that
fails, a fake config object is created instead.

The new stuff is in the new toplevel 'setup.py' file. The new thing
here is that the 'install_data' variable that the python distutils
uses to install data files is coded into the 'config' module and
therefor acccessible to the code that needs them.
I hope that this mechanism can phase out the need for the 'QM_HOME'
and other environment variables.
Also to note is the fact that the magic number on top of the qmtest.py
script is replaced with the name of the actual python executable that
was used for the installation. Therefor 'QM_PYTHON' is obsolete, too.

Unfortunately, this doesn't quite work out for qmtest with the win32
python, but on a cygwin shell: Calling qmtest.py on a cygwin shell
would implicitely call 'python.exe /the/path/to/qmtest.py' but
python.exe is not able to deal with the path that way. What's needed
is a little wrapper script (only on windows !) that uses 'cygpath'
to map the path to the proper windows spelling first.

The next step will be to provide a command 'doc' that lets users
build the documentation via 'python setup.py doc'...

Regards,
		Stefan
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: setup.py
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030825/8311ee3f/attachment.ksh>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030825/8311ee3f/attachment-0001.ksh>

From mark at codesourcery.com  Tue Aug 26 03:10:40 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 25 Aug 2003 20:10:40 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>		<1061402332.22692.25.camel@doubledemon.codesourcery.com>		<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>		<1061409763.23203.17.camel@doubledemon.codesourcery.com>		<e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>	<1061781572.10827.72.camel@minax.codesourcery.com> 	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca> <1061824620.29338.12.camel@doubledemon.codesourcery.com> <3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca>
Message-ID: <000401c36b90$f2280ec0$6900a8c0@minax>

Stefan --

Thanks for working on this!  This is a very good idea, and I appreciate you
working it through.

> class qm_install_data(install_data.install_data):
>     """override install_data to generate a 'config' module
>     containing the path to the data dir (and possibly more)"""

Please use complete sentences (staring with a capital letter and ending with
a period) in documentation.  This applies here and elsewhere.  (I am
notoriously picky about this kind of thing, so I apologize in advance.)

> classes=['classes.qmc',

Is there a way to do this in an automated fashion?  I hate the idea of
having to remember to update this list every time we add a new test class.
How about just finding all the ".py" files in the "classes/" directory?

> +try:
> +    # this file was generated during the build

It's helpful to be a bit more specific in comments; something like:

  # The config file is created during "make install" by setup.py.

?

> +    from qm.config import config, version
> +    version_info = tuple(string.split(version, '.'))
> +    """The version of QM as a tuple of (major, minor, release)."""

Put single quotes around the tuple, i.e.:

   """The version of QM as a tuple '(major, minor, release)'."""

That makes it look right in HappyDoc.

> +    # for now insert dummy values here so qmtest can still be
> +    # built and installed the old way. To be removed eventually...

We avoid "for now" or "FIXME" comments because they tend to live on longer
than we'd like, and users see them and get worried.  So, I'd just say:

  # If qm.config was not available, we are running out of the source tree.

> +    #print 'insert a meaningful error message here explaining'
> +    #print 'the user not to run qmtest from the source tree'
> +    #import sys
> +    #sys.exit(-1)

Remove this stuff.

>      # Search the builtin directory, too.
> +    # the old way...
>      dirs.append(os.path.join(os.path.dirname(__file__), "classes"))
> +    # ...and the new one
> +    dirs.append(os.path.join(qm.config.data_dir, 'test', 'classes'))

Those comments are confusing, if you don't have the whole source tree
swapped into your brain.

  # When running from the source tree, we look for path relative to this
file.
  ... dirname(__file__)...
  # In an installed version of QMTest, the config object tells us where to
look.
  ... qm.config.data_dir ...

And do we actually need to do this given that the config object generated
when running from the source tree sets data_dir itself?

Would you send me an SSH key so that we can get CVS write access set up for
you?

Thanks,

-- Mark



From seefeld at sympatico.ca  Tue Aug 26 13:57:11 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Tue, 26 Aug 2003 09:57:11 -0400
Subject: [qmtest] running qmtest on bash in cygwin...
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>		<1061402332.22692.25.camel@doubledemon.codesourcery.com>		<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>		<1061409763.23203.17.camel@doubledemon.codesourcery.com>		<e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>	<1061781572.10827.72.camel@minax.codesourcery.com> 	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca> <1061824620.29338.12.camel@doubledemon.codesourcery.com> <3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca> <000401c36b90$f2280ec0$6900a8c0@minax>
Message-ID: <fad7a74093537bff9cbc41d34cb0389d3f4b6531@Orthosoft.ca>

Mark Mitchell wrote:
> Stefan --
> 
> Thanks for working on this!  This is a very good idea, and I appreciate you
> working it through.
> 
> 
>>class qm_install_data(install_data.install_data):
>>    """override install_data to generate a 'config' module
>>    containing the path to the data dir (and possibly more)"""
> 
> 
> Please use complete sentences (staring with a capital letter and ending with
> a period) in documentation.  This applies here and elsewhere.  (I am
> notoriously picky about this kind of thing, so I apologize in advance.)

ok.

>>classes=['classes.qmc',
> 
> 
> Is there a way to do this in an automated fashion?  I hate the idea of
> having to remember to update this list every time we add a new test class.
> How about just finding all the ".py" files in the "classes/" directory?

yeah, sure, that's possible (as you demonstrated in the other setup.py
file). I just usually prefer explicit over implicit, but I sure can live
with that.

Does the same apply for the other sets of files ? I.e., do you want (as
in the original setup.py file) to find all modules to install by looking
for __init__.py files ?

>>+try:
>>+    # this file was generated during the build
> 
> 
> It's helpful to be a bit more specific in comments; something like:
> 
>   # The config file is created during "make install" by setup.py.
> 
> ?

ok.

>>+    from qm.config import config, version
>>+    version_info = tuple(string.split(version, '.'))
>>+    """The version of QM as a tuple of (major, minor, release)."""
> 
> 
> Put single quotes around the tuple, i.e.:
> 
>    """The version of QM as a tuple '(major, minor, release)'."""
> 
> That makes it look right in HappyDoc.

ok.

>>+    # for now insert dummy values here so qmtest can still be
>>+    # built and installed the old way. To be removed eventually...
> 
> 
> We avoid "for now" or "FIXME" comments because they tend to live on longer
> than we'd like, and users see them and get worried.  So, I'd just say:
> 
>   # If qm.config was not available, we are running out of the source tree.

fine. Do you have any other means to remember open issues (a 'TODO' file
or something similar ?)

>>+    #print 'insert a meaningful error message here explaining'
>>+    #print 'the user not to run qmtest from the source tree'
>>+    #import sys
>>+    #sys.exit(-1)
> 
> 
> Remove this stuff.

ok.

>>     # Search the builtin directory, too.
>>+    # the old way...
>>     dirs.append(os.path.join(os.path.dirname(__file__), "classes"))
>>+    # ...and the new one
>>+    dirs.append(os.path.join(qm.config.data_dir, 'test', 'classes'))
> 
> 
> Those comments are confusing, if you don't have the whole source tree
> swapped into your brain.
> 
>   # When running from the source tree, we look for path relative to this
> file.
>   ... dirname(__file__)...
>   # In an installed version of QMTest, the config object tells us where to
> look.
>   ... qm.config.data_dir ...
> 
> And do we actually need to do this given that the config object generated
> when running from the source tree sets data_dir itself?

You are right, it's redundant. However, that brings up another point:
The file layout in the build tree is not the same as in the source tree.
Would you mind (eventually) refactoring the directory structure in the
source tree to better match the installation (for example take the 
qmtest.py script out of the modules, put resource files and even the 
builtin 'classes' into 'share/qm/test', etc.) ?

Of course, such a change should only be performed when the new build
system is ready so we don't have to adjust two build systems.

> Would you send me an SSH key so that we can get CVS write access set up for
> you?

here it is: http://www3.sympatico.ca/seefeld/ssh.txt

I'll wait and commit the corrected patch myself, then...

Regards,
		Stefan





From faught at tejasconsulting.com  Wed Aug 27 03:43:02 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Tue, 26 Aug 2003 22:43:02 -0500
Subject: QMTest review, metrics
In-Reply-To: <000401c36b90$f2280ec0$6900a8c0@minax>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>		<1061402332.22692.25.camel@doubledemon.codesourcery.com>		<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>		<1061409763.23203.17.camel@doubledemon.codesourcery.com>		<e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>	<1061781572.10827.72.camel@minax.codesourcery.com> 	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca> <1061824620.29338.12.camel@doubledemon.codesourcery.com> <3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca> <000401c36b90$f2280ec0$6900a8c0@minax>
Message-ID: <3F4C28C6.4010608@tejasconsulting.com>

I'm writing a review of QMTest for Open Testware Reviews.  I'd like to 
identify a few core project members who can can give a quick turnaround 
on giving the review a once-over later this week.  I always like to have 
someone check for any unfair statements or missing information.  Let me 
know if you'd like to do this.  For more information about Open Testware 
Reviews, see http://tejasconsulting.com/open-testware/.

I ran sloccount to see how much code is in the source archive, and it 
flagged an error:

No closing triple-doublequote-marks in file /usr/src/qm/qm/test/web/web.py

I isolated it to this code (same in the released version and CVS):

prompt = "The file from which to load the context."""
     """The prompt for the file name."""

Is this a bug in one of the QMTest tests?

BTW, here are the metrics from sloccount from the top of the CVS tree:

SLOC    Directory       SLOC-by-Language (Sorted)
14703   qm              python=13836,ansic=724,sh=143
1208    top_dir         sh=1208
315     scripts         sh=253,python=62
205     tests           python=205
78      doc             python=78
31      benchmarks      python=31
0       CVS             (none)
0       share           (none)
0       templates       (none)
0       zope-dtml       (none)

Total Physical Source Lines of Code (SLOC)                = 16,540

Interestingly enough, it's much less code than the current released 
version (I guess I'd need to get zope-dtml from somewhere else):

Totals grouped by language (dominant language first):
python:       14212 (85.93%)
sh:            1604 (9.70%)
ansic:          724 (4.38%)

SLOC    Directory       SLOC-by-Language (Sorted)
10151   zope-dtml       ansic=6365,python=3755,sh=31
9692    qm              python=9572,sh=120
1421    doc             python=1421
1192    top_dir         sh=1192
253     tests           python=253
232     scripts         sh=232
0       share           (none)
0       templates       (none)


Totals grouped by language (dominant language first):
python:       15001 (65.39%)
ansic:         6365 (27.75%)
sh:            1575 (6.87%)

Total Physical Source Lines of Code (SLOC)                = 22,941
-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/




From seefeld at sympatico.ca  Wed Aug 27 03:52:53 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Tue, 26 Aug 2003 23:52:53 -0400
Subject: [qmtest] QMTest review, metrics
In-Reply-To: <3F4C28C6.4010608@tejasconsulting.com>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>		<1061402332.22692.25.camel@doubledemon.codesourcery.com>		<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>		<1061409763.23203.17.camel@doubledemon.codesourcery.com>		<e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>	<1061781572.10827.72.camel@minax.codesourcery.com> 	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca> <1061824620.29338.12.camel@doubledemon.codesourcery.com> <3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca> <000401c36b90$f2280ec0$6900a8c0@minax> <3F4C28C6.4010608@tejasconsulting.com>
Message-ID: <3F4C2B15.70708@sympatico.ca>

Danny R. Faught wrote:

 > I ran sloccount to see how much code is in the source archive, and it
 > flagged an error:

Out of curiosity: why are you measuring only the code, and not the
comments ? I find comments *at least* as important as the actual
code, and considerable efford should go into the documentation of the
'real' code. Just wondering...

Regards,
		Stefan



From mark at codesourcery.com  Wed Aug 27 15:47:50 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 27 Aug 2003 08:47:50 -0700
Subject: [qmtest] running qmtest on bash in cygwin...
In-Reply-To: <fad7a74093537bff9cbc41d34cb0389d3f4b6531@Orthosoft.ca>
References: 	<9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5
	f1903caa281d5b3f428101@Orthosoft.ca>		<1061402332.22692.25.camel@doubledemon
	.codesourcery.com>		<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>	
		<1061409763.23203.17.camel@doubledemon.codesourcery.com>		<e5d7f86ae917b889
	47d37468765706ed3f46273b@Orthosoft.ca>	<1061781572.10827.72.camel@minax.code
	sourcery.com> 	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca>
	<1061824620.29338.12.camel@doubledemon.codesourcery.com>
	<3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca>
	<000401c36b90$f2280ec0$6900a8c0@minax> 
	<fad7a74093537bff9cbc41d34cb0389d3f4b6531@Orthosoft.ca>
Message-ID: <1061999270.1746.35.camel@doubledemon.codesourcery.com>

> Does the same apply for the other sets of files ? I.e., do you want (as
> in the original setup.py file) to find all modules to install by looking
> for __init__.py files ?

I'd prefer that, but I don't think it's as important.  We add new
modules rarely, and if they're missing we'll probably notice quickly.

> fine. Do you have any other means to remember open issues (a 'TODO' file
> or something similar ?)

We do, but its internal to CodeSourcery.  Creating a TODO file at the
top level in the sources is a good idea; feel free to do that.

We keep meaning to set up a real, world-visible issue-tracker, but we
keep having more important things to do.

> The file layout in the build tree is not the same as in the source tree.
> Would you mind (eventually) refactoring the directory structure in the
> source tree to better match the installation (for example take the 
> qmtest.py script out of the modules, put resource files and even the 
> builtin 'classes' into 'share/qm/test', etc.) ?

That would be OK.  Before we do that, we should be sure that the
installation tree looks the way we want.
 
Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Wed Aug 27 16:00:51 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 27 Aug 2003 09:00:51 -0700
Subject: [qmtest] QMTest review, metrics
In-Reply-To: <3F4C28C6.4010608@tejasconsulting.com>
References: 	<9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5
	f1903caa281d5b3f428101@Orthosoft.ca>		<1061402332.22692.25.camel@doubledemon
	.codesourcery.com>		<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>	
		<1061409763.23203.17.camel@doubledemon.codesourcery.com>		<e5d7f86ae917b889
	47d37468765706ed3f46273b@Orthosoft.ca>	<1061781572.10827.72.camel@minax.code
	sourcery.com> 	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca>
	<1061824620.29338.12.camel@doubledemon.codesourcery.com>
	<3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca>
	<000401c36b90$f2280ec0$6900a8c0@minax> 
	<3F4C28C6.4010608@tejasconsulting.com>
Message-ID: <1062000051.5368.45.camel@doubledemon.codesourcery.com>

On Tue, 2003-08-26 at 20:43, Danny R. Faught wrote:
> I'm writing a review of QMTest for Open Testware Reviews.  I'd like to 
> identify a few core project members who can can give a quick turnaround 
> on giving the review a once-over later this week.  I always like to have 
> someone check for any unfair statements or missing information.  Let me 
> know if you'd like to do this.  For more information about Open Testware 
> Reviews, see http://tejasconsulting.com/open-testware/.

If you send the review to me, I'll make sure that either I or someone
else takes a look promptly.

> No closing triple-doublequote-marks in file /usr/src/qm/qm/test/web/web.py

Interesting; that doesn't seem to cause a major problem in practice. 
(The code runs.)  But, thank you; we'll take a look.
 
> Interestingly enough, it's much less code than the current released 
> version (I guess I'd need to get zope-dtml from somewhere else):

Yes, we've been adding features while removing cruft.  The next version
of QMTest has a much more uniform model of tests, resources, etc.; they
are all "extensions".  That's allowed us to remove a lot of code.

The DTML bits needed are still in the source tree; we've just
reengineered so that you need fewer of them.  That's simplified the
build and installation process.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Wed Aug 27 16:07:41 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 27 Aug 2003 09:07:41 -0700
Subject: PATCH: Fix typo in web.py
Message-ID: <200308271607.h7RG7fA8003929@doubledemon.codesourcery.com>


This patch fixes the quotation issue that Danny Faught noticed while
running sloccount.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-08-27  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/web/web.py (LoadContextPage.prompt): Fix quoting.

Index: qm/test/web/web.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/web/web.py,v
retrieving revision 1.76
diff -c -5 -p -r1.76 web.py
*** qm/test/web/web.py	30 Jul 2003 21:25:31 -0000	1.76
--- qm/test/web/web.py	27 Aug 2003 16:00:42 -0000
*************** class LoadContextPage(QMTestPage):
*** 725,735 ****
      """The title for the page."""
      
      heading = "Load the context from a file."
      """The heading printed across the top of the page."""
      
!     prompt = "The file from which to load the context."""
      """The prompt for the file name."""
      
      submit_url = "submit-context-file"
      """The URL to which the file should be submitted."""
      
--- 725,735 ----
      """The title for the page."""
      
      heading = "Load the context from a file."
      """The heading printed across the top of the page."""
      
!     prompt = "The file from which to load the context."
      """The prompt for the file name."""
      
      submit_url = "submit-context-file"
      """The URL to which the file should be submitted."""
      


From faught at tejasconsulting.com  Wed Aug 27 16:30:24 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Wed, 27 Aug 2003 11:30:24 -0500
Subject: [qmtest] QMTest review, metrics
In-Reply-To: <3F4C2B15.70708@sympatico.ca>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5f1903caa281d5b3f428101@Orthosoft.ca>		<1061402332.22692.25.camel@doubledemon.codesourcery.com>		<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>		<1061409763.23203.17.camel@doubledemon.codesourcery.com>		<e5d7f86ae917b88947d37468765706ed3f46273b@Orthosoft.ca>	<1061781572.10827.72.camel@minax.codesourcery.com> 	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca> <1061824620.29338.12.camel@doubledemon.codesourcery.com> <3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca> <000401c36b90$f2280ec0$6900a8c0@minax> <3F4C28C6.4010608@tejasconsulting.com> <3F4C2B15.70708@sympatico.ca>
Message-ID: <3F4CDCA0.1040805@tejasconsulting.com>

Stefan Seefeld wrote:
> Out of curiosity: why are you measuring only the code, and not the
> comments ? I find comments *at least* as important as the actual
> code, and considerable efford should go into the documentation of the
> 'real' code. Just wondering...

Actually, I usually use sclc to measure code size (I like it so much I 
reviewed it too).  It includes details about comments.  However, it 
doesn't grok Python code, so I've had to fall back to sloccount.  FYI, I 
didn't write either one of them.

I'd welcome suggestions about other open source metrics tools for Python.
-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/




From stefan.seefeld at orthosoft.ca  Wed Aug 27 21:10:41 2003
From: stefan.seefeld at orthosoft.ca (Stefan Seefeld)
Date: Wed, 27 Aug 2003 17:10:41 -0400
Subject: building the documentation via 'python setup.py build_doc'
Message-ID: <97fc24b439f1c370bd4d280d9f9ed88d3f4d1c67@Orthosoft.ca>

I just committed a patch that adds a 'build_doc' command
to the new build procedure.

'python setup.py build_doc' will build the docs (html, tex, pdf)
if it can. The output directory can be specified via '--build-lib',
so if you want to put the docs right into the source tree, just run
'python setup.py build_doc --build-lib=.'.

The code is mostly a transcription of the relevant parts in
configure.in and GNUmakefile, so I hope it works for everyone.

Regards,
		Stefan



From mark at codesourcery.com  Wed Aug 27 21:19:49 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 27 Aug 2003 14:19:49 -0700
Subject: [qmtest] building the documentation via 'python setup.py
	build_doc'
In-Reply-To: <97fc24b439f1c370bd4d280d9f9ed88d3f4d1c67@Orthosoft.ca>
References: <97fc24b439f1c370bd4d280d9f9ed88d3f4d1c67@Orthosoft.ca>
Message-ID: <1062019189.5368.84.camel@doubledemon.codesourcery.com>

On Wed, 2003-08-27 at 14:10, Stefan Seefeld wrote:
> I just committed a patch that adds a 'build_doc' command
> to the new build procedure.

Stefan --

Thanks for the patch.

Please post all patches to qmtest at codesourcery.com *before* you check
them in.  

Every patch should be reviewed by someone else.  (We do that internally
as well; Zack might review my patch or vice versa, often.)

In this case, there's no need to pull out your patch; just post it now,
and we'll take a look.

Thanks!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From seefeld at sympatico.ca  Wed Aug 27 21:48:08 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Wed, 27 Aug 2003 17:48:08 -0400
Subject: [qmtest] building the documentation via 'python setup.py	build_doc'
References: <97fc24b439f1c370bd4d280d9f9ed88d3f4d1c67@Orthosoft.ca> <1062019189.5368.84.camel@doubledemon.codesourcery.com>
Message-ID: <264104cd342aa24106c8b991a28bbd693f4d252d@Orthosoft.ca>

Mark Mitchell wrote:

> Please post all patches to qmtest at codesourcery.com *before* you check
> them in.  
> 
> Every patch should be reviewed by someone else.  (We do that internally
> as well; Zack might review my patch or vice versa, often.)
> 
> In this case, there's no need to pull out your patch; just post it now,
> and we'll take a look.

ok, sorry, I wasn't aware of that policy.

Here it is.

Stefan


-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: diff
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030827/acd75a21/attachment.ksh>

From mark at codesourcery.com  Wed Aug 27 21:53:50 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 27 Aug 2003 14:53:50 -0700
Subject: [qmtest] building the documentation via 'python
	setup.py	build_doc'
In-Reply-To: <5e48fc39071974fd836d5a0144e81e7d3f4d21ed@Orthosoft.ca>
References: <97fc24b439f1c370bd4d280d9f9ed88d3f4d1c67@Orthosoft.ca>
	<1062019189.5368.84.camel@doubledemon.codesourcery.com> 
	<5e48fc39071974fd836d5a0144e81e7d3f4d21ed@Orthosoft.ca>
Message-ID: <1062021231.5368.96.camel@doubledemon.codesourcery.com>

Remember when I said we were picky? :-)

> +def find_file(paths, predicate):
> +    """This function returns the found file (with path) or None if it
> +    wasn't found"""

The way we document all functions is like so:

  """Return a file satisfying 'predicate' from 'paths'.

  'paths' -- A sequence of glob patterns.

  'predicate' -- A callable taking a single string as an argument.

  returns -- The name of the first file matching one of the 'paths'
  and 'predicate'."""

Note that the first sentence is always a single line.  It should have
the form 'Return ...' or something like 'Erase the hard disk.' or 
'Find the answer to the meaning of life.'

Then, each argument is listed, in single quotes, with the "--" bit and a
description.  The type of the argument should usually be mentioned.  The
"returns" bit is similar.  All this makes HappyDoc happy. :-)

Please submit a patch to fix up the docs on all your new functions.

Yes, I know it's a pain, but we're sticklers for documentation.  Zack
says that one of the biggest problems with OpenSource software is
documentation, so we try to be good.

> +class qm_build_doc(build.build):
> +    """This class compiles the QMTest's documentation."""

Grammar: "compiles QMTest's documentation".  The "the" their is
redundant.

> +        # just to be sure this is still valid after chdir()

Start with capital letter, end with period.  Make that change
throughout.  Try to use a complete sentence:

  # Use an absolute path so that calls to chdir do not invalidate
  # the name.

> +class qm_build(build.build):
> +    """The qm_build class extends the build subcommands by 'qm_build_doc'."""

"""Extends 'build' by adding support for building documentation."""

>      """This class overrides the system install_data command. In addition
>      to the original processing, a 'config' module is created that

For classes, too, the first sentence should be on a single line.

More details can follow:

  """A 'QMFoo' is a 'Foo' with an extra 'Bar'.

  The 'Bar' is set ... It is used ..."""

Thanks!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From seefeld at sympatico.ca  Thu Aug 28 04:39:50 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Thu, 28 Aug 2003 00:39:50 -0400
Subject: [qmtest] building the documentation via 'python	setup.py	build_doc'
In-Reply-To: <1062021231.5368.96.camel@doubledemon.codesourcery.com>
References: <97fc24b439f1c370bd4d280d9f9ed88d3f4d1c67@Orthosoft.ca>	<1062019189.5368.84.camel@doubledemon.codesourcery.com> 	<5e48fc39071974fd836d5a0144e81e7d3f4d21ed@Orthosoft.ca> <1062021231.5368.96.camel@doubledemon.codesourcery.com>
Message-ID: <3F4D8796.309@sympatico.ca>

Mark Mitchell wrote:
> Remember when I said we were picky? :-)

yes :)

I'm actually quite impressed by the care you are applying to my
submissions. I'm ready to learn :-)

> Please submit a patch to fix up the docs on all your new functions.

ok, patch appended. (diff1)

Doing just that, I noticed a couple of inconsistencies and omissions.
Diff2 contains the enhancements.

Regards,
		Stefan
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: diff1
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030828/29cc33e7/attachment.ksh>
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: diff2
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030828/29cc33e7/attachment-0001.ksh>

From faught at tejasconsulting.com  Thu Aug 28 15:25:29 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Thu, 28 Aug 2003 10:25:29 -0500
Subject: [qmtest] QMTest review, metrics
In-Reply-To: <1062000051.5368.45.camel@doubledemon.codesourcery.com>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>		<3f5c5fb36a96e70ca5	f1903caa281d5b3f428101@Orthosoft.ca>		<1061402332.22692.25.camel@doubledemon	.codesourcery.com>		<548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>			<1061409763.23203.17.camel@doubledemon.codesourcery.com>		<e5d7f86ae917b889	47d37468765706ed3f46273b@Orthosoft.ca>	<1061781572.10827.72.camel@minax.code	sourcery.com> 	<047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca>	<1061824620.29338.12.camel@doubledemon.codesourcery.com>	<3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca>	<000401c36b90$f2280ec0$6900a8c0@minax> 	<3F4C28C6.4010608@tejasconsulting.com> <1062000051.5368.45.camel@doubledemon.codesourcery.com>
Message-ID: <3F4E1EE9.1020707@tejasconsulting.com>

I need to know how frequent the QMTest releases have been.  I'm not sure 
how to correlate the release list in the NEWS file with the dates in the 
  ChangeLog.  How many official releases have there been in the last year?

I'm thinking about judging it by the frequency of CVS checkins rather 
than official releases, since it was recommended that I use what's in 
CVS rather than 2.0.3.  Any idea what percentage of users are using code 
from CVS or patches that's newer than 2.0.3?
-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/




From mark at codesourcery.com  Thu Aug 28 16:44:35 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 28 Aug 2003 09:44:35 -0700
Subject: [qmtest] building the documentation via
	'python	setup.py	build_doc'
In-Reply-To: <3F4D8796.309@sympatico.ca>
References: 	<97fc24b439f1c370bd4d280d9f9ed88d3f4d1c67@Orthosoft.ca>	<1062019189.5368.84.
	camel@doubledemon.codesourcery.com>
		<5e48fc39071974fd836d5a0144e81e7d3f4d21ed@Orthosoft.ca>
	<1062021231.5368.96.camel@doubledemon.codesourcery.com> 
	<3F4D8796.309@sympatico.ca>
Message-ID: <1062089075.5992.78.camel@doubledemon.codesourcery.com>

> +    As this command is only ever used on 'posix' platforms, no efford
> +    has been made to make this code portable to other platforms such
> +    as 'nt'."""

Spelling: "effort",  not "efford".  Also, there's no need to include the
OS names in single quotes, but they should be spelled as their
trademark-holders prefer: "POSIX" and "Windows".

If you would, please make that change, and heck in diffs1.  Thanks!

> +        builddir = self.build_temp + '/' + builddir

Shouldn't you use os.path.join here and elsewhere?  It seems like that's
hardly any more work, and it means that if someone happens to get Jade
on Windows, at least it might have a chance of working.

Other than that, diffs2 looks fine.

Thanks!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From seefeld at sympatico.ca  Thu Aug 28 17:03:59 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Thu, 28 Aug 2003 13:03:59 -0400
Subject: [qmtest] building the documentation via	'python	setup.py	build_doc'
References: <97fc24b439f1c370bd4d280d9f9ed88d3f4d1c67@Orthosoft.ca>	<1062019189.5368.84.	camel@doubledemon.codesourcery.com>		<5e48fc39071974fd836d5a0144e81e7d3f4d21ed@Orthosoft.ca>	<1062021231.5368.96.camel@doubledemon.codesourcery.com> 	<3F4D8796.309@sympatico.ca> <1062089075.5992.78.camel@doubledemon.codesourcery.com>
Message-ID: <91b28fe0454d91efec42e68f1c1e45e13f4e342e@Orthosoft.ca>

Mark Mitchell wrote:
>>+    As this command is only ever used on 'posix' platforms, no efford
>>+    has been made to make this code portable to other platforms such
>>+    as 'nt'."""
> 
> 
> Spelling: "effort",  not "efford".  Also, there's no need to include the
> OS names in single quotes, but they should be spelled as their
> trademark-holders prefer: "POSIX" and "Windows".

I was actually using the values reported by the os.name attribute, as
that is what lots of modules seem to base their decisions on.
(distutils, for example).

> If you would, please make that change, and heck in diffs1.  Thanks!
> 
> 
>>+        builddir = self.build_temp + '/' + builddir
> 
> 
> Shouldn't you use os.path.join here and elsewhere?  It seems like that's
> hardly any more work, and it means that if someone happens to get Jade
> on Windows, at least it might have a chance of working.

well, I took it out for consistency. Alternatively, I should replace all
other ocurrences of paths containing '/' (such as the path search lists
containing '/usr/share/doc' etc.) by appropriate calls to os.path.join,
too, no ?


Stefan



From mark at codesourcery.com  Thu Aug 28 17:16:14 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 28 Aug 2003 10:16:14 -0700
Subject: [qmtest] building the documentation
	via	'python	setup.py	build_doc'
In-Reply-To: <91b28fe0454d91efec42e68f1c1e45e13f4e342e@Orthosoft.ca>
References: 	<97fc24b439f1c370bd4d280d9f9ed88d3f4d1c67@Orthosoft.ca>	<1062019189.5368.84.
		camel@doubledemon.codesourcery.com>		<5e48fc39071974fd836d5a0144e81e7d3f4d2
	1ed@Orthosoft.ca>	<1062021231.5368.96.camel@doubledemon.codesourcery.com>
		<3F4D8796.309@sympatico.ca>
	<1062089075.5992.78.camel@doubledemon.codesourcery.com> 
	<91b28fe0454d91efec42e68f1c1e45e13f4e342e@Orthosoft.ca>
Message-ID: <1062090974.5403.82.camel@doubledemon.codesourcery.com>

On Thu, 2003-08-28 at 10:03, Stefan Seefeld wrote:
> Mark Mitchell wrote:
> >>+    As this command is only ever used on 'posix' platforms, no efford
> >>+    has been made to make this code portable to other platforms such
> >>+    as 'nt'."""
> > 
> > 
> > Spelling: "effort",  not "efford".  Also, there's no need to include the
> > OS names in single quotes, but they should be spelled as their
> > trademark-holders prefer: "POSIX" and "Windows".
> 
> I was actually using the values reported by the os.name attribute, as
> that is what lots of modules seem to base their decisions on.
> (distutils, for example).

OK.

> well, I took it out for consistency. Alternatively, I should replace all
> other ocurrences of paths containing '/' (such as the path search lists
> containing '/usr/share/doc' etc.) by appropriate calls to os.path.join,
> too, no ?

Yes, I think that makes sense.  

Using os.path.join seems best; it can't hurt, and it might help. :-)

You can go ahead and make the change you suggest and check that in,
along with the others.  Please make a ChangeLog entry as well.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From Pat_Lewis at Invesco.com  Thu Aug 28 20:42:05 2003
From: Pat_Lewis at Invesco.com (Lewis, Pat H.)
Date: Thu, 28 Aug 2003 15:42:05 -0500
Subject: Resource creation
Message-ID: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>

I am having problems with creating resources when using the GUI.  If I have
a test that relies on a resource, when I run the test the first time,
everything works as expected.  The resource is created and destroyed
properly.  However, on the second (and subsequent) 'Run', it appears that
the SetUp method of the resource is not called.  However, the CleanUp method
is called on each subsequent run.

I have a really simple resource to demonstrate the problem.

----
import qm

class StupidResource(qm.test.resource.Resource):
    "A resource to verify that I am not crazy."

    def SetUp(self, context, result):
        print 'Setting up StupidResource'

    def CleanUp(self, result):
        print 'Cleaning up StupidResource'
----

When a test uses this resource, running the test multiple times only prints
the 'Setting up StupidResource' once.

Any ideas or suggestions?  Am I missing something really obvious?  Thank
you.

-- 
Patrick Lewis				INVESCO Institutional
502-561-3295				502-587-5790 fax


From stefan.seefeld at orthosoft.ca  Thu Aug 28 21:01:04 2003
From: stefan.seefeld at orthosoft.ca (Stefan Seefeld)
Date: Thu, 28 Aug 2003 17:01:04 -0400
Subject: generating source distributions
Message-ID: <89405227737a0f4d328b1722032830e03f4e6c35@Orthosoft.ca>

hi there,

appended is a prelimitary MANIFEST template which, when put into qm/,
the distutils will use to generate packages. With that I can run

python setup.py sdist

and I get a source distribution. I also ran

python setup.py bdist

but didn't test that yet for completeness.

Regards,
		Stefan
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: MANIFEST.in
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20030828/688f7b76/attachment.ksh>

From faught at tejasconsulting.com  Fri Aug 29 15:45:44 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Fri, 29 Aug 2003 10:45:44 -0500
Subject: build warning - test/classes/__init__.py
In-Reply-To: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>
Message-ID: <3F4F7528.4000501@tejasconsulting.com>

The warnings about __init__.py had me fooled into thinking the build was 
failing until I thought to check the return code from make -

[dfaught at localhost qm]$ make
cd qm && PYTHONPATH=. /usr/bin/python2 -O ./setup.py -q build
warning: build_py: package init file './test/classes/__init__.py' not 
found (or not a regular file)
warning: build_py: package init file './test/classes/__init__.py' not 
found (or not a regular file)
rm -rf qm/test/qmtest
sed -e "s#@@@RELLIBDIR@@@#lib/python2.2/site-packages/qm#" < qm/qm.sh > 
qm/test/qmtest
chmod a-w qm/test/qmtest
chmod a+x qm/test/qmtest

There are several __init__.py files, but no test/classes/__init__.py. 
I'm building from CVS sources I updated this morning.  Is this warning a 
serious problem?
-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/




From seefeld at sympatico.ca  Fri Aug 29 15:52:10 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 29 Aug 2003 11:52:10 -0400
Subject: [qmtest] build warning - test/classes/__init__.py
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2> <3F4F7528.4000501@tejasconsulting.com>
Message-ID: <77209d4acfa4fa326b91bb9ec45f55bb3f4f758b@Orthosoft.ca>

Danny R. Faught wrote:

 > There are several __init__.py files, but no test/classes/__init__.py.
 > I'm building from CVS sources I updated this morning.  Is this warning a
 > serious problem?

No.

'__init__.py' files tell the python interpreter that the directories
they live in are to be considered python modules. However, the
'test/classes' directory is not a module, but is currently used to store
(default) extensions for qmtest.

Regards,
		Stefan



From faught at tejasconsulting.com  Fri Aug 29 15:54:41 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Fri, 29 Aug 2003 10:54:41 -0500
Subject: test failures on Red Hat 9
In-Reply-To: <3F4F7528.4000501@tejasconsulting.com>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2> <3F4F7528.4000501@tejasconsulting.com>
Message-ID: <3F4F7741.3010008@tejasconsulting.com>

I don't get a clean "make check" on Red Hat 9 with CVS sources I updated 
  this morning.  I'm running python 2.2.2.  Are the tests expected to 
pass in this configuration?

Both check-rsh and check-threads hang.  The other test suites pass. 
Here's the output from check-rsh:

-------------------------------------------------------------
cd qm && PYTHONPATH=. /usr/bin/python2 -O ./setup.py -q build
warning: build_py: package init file './test/classes/__init__.py' not 
found (or not a regular file)
warning: build_py: package init file './test/classes/__init__.py' not 
found (or not a regular file)
rm -f tests/QMTest/rsh_target
qm/test/qmtest -D tests create-target \
                 -a host=localhost -a remote_shell=ssh \
	-T tests/QMTest/rsh_target \
	rsh rsh_target.RSHTarget
qm/test/qmtest -D tests run -T tests/QMTest/rsh_target \
  \
-c qmtest_path=`pwd`/qm/test/qmtest \
	-c qmtest_target=`pwd`/tests/QMTest/rsh_target
Couldn't establish connection to proxy: Network is unreachable
ssh_exchange_identification: Connection closed by remote host
-------------------------------------------------------------

I have to interrupt make to break out at this point.  Granted, I've been 
frequently reconfiguring my network lately, but I don't recall any 
documentation about network prerequisites needed to run the tests.

The result from check-threads is worse:

-------------------------------------------------------------
cd qm && PYTHONPATH=. /usr/bin/python2 -O ./setup.py -q build
warning: build_py: package init file './test/classes/__init__.py' not 
found (or not a regular file)
warning: build_py: package init file './test/classes/__init__.py' not 
found (or not a regular file)
rm -f tests/QMTest/thread_target
qm/test/qmtest -D tests create-target -a threads=4 \
	-T tests/QMTest/thread_target \
	thread thread_target.ThreadTarget
qm/test/qmtest -D tests run -T tests/QMTest/thread_target \
	 \
	-c qmtest_path=qm/test/qmtest \
	-c qmtest_target=tests/QMTest/thread_target
-------------------------------------------------------------

It hangs at this point.  I have to send a SIGKILL to all QMTest python 
programs to recover.  Here's a snapshot from ps:



-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/




From faught at tejasconsulting.com  Fri Aug 29 15:57:27 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Fri, 29 Aug 2003 10:57:27 -0500
Subject: ps output Re: test failures on Red Hat 9
In-Reply-To: <3F4F7528.4000501@tejasconsulting.com>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2> <3F4F7528.4000501@tejasconsulting.com>
Message-ID: <3F4F77E7.7070509@tejasconsulting.com>

Lesson learned - don't type Enter after Ctrl-V if you haven't released 
the ctrl key yet.  :-)  Here's the ps output I was trying to paste.

It hangs at this point.  I have to send a SIGKILL to all QMTest python
programs to recover.  Here's a snapshot from ps:

dfaught  18389  3.1  3.6 41864 7044 pts/2    S    10:40   0:01 
/usr/bin/python2 /usr/src/qm/qm/test/qmtest.py -D tests run -T 
tests/QMTest/thread_target -c qmtest_path=qm/test/qmtest -c 
qmtest_target=tests/QMTest/thread_target
dfaught  18494  2.0  3.3 41364 6436 pts/2    S    10:40   0:00 
/usr/bin/python2 /usr/src/qm/qm/test/qmtest.py -D 
/usr/src/qm/tests/regress/noresource run -O 
/usr/src/qm/tests/regress/noresource/results.qmr -o 
/usr/src/qm/tests/regress/noresource/output.qmr -T 
tests/QMTest/thread_target
dfaught  18501  2.0  3.3 41300 6388 pts/2    S    10:40   0:00 
/usr/bin/python2 /usr/src/qm/qm/test/qmtest.py -D 
/usr/src/qm/tests/regress/tuple1 run -O 
/usr/src/qm/tests/regress/tuple1/results.qmr -o 
/usr/src/qm/tests/regress/tuple1/output.qmr -T tests/QMTest/thread_target
dfaught  18505  2.3  3.3 41404 6460 pts/2    S    10:40   0:00 
/usr/bin/python2 /usr/src/qm/qm/test/qmtest.py -D 
/usr/src/qm/tests/regress/xml1 run -O 
/usr/src/qm/tests/regress/xml1/results.qmr -o 
/usr/src/qm/tests/regress/xml1/output.qmr -T tests/QMTest/thread_target

-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/






From faught at tejasconsulting.com  Fri Aug 29 16:26:19 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Fri, 29 Aug 2003 11:26:19 -0500
Subject: [qmtest] build warning - test/classes/__init__.py
In-Reply-To: <77209d4acfa4fa326b91bb9ec45f55bb3f4f7593@Orthosoft.ca>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2> <3F4F7528.4000501@tejasconsulting.com> <77209d4acfa4fa326b91bb9ec45f55bb3f4f7593@Orthosoft.ca>
Message-ID: <3F4F7EAB.6040801@tejasconsulting.com>

Stefan Seefeld wrote:

> '__init__.py' files tell the python interpreter that the directories
> they live in are to be considered python modules. However, the
> 'test/classes' directory is not a module, but is currently used to store
> (default) extensions for qmtest.

Hmmm, if it's a totally spurious warning, it needs to go away.
-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/




From seefeld at sympatico.ca  Fri Aug 29 16:29:40 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 29 Aug 2003 12:29:40 -0400
Subject: [qmtest] build warning - test/classes/__init__.py
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2> <3F4F7528.4000501@tejasconsulting.com> <77209d4acfa4fa326b91bb9ec45f55bb3f4f7593@Orthosoft.ca> <3F4F7EAB.6040801@tejasconsulting.com>
Message-ID: <6137529a740d9513129743dfdf772d183f4f7e0a@Orthosoft.ca>

Danny R. Faught wrote:
> Stefan Seefeld wrote:
> 
>> '__init__.py' files tell the python interpreter that the directories
>> they live in are to be considered python modules. However, the
>> 'test/classes' directory is not a module, but is currently used to store
>> (default) extensions for qmtest.
> 
> 
> Hmmm, if it's a totally spurious warning, it needs to go away.

The build system is currently being reworked. The warning will
go away :-)

Stefan



From seefeld at sympatico.ca  Fri Aug 29 17:03:02 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 29 Aug 2003 13:03:02 -0400
Subject: [qmtest] test failures on Red Hat 9
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2> <3F4F7528.4000501@tejasconsulting.com> <3F4F7741.3010008@tejasconsulting.com>
Message-ID: <e42bb6ecc5f2d07f9ee265649a0c65cb3f4f85e8@Orthosoft.ca>

Danny R. Faught wrote:
> I don't get a clean "make check" on Red Hat 9 with CVS sources I updated 
>  this morning.  I'm running python 2.2.2.  Are the tests expected to 
> pass in this configuration?
> 
> Both check-rsh and check-threads hang.  The other test suites pass. 
> Here's the output from check-rsh:
> 
> -------------------------------------------------------------
> cd qm && PYTHONPATH=. /usr/bin/python2 -O ./setup.py -q build
> warning: build_py: package init file './test/classes/__init__.py' not 
> found (or not a regular file)
> warning: build_py: package init file './test/classes/__init__.py' not 
> found (or not a regular file)
> rm -f tests/QMTest/rsh_target
> qm/test/qmtest -D tests create-target \
>                 -a host=localhost -a remote_shell=ssh \
>     -T tests/QMTest/rsh_target \
>     rsh rsh_target.RSHTarget
> qm/test/qmtest -D tests run -T tests/QMTest/rsh_target \
>  \
> -c qmtest_path=`pwd`/qm/test/qmtest \
>     -c qmtest_target=`pwd`/tests/QMTest/rsh_target
> Couldn't establish connection to proxy: Network is unreachable
> ssh_exchange_identification: Connection closed by remote host

While I was able to run 'make check' successfully on a RH8 box, I
noticed that during the 'rsh' tests I was frequently asked to type
my password into a tk window that was popping up !
Is there some documentation that explains how to prepare the
environment so these tests can be performed non-interactively
(a typical 'nightly build' scenario) ?

Regards,
		Stefan



From mark at codesourcery.com  Fri Aug 29 18:59:42 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 29 Aug 2003 11:59:42 -0700
Subject: [qmtest] test failures on Red Hat 9
In-Reply-To: <e42bb6ecc5f2d07f9ee265649a0c65cb3f4f85e8@Orthosoft.ca>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>
	<3F4F7528.4000501@tejasconsulting.com>
	<3F4F7741.3010008@tejasconsulting.com> 
	<e42bb6ecc5f2d07f9ee265649a0c65cb3f4f85e8@Orthosoft.ca>
Message-ID: <1062183586.11158.73.camel@doubledemon.codesourcery.com>

On Fri, 2003-08-29 at 10:03, Stefan Seefeld wrote:
> Danny R. Faught wrote:
> > I don't get a clean "make check" on Red Hat 9 with CVS sources I updated 
> >  this morning.  I'm running python 2.2.2.  Are the tests expected to 
> > pass in this configuration?
> > 
> > Both check-rsh and check-threads hang.  The other test suites pass. 
> > Here's the output from check-rsh:
> > 
> > -------------------------------------------------------------
> > cd qm && PYTHONPATH=. /usr/bin/python2 -O ./setup.py -q build
> > warning: build_py: package init file './test/classes/__init__.py' not 
> > found (or not a regular file)
> > warning: build_py: package init file './test/classes/__init__.py' not 
> > found (or not a regular file)
> > rm -f tests/QMTest/rsh_target
> > qm/test/qmtest -D tests create-target \
> >                 -a host=localhost -a remote_shell=ssh \
> >     -T tests/QMTest/rsh_target \
> >     rsh rsh_target.RSHTarget
> > qm/test/qmtest -D tests run -T tests/QMTest/rsh_target \
> >  \
> > -c qmtest_path=`pwd`/qm/test/qmtest \
> >     -c qmtest_target=`pwd`/tests/QMTest/rsh_target
> > Couldn't establish connection to proxy: Network is unreachable
> > ssh_exchange_identification: Connection closed by remote host
> 
> While I was able to run 'make check' successfully on a RH8 box, I
> noticed that during the 'rsh' tests I was frequently asked to type
> my password into a tk window that was popping up !
> Is there some documentation that explains how to prepare the
> environment so these tests can be performed non-interactively
> (a typical 'nightly build' scenario) ?

Not at present.

The usual solution is to use .rhosts, or use SSH.

It may be that the best option is to remove the RSH testing from "make
check" so that it is not run by default.

Thoughts?

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From seefeld at sympatico.ca  Fri Aug 29 19:11:08 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 29 Aug 2003 15:11:08 -0400
Subject: [qmtest] test failures on Red Hat 9
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>	<3F4F7528.4000501@tejasconsulting.com>	<3F4F7741.3010008@tejasconsulting.com> 	<e42bb6ecc5f2d07f9ee265649a0c65cb3f4f85e8@Orthosoft.ca> <1062183586.11158.73.camel@doubledemon.codesourcery.com>
Message-ID: <d867fa13648773453c3f81bffe4073833f4fa3e8@Orthosoft.ca>

Mark Mitchell wrote:

> It may be that the best option is to remove the RSH testing from "make
> check" so that it is not run by default.
> 
> Thoughts?

Well, users can always do specific checks, i.e. 'make check-serial'
if they want to.

I'm writing a 'check' command for the setup.py tool now, and I'll add
options such that tests can be chosen individually in a similar way.

But ultimately it would be good to have a little paragraph somewhere
for people not familiar with rsh explaining how to prepare such
that they aren't always prompted for their password.

Regards,
		Stefan






From faught at tejasconsulting.com  Fri Aug 29 20:26:08 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Fri, 29 Aug 2003 15:26:08 -0500
Subject: missing resource class documentation, pdfjadetex dependency
In-Reply-To: <1062183586.11158.73.camel@doubledemon.codesourcery.com>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>	<3F4F7528.4000501@tejasconsulting.com>	<3F4F7741.3010008@tejasconsulting.com> 	<e42bb6ecc5f2d07f9ee265649a0c65cb3f4f85e8@Orthosoft.ca> <1062183586.11158.73.camel@doubledemon.codesourcery.com>
Message-ID: <3F4FB6E0.1000101@tejasconsulting.com>

Manual section "3.5. Test and Resource Classes" describes test classes 
but not resource classes.  I'd like to see a 3.5.2 section for resource 
classes.  I saw this issue while using the 2.0.3 release and the 
documentation on the web site.

I haven't been able to check the latest sources because I don't have 
pdfjadetex installed and haven't been able to successfully install it. 
Make doesn't seem to build the html dos without it. BTW, I can't find 
any documentation on the dependency on this tool when calling configure 
with the --enable-maintainer-mode option.
-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/




From seefeld at sympatico.ca  Fri Aug 29 20:35:23 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 29 Aug 2003 16:35:23 -0400
Subject: [qmtest] missing resource class documentation, pdfjadetex dependency
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>	<3F4F7528.4000501@tejasconsulting.com>	<3F4F7741.3010008@tejasconsulting.com> 	<e42bb6ecc5f2d07f9ee265649a0c65cb3f4f85e8@Orthosoft.ca> <1062183586.11158.73.camel@doubledemon.codesourcery.com> <3F4FB6E0.1000101@tejasconsulting.com>
Message-ID: <4cb868822850316f812a7c90319e8f6d3f4fb7a7@Orthosoft.ca>

Danny R. Faught wrote:

> I haven't been able to check the latest sources because I don't have 
> pdfjadetex installed and haven't been able to successfully install it. 
> Make doesn't seem to build the html dos without it. BTW, I can't find 
> any documentation on the dependency on this tool when calling configure 
> with the --enable-maintainer-mode option.

That's very strange, as configure only tests for a 'jade' executable,
not 'pdfjadetex'. The former is needed for any document generation,
while the latter only for pdf output. Are you sure pdfjadetex is the
problem ?

This issue only comes up if you use a version of qmtest directly from
cvs, as releases (source or binary) include the built docs.

I believe the online docs are up to date, though.

Regards,
		Stefan




From mark at codesourcery.com  Fri Aug 29 20:37:53 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 29 Aug 2003 13:37:53 -0700
Subject: [qmtest] missing resource class documentation, pdfjadetex
	dependency
In-Reply-To: <3F4FB6E0.1000101@tejasconsulting.com>
References: 	<D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>	<3F4F7528.4000501@tejascon
	sulting.com>	<3F4F7741.3010008@tejasconsulting.com>
		<e42bb6ecc5f2d07f9ee265649a0c65cb3f4f85e8@Orthosoft.ca>
	<1062183586.11158.73.camel@doubledemon.codesourcery.com> 
	<3F4FB6E0.1000101@tejasconsulting.com>
Message-ID: <1062189489.11060.80.camel@doubledemon.codesourcery.com>

On Fri, 2003-08-29 at 13:26, Danny R. Faught wrote:
> Manual section "3.5. Test and Resource Classes" describes test classes 
> but not resource classes.  I'd like to see a 3.5.2 section for resource 
> classes.  I saw this issue while using the 2.0.3 release and the 
> documentation on the web site.

Yes, we have talked for quite a while about building a manual for test
and resource classes, and, in general, making other improvements and
changes to the documentation.

That will happen at some point, but we don't know when yet.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From faught at tejasconsulting.com  Fri Aug 29 20:48:08 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Fri, 29 Aug 2003 15:48:08 -0500
Subject: [qmtest] missing resource class documentation, pdfjadetex dependency
In-Reply-To: <4cb868822850316f812a7c90319e8f6d3f4fb7a3@Orthosoft.ca>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>	<3F4F7528.4000501@tejasconsulting.com>	<3F4F7741.3010008@tejasconsulting.com> 	<e42bb6ecc5f2d07f9ee265649a0c65cb3f4f85e8@Orthosoft.ca> <1062183586.11158.73.camel@doubledemon.codesourcery.com> <3F4FB6E0.1000101@tejasconsulting.com> <4cb868822850316f812a7c90319e8f6d3f4fb7a3@Orthosoft.ca>
Message-ID: <3F4FBC08.8070609@tejasconsulting.com>

Stefan Seefeld wrote:
> That's very strange, as configure only tests for a 'jade' executable,
> not 'pdfjadetex'. The former is needed for any document generation,
> while the latter only for pdf output. Are you sure pdfjadetex is the
> problem ?

Jade isn't there either - the package isn't installed.  I'm sure that 
the make complains about not finding pdfjadetex first.

Anyway, it seems to be more of a documentation issue that a technical 
problem (except that trying to install jadetex gave me fits).

> This issue only comes up if you use a version of qmtest directly from
> cvs, as releases (source or binary) include the built docs.

Yup.
-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/




From njs at pobox.com  Fri Aug 29 21:03:19 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 29 Aug 2003 14:03:19 -0700
Subject: [qmtest] generating source distributions
In-Reply-To: <89405227737a0f4d328b1722032830e03f4e6c35@Orthosoft.ca>
References: <89405227737a0f4d328b1722032830e03f4e6c35@Orthosoft.ca>
Message-ID: <20030829210319.GA13850@njs.dhis.org>

On Thu, Aug 28, 2003 at 05:01:04PM -0400, Stefan Seefeld wrote:
> recursive-include   zope-dtml *

This directory doesn't exist anymore, does it?

-- Nathaniel

-- 
Civil rights were not compatible with European unification. But I'm much
happier now that all our strawberries are the same size.   -- dark


From njs at pobox.com  Fri Aug 29 21:15:33 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 29 Aug 2003 14:15:33 -0700
Subject: [qmtest] test failures on Red Hat 9
In-Reply-To: <3F4F7741.3010008@tejasconsulting.com>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2> <3F4F7528.4000501@tejasconsulting.com> <3F4F7741.3010008@tejasconsulting.com>
Message-ID: <20030829211533.GA14583@njs.dhis.org>

On Fri, Aug 29, 2003 at 10:54:41AM -0500, Danny R. Faught wrote:
> I don't get a clean "make check" on Red Hat 9 with CVS sources I updated 
>  this morning.  I'm running python 2.2.2.  Are the tests expected to 
> pass in this configuration?
[...]
> The result from check-threads is worse:
> 
> -------------------------------------------------------------
> cd qm && PYTHONPATH=. /usr/bin/python2 -O ./setup.py -q build
> warning: build_py: package init file './test/classes/__init__.py' not 
> found (or not a regular file)
> warning: build_py: package init file './test/classes/__init__.py' not 
> found (or not a regular file)
> rm -f tests/QMTest/thread_target
> qm/test/qmtest -D tests create-target -a threads=4 \
> 	-T tests/QMTest/thread_target \
> 	thread thread_target.ThreadTarget
> qm/test/qmtest -D tests run -T tests/QMTest/thread_target \
> 	 \
> 	-c qmtest_path=qm/test/qmtest \
> 	-c qmtest_target=tests/QMTest/thread_target
> -------------------------------------------------------------
> 
> It hangs at this point.  I have to send a SIGKILL to all QMTest python 
> programs to recover.  Here's a snapshot from ps:

Some people on the SCons (a python make replacement) list saw similar
behaviour in SCons on Redhat 9, and it turned out to be a buggy glibc
that RH shipped.  You might try applying the glibc update at

  https://rhn.redhat.com/errata/RHBA-2003-136.html

and see if that helps?

-- Nathaniel

-- 
"Of course, the entire effort is to put oneself
 Outside the ordinary range
 Of what are called statistics."
  -- Stephan Spender


From seefeld at sympatico.ca  Fri Aug 29 21:14:54 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 29 Aug 2003 17:14:54 -0400
Subject: [qmtest] generating source distributions
References: <89405227737a0f4d328b1722032830e03f4e6c35@Orthosoft.ca> <20030829210319.GA13850@njs.dhis.org>
Message-ID: <8f98dd4ff2838164289044ab2784f1393f4fc0ee@Orthosoft.ca>

Nathaniel Smith wrote:
> On Thu, Aug 28, 2003 at 05:01:04PM -0400, Stefan Seefeld wrote:
> 
>>recursive-include   zope-dtml *
> 
> 
> This directory doesn't exist anymore, does it?

it does, at least on my latest checkout. The file I sent
in yesterday wasn't complete, as I realized when trying to
run 'python setup.py bdist_rpm'. I'm working on it...

Regards,
		Stefan





From faught at tejasconsulting.com  Fri Aug 29 21:22:18 2003
From: faught at tejasconsulting.com (Danny R. Faught)
Date: Fri, 29 Aug 2003 16:22:18 -0500
Subject: building from CVS for Windows
In-Reply-To: <20030829210319.GA13850@njs.dhis.org>
References: <89405227737a0f4d328b1722032830e03f4e6c35@Orthosoft.ca> <20030829210319.GA13850@njs.dhis.org>
Message-ID: <3F4FC40A.2080104@tejasconsulting.com>

Anyone have guidance on how to set up a CVS dump of QMTest on Windows?

I can get a build under Cygwin, but I can't get a basic 
command.ShellCommandTest or command.ExecTest test to run.  Perhaps this 
is a known issue, given recent discussions about Cygwin.

I tried to do another build in as native a Windows environment as I 
could.  I used a native port of gmake.  I didn't have a native shell to 
run configure, so I used the Cygwin bash shell, which seems to have 
allowed some Cygwin-isms to creep in, such as installing in 
/usr/local/bin.  I can build it but I can't run it:

C:\temp\qmdb>c:\temp\dosqm\qm\qm\test\qmtest.bat gui
c:\Python22\python: can't open file 'C:\progra~1\qmlibqmtestqmtest.py'

C:\temp\qmdb>c:\cygwin\usr\local\bin\qmtest gui
c:\Python22\python: can't open file 'C:\progra~1\qmlibqmtestqmtest.py'

I believe the libraries went to C:\cygwin\usr\local\lib.  Would I have 
any more luck if I run configure with a native Windows port of a Unix 
shell?  How do you folks build in Windows?
-- 
Danny R. Faught
Tejas Software Consulting
http://tejasconsulting.com/




From mark at codesourcery.com  Fri Aug 29 21:20:42 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 29 Aug 2003 14:20:42 -0700
Subject: [qmtest] generating source distributions
In-Reply-To: <20030829210319.GA13850@njs.dhis.org>
References: <89405227737a0f4d328b1722032830e03f4e6c35@Orthosoft.ca>
	 <20030829210319.GA13850@njs.dhis.org>
Message-ID: <1062192042.4066.2.camel@minax.codesourcery.com>

On Fri, 2003-08-29 at 14:03, Nathaniel Smith wrote:
> On Thu, Aug 28, 2003 at 05:01:04PM -0400, Stefan Seefeld wrote:
> > recursive-include   zope-dtml *
> 
> This directory doesn't exist anymore, does it?

You are correct, it does not.

Good point,

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From njs at pobox.com  Fri Aug 29 21:24:46 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 29 Aug 2003 14:24:46 -0700
Subject: [qmtest] generating source distributions
In-Reply-To: <8f98dd4ff2838164289044ab2784f1393f4fc0ee@Orthosoft.ca>
References: <89405227737a0f4d328b1722032830e03f4e6c35@Orthosoft.ca> <20030829210319.GA13850@njs.dhis.org> <8f98dd4ff2838164289044ab2784f1393f4fc0ee@Orthosoft.ca>
Message-ID: <20030829212446.GB14583@njs.dhis.org>

On Fri, Aug 29, 2003 at 05:14:54PM -0400, Stefan Seefeld wrote:
> Nathaniel Smith wrote:
> >On Thu, Aug 28, 2003 at 05:01:04PM -0400, Stefan Seefeld wrote:
> >
> >>recursive-include   zope-dtml *
> >
> >
> >This directory doesn't exist anymore, does it?
> 
> it does, at least on my latest checkout. The file I sent
> in yesterday wasn't complete, as I realized when trying to
> run 'python setup.py bdist_rpm'. I'm working on it...

It doesn't exist for me.  Perhaps you're not using -P?  CVS doesn't
let us actually remove directories, but the old zope-dtml directory
doesn't contain anything anymore.

-- Nathaniel

-- 
IBM manual SENG-5155-01:  Power Supply and Air Moving Device Installation
Instruction for iSeries 820 and 5075.


From mark at codesourcery.com  Fri Aug 29 21:32:58 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 29 Aug 2003 14:32:58 -0700
Subject: [qmtest] building from CVS for Windows
In-Reply-To: <3F4FC40A.2080104@tejasconsulting.com>
References: <89405227737a0f4d328b1722032830e03f4e6c35@Orthosoft.ca>
	 <20030829210319.GA13850@njs.dhis.org>
	 <3F4FC40A.2080104@tejasconsulting.com>
Message-ID: <1062192778.4066.14.camel@minax.codesourcery.com>

On Fri, 2003-08-29 at 14:22, Danny R. Faught wrote:
> Anyone have guidance on how to set up a CVS dump of QMTest on Windows?
> 
> I can get a build under Cygwin, but I can't get a basic 
> command.ShellCommandTest or command.ExecTest test to run.  Perhaps this 
> is a known issue, given recent discussions about Cygwin.
> 
> I tried to do another build in as native a Windows environment as I 
> could.  I used a native port of gmake.  I didn't have a native shell to 
> run configure, so I used the Cygwin bash shell, which seems to have 
> allowed some Cygwin-isms to creep in, such as installing in 
> /usr/local/bin.  I can build it but I can't run it:
> 
> C:\temp\qmdb>c:\temp\dosqm\qm\qm\test\qmtest.bat gui
> c:\Python22\python: can't open file 'C:\progra~1\qmlibqmtestqmtest.py'
> 
> C:\temp\qmdb>c:\cygwin\usr\local\bin\qmtest gui
> c:\Python22\python: can't open file 'C:\progra~1\qmlibqmtestqmtest.py'
> 
> I believe the libraries went to C:\cygwin\usr\local\lib.  Would I have 
> any more luck if I run configure with a native Windows port of a Unix 
> shell?  How do you folks build in Windows?

See scripts/qm-release.  Look for "build_exec".

We use a native Python, but we use Cygwin to run the build scripts.

(I haven't tried this in a few days, and there's been a lot of recent
activity on the build process, so I wouldn't be amazed if something is
broken just at the moment.)

As of a week ago, at least, the test classes you mentioned worked fine. 
(Note that a requirement is that you download the Python Win32
extensions; this is documented on our web site, although a note should
also be added to README in CVS.)

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From mark at codesourcery.com  Fri Aug 29 21:40:50 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 29 Aug 2003 14:40:50 -0700
Subject: [qmtest] ps output Re: test failures on Red Hat 9
In-Reply-To: <3F4F77E7.7070509@tejasconsulting.com>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>
	 <3F4F7528.4000501@tejasconsulting.com>
	 <3F4F77E7.7070509@tejasconsulting.com>
Message-ID: <1062193250.4066.21.camel@minax.codesourcery.com>

On Fri, 2003-08-29 at 08:57, Danny R. Faught wrote:
> Lesson learned - don't type Enter after Ctrl-V if you haven't released 
> the ctrl key yet.  :-)  Here's the ps output I was trying to paste.
> 
> It hangs at this point.  I have to send a SIGKILL to all QMTest python
> programs to recover.  Here's a snapshot from ps:

I could not duplicate this on a Red Hat 8 system, and we do run those
tests very regularly.

It is of course possible that we have a threading bug, but it is also
possible that bugs in Red Hat 9 libc are what is causing the problem. 
We would have to debug on such a system to know for sure.

(In general, QMTest has found some interesting thread bugs on various
systems.  We were able to crash the HP-UX 11.0 kernel on 
a regular basis.  That is why we have ProcessTarget in addition to
ThreadTarget.)

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From seefeld at sympatico.ca  Fri Aug 29 21:42:45 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 29 Aug 2003 17:42:45 -0400
Subject: [qmtest] building from CVS for Windows
References: <89405227737a0f4d328b1722032830e03f4e6c35@Orthosoft.ca>	 <20030829210319.GA13850@njs.dhis.org>	 <3F4FC40A.2080104@tejasconsulting.com> <1062192778.4066.14.camel@minax.codesourcery.com>
Message-ID: <bb98da17f1362e105175d9f5b8225fd73f4fc76f@Orthosoft.ca>

Mark Mitchell wrote:
> On Fri, 2003-08-29 at 14:22, Danny R. Faught wrote:
> 
>>Anyone have guidance on how to set up a CVS dump of QMTest on Windows?
>>
>>I can get a build under Cygwin, but I can't get a basic 
>>command.ShellCommandTest or command.ExecTest test to run.  Perhaps this 
>>is a known issue, given recent discussions about Cygwin.
>>
>>I tried to do another build in as native a Windows environment as I 
>>could.  I used a native port of gmake.  I didn't have a native shell to 
>>run configure, so I used the Cygwin bash shell, which seems to have 
>>allowed some Cygwin-isms to creep in, such as installing in 
>>/usr/local/bin.  I can build it but I can't run it:
>>
>>C:\temp\qmdb>c:\temp\dosqm\qm\qm\test\qmtest.bat gui
>>c:\Python22\python: can't open file 'C:\progra~1\qmlibqmtestqmtest.py'
>>
>>C:\temp\qmdb>c:\cygwin\usr\local\bin\qmtest gui
>>c:\Python22\python: can't open file 'C:\progra~1\qmlibqmtestqmtest.py'
>>
>>I believe the libraries went to C:\cygwin\usr\local\lib.  Would I have 
>>any more luck if I run configure with a native Windows port of a Unix 
>>shell?  How do you folks build in Windows?
> 
> 
> See scripts/qm-release.  Look for "build_exec".
> 
> We use a native Python, but we use Cygwin to run the build scripts.
> 
> (I haven't tried this in a few days, and there's been a lot of recent
> activity on the build process, so I wouldn't be amazed if something is
> broken just at the moment.)

As I couldn't run qmtest with the cygwin version of python (the 
child-process problems I mentioned earlier), I compiled qmtest with
the win32 python (still from within a cygwin shell). That worked well,
and with my fix to the GNUmakefile.in file it sets up a working
qmtest.bat script.

I run this script from within a windows command line interpreter
successfully.

It would clearly be a good idea to not only set up a batch file,
but a (cygwin) shell script, too, so qmtest could be used from
both environments. Right now the type of script that is generated
depends only on the python executable that is used during the build.


The new build system will hopefully fix this shortly.

Regards,
		Stefan






From mark at codesourcery.com  Fri Aug 29 22:56:36 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 29 Aug 2003 15:56:36 -0700
Subject: PATCH: "make check" and README
Message-ID: <200308292256.h7TMuajO003227@minax.codesourcery.com>


I've updated the "check" target not to use check-rsh.

I've also updated some information in the README, and checked in the
ZPL.  (That got lost when Nathaniel reorganized some stuff earlier
this summer.)

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-08-29  Mark Mitchell  <mark at codesourcery.com>

	* GNUmakefile.in (check): Remove dependency on check-rsh.

	* README: Mention Win32 extensions and update reference to ZPL.
	* qm/external/DocumentTemplate/LICENSE.txt: New file.
	
Index: GNUmakefile.in
===================================================================
RCS file: /home/sc/Repository/qm/GNUmakefile.in,v
retrieving revision 1.27
diff -c -5 -p -r1.27 GNUmakefile.in
*** GNUmakefile.in	11 Aug 2003 06:43:16 -0000	1.27
--- GNUmakefile.in	29 Aug 2003 22:34:21 -0000
*************** distclean: clean
*** 210,220 ****
  	rm -f qm.spec
  
  # Run tests.
  .PHONY: check check-serial check-threads check-processes check-rsh
  
! check: check-serial check-threads check-processes check-rsh
  
  check-serial: all
  	qm/test/qmtest -D tests run $(QMTESTFLAGS) \
  		-c qmtest_path=qm/test/qmtest
  
--- 210,222 ----
  	rm -f qm.spec
  
  # Run tests.
  .PHONY: check check-serial check-threads check-processes check-rsh
  
! # The check-rsh target is not included here because it requires
! # networking support.
! check: check-serial check-threads check-processes
  
  check-serial: all
  	qm/test/qmtest -D tests run $(QMTESTFLAGS) \
  		-c qmtest_path=qm/test/qmtest
  
Index: README
===================================================================
RCS file: /home/sc/Repository/qm/README,v
retrieving revision 1.27
diff -c -5 -p -r1.27 README
*** README	18 Jun 2003 21:54:21 -0000	1.27
--- README	29 Aug 2003 22:34:21 -0000
***************
*** 3,29 ****
  
  ------------------------------------------------------------------------
  
  1.  REQUIREMENTS
  
!     To run QM, you will need Python Python 2.2 (or greater).
  
      You must use GNU Make to build QM.
  
  ------------------------------------------------------------------------
  
  2.  LICENSE
  
      QM is licensed under the GNU General Public License.  See the file
      COPYING for the exact text of the license.
  
!     The zope-dtml module incorporated in QM is software provided by 
!     Digital Creations.  See:
  
!       zope-dtml/ExtensionClass/COPYRIGHT.txt
  
!     for Digital Creations' copyright notice.
  
  ------------------------------------------------------------------------
  
  3.  BUILDING QM
  
--- 3,38 ----
  
  ------------------------------------------------------------------------
  
  1.  REQUIREMENTS
  
!     To run QM, you will need Python Python 2.2 (or greater).  Visit
! 
!       http://www.python.org
! 
!     to obtain source and binary distributions of Python.
! 
!     If you are using Windows, you must also install the Python Win32
!     extensions.  Visit:
! 
!       http://starship.python.net/crew/mhammond/win32/Downloads.html
  
      You must use GNU Make to build QM.
  
  ------------------------------------------------------------------------
  
  2.  LICENSE
  
      QM is licensed under the GNU General Public License.  See the file
      COPYING for the exact text of the license.
  
!     The DocumentTemplate module is Copyright Zope Corporation and
!     Contributors.  See:
  
!       qm/external/DocumentTemplate/LICENSE.txt
  
!     for the exact text of that license.
  
  ------------------------------------------------------------------------
  
  3.  BUILDING QM
  
Index: qm/external/DocumentTemplate/LICENSE.txt
===================================================================
RCS file: qm/external/DocumentTemplate/LICENSE.txt
diff -N qm/external/DocumentTemplate/LICENSE.txt
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- qm/external/DocumentTemplate/LICENSE.txt	29 Aug 2003 22:34:22 -0000
***************
*** 0 ****
--- 1,59 ----
+ Zope Public License (ZPL) Version 2.0
+ -----------------------------------------------
+ 
+ This software is Copyright (c) Zope Corporation (tm) and
+ Contributors. All rights reserved.
+ 
+ This license has been certified as open source. It has also
+ been designated as GPL compatible by the Free Software
+ Foundation (FSF).
+ 
+ Redistribution and use in source and binary forms, with or
+ without modification, are permitted provided that the
+ following conditions are met:
+ 
+ 1. Redistributions in source code must retain the above
+    copyright notice, this list of conditions, and the following
+    disclaimer.
+ 
+ 2. Redistributions in binary form must reproduce the above
+    copyright notice, this list of conditions, and the following
+    disclaimer in the documentation and/or other materials
+    provided with the distribution.
+ 
+ 3. The name Zope Corporation (tm) must not be used to
+    endorse or promote products derived from this software
+    without prior written permission from Zope Corporation.
+ 
+ 4. The right to distribute this software or to use it for
+    any purpose does not give you the right to use Servicemarks
+    (sm) or Trademarks (tm) of Zope Corporation. Use of them is
+    covered in a separate agreement (see
+    http://www.zope.com/Marks).
+ 
+ 5. If any files are modified, you must cause the modified
+    files to carry prominent notices stating that you changed
+    the files and the date of any change.
+ 
+ Disclaimer
+ 
+   THIS SOFTWARE IS PROVIDED BY ZOPE CORPORATION ``AS IS''
+   AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT
+   NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
+   AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
+   NO EVENT SHALL ZOPE CORPORATION OR ITS CONTRIBUTORS BE
+   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+   OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+   DAMAGE.
+ 
+ 
+ This software consists of contributions made by Zope
+ Corporation and many individuals on behalf of Zope
+ Corporation.  Specific attributions are listed in the
+ accompanying credits file.


From mark at codesourcery.com  Fri Aug 29 23:03:55 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 29 Aug 2003 16:03:55 -0700
Subject: [qmtest] Resource creation
In-Reply-To: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>
References: <D0FFFC6D8FB3D511A03C0003473BC4852CAA2C@LOUEXCH2>
Message-ID: <1062198235.4066.41.camel@minax.codesourcery.com>

On Thu, 2003-08-28 at 13:42, Lewis, Pat H. wrote:
> I am having problems with creating resources when using the GUI.  If I have
> a test that relies on a resource, when I run the test the first time,
> everything works as expected.  The resource is created and destroyed
> properly.  However, on the second (and subsequent) 'Run', it appears that
> the SetUp method of the resource is not called.  However, the CleanUp method
> is called on each subsequent run.
> 
> I have a really simple resource to demonstrate the problem.

Good find!

I've checked in this patch to fix the problem.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
2003-08-29  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/target.py (Target.__init__): Do not set __resources.
	(Target.Start): Initialize __resources.
	(Target.Stop): Remove entries created by Target.Start.

Index: target.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/target.py,v
retrieving revision 1.21
diff -c -5 -p -r1.21 target.py
*** target.py	11 Aug 2003 22:55:14 -0000	1.21
--- target.py	29 Aug 2003 22:55:18 -0000
*************** class Target(qm.extension.Extension):
*** 98,110 ****
  
          qm.extension.Extension.__init__(self, properties)
          
          self.__database = database
  
-         # There are no resources available on this target.
-         self.__resources = {}
-         
  
      def GetName(self):
          """Return the name of the target.
  
          Derived classes must not override this method."""
--- 98,107 ----
*************** class Target(qm.extension.Extension):
*** 168,177 ****
--- 165,176 ----
          method must call this method at some point during its
          execution."""
  
          self.__response_queue = response_queue
          self.__engine = engine
+         # There are no resources available on this target yet.
+         self.__resources = {}
  
          
      def Stop(self):
          """Stop the target.
  
*************** class Target(qm.extension.Extension):
*** 183,192 ****
--- 182,194 ----
          
          # Clean up any available resources.
          for (name, rop) in self.__resources.items():
              if rop and rop[1] == Result.PASS:
                  self._CleanUpResource(name, rop[0])
+         del self.__response_queue
+         del self.__engine
+         del self.__resources
  
  
      def RunTest(self, descriptor, context):
          """Run the test given by 'test_id'.
  

From mark at codesourcery.com  Sat Aug 30 01:05:06 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 29 Aug 2003 18:05:06 -0700
Subject: [qmtest] QMTest review, metrics
In-Reply-To: <3F4E1EE9.1020707@tejasconsulting.com>
References: <9c5466c71fa1bb6409ecbad04549f4d23f42462a@Orthosoft.ca>
	 <3f5c5fb36a96e70ca5	f1903caa281d5b3f428101@Orthosoft.ca>
	 <1061402332.22692.25.camel@doubledemon	.codesourcery.com>
	 <548547ef7222663dd671fca1f4fe50dc3f43ce31@Orthosoft.ca>
	 <1061409763.23203.17.camel@doubledemon.codesourcery.com>
	 <e5d7f86ae917b889	47d37468765706ed3f46273b@Orthosoft.ca>
	 <1061781572.10827.72.camel@minax.code	sourcery.com>
	 <047c01bfb3035e8ae9dea467d1f54d283f4a04c6@Orthosoft.ca>
	 <1061824620.29338.12.camel@doubledemon.codesourcery.com>
	 <3cade987a262e3b90ab57f1e328a69c73f4a6b4d@Orthosoft.ca>
	 <000401c36b90$f2280ec0$6900a8c0@minax>
	 <3F4C28C6.4010608@tejasconsulting.com>
	 <1062000051.5368.45.camel@doubledemon.codesourcery.com>
	 <3F4E1EE9.1020707@tejasconsulting.com>
Message-ID: <1062205506.4066.64.camel@minax.codesourcery.com>


> I'm thinking about judging it by the frequency of CVS checkins rather 
> than official releases, since it was recommended that I use what's in 
> CVS rather than 2.0.3.  Any idea what percentage of users are using code 
> from CVS or patches that's newer than 2.0.3?

I suspect that most users are using the newer version.

However, some of our testsuite customers are using the released version.

We're not sure yet when the next release will be, but we're thinking
relatively soon.  Our major goals are scalability (ability to run
hundreds of thousands of tests, create results files, etc.) and API
stability.  

We want to be able to guarantee that existing extension classes will
work forever more.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



