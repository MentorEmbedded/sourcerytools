From stefan at codesourcery.com  Fri Jun  2 13:34:31 2006
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Fri, 02 Jun 2006 09:34:31 -0400
Subject: patch: Various enhancements and fixes
Message-ID: <44803E67.9080203@codesourcery.com>

The attached patch contains a number of enhancements and fixes:

A new function is provided to parse quoted text into a list of strings,
useful notably to handle context variables, which may contain
whitespace-containing paths (such as -I and -L compiler options).

The compilation_test module has been enhanced to provide an
'ExecutableTest' that runs a binary previously compiled with the
'CompiledResource'.

CompilationTest and ExecutableTest now take an optional 'target' / 'host'
context variable that allows cross-compilation / cross-testing.

Regards,
		Stefan


-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20060602/0464d368/attachment.ksh>

From mark at codesourcery.com  Fri Jun  2 20:58:41 2006
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 02 Jun 2006 13:58:41 -0700
Subject: [qmtest] patch: Various enhancements and fixes
In-Reply-To: <44803E67.9080203@codesourcery.com>
References: <44803E67.9080203@codesourcery.com>
Message-ID: <4480A681.80400@codesourcery.com>

Stefan Seefeld wrote:
> The attached patch contains a number of enhancements and fixes:
> 
> A new function is provided to parse quoted text into a list of strings,
> useful notably to handle context variables, which may contain
> whitespace-containing paths (such as -I and -L compiler options).
> 
> The compilation_test module has been enhanced to provide an
> 'ExecutableTest' that runs a binary previously compiled with the
> 'CompiledResource'.
> 
> CompilationTest and ExecutableTest now take an optional 'target' / 'host'
> context variable that allows cross-compilation / cross-testing.

> Index: qm/extension.py
> ===================================================================
> RCS file: /home/qm/Repository/qm/qm/extension.py,v
> retrieving revision 1.20
> diff -u -r1.20 extension.py
> --- qm/extension.py	1 Dec 2005 08:27:12 -0000	1.20
> +++ qm/extension.py	2 Jun 2006 12:54:48 -0000
> @@ -151,7 +151,8 @@
>          if __debug__:
>              dictionary = get_class_arguments_as_dictionary(self.__class__)
>              for a, v in arguments.items():
> -                assert dictionary.has_key(a)
> +                if not dictionary.has_key(a):
> +                    raise AttributeError, a

What is the logic for this change?  We're in __debug__ so we know assert
will work.  I'm fine with the change; I'm just curious as to the reason.

> +    def GetStringList(self, key, default = None):
> +        """Return the list of strings associated with 'key'.
> +
> +        'key' -- A string.
> +
> +        'default' -- A default list.
> +
> +        If there is no value associated with 'key' and default is not
> +        'None', then the boolean value associated with default is
> +        used.  

What do you mean "boolean value"?  It looks like you just return
default.  It also seems like "[]" would be a better default.

Other than that, it looks great.

Thanks,

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From stefan at codesourcery.com  Fri Jun  2 22:13:36 2006
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Fri, 02 Jun 2006 18:13:36 -0400
Subject: [qmtest] patch: Various enhancements and fixes
In-Reply-To: <4480A681.80400@codesourcery.com>
References: <44803E67.9080203@codesourcery.com> <4480A681.80400@codesourcery.com>
Message-ID: <4480B810.8010100@codesourcery.com>

Mark Mitchell wrote:
> Stefan Seefeld wrote:

>> Index: qm/extension.py
>> ===================================================================
>> RCS file: /home/qm/Repository/qm/qm/extension.py,v
>> retrieving revision 1.20
>> diff -u -r1.20 extension.py
>> --- qm/extension.py	1 Dec 2005 08:27:12 -0000	1.20
>> +++ qm/extension.py	2 Jun 2006 12:54:48 -0000
>> @@ -151,7 +151,8 @@
>>          if __debug__:
>>              dictionary = get_class_arguments_as_dictionary(self.__class__)
>>              for a, v in arguments.items():
>> -                assert dictionary.has_key(a)
>> +                if not dictionary.has_key(a):
>> +                    raise AttributeError, a
> 
> What is the logic for this change?  We're in __debug__ so we know assert
> will work.  I'm fine with the change; I'm just curious as to the reason.

I was running some extension class that I passed a wrong attribute in its
constructor, and all I got was an assertion error, i.e. no information
about what the wrong attribute was. The above change was the only way
for me to see what I did wrong.

>> +    def GetStringList(self, key, default = None):
>> +        """Return the list of strings associated with 'key'.
>> +
>> +        'key' -- A string.
>> +
>> +        'default' -- A default list.
>> +
>> +        If there is no value associated with 'key' and default is not
>> +        'None', then the boolean value associated with default is
>> +        used.  
> 
> What do you mean "boolean value"?  It looks like you just return
> default.  It also seems like "[]" would be a better default.

Sorry, I was mindlessly c&p'ing (from 'GetBoolean()').
In fact, whenever 'default' is not None, it is returned if there
is no variable associated with 'key'. Thus, users who want to
provide an empty list as default value should call the function
as 'GetStringList(key, [])'.

Thanks,
		Stefan

-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718


From mark at codesourcery.com  Fri Jun  2 22:25:26 2006
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 02 Jun 2006 15:25:26 -0700
Subject: [qmtest] patch: Various enhancements and fixes
In-Reply-To: <4480B810.8010100@codesourcery.com>
References: <44803E67.9080203@codesourcery.com> <4480A681.80400@codesourcery.com> <4480B810.8010100@codesourcery.com>
Message-ID: <4480BAD6.7070601@codesourcery.com>

Stefan Seefeld wrote:

>> What is the logic for this change?  We're in __debug__ so we know assert
>> will work.  I'm fine with the change; I'm just curious as to the reason.
> 
> I was running some extension class that I passed a wrong attribute in its
> constructor, and all I got was an assertion error, i.e. no information
> about what the wrong attribute was. The above change was the only way
> for me to see what I did wrong.

OK, that makes sense.

>> What do you mean "boolean value"?  It looks like you just return
>> default.  It also seems like "[]" would be a better default.
> 
> Sorry, I was mindlessly c&p'ing (from 'GetBoolean()').

OK.

> In fact, whenever 'default' is not None, it is returned if there
> is no variable associated with 'key'. Thus, users who want to
> provide an empty list as default value should call the function
> as 'GetStringList(key, [])'.

OK.  Please check in the patch.

Thanks,

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From sokelly at bfsec.bt.co.uk  Thu Jun  8 11:34:20 2006
From: sokelly at bfsec.bt.co.uk (Sean Kelly)
Date: Thu, 8 Jun 2006 12:34:20 +0100
Subject: making QMtest grep the Standard Output
Message-ID: <I2KC08-UKBRX0nmR1sj00046777@i2kc08-ukbr.domain1.systemhost.net>

I have a program/script that returns a time stamp in its output.  So the
Standard Output I put in my test case will never match the actual output.
Also the output ordering of the strings from the program can sometimes be
different.

Is there any way to specify in the Standard output that only certain strings
are contained in the actual output?


Thanks,

Sean




From stefan at codesourcery.com  Thu Jun  8 15:35:36 2006
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Thu, 08 Jun 2006 11:35:36 -0400
Subject: [qmtest] making QMtest grep the Standard Output
In-Reply-To: <I2KC08-UKBRX0nmR1sj00046777@i2kc08-ukbr.domain1.systemhost.net>
References: <I2KC08-UKBRX0nmR1sj00046777@i2kc08-ukbr.domain1.systemhost.net>
Message-ID: <448843C8.2090506@codesourcery.com>

Sean Kelly wrote:
> I have a program/script that returns a time stamp in its output.  So the
> Standard Output I put in my test case will never match the actual output.
> Also the output ordering of the strings from the program can sometimes be
> different.
> 
> Is there any way to specify in the Standard output that only certain strings
> are contained in the actual output?

Not per se. However, the command.ExecTestBase class defines a ValidateOutput()
method for this purpose. The default implementation simply compares the text
with the expected values for stdout and stderr.
You may be able to subclass from that (or any of its existing subclasses),
providing your own ValidateOutput() method that ignores the irrelevant parts
of the output.

Regards,
		Stefan

-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718


From vsingh at velankani.com  Mon Jun 12 13:45:04 2006
From: vsingh at velankani.com (Vinod Kumar Singh)
Date: Mon, 12 Jun 2006 19:15:04 +0530
Subject: [qmtest] making QMtest grep the Standard Output
In-Reply-To: <448843C8.2090506@codesourcery.com>
Message-ID: <000001c68e26$68c5e920$2415000a@blr.velankani.com>

Hi,

I am using python 2.3.3 on Linux box. But I am not able to find
ValidateOutput() method in command.ExecTestBase class. Do I need to update
my python?

Thanks for input,
Vinod 

-----Original Message-----
From: Stefan Seefeld [mailto:stefan at codesourcery.com] 
Sent: Thursday, June 08, 2006 9:06 PM
To: Sean Kelly
Cc: qmtest at codesourcery.com
Subject: Re: [qmtest] making QMtest grep the Standard Output

Sean Kelly wrote:
> I have a program/script that returns a time stamp in its output.  So the
> Standard Output I put in my test case will never match the actual output.
> Also the output ordering of the strings from the program can sometimes be
> different.
> 
> Is there any way to specify in the Standard output that only certain
strings
> are contained in the actual output?

Not per se. However, the command.ExecTestBase class defines a
ValidateOutput()
method for this purpose. The default implementation simply compares the text
with the expected values for stdout and stderr.
You may be able to subclass from that (or any of its existing subclasses),
providing your own ValidateOutput() method that ignores the irrelevant parts
of the output.

Regards,
		Stefan

-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718




From stefan at codesourcery.com  Mon Jun 12 13:51:46 2006
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Mon, 12 Jun 2006 09:51:46 -0400
Subject: [qmtest] making QMtest grep the Standard Output
In-Reply-To: <000001c68e26$68c5e920$2415000a@blr.velankani.com>
References: <000001c68e26$68c5e920$2415000a@blr.velankani.com>
Message-ID: <448D7172.8070204@codesourcery.com>

Vinod Kumar Singh wrote:
> Hi,
> 
> I am using python 2.3.3 on Linux box. But I am not able to find
> ValidateOutput() method in command.ExecTestBase class. Do I need to update
> my python?

You may have to update your QMTest version. The ValidateOutput() method
was added before the QMTest 2.3 release.

Regards,
		Stefan

-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718


From stefan at codesourcery.com  Thu Jun 15 13:42:44 2006
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Thu, 15 Jun 2006 09:42:44 -0400
Subject: patch: Fix SSHHost implementation.
Message-ID: <449163D4.2030703@codesourcery.com>

The attached patch lets SSHHost (and, by extension, RSHHost) derive from
the Host interface, not LocalHost. UploadAndRun() now works as expected.
The patch is checked in.

Regards,
		Stefan

-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20060615/b3c45989/attachment.ksh>

From chifflier at cpe.fr  Mon Jun 19 14:20:09 2006
From: chifflier at cpe.fr (Pierre Chifflier)
Date: Mon, 19 Jun 2006 16:20:09 +0200
Subject: exceptions.OSError: [Errno 3] No such process
Message-ID: <20060619142009.GJ16382@cpe.fr>

Hi,

I'm trying to use qmtest on Debian Sid (Unstable), and encounter some
problems when using the gui:
Every time I try to run a test using the gui, I got an error
qmtest.exception
  exceptions.OSError: [Errno 3] No such process

The problem seems to be in setpgid (see the end of this mail for a
complete traceback), but I can't tell more.
There is a zombie process remaining:
pollux   31795  0.1  1.0  20544  8276 pts/6    S+   16:10   0:00  |
\_ /usr/bin/python /usr/bin/qmtest gui
pollux   31883  0.0  0.0      0     0 pts/6    Z    16:10   0:00  |
\_ [bash] <defunct>

I tried using command.ExecTest, command.ShellCommandTest and
command.ShellScriptTest without success.


Now, what's weird: all tests succeeds using the CLI:
qmtest run
--- TEST RESULTS
-------------------------------------------------------------

  shell.test_wzd_action                         : PASS


Is there a way to make the gui work ? Or have I done something wrong ?


Thanks for your help,

Pierre



Versions:

QMTest 2.3
Python 2.3.5


Traceback:

File "/usr/lib/python2.3/site-packages/qm/test/target.py", line 225, in RunTest
    descriptor.Run(context, result)

  File "/usr/lib/python2.3/site-packages/qm/test/database.py", line 256, in Run
    self._Execute(context, result, "Run")

  File "/usr/lib/python2.3/site-packages/qm/test/database.py", line 178, in _Execute
    methobj(context, result)

  File "/usr/lib/python2.3/site-packages/qm/test/classes/command.py", line 493, in Run
    self.RunProgram(arguments[0], arguments, context, result)

  File "/usr/lib/python2.3/site-packages/qm/test/classes/command.py", line 221, in RunProgram
    exit_status = e.Run(arguments, environment, path = program)

  File "/usr/lib/python2.3/site-packages/qm/executable.py", line 548, in Run
    path)

  File "/usr/lib/python2.3/site-packages/qm/executable.py", line 257, in Run
    child = self.Spawn(arguments, environment, dir, path, exception_pipe)

  File "/usr/lib/python2.3/site-packages/qm/executable.py", line 209, in Spawn
    self._HandleChild()

  File "/usr/lib/python2.3/site-packages/qm/executable.py", line 714, in _HandleChild
    super(RedirectedExecutable, self)._HandleChild()

  File "/usr/lib/python2.3/site-packages/qm/executable.py", line 492, in _HandleChild
    os.setpgid(self.__monitor_pid, child_pid)



From stefan at codesourcery.com  Mon Jun 19 15:09:13 2006
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Mon, 19 Jun 2006 11:09:13 -0400
Subject: [qmtest] exceptions.OSError: [Errno 3] No such process
In-Reply-To: <20060619142009.GJ16382@cpe.fr>
References: <20060619142009.GJ16382@cpe.fr>
Message-ID: <4496BE19.70605@codesourcery.com>

Pierre,

Pierre Chifflier wrote:
> Hi,
> 
> I'm trying to use qmtest on Debian Sid (Unstable), and encounter some
> problems when using the gui:
> Every time I try to run a test using the gui, I got an error
> qmtest.exception
>   exceptions.OSError: [Errno 3] No such process
> 
> The problem seems to be in setpgid (see the end of this mail for a
> complete traceback), but I can't tell more.
> There is a zombie process remaining:
> pollux   31795  0.1  1.0  20544  8276 pts/6    S+   16:10   0:00  |
> \_ /usr/bin/python /usr/bin/qmtest gui
> pollux   31883  0.0  0.0      0     0 pts/6    Z    16:10   0:00  |
> \_ [bash] <defunct>
> 
> I tried using command.ExecTest, command.ShellCommandTest and
> command.ShellScriptTest without success.
> 
> 
> Now, what's weird: all tests succeeds using the CLI:
> qmtest run
> --- TEST RESULTS
> -------------------------------------------------------------
> 
>   shell.test_wzd_action                         : PASS
> 
> 
> Is there a way to make the gui work ? Or have I done something wrong ?

I can confirm the error, as I ran into it, too, on Fedora Core.

It appears this is a bug in the way some kernel handles setpgid() calls
in multi-threaded applications. (FWIW, I filed a bug report:
https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=188578)

I haven't yet thought of an 'official' work around, as no-one else seemed
to be concerned by that. May be for the time being you could just catch
and ignore that particular exception thrown by os.setpgid() by modifying
your local QMTest installation ?

Thanks,
		Stefan

-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718


From stefan at codesourcery.com  Wed Jun 21 15:11:32 2006
From: stefan at codesourcery.com (Stefan Seefeld)
Date: Wed, 21 Jun 2006 11:11:32 -0400
Subject: patch: Support '-o -' to output to stdout in 'report' command & bug
 fix.
Message-ID: <449961A4.6070202@codesourcery.com>

The attached patch checks for the special output filename '-'
to redirect output to stdout for the 'report' command.
It also fixes a bug in the 'report's handling of resource
setup / cleanup results.

Thanks,
		Stefan

-- 
Stefan Seefeld
CodeSourcery
stefan at codesourcery.com
(650) 331-3385 x718
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20060621/54b97e55/attachment.ksh>

From mark at codesourcery.com  Wed Jun 21 16:31:07 2006
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 21 Jun 2006 09:31:07 -0700
Subject: [qmtest] patch: Support '-o -' to output to stdout in 'report'
 command & bug fix.
In-Reply-To: <449961A4.6070202@codesourcery.com>
References: <449961A4.6070202@codesourcery.com>
Message-ID: <4499744B.6070209@codesourcery.com>

Stefan Seefeld wrote:
> The attached patch checks for the special output filename '-'
> to redirect output to stdout for the 'report' command.
> It also fixes a bug in the 'report's handling of resource
> setup / cleanup results.

Yay!

(You didn't post the ChangeLog entry...)

-- 
Mark Mitchell
CodeSourcery
mark at codesourcery.com
(650) 331-3385 x713


From maurizio_vitale at verizon.net  Fri Jun 30 15:02:59 2006
From: maurizio_vitale at verizon.net (Maurizio Vitale)
Date: Fri, 30 Jun 2006 11:02:59 -0400
Subject: is CompilationTest usable?
Message-ID: <C64267F9-17CF-4B0C-A058-C440864F3E80@verizon.net>

I'm struggling to get qmtest do a very basic thing: traverse a  
hierarchy of testsuites and for every file matching a certain regexp  
(*.cpp in my case) compile it (linking against a library which is  
actually the artifact being tested), execute the resulting executable  
and compare its output w/ a golden result file.

While perusing the source code in order to get inspiration on how to  
write a new database and a new test, i've come across  
CompilationTest, that does most of what I need, only better than what  
I could have come up with (new to qmtest and to python). Is  
CompilationTest usable?
[it seems to me that it depends on CompilerTest, which in turns has a  
number of not-yet-implemented methods].

Does somebody has an example of how to use CompilationTest?
Or another some alternative way for doing what I've described above.

Thanks a lot,

	Maurizio



