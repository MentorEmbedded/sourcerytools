From jschmitt at kealia.com  Mon Apr  7 22:12:53 2003
From: jschmitt at kealia.com (John Schmitt)
Date: Mon, 7 Apr 2003 15:12:53 -0700
Subject: Subclassing Executable
Message-ID: <000901c2fd52$d5d4bdb0$a5452a0a@jschmittlt>

More questions from a wannabe-clueful user.

I tried to subclass InputExecutable to do some pretty low-tech stuff.  I
wanted to spawn a process that would kill a test that ran too long.
Here's the kind of thing I'm doing, with stuff snipped to keep this
message reasonably short:

    class TimedExecutable(InputExecutable):
        def Spawn(self, arguments=[], environment = None, dir = None,
path = None, exception_pipe = None):
            self.__child = os.fork()
            if self.__child == 0:
            # see Executable.Spawn in /usr/local/lib/qm/qm/executable.py
            else:
                # my additions
                if self.timeout:
                    killerpid = os.fork()
                    if killerpid != 0:
                        basetime = os.times()[4]
                        while 1:
                            time.sleep( 1 )
                            totaltime = os.times()[4] - basetime;
                            if totaltime > self.timeout:
                                os.kill( self.__child, signal.SIGKILL )
                                break
                        os._exit( 1 )
            return self.__child


I didn't understand why select.select wouldn't return.  So I forced it
(by giving it a timeout too) but QMTest still wouldn't return.  What I
mean by that is, if I run the test from the GUI, QMTest reports that the
test has not yet completed even though top and ps showed that the test
did run and was killed by somebody, as intended.

One more thing I wasn't clear on: there was a problem with referencing
__dir, for which I've pasted the traceback below.  I could work around
this, though.

ERROR An exception occurred.
Annotation Value
qmtest.exception exceptions.AttributeError: TimedExecutable instance has
no attribute '_Executable__dir' qmtest.traceback

  File "/lib/qm/qm/test/target.py", line 208, in RunTest
   File "/lib/qm/qm/test/database.py", line 281, in Run
   File "/lib/qm/qm/test/database.py", line 188, in _Execute
   File "", line 0, in ?
   File "/home/build/testbot/testbot.py", line 511, in Run
    self.RunProgram(self.program, [ self.program ] + self.arguments,
context, result)
   File "/home/build/testbot/testbot.py", line 447, in RunProgram
    exit_status = e.Run( args, environment )
   File "/home/build/testbot/testbot.py", line 407, in Run
    raise exc_info[0], exc_info[1]

Can anyone point to what I'm missing to get this done?  Thanks for the
input.

 -- John



From njs at pobox.com  Thu Apr 10 05:30:21 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 9 Apr 2003 22:30:21 -0700
Subject: [PATCH] Removing ExtensionClass dependency
Message-ID: <20030410053021.GA23519@njs.dhis.org>

One of the barriers to installing qmtest into the normal Python search
path is that it includes local copies of Zope's ExtensionClass and
DocumentTemplate, which may interfere with user-installed versions of
the same packages.  Also, it's a bit ugly.

As it turns out, though, ExtensionClass is entirely superfluous --
it's only used for some DocumentTemplate optimizations, and if one
simply doesn't compile cDocumentTemplate.c, it will fall back on
Python versions of the same code.  Since rendering web pages is hardly
a hotspot for qmtest, this isn't a problem.

The attached patch removes ExtensionClass entirely, and moves the
DocumentTemplate package to qm/external/.  As a result, qmtest no
longer runs the risk of bumping into other packages if, at some future
date, it is changed to install into the default library location.
Also, a C compiler is no longer required to install qmtest.

The only downside is that two tiny changes to DocumentTemplate were
required; you can see them in the patch.  Both are bug-fixes that
should probably be taken up-stream, but that would require more tuits
than I have lying around at the moment.  Besides which, upstream now
has extra dependencies that mean qmtest probably doesn't want to
remerge anyway.  I've stuck the required patch in
qm/external/local-DocumentTemplate-patch, though, so it will be
available to anyone who does decide to re-merge later.

The patch is not quite a normal patch; just doing a plain diff gave a
800+KiB patch!  To apply:
  $ cd $QM_CHECKOUT_ROOT
  $ mkdir qm/external
  $ mv zope-dtml/DocumentTemplate qm/external/
  $ rm -rf zope-dtml
  $ patch -p1 < qmtest-remove-ExtensionClass.patch

I'm not sure whether any copyright assignment is necessary,
considering that there is basically nothing copyrightable in this
patch.

-- Nathaniel

-- 
Damn the Solar System.  Bad light; planets too distant; pestered with
comets; feeble contrivance; could make a better one myself.
  -- Lord Jeffrey

This email may be read aloud.
-------------- next part --------------
diff --exclude='*~' --exclude=CVS --exclude=build -urN qm-mved/ChangeLog qm-modified/ChangeLog
--- qm-mved/ChangeLog	2003-03-28 09:19:11.000000000 -0800
+++ qm-modified/ChangeLog	2003-04-09 21:05:43.000000000 -0700
@@ -1,3 +1,20 @@
+2003-04-09  Nathaniel Smith  <njs at pobox.com>
+
+	* zope-dtml/ExtensionClass/: Remove.
+	* qm/external/: New directory.
+	* qm/external/__init__.py: New file.
+	* zope-dtml/DocumentTemplate/: Move to...
+	* qm/external/DocumentTemplate/: ...here.
+	* qm/external/DocumentTemplate/DT_String.py (String._ParseTag):
+	Tweak so it can find modules in the same directory.
+	* qm/external/DocumentTemplate/__init__.py: Tweak to work even if
+	ExtensionClass doesn't exist.
+	* qm/external/local-DocumentTemplate-patch: Record the above two
+	changes to ease future upgrades of DocumentTemplate.
+	* GNUMakefile.in (PYTHONDIRS): Remove mention of zope-dtml/.
+	(PYTHON_PACKAGES): Likewise.
+	* qm/web.py: Import DocumentTemplate from new location.
+
 2003-03-28  Mark Mitchell  <mark at codesourcery.com>
 
 	* qm/test/classes/process_target.py (ProcessTarget.__init):  Move
diff --exclude='*~' --exclude=CVS --exclude=build -urN qm-mved/GNUmakefile.in qm-modified/GNUmakefile.in
--- qm-mved/GNUmakefile.in	2003-03-27 11:48:42.000000000 -0800
+++ qm-modified/GNUmakefile.in	2003-04-09 21:01:23.000000000 -0700
@@ -33,15 +33,10 @@
 PYTHON_VERSION	= @PYTHON_VERSION@
 PYTHON_PREFIX   = @PYTHON_PREFIX@
 PYTHON_PLATFORM = @PYTHON_PLATFORM@
-PYTHONDIRS	= $(TOPDIR) \
-                  $(TOPDIR)/zope-dtml \
-                  $(TOPDIR)/zope-dtml/ExtensionClass
+PYTHONDIRS	= $(TOPDIR)
 
 # Python packages with installation scripts.
-PYTHON_PACKAGES = \
-	qm \
-	zope-dtml/DocumentTemplate \
-	zope-dtml/ExtensionClass
+PYTHON_PACKAGES = qm
 # The names of rules to install the PYTHON_PACKAGES.
 PYTHON_PACKAGES_INSTALL = $(PYTHON_PACKAGES:=-install)
 
diff --exclude='*~' --exclude=CVS --exclude=build -urN qm-mved/qm/external/DocumentTemplate/DT_String.py qm-modified/qm/external/DocumentTemplate/DT_String.py
--- qm-mved/qm/external/DocumentTemplate/DT_String.py	2001-02-08 12:19:22.000000000 -0800
+++ qm-modified/qm/external/DocumentTemplate/DT_String.py	2003-04-09 20:56:37.000000000 -0700
@@ -170,10 +170,13 @@
         if type(command) is tt:
             cname, module, name = command
             d={}
+            # subtlety: in these calls, globals() is not modified, but it
+            # provides module context for the import statement (so it knows
+            # to check the same directory as this file was found in).
             try:
-                exec 'from %s import %s' % (module, name) in d
+                exec 'from %s import %s' % (module, name) in globals(), d
             except ImportError:
-                exec 'from DocumentTemplate.%s import %s' % (module, name) in d
+                exec 'from DocumentTemplate.%s import %s' % (module, name) in globals(), d
             command=d[name]
             self.commands[cname]=command
         return tag, args, command, coname
diff --exclude='*~' --exclude=CVS --exclude=build -urN qm-mved/qm/external/DocumentTemplate/__init__.py qm-modified/qm/external/DocumentTemplate/__init__.py
--- qm-mved/qm/external/DocumentTemplate/__init__.py	2001-02-08 12:19:26.000000000 -0800
+++ qm-modified/qm/external/DocumentTemplate/__init__.py	2003-04-09 20:57:15.000000000 -0700
@@ -90,6 +90,8 @@
 $Id: __init__.py,v 1.1.1.1 2001/02/08 20:19:26 samuel Exp $'''
 __version__='$Revision: 1.1.1.1 $'[11:-2]
 
-import ExtensionClass # work-around for import bug.
+try:
+    import ExtensionClass # work-around for import bug.
+except ImportError: pass
 from DocumentTemplate import String, File, HTML, HTMLDefault, HTMLFile
 from DocumentTemplate import html_quote
diff --exclude='*~' --exclude=CVS --exclude=build -urN qm-mved/qm/external/__init__.py qm-modified/qm/external/__init__.py
--- qm-mved/qm/external/__init__.py	1969-12-31 16:00:00.000000000 -0800
+++ qm-modified/qm/external/__init__.py	2003-04-09 21:31:42.000000000 -0700
@@ -0,0 +1,23 @@
+########################################################################
+#
+# File:   __init__.py
+# Author: Nathaniel Smith
+# Date:   2003-04-09
+#
+# Contents:
+#   Empty file to make external packages importable.
+#
+# Copyright (c) 2001, 2002 by CodeSourcery, LLC.  All rights reserved. 
+#
+# For license terms see the file COPYING.
+#
+########################################################################
+
+# Nothing here!
+
+########################################################################
+# Local Variables:
+# mode: python
+# indent-tabs-mode: nil
+# fill-column: 72
+# End:
diff --exclude='*~' --exclude=CVS --exclude=build -urN qm-mved/qm/external/local-DocumentTemplate-patch qm-modified/qm/external/local-DocumentTemplate-patch
--- qm-mved/qm/external/local-DocumentTemplate-patch	1969-12-31 16:00:00.000000000 -0800
+++ qm-modified/qm/external/local-DocumentTemplate-patch	2003-04-09 20:58:48.000000000 -0700
@@ -0,0 +1,32 @@
+diff -ur DocumentTemplate-old/DT_String.py DocumentTemplate-new/DT_String.py
+--- DocumentTemplate-old/DT_String.py	2001-02-08 12:19:22.000000000 -0800
++++ DocumentTemplate-new/DT_String.py	2003-04-09 20:56:37.000000000 -0700
+@@ -170,10 +170,13 @@
+         if type(command) is tt:
+             cname, module, name = command
+             d={}
++            # subtlety: in these calls, globals() is not modified, but it
++            # provides module context for the import statement (so it knows
++            # to check the same directory as this file was found in).
+             try:
+-                exec 'from %s import %s' % (module, name) in d
++                exec 'from %s import %s' % (module, name) in globals(), d
+             except ImportError:
+-                exec 'from DocumentTemplate.%s import %s' % (module, name) in d
++                exec 'from DocumentTemplate.%s import %s' % (module, name) in globals(), d
+             command=d[name]
+             self.commands[cname]=command
+         return tag, args, command, coname
+diff -ur DocumentTemplate-old/__init__.py DocumentTemplate-new/__init__.py
+--- DocumentTemplate-old/__init__.py	2001-02-08 12:19:26.000000000 -0800
++++ DocumentTemplate-new/__init__.py	2003-04-09 20:57:15.000000000 -0700
+@@ -90,6 +90,8 @@
+ $Id: __init__.py,v 1.1.1.1 2001/02/08 20:19:26 samuel Exp $'''
+ __version__='$Revision: 1.1.1.1 $'[11:-2]
+ 
+-import ExtensionClass # work-around for import bug.
++try:
++    import ExtensionClass # work-around for import bug.
++except ImportError: pass
+ from DocumentTemplate import String, File, HTML, HTMLDefault, HTMLFile
+ from DocumentTemplate import html_quote
diff --exclude='*~' --exclude=CVS --exclude=build -urN qm-mved/qm/web.py qm-modified/qm/web.py
--- qm-mved/qm/web.py	2002-11-28 20:11:28.000000000 -0800
+++ qm-modified/qm/web.py	2003-04-09 21:26:25.000000000 -0700
@@ -45,14 +45,7 @@
 import user
 import whrandom
 
-# If the binary modules that are used in the DTML implementation are
-# linked against more recent versions of the C library than are found on
-# the present system, we will get an ImportError.  Catch the exception
-# and pass it on.
-try:
-    import DocumentTemplate
-except ImportError, message:
-    raise common.QMException, message
+import qm.external.DocumentTemplate as DocumentTemplate
 
 ########################################################################
 # constants

From mark at codesourcery.com  Fri Apr 11 17:27:55 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 11 Apr 2003 10:27:55 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <20030410053021.GA23519@njs.dhis.org>
References: <20030410053021.GA23519@njs.dhis.org>
Message-ID: <1050082079.29217.71.camel@doubledemon.codesourcery.com>

On Wed, 2003-04-09 at 22:30, Nathaniel Smith wrote:
> One of the barriers to installing qmtest into the normal Python search
> path is that it includes local copies of Zope's ExtensionClass and
> DocumentTemplate, which may interfere with user-installed versions of
> the same packages.  Also, it's a bit ugly.

I like this approach.  Do we have a copyright assignment on file for
you?

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From njs at pobox.com  Fri Apr 11 18:08:49 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 11 Apr 2003 11:08:49 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <1050082079.29217.71.camel@doubledemon.codesourcery.com>
References: <20030410053021.GA23519@njs.dhis.org> <1050082079.29217.71.camel@doubledemon.codesourcery.com>
Message-ID: <20030411180849.GA6107@njs.dhis.org>

On Fri, Apr 11, 2003 at 10:27:55AM -0700, Mark Mitchell wrote:
> On Wed, 2003-04-09 at 22:30, Nathaniel Smith wrote:
> > One of the barriers to installing qmtest into the normal Python search
> > path is that it includes local copies of Zope's ExtensionClass and
> > DocumentTemplate, which may interfere with user-installed versions of
> > the same packages.  Also, it's a bit ugly.
> 
> I like this approach.  Do we have a copyright assignment on file for
> you?

No, you don't.  As I said in the original message, I'm not sure
whether a copyright assignment is really necessary for this patch,
since it contains essentially no code...

But it'd probably be a good idea to get one on file anyway.  How does
one go about this?

-- Nathaniel

-- 
"But in Middle-earth, the distinct accusative case disappeared from
the speech of the Noldor (such things happen when you are busy
fighting Orcs, Balrogs, and Dragons)."

This email may be read aloud.


From mark at codesourcery.com  Fri Apr 11 18:16:19 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 11 Apr 2003 11:16:19 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <20030411180849.GA6107@njs.dhis.org>
References: <20030410053021.GA23519@njs.dhis.org>
	<1050082079.29217.71.camel@doubledemon.codesourcery.com> 
	<20030411180849.GA6107@njs.dhis.org>
Message-ID: <1050084979.29150.79.camel@doubledemon.codesourcery.com>

> No, you don't.  As I said in the original message, I'm not sure
> whether a copyright assignment is really necessary for this patch,
> since it contains essentially no code...
> 
> But it'd probably be a good idea to get one on file anyway.  How does
> one go about this?

See:

http://www.codesourcery.com/contributions?program=QMTest

Thanks!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From njs at pobox.com  Sat Apr 12 22:47:31 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Sat, 12 Apr 2003 15:47:31 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <1050084979.29150.79.camel@doubledemon.codesourcery.com>
References: <20030410053021.GA23519@njs.dhis.org> <1050082079.29217.71.camel@doubledemon.codesourcery.com> <20030411180849.GA6107@njs.dhis.org> <1050084979.29150.79.camel@doubledemon.codesourcery.com>
Message-ID: <20030412224730.GA13492@njs.dhis.org>

On Fri, Apr 11, 2003 at 11:16:19AM -0700, Mark Mitchell wrote:
> See:
> 
> http://www.codesourcery.com/contributions?program=QMTest
> 
> Thanks!

Faxed.

-- Nathaniel

-- 
"The problem...is that sets have a very limited range of
activities -- they can't carry pianos, for example, nor drink
beer."

This email may be read aloud.


From mark at codesourcery.com  Sun Apr 13 06:00:59 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 12 Apr 2003 23:00:59 -0700
Subject: [qmtest] Subclassing Executable
In-Reply-To: <000901c2fd52$d5d4bdb0$a5452a0a@jschmittlt>
References: <000901c2fd52$d5d4bdb0$a5452a0a@jschmittlt>
Message-ID: <1050213659.29250.135.camel@doubledemon.codesourcery.com>

On Mon, 2003-04-07 at 15:12, John Schmitt wrote:
> More questions from a wannabe-clueful user.
> 
> I tried to subclass InputExecutable to do some pretty low-tech stuff.  I
> wanted to spawn a process that would kill a test that ran too long.
> Here's the kind of thing I'm doing, with stuff snipped to keep this
> message reasonably short:

We've been meaning to add support for timeouts in process tests for a
long time.  That's now been added in the form of
executable.TimeoutExecutable, and is being used in the command.* test
classes (like command.ExecTest, and command.ShellScriptTest.)

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Sun Apr 13 17:35:31 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 13 Apr 2003 10:35:31 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <20030410053021.GA23519@njs.dhis.org>
References: <20030410053021.GA23519@njs.dhis.org>
Message-ID: <1050255331.11717.7.camel@doubledemon.codesourcery.com>

On Wed, 2003-04-09 at 22:30, Nathaniel Smith wrote:
> One of the barriers to installing qmtest into the normal Python search
> path is that it includes local copies of Zope's ExtensionClass and
> DocumentTemplate, which may interfere with user-installed versions of
> the same packages.  Also, it's a bit ugly.

Thanks for faxing your assignment!

I've been thinking more about this patch.

First, I'm really keen on the idea of making QMTest play nicer with a
standard Python installation, so that you use QMTest from other Python
software.  On the other hand, the first priority is still making QMTest
easy to use as an application.  (For example, we want to start providing
binary distributions that actually include pre-built Python binaries so
that users can download everything they need in a single download.)

Could we solve the same problem you're trying to solve in a different
way, namely, by providing a --without-dtml configure flag?  The idea
being that if you already had that somewhere where Python was going to
find it that you could configure with this flag to ignore the version in
the QMTest source tree?

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From zack at codesourcery.com  Sun Apr 13 18:39:44 2003
From: zack at codesourcery.com (Zack Weinberg)
Date: Sun, 13 Apr 2003 11:39:44 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <1050255331.11717.7.camel@doubledemon.codesourcery.com> (Mark
 Mitchell's message of "13 Apr 2003 10:35:31 -0700")
References: <20030410053021.GA23519@njs.dhis.org>
	<1050255331.11717.7.camel@doubledemon.codesourcery.com>
Message-ID: <87llye5jin.fsf@egil.codesourcery.com>

Mark Mitchell <mark at codesourcery.com> writes:

> On Wed, 2003-04-09 at 22:30, Nathaniel Smith wrote:
>> One of the barriers to installing qmtest into the normal Python search
>> path is that it includes local copies of Zope's ExtensionClass and
>> DocumentTemplate, which may interfere with user-installed versions of
>> the same packages.  Also, it's a bit ugly.
>
> Thanks for faxing your assignment!
>
> I've been thinking more about this patch.
>
> First, I'm really keen on the idea of making QMTest play nicer with a
> standard Python installation, so that you use QMTest from other Python
> software.  On the other hand, the first priority is still making QMTest
> easy to use as an application.  (For example, we want to start providing
> binary distributions that actually include pre-built Python binaries so
> that users can download everything they need in a single download.)
>
> Could we solve the same problem you're trying to solve in a different
> way, namely, by providing a --without-dtml configure flag?  The idea
> being that if you already had that somewhere where Python was going to
> find it that you could configure with this flag to ignore the version in
> the QMTest source tree?

The two ideas are compatible.  Suppose we move the dtml library to
qm.external as Nathaniel suggests, but instead of doing

 import qm.external.DocumentTemplate as DocumentTemplate

in qm/web.py, we do instead

 try:
     try:
         import DocumentTemplate
     except ImportError:
         import qm.external.DocumentTemplate as DocumentTemplate
 except Exception, e:
     raise qm.common.QMException, e

This makes qmtest look for DocumentTemplate in the system library
first, and if that fails, fall back to the one we ship.  Then we can
have a --without-dtml configure flag that means just "don't install
qm.external.DocumentTemplate."

How's that sound?

zw


From mark at codesourcery.com  Sun Apr 13 20:43:43 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 13 Apr 2003 13:43:43 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <87llye5jin.fsf@egil.codesourcery.com>
References: <20030410053021.GA23519@njs.dhis.org>
	<1050255331.11717.7.camel@doubledemon.codesourcery.com> 
	<87llye5jin.fsf@egil.codesourcery.com>
Message-ID: <1050266623.11728.29.camel@doubledemon.codesourcery.com>


> The two ideas are compatible.  Suppose we move the dtml library to
> qm.external as Nathaniel suggests, but instead of doing

There are a bunch of things we need to do to make QMTest a "proper"
Python module, including (at least):

(1) Deal with the setup_path.py stuff that adds various things to the
Python search path.  Instead, package things up so that Python can just
find them.

(2) Avoid stomping on existing Python stuff when QMTest is installed.

Nathaniel's patch works on both of these at once, I think:

- The bits that change the import statements in DTML where Nathaniel has
"subltety" comments are (I think) trying to work on (1).  (Because
Nathaniel moved things to "external", because that directory didn't get
added to the Python path by setup_path.py.)  But maybe I misunderstand?

- Moving things to qm.external so that installing QMTest in the "usual
place", where DTML is already installed, works out OK.

I'd rather have a clear plan before we dive in here.  It seems
reasonable to deal with (2) without dealing with (1) first, to me.

I guess you're thinking about how to make a GNU/Linux binary package
that works *whether or not* DTML is already installed.  I'm wondering if
we need to deal with that complexity, or if we can just have two binary
packages: one that contains DTML and one that expects you've already got
it installed.

I'm also a little bit confused because DTML is already installed in
lib/qm/zope-dtml, so it's not actually going to clash with anything
already installed as far as I can tell.

So, maybe I'm missing the point entirely here?

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From zack at codesourcery.com  Sun Apr 13 21:31:09 2003
From: zack at codesourcery.com (Zack Weinberg)
Date: Sun, 13 Apr 2003 14:31:09 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <1050266623.11728.29.camel@doubledemon.codesourcery.com> (Mark
 Mitchell's message of "13 Apr 2003 13:43:43 -0700")
References: <20030410053021.GA23519@njs.dhis.org>
	<1050255331.11717.7.camel@doubledemon.codesourcery.com>
	<87llye5jin.fsf@egil.codesourcery.com>
	<1050266623.11728.29.camel@doubledemon.codesourcery.com>
Message-ID: <87n0iunkyq.fsf@egil.codesourcery.com>

Mark Mitchell <mark at codesourcery.com> writes:

> - The bits that change the import statements in DTML where Nathaniel has
> "subltety" comments are (I think) trying to work on (1).  (Because
> Nathaniel moved things to "external", because that directory didn't get
> added to the Python path by setup_path.py.)  But maybe I misunderstand?
>
> - Moving things to qm.external so that installing QMTest in the "usual
> place", where DTML is already installed, works out OK.

I am not sure, perhaps you'd better clarify, Nathaniel?

> I'd rather have a clear plan before we dive in here.  It seems
> reasonable to deal with (2) without dealing with (1) first, to me.
>
> I guess you're thinking about how to make a GNU/Linux binary package
> that works *whether or not* DTML is already installed.  I'm wondering if
> we need to deal with that complexity, or if we can just have two binary
> packages: one that contains DTML and one that expects you've already got
> it installed.

It seemed easier to do it that way than the way you're suggesting,
honestly.  The only other way I see short of having web.py edited at
install time, is to put qm.external on the python path - which may
make sense.

zw


From njs at pobox.com  Sun Apr 13 23:07:08 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Sun, 13 Apr 2003 16:07:08 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <1050266623.11728.29.camel@doubledemon.codesourcery.com>
References: <20030410053021.GA23519@njs.dhis.org> <1050255331.11717.7.camel@doubledemon.codesourcery.com> <87llye5jin.fsf@egil.codesourcery.com> <1050266623.11728.29.camel@doubledemon.codesourcery.com>
Message-ID: <20030413230708.GA22119@njs.dhis.org>

I'll try to respond to several of the issues brought up in this thread
at once.

On Sun, Apr 13, 2003 at 01:43:43PM -0700, Mark Mitchell wrote:
> There are a bunch of things we need to do to make QMTest a "proper"
> Python module, including (at least):
> 
> (1) Deal with the setup_path.py stuff that adds various things to the
> Python search path.  Instead, package things up so that Python can just
> find them.
> 
> (2) Avoid stomping on existing Python stuff when QMTest is installed.
> 
> Nathaniel's patch works on both of these at once, I think:

Yes.

> - The bits that change the import statements in DTML where Nathaniel has
> "subltety" comments are (I think) trying to work on (1).  (Because
> Nathaniel moved things to "external", because that directory didn't get
> added to the Python path by setup_path.py.)  But maybe I misunderstand?
>
> - Moving things to qm.external so that installing QMTest in the "usual
> place", where DTML is already installed, works out OK.

These complement each other.  The overall idea is that after applying
my patch, it will become possible to install qm to one of the standard
python package directories, instead of /usr/local/lib/qm.  In
particular, we won't have to modify the Python search path when
starting up qmtest.  We don't _have_ to rearrange things to make this
possible; we could have just changed the build system to put
everything in site-packages/ and called it done.  If we did that,
though, then DocumentTemplate and ExtensionClass would have caused
problems, because the build system doesn't check to see if they're
already installed, and ships with weird old versions that you wouldn't
want to use generally anyway.  The solution was to effectively rename
the DocumentTemplate package to qm.external.DocumentTemplate.  So
that's what my patch does.  (Note that this is different from simply
storing the DocumentTemplate code in qm/external/ and adding
qm/external/ to the Python path, since it lets us avoid tweaking the
Python path altogether.)

The "subtlety" bit is fixing an obscure bug little bug in
DocumentTemplate.DT_String that would otherwise prevent the rename
from working.  What that DT_String effectively does is
  try:  exec 'import DT_Foo' in d
  except ImportError: exec 'import DocumentTemplate.DT_Foo' in d
  handle = d["DT_Foo"]
as a way of getting a handle to the DT_Foo module.  This looks like it
should work, even after renaming DocumentTemplate, because python
should interpret the first import statement as being relative to
"whatever package contains this code", no matter whether that's called
DocumentTemplate or qm.external.DocumentTemplate.  What really
happens, though, is that the exec executes in some default context,
and the relative import always fails, and then the absolute import
fails because we've renamed DocumentTemplate.  This code is totally
wrong as stands; it looks like someone at Zope noticed that the
relative import was failing, threw in the try block as a hacky patch,
and no-one ever noticed.  Fortunately, there's an easy fix: by passing
the current module's globals to exec, Python's import mechanism is
able to deduce the current package, and the relative import works.
Hence my use of
  exec 'import DT_Foo' in globals(), d
After this change, no DocumentTemplate code relies on the name of its
containing package.

> I'd rather have a clear plan before we dive in here.  It seems
> reasonable to deal with (2) without dealing with (1) first, to me.

Yes, that's more-or-less what I'm trying to do -- to clear the ground
so that it becomes feasible to kill setup_path.py as well.  The
overall roadmap in my head is something like:
  1) Kill ExtensionClass, move DocumentTemplate -- at this point,
     qmtest becomes a single pure-Python module.
  2) Change the build system to install qmtest into the normal Python
     path, and remove the path rewriting stuff in setup_path.py.
  3) Rewrite the directory finding stuff (qm/common.py,
     qm/setup_path.py.in) to get rid of the dependency on environment
     variables.
  4) (Optional) Take this opportunity to clean up qmtest's startup,
     since qm.sh has become largely superfluous.  (See
     /usr/bin/happydoc for an example of how simple bootstrapping a
     Python program can be.)
This way, any given change is incremental (and conceivably doable in
the drabs of free time I have available :-)), but by such small steps
we end up with a standard, well-behaved Python app/library.

> I guess you're thinking about how to make a GNU/Linux binary package
> that works *whether or not* DTML is already installed.  I'm wondering if
> we need to deal with that complexity, or if we can just have two binary
> packages: one that contains DTML and one that expects you've already got
> it installed.

I'm not sure that this is the best idea.  I think in the ideal world,
qmtest itself wouldn't ship with any external code at all, and would
be documented to depend on DocumentTemplate, and the Debian package
would depend on python-documenttemplate, and so on, and everything
would be neat and clean.  (And then, of course, you could have your
qmtest-inna-box distribution, that contained Python, supporting
modules, and so on.)  

Like much Zope code, though, it's not actually convenient to install
DocumentTemplate on its own; AFAICT there are no .deb's or .rpm's
available, and the zope.org folks aren't generally worried about
making it easy to get just pieces of Zope -- apparently you must use
CVS, and then there are undocumented dependencies on other pieces of
Zope, and it's generally a headache.  Considering this, keeping a
local copy of DocumentTemplate in qm.external seems reasonable.  (I'm
not completely convinced of this, since there's a danger of it
becoming a maintainence burden (it still uses regex.py and regsub.py,
for instance, which were deprecated in python 1.5!), but this is a
somewhat separate issue, and can always be dealt with later, if
maintaining it does become a hassle.)

At that point, though, I'm not sure what the point of looking for
local installs of DocumentTemplate are; if qmtest is going to be
carrying around a known-good version anyway, why sometimes throw it
out in favor of some random package that may or may not work?  Any
pre-existing DocumentTemplate is _likely_ to work, of course, and I
suppose skipping the install of DocumentTemplate could save a few KiB
on systems that already have Zope installed (i.e., systems that
probably aren't hurting for disk space), but this seems a pretty small
gain to trade for an increase in complexity and possible support
headaches.

> I'm also a little bit confused because DTML is already installed in
> lib/qm/zope-dtml, so it's not actually going to clash with anything
> already installed as far as I can tell.

Well, as above, the goal is to change that :-).

Hopefully this clarifies things a bit...
-- Nathaniel

-- 
"...All of this suggests that if we wished to find a modern-day model
for British and American speech of the late eighteenth century, we could
probably do no better than Yosemite Sam."

This email may be read aloud.


From mark at codesourcery.com  Mon Apr 14 04:27:34 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 13 Apr 2003 21:27:34 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <20030413230708.GA22119@njs.dhis.org>
References: <20030410053021.GA23519@njs.dhis.org>
	 <1050255331.11717.7.camel@doubledemon.codesourcery.com>
	 <87llye5jin.fsf@egil.codesourcery.com>
	 <1050266623.11728.29.camel@doubledemon.codesourcery.com>
	 <20030413230708.GA22119@njs.dhis.org>
Message-ID: <1050294454.3391.10.camel@minax.codesourcery.com>

On Sun, 2003-04-13 at 16:07, Nathaniel Smith wrote:
> I'll try to respond to several of the issues brought up in this thread
> at once.

Thanks for the detailed reply, especially explaining the
DocumentTemplate stuff.

> These complement each other.  The overall idea is that after applying
> my patch, it will become possible to install qm to one of the standard
> python package directories, instead of /usr/local/lib/qm.  

I think I know where we're having a disconnect.

I thought we put all of the QM stuff in site-packages/qm.  In that case,
stuff that's already under lib/qm (like zope-dtml) can just stay; it
won't stomp on anything.  I think you're thinking of putting QM stuff at
the top-level in site-packages.

Is that right?

If you're willing to go with my scheme, then we can:

(1) First move what's in share/qm into lib/qm, because there's no
site-packages equivalent of share.

(2) Turn lib/qm into site-packages/qm.

After doing (1), we can eliminate some of the setup_path gunk, because
now all we need is the lib/qm path.  Once we put this in site-packages,
we can eliminate the rest of it, because now everything is in the
standard place.

I agree with your comments about zope-dtml with respect to the fact that
what we have works.  I'm not inclined to mess with it either, until we
really need to.

Thoughts?

-- Mark


From njs at pobox.com  Mon Apr 14 05:43:59 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Sun, 13 Apr 2003 22:43:59 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <1050294454.3391.10.camel@minax.codesourcery.com>
References: <20030410053021.GA23519@njs.dhis.org> <1050255331.11717.7.camel@doubledemon.codesourcery.com> <87llye5jin.fsf@egil.codesourcery.com> <1050266623.11728.29.camel@doubledemon.codesourcery.com> <20030413230708.GA22119@njs.dhis.org> <1050294454.3391.10.camel@minax.codesourcery.com>
Message-ID: <20030414054359.GA25424@njs.dhis.org>

On Sun, Apr 13, 2003 at 09:27:34PM -0700, Mark Mitchell wrote:
> On Sun, 2003-04-13 at 16:07, Nathaniel Smith wrote:
> > These complement each other.  The overall idea is that after applying
> > my patch, it will become possible to install qm to one of the standard
> > python package directories, instead of /usr/local/lib/qm.  
> 
> I think I know where we're having a disconnect.
> 
> I thought we put all of the QM stuff in site-packages/qm.  In that case,
> stuff that's already under lib/qm (like zope-dtml) can just stay; it
> won't stomp on anything.  I think you're thinking of putting QM stuff at
> the top-level in site-packages.
> 
> Is that right?

Hmm.  *ponder ponder ponder*

Oh.  I see.

I didn't know about the .pth mechanism; every package I've played with
has just stuck its stuff directly in site-packages/, and I hadn't
realized we could have a whole directory to ourself.  (Though I note
that my /usr/lib/python2.2/site.py says that "FOR DEBIAN" the .pth
mechanism is applied to the /usr/local hierarchy as well as /usr.
qmtest wants to install to /usr/local/ by default, so I'm not sure
whether we can trust the .pth trick to work... in fact, Zack informs
me that Redhat 8.0, at least, does _not_ check for .pth's under
/usr/local.)

But if we can use a .pth then something like
  site-packages/qm.pth 
   - contents:
   """qm/qm
      qm/zope-dtml/DocumentTemplate
      qm/zope-dtml/ExtensionClass"""
  site-packages/qm/
   - contents: what we currently have in /usr/lib/qm
should work fine.

> If you're willing to go with my scheme, then we can:
> 
> (1) First move what's in share/qm into lib/qm, because there's no
> site-packages equivalent of share.

Nod.  This is a touch ugly, and might get the Debian people annoyed
about policy and all that... there is some precedent, though; on my
system, 4Suite stores its .mo files under
/usr/lib/python2.2/_xmlplus/dom/.  Should work, though.  It also lets
use find the share path by examining __path__, which is much nicer
than depending on it being set in the environment...

> (2) Turn lib/qm into site-packages/qm.
> 
> After doing (1), we can eliminate some of the setup_path gunk, because
> now all we need is the lib/qm path.  Once we put this in site-packages,
> we can eliminate the rest of it, because now everything is in the
> standard place.

Nod.  I'm still a bit worried about being able to tweak the python
path via .pth, given that it might break on some systems with some
install paths.  And my original proposal still works, so I wonder what
the relative advantages are.  The main things I can think of are my
original plan requires we keep around some explicit knowledge of the
share path somewhere instead of being able to use __path__; on the
other hand, it doesn't require .pth support.  Anything else?

-- Nathaniel

-- 
Sentience can be such a burden.

This email may be read aloud.


From njs at pobox.com  Mon Apr 14 05:48:38 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Sun, 13 Apr 2003 22:48:38 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <20030414054359.GA25424@njs.dhis.org>
References: <20030410053021.GA23519@njs.dhis.org> <1050255331.11717.7.camel@doubledemon.codesourcery.com> <87llye5jin.fsf@egil.codesourcery.com> <1050266623.11728.29.camel@doubledemon.codesourcery.com> <20030413230708.GA22119@njs.dhis.org> <1050294454.3391.10.camel@minax.codesourcery.com> <20030414054359.GA25424@njs.dhis.org>
Message-ID: <20030414054837.GB25424@njs.dhis.org>

On Sun, Apr 13, 2003 at 10:43:59PM -0700, Nathaniel Smith wrote:
>   site-packages/qm.pth 
>    - contents:
>    """qm/qm
>       qm/zope-dtml/DocumentTemplate
>       qm/zope-dtml/ExtensionClass"""

Correction: this file should contain
   qm
   qm/zope-dtml
of course.

-- Nathaniel

-- 
Eternity is very long, especially towards the end.
  -- Woody Allen

This email may be read aloud.


From mark at codesourcery.com  Mon Apr 14 06:03:19 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 13 Apr 2003 23:03:19 -0700
Subject: [qmtest] [PATCH] Removing ExtensionClass dependency
In-Reply-To: <20030414054359.GA25424@njs.dhis.org>
References: <20030410053021.GA23519@njs.dhis.org>
	 <1050255331.11717.7.camel@doubledemon.codesourcery.com>
	 <87llye5jin.fsf@egil.codesourcery.com>
	 <1050266623.11728.29.camel@doubledemon.codesourcery.com>
	 <20030413230708.GA22119@njs.dhis.org>
	 <1050294454.3391.10.camel@minax.codesourcery.com>
	 <20030414054359.GA25424@njs.dhis.org>
Message-ID: <1050300198.3391.22.camel@minax.codesourcery.com>

On Sun, 2003-04-13 at 22:43, Nathaniel Smith wrote:
> On Sun, Apr 13, 2003 at 09:27:34PM -0700, Mark Mitchell wrote:
> > On Sun, 2003-04-13 at 16:07, Nathaniel Smith wrote:
> > > These complement each other.  The overall idea is that after applying
> > > my patch, it will become possible to install qm to one of the standard
> > > python package directories, instead of /usr/local/lib/qm.  
> > 
> > I think I know where we're having a disconnect.
> > 
> > I thought we put all of the QM stuff in site-packages/qm.  In that case,
> > stuff that's already under lib/qm (like zope-dtml) can just stay; it
> > won't stomp on anything.  I think you're thinking of putting QM stuff at
> > the top-level in site-packages.
> > 
> > Is that right?
> 
> Hmm.  *ponder ponder ponder*
> 
> Oh.  I see.
> 
> I didn't know about the .pth mechanism; every package I've played with
> has just stuck its stuff directly in site-packages/, and I hadn't
> realized we could have a whole directory to ourself. 

I didn't know about ".pth" either!

I did know that you can create a directory under site-packages for your
app; for example, in my site-packages, there's an "OpenSSL" directory,
and I can do:

  import OpenSSL

to get at the stuff in there.

The .pth thing is a cool additional trick, though!

> > If you're willing to go with my scheme, then we can:
> > 
> > (1) First move what's in share/qm into lib/qm, because there's no
> > site-packages equivalent of share.
> 
> Nod.  This is a touch ugly, and might get the Debian people annoyed
> about policy and all that... there is some precedent, though; on my
> system, 4Suite stores its .mo files under
> /usr/lib/python2.2/_xmlplus/dom/.  Should work, though.  It also lets
> use find the share path by examining __path__, which is much nicer
> than depending on it being set in the environment...

Agreed.  The Debian people are just going to have to lump it until
Python comes up with some other mechanism; we have to have a place to
put these files.

> Nod.  I'm still a bit worried about being able to tweak the python
> path via .pth, given that it might break on some systems with some
> install paths.  And my original proposal still works, so I wonder what
> the relative advantages are.  The main things I can think of are my
> original plan requires we keep around some explicit knowledge of the
> share path somewhere instead of being able to use __path__; on the
> other hand, it doesn't require .pth support.  Anything else?

I think the main advantages of my proposal is that it's easier to get
there from here (in that we don't need to move as much stuff around) and
that we really keep from stepping on other stuff (because all of our
stuff is down one level in site-packages).  The other thing is what you
say: we've now got a pretty easy path out of the setup_path stuff.

QMTest installs in /usr/local just because it always has; if on
GNU/Linux systems it makes sense to install in site-packages we can
easily change it to do that.  If site-packages is
/usr/lib/python*/site-packages, we'll want to put the "qmtest" script in
/usr/bin, rather than /usr/local/bin, of course.  (Independently of
whether or not it stops being a Bourne shell script at some point.)

-- Mark


From mark at codesourcery.com  Mon Apr 14 06:11:56 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 13 Apr 2003 23:11:56 -0700
Subject: Check-in for "qmtest create"
Message-ID: <200304140611.h3E6BuK8004440@minax.codesourcery.com>


On the mainline, I've added a "qmtest create" command that lets you
create any extension (notably, Tests and Resources) from the command
line.

See the docs for details.  If you have comments, shout!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From njs at pobox.com  Wed Apr 16 05:39:49 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Tue, 15 Apr 2003 22:39:49 -0700
Subject: two typoes
Message-ID: <20030416053949.GA17886@njs.dhis.org>

Just applied the attached patch.

-- Nathaniel

-- 
.i dei jitfa fanmo xatra

This email may be read aloud.
-------------- next part --------------
Index: ChangeLog
===================================================================
RCS file: /home/qm/Repository/qm/ChangeLog,v
retrieving revision 1.464
diff -u -r1.464 ChangeLog
--- ChangeLog	16 Apr 2003 02:53:49 -0000	1.464
+++ ChangeLog	16 Apr 2003 05:36:26 -0000
@@ -1,5 +1,11 @@
 2003-04-15  Nathaniel Smith  <njs at pobox.com>
 
+	* qm/test/base.py (get_extension_directories): typo in comment.
+	* qm/test/classes/process_target.py (QMTestExecutable): typo in 
+	docstring.
+
+2003-04-15  Nathaniel Smith  <njs at pobox.com>
+
 	* zope-dtml/ExtensionClass/: Remove.
 	* qm/external/: New directory.
 	* qm/external/__init__.py: New file.
Index: qm/test/base.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/base.py,v
retrieving revision 1.81
diff -u -r1.81 base.py
--- qm/test/base.py	24 Mar 2003 07:24:24 -0000	1.81
+++ qm/test/base.py	16 Apr 2003 05:36:26 -0000
@@ -115,7 +115,7 @@
     assert kind in extension_kinds
         
     # Start with the directories that the user has specified in the
-    # QNTEST_CLASSPATH environment variable.
+    # QMTEST_CLASS_PATH environment variable.
     if os.environ.has_key('QMTEST_CLASS_PATH'):
         dirs = string.split(os.environ['QMTEST_CLASS_PATH'], ':')
     else:
Index: qm/test/classes/process_target.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/classes/process_target.py,v
retrieving revision 1.7
diff -u -r1.7 process_target.py
--- qm/test/classes/process_target.py	13 Apr 2003 05:42:34 -0000	1.7
+++ qm/test/classes/process_target.py	16 Apr 2003 05:36:26 -0000
@@ -60,7 +60,7 @@
         ]
 
     class QMTestExecutable(qm.executable.Executable):
-        """A 'QMTestExecutable' redirects commands to a chlid process."""
+        """A 'QMTestExecutable' redirects commands to a child process."""
 
         def _InitializeParent(self):
 

From njs at pobox.com  Wed Apr 16 06:02:37 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Tue, 15 Apr 2003 23:02:37 -0700
Subject: Made warning filtering more fine grained
Message-ID: <20030416060237.GA19073@njs.dhis.org>

Applied attached patch.

-- Nathaniel

-- 
"Lull'd in the countless chambers of the brain,
Our thoughts are link'd by many a hidden chain:
Awake but one, and lo! what myriads rise!
Each stamps its image as the other flies"
  -- Ann Ward Radcliffe, The Mysteries of Udolpho

This email may be read aloud.
-------------- next part --------------
Index: ChangeLog
===================================================================
RCS file: /home/qm/Repository/qm/ChangeLog,v
retrieving revision 1.465
diff -u -r1.465 ChangeLog
--- ChangeLog	16 Apr 2003 05:37:41 -0000	1.465
+++ ChangeLog	16 Apr 2003 05:59:53 -0000
@@ -1,5 +1,9 @@
 2003-04-15  Nathaniel Smith  <njs at pobox.com>
 
+	* qm/setup_path.py.in: Make warnings filtering more fine-grained.
+	
+2003-04-15  Nathaniel Smith  <njs at pobox.com>
+
 	* qm/test/base.py (get_extension_directories): typo in comment.
 	* qm/test/classes/process_target.py (QMTestExecutable): typo in 
 	docstring.
Index: qm/setup_path.py.in
===================================================================
RCS file: /home/qm/Repository/qm/qm/setup_path.py.in,v
retrieving revision 1.15
diff -u -r1.15 setup_path.py.in
--- qm/setup_path.py.in	13 Apr 2003 05:42:34 -0000	1.15
+++ qm/setup_path.py.in	16 Apr 2003 05:59:53 -0000
@@ -46,11 +46,13 @@
     __unsupported_python_version()
 
     
-# Some of the packages that are used with QM use modules (like regsub)
-# that are obsolete in Python 2.1.  Prevent Python from warning
-# about these modules.
+# DocumentTemplate uses regex and regsub, which are obsolete.  Prevent
+# Python from warning about these modules.
 import warnings
-warnings.filterwarnings("ignore")
+warnings.filterwarnings("ignore",
+                        r".*(regex|regsub).*",
+                        DeprecationWarning,
+                        r".*(DocumentTemplate|regsub).*")
 
 import os.path
 

From mark at codesourcery.com  Thu Apr 17 22:50:52 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 17 Apr 2003 15:50:52 -0700
Subject: PATCH: Fix TimeoutRedirectedExecutable hang
Message-ID: <200304172250.h3HMoqhX005249@minax.codesourcery.com>


Last nights' Starbucks hacking:

There was a flaw in the logic for the new combo timeout/redirection
Executable class that could cause things to wait for the timeout to
expire, even when the primary child process was done executing.

Fixed with this patch, which also contains some documentation
improvements.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-04-17  Mark Mitchell  <mark at codesourcery.com>

	* qm/executable.py (Executable.Spawn): Close the write end of the
	exception_pipe here.  Call _HandleChild.
	(Executable.Run): Do not close the write end of the
	exception_pipe.
	(Executable._InitializeChild): Fix thinko.
	(Executable._HandleChild): New method.
	(RedirectedExecutable._HandleChild): New method.
	(RedirectedExecutable._DoParent): Do not close pipe ends here.
	(TimeoutExecutable._DoParent): Rename to ...
	(TimeoutExecutable._HandleChild): ... this.
	(TimeoutExecutable.Run): Robustify.
	(TimeoutRedirectedExecutable._DoParent): Remove.
	(TimeoutRedirectedExecutable._HandleChild): New method.

	* qm/test/database.py (TestDescriptor.__init__): Correct error in
	doc-string.
	* qm/test/resource.py (Resource.SetUp): Improve doc-string.
	* qm/test/target.py (Target._SetUpResource): Fix typo in comment.
	* qm/test/doc/reference.xml: Improve target documentation.

Index: qm/executable.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/executable.py,v
retrieving revision 1.9
diff -c -5 -p -r1.9 executable.py
*** qm/executable.py	13 Apr 2003 17:22:25 -0000	1.9
--- qm/executable.py	17 Apr 2003 22:42:34 -0000
***************
*** 5,15 ****
  # Date:   11/14/2002
  #
  # Contents:
  #   Executable, RedirectedExecutable
  #
! # Copyright (c) 2002 by CodeSourcery, LLC.  All rights reserved. 
  #
  ########################################################################
  
  ########################################################################
  # Imports
--- 5,15 ----
  # Date:   11/14/2002
  #
  # Contents:
  #   Executable, RedirectedExecutable
  #
! # Copyright (c) 2002, 2003 by CodeSourcery, LLC.  All rights reserved. 
  #
  ########################################################################
  
  ########################################################################
  # Imports
*************** class Executable(object):
*** 92,108 ****
          'path' -- If not 'None', the path to the program to run.  If
          'None', 'arguments[0]' is used.
  
          'exception_pipe' -- If not 'None', a pipe that the child can
          use to communicate an exception to the parent.  This pipe is
!         only used on UNIX systems.
  
          returns -- The PID of the child.
  
          Before creating the child, the parent will call
          'self._InitializeParent'.  On UNIX systems, the child will
          call 'self._InitializeChild' after 'fork', but before 'exec'.
  
          If the path to the program is absolute, or contains no
          separator characters, it is not modified.  Otherwise the path
          to the program is relative, it is transformed into an absolute
          path using 'dir' as the base, or the current directory if
--- 92,115 ----
          'path' -- If not 'None', the path to the program to run.  If
          'None', 'arguments[0]' is used.
  
          'exception_pipe' -- If not 'None', a pipe that the child can
          use to communicate an exception to the parent.  This pipe is
!         only used on UNIX systems.  The write end of the pipe will be
!         closed by this function.
  
          returns -- The PID of the child.
  
          Before creating the child, the parent will call
          'self._InitializeParent'.  On UNIX systems, the child will
          call 'self._InitializeChild' after 'fork', but before 'exec'.
+         On non-UNIX systems, 'self._InitializeChild' will never be
+         called.
+ 
+         After creating the child, 'self._HandleChild' is called in the
+         parent.  This hook should be used to handle tasks that must be
+         performed after the child is running.
  
          If the path to the program is absolute, or contains no
          separator characters, it is not modified.  Otherwise the path
          to the program is relative, it is transformed into an absolute
          path using 'dir' as the base, or the current directory if
*************** class Executable(object):
*** 112,121 ****
--- 119,129 ----
          # are maintained so as to support multiple inheritance; in
          # that situation these functions in this class may be called
          # more than once.
          self.__has_initialize_child_run = 0
          self.__has_initialize_parent_run = 0
+         self.__has_handle_child_run = 1
          self.__has_do_parent_run = 0
          
          # Remember the directory in which the execution will occur.
          self.__dir = dir
  
*************** class Executable(object):
*** 191,200 ****
--- 199,216 ----
                      os._exit(1)
  
                  # This code should never be reached.
                  assert None
  
+         # Nothing will be written to the exception pipe in the parent.
+         if exception_pipe:
+             os.close(exception_pipe[1])
+             
+         # Let the parent take any actions required after creating the
+         # child.
+         self._HandleChild()
+         
          return self.__child
  
  
      def Run(self, arguments=[], environment = None, dir = None,
              path = None):
*************** class Executable(object):
*** 236,253 ****
              # descriptor is not passed on to the child.
              fd = exception_pipe[1]
              fcntl.fcntl(fd, F_SETFD, fcntl.fcntl(fd, F_GETFD) | FD_CLOEXEC)
          else:
              exception_pipe = None
!             
          # Start the program.
          child = self.Spawn(arguments, environment, dir, path, exception_pipe)
  
-         # Close the write end of the exception pipe.
-         if sys.platform != "win32":
-             os.close(exception_pipe[1])
-             
          # Give the parent a chance to do whatever it needs to do.
          self._DoParent()
          
          # Wait for the child to exit.
          if sys.platform == "win32":
--- 252,265 ----
              # descriptor is not passed on to the child.
              fd = exception_pipe[1]
              fcntl.fcntl(fd, F_SETFD, fcntl.fcntl(fd, F_GETFD) | FD_CLOEXEC)
          else:
              exception_pipe = None
! 
          # Start the program.
          child = self.Spawn(arguments, environment, dir, path, exception_pipe)
  
          # Give the parent a chance to do whatever it needs to do.
          self._DoParent()
          
          # Wait for the child to exit.
          if sys.platform == "win32":
*************** class Executable(object):
*** 277,307 ****
  
          returns -- Under Windows, a 'PySTARTUPINFO' structure
          explaining how the child should be initialized.  On other
          systems, the return value is ignored."""
  
!         self.__has_initialize_parent_run = 1
  
-         if sys.platform == "win32":
-             return win32process.STARTUPINFO()
  
  
      def _InitializeChild(self):
          """Initialize the child process.
  
          After 'fork' is called this method is invoked to give the
          child a chance to initialize itself.  '_InitializeParent' will
          already have been called in the parent process.
  
          This method is not used under Windows."""
  
          assert sys.platform != "win32"
!         
!         self.__has_initialize_child_run = 1
!         
!         if self.__dir:
!             os.chdir(self.__dir)
  
  
      def _DoParent(self):
          """Perform actions required in the parent after 'Spawn'."""
  
--- 289,331 ----
  
          returns -- Under Windows, a 'PySTARTUPINFO' structure
          explaining how the child should be initialized.  On other
          systems, the return value is ignored."""
  
!         if not self.__has_initialize_parent_run:
!             self.__has_initialize_parent_run = 1
!             if sys.platform == "win32":
!                 return win32process.STARTUPINFO()
  
  
+     def _HandleChild(self):
+         """Run in the parent process after the child has been created.
+ 
+         The child process has been spawned; its PID is avialable via
+         '_GetChildPID'.  Take any actions in the parent that are
+         required now that the child exists.
+ 
+         Derived class versions must call this method."""
  
+         self.__has_handle_child_run = 1
+     
+         
      def _InitializeChild(self):
          """Initialize the child process.
  
          After 'fork' is called this method is invoked to give the
          child a chance to initialize itself.  '_InitializeParent' will
          already have been called in the parent process.
  
          This method is not used under Windows."""
  
          assert sys.platform != "win32"
! 
!         if not self.__has_initialize_child_run:
!             self.__has_initialize_child_run = 1
!             if self.__dir:
!                 os.chdir(self.__dir)
  
  
      def _DoParent(self):
          """Perform actions required in the parent after 'Spawn'."""
  
*************** class RedirectedExecutable(Executable):
*** 443,462 ****
              os.dup2(self._stdout_pipe[1], 2)
          else:
              os.close(2)
  
  
!     def _DoParent(self):
  
          # Close the pipe ends that we do not need.
          if self._stdin_pipe:
              self._ClosePipeEnd(self._stdin_pipe[0])
          if self._stdout_pipe:
              self._ClosePipeEnd(self._stdout_pipe[1])
          if self._stderr_pipe:
              self._ClosePipeEnd(self._stderr_pipe[1])
  
          # Process the various redirected streams until none of the
          # streams remain open.
          if sys.platform != "win32":
              while 1:
                  # Prepare the lists of interesting descriptors.
--- 467,493 ----
              os.dup2(self._stdout_pipe[1], 2)
          else:
              os.close(2)
  
  
!     def _HandleChild(self):
  
+         Executable._HandleChild(self)
+         
          # Close the pipe ends that we do not need.
          if self._stdin_pipe:
              self._ClosePipeEnd(self._stdin_pipe[0])
          if self._stdout_pipe:
              self._ClosePipeEnd(self._stdout_pipe[1])
          if self._stderr_pipe:
              self._ClosePipeEnd(self._stderr_pipe[1])
  
+         
+     def _DoParent(self):
+ 
+         Executable._DoParent(self)
+ 
          # Process the various redirected streams until none of the
          # streams remain open.
          if sys.platform != "win32":
              while 1:
                  # Prepare the lists of interesting descriptors.
*************** class TimeoutExecutable(Executable):
*** 717,729 ****
          if self.__timeout >= 0:
              os.setpgid(0, 0)
          
          return Executable._InitializeChild(self)
  
-     
-     def _DoParent(self):
  
          if self.__timeout >= 0:
              # Put the child into its own process group.  This step is
              # performed in both the parent and the child; therefore both
              # processes can safely assume that the creation of the process
              # group has taken place.
--- 748,762 ----
          if self.__timeout >= 0:
              os.setpgid(0, 0)
          
          return Executable._InitializeChild(self)
  
  
+     def _HandleChild(self):
+ 
+         Executable._HandleChild(self)
+         
          if self.__timeout >= 0:
              # Put the child into its own process group.  This step is
              # performed in both the parent and the child; therefore both
              # processes can safely assume that the creation of the process
              # group has taken place.
*************** class TimeoutExecutable(Executable):
*** 767,789 ****
                  finally:
                      # Exit.  This code is in a finally clause so that
                      # we are guaranteed to get here no matter what.
                      os._exit(0)
  
-         return Executable._DoParent(self)
- 
  
      def Run(self, arguments=[], environment = None, dir = None,
              path = None):
  
          # Run the process.
!         status = Executable.Run(self, arguments, environment, dir, path)
!         # Clean up the monitoring program; it is no longer needed.
!         if self.__timeout >= 0:
!             os.kill(self.__monitor_pid, signal.SIGKILL)
!             os.waitpid(self.__monitor_pid, 0)
! 
          return status
  
  
  
  class TimeoutRedirectedExecutable(TimeoutExecutable,
--- 800,822 ----
                  finally:
                      # Exit.  This code is in a finally clause so that
                      # we are guaranteed to get here no matter what.
                      os._exit(0)
  
  
      def Run(self, arguments=[], environment = None, dir = None,
              path = None):
  
          # Run the process.
!         try:
!             status = Executable.Run(self, arguments, environment, dir, path)
!         finally:
!             # Clean up the monitoring program; it is no longer needed.
!             if self.__timeout >= 0:
!                 os.kill(self.__monitor_pid, signal.SIGKILL)
!                 os.waitpid(self.__monitor_pid, 0)
!                 
          return status
  
  
  
  class TimeoutRedirectedExecutable(TimeoutExecutable,
*************** class TimeoutRedirectedExecutable(Timeou
*** 800,808 ****
  
          TimeoutExecutable._InitializeParent(self)
          RedirectedExecutable._InitializeParent(self)
  
  
!     def _DoParent(self):
  
!         TimeoutExecutable._DoParent(self)
!         RedirectedExecutable._DoParent(self)
--- 833,847 ----
  
          TimeoutExecutable._InitializeParent(self)
          RedirectedExecutable._InitializeParent(self)
  
  
!     def _HandleChild(self):
  
!         # Order is important.  The pipes created by
!         # 'RedirectedExecutable' must be closed before the monitor
!         # process (created by 'TimeoutExecutable') is created.
!         # Otherwise, if the child process dies, 'select' in the parent
!         # will not return as the monitor process still has the file
!         # descriptor open.
!         RedirectedExecutable._HandleChild(self)
!         TimeoutExecutable._HandleChild(self)
Index: qm/test/database.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/database.py,v
retrieving revision 1.34
diff -c -5 -p -r1.34 database.py
*** qm/test/database.py	14 Apr 2003 06:06:40 -0000	1.34
--- qm/test/database.py	17 Apr 2003 22:42:34 -0000
*************** class TestDescriptor(ItemDescriptor):
*** 187,200 ****
          'test_id' -- The test ID.
  
          'test_class_name' -- The name of the test class of which this is
          an instance.
  
!         'arguments' -- This test's arguments to the test class.
! 
!         'resources' -- A sequence of IDs of resources to run before and
!         after the test is run."""
  
          # Initialize the base class.
          ItemDescriptor.__init__(self, database,
                                  test_id, test_class_name, arguments)
  
--- 187,197 ----
          'test_id' -- The test ID.
  
          'test_class_name' -- The name of the test class of which this is
          an instance.
  
!         'arguments' -- This test's arguments to the test class."""
  
          # Initialize the base class.
          ItemDescriptor.__init__(self, database,
                                  test_id, test_class_name, arguments)
  
Index: qm/test/resource.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/resource.py,v
retrieving revision 1.9
diff -c -5 -p -r1.9 resource.py
*** qm/test/resource.py	17 Oct 2002 20:38:15 -0000	1.9
--- qm/test/resource.py	17 Apr 2003 22:42:34 -0000
***************
*** 5,15 ****
  # Date:   2001-10-10
  #
  # Contents:
  #   QMTest Resource class.
  #
! # Copyright (c) 2001, 2002 by CodeSourcery, LLC.  All rights reserved. 
  #
  # For license terms see the file COPYING.
  #
  ########################################################################
  
--- 5,15 ----
  # Date:   2001-10-10
  #
  # Contents:
  #   QMTest Resource class.
  #
! # Copyright (c) 2001, 2002, 2003 by CodeSourcery, LLC.  All rights reserved. 
  #
  # For license terms see the file COPYING.
  #
  ########################################################################
  
*************** class Resource(qm.test.runnable.Runnable
*** 74,84 ****
      
      def SetUp(self, context, result):
          """Set up the resource.
  
          'context' -- A 'Context' giving run-time parameters to the
!         test.
  
          'result' -- A 'Result' object.  The outcome will be
          'Result.PASS' when this method is called.  The 'result' may be
          modified by this method to indicate outcomes other than
          'Result.PASS' or to add annotations.
--- 74,86 ----
      
      def SetUp(self, context, result):
          """Set up the resource.
  
          'context' -- A 'Context' giving run-time parameters to the
!         resource.  The resource may place additional variables into
!         the 'context'; these variables will be visible to tests that
!         depend on the resource.
  
          'result' -- A 'Result' object.  The outcome will be
          'Result.PASS' when this method is called.  The 'result' may be
          modified by this method to indicate outcomes other than
          'Result.PASS' or to add annotations.
*************** class Resource(qm.test.runnable.Runnable
*** 98,105 ****
          modified by this method to indicate outcomes other than
          'Result.PASS' or to add annotations.
  
          This method should not return a value.
  
!         Derived classes must override this method."""
  
!         raise NotImplementedError
--- 100,107 ----
          modified by this method to indicate outcomes other than
          'Result.PASS' or to add annotations.
  
          This method should not return a value.
  
!         Derived classes may override this method."""
  
!         pass
Index: qm/test/target.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/target.py,v
retrieving revision 1.17
diff -c -5 -p -r1.17 target.py
*** qm/test/target.py	6 Mar 2003 20:54:44 -0000	1.17
--- qm/test/target.py	17 Apr 2003 22:42:35 -0000
*************** class Target(qm.extension.Extension):
*** 338,348 ****
              resource_desc = self.GetDatabase().GetResource(resource_name)
              # Set up the resources on which this resource depends.
              self.__SetUpResources(resource_desc, context)
              # Set up the resource itself.
              resource_desc.SetUp(context, result)
!             # Obtain the resource with the try-block so that if it
              # cannot be obtained the exception is handled below.
              resource = resource_desc.GetItem()
          except self.__ResourceSetUpException, e:
              result.Fail(qm.message("failed resource"),
                          { result.RESOURCE : e.resource })
--- 338,348 ----
              resource_desc = self.GetDatabase().GetResource(resource_name)
              # Set up the resources on which this resource depends.
              self.__SetUpResources(resource_desc, context)
              # Set up the resource itself.
              resource_desc.SetUp(context, result)
!             # Obtain the resource within the try-block so that if it
              # cannot be obtained the exception is handled below.
              resource = resource_desc.GetItem()
          except self.__ResourceSetUpException, e:
              result.Fail(qm.message("failed resource"),
                          { result.RESOURCE : e.resource })
Index: qm/test/doc/reference.xml
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/doc/reference.xml,v
retrieving revision 1.19
diff -c -5 -p -r1.19 reference.xml
*** qm/test/doc/reference.xml	14 Apr 2003 06:06:40 -0000	1.19
--- qm/test/doc/reference.xml	17 Apr 2003 22:42:35 -0000
***************
*** 127,146 ****
     needed.  The arguments to the resource class are what make two
     instances of the same resource class different from each other.
     For example, in the case of a resource that sets up a database, the
     records to place in the database might be given as arguments.
     Every resource has a name, using the same format that is used for
!    tests.  It is possible to have a test and resource with the same
!    name; the test and resource namespaces are distinct.</para>
  
     <para>Under some circumstances (such as running tests on multiple
     machines at once), &qmtest; may create more than one instance of
     the same resource.  Therefore, you should never depend on there
     being only one instance of a resource.  In addition, if you have
     asked &qmtest; to run tests concurrently, two tests may access the
!    same resource at the same time.</para>
   
     <para>Setting up or cleaning up a resource produces a result, just
     like those produced for tests.  &qmtest; will display these results
     in its summary output and record them in the results file.</para>
  
    </section> <!-- sec-resources -->
--- 127,155 ----
     needed.  The arguments to the resource class are what make two
     instances of the same resource class different from each other.
     For example, in the case of a resource that sets up a database, the
     records to place in the database might be given as arguments.
     Every resource has a name, using the same format that is used for
!    tests.</para>
  
     <para>Under some circumstances (such as running tests on multiple
     machines at once), &qmtest; may create more than one instance of
     the same resource.  Therefore, you should never depend on there
     being only one instance of a resource.  In addition, if you have
     asked &qmtest; to run tests concurrently, two tests may access the
!    same resource at the same time.  You can, however, be assured that
!    there will be only one instance of a particular resource on a
!    particular target at any one time.</para>
   
+    <para>Tests have limited access to the resources on which they
+    depend.  A resource may place additional information into the
+    context (<xref linnkend="sec-context"/>) that is visible to the
+    test.  However, the actual resource object itself is not available
+    to tests.  (The reason for this limitiation is that for a target
+    consisting of multiple processes, the resource object may not be
+    located in the process as the test that depends upon it.)</para>
+ 
     <para>Setting up or cleaning up a resource produces a result, just
     like those produced for tests.  &qmtest; will display these results
     in its summary output and record them in the results file.</para>
  
    </section> <!-- sec-resources -->
***************
*** 162,173 ****
     is a set of key/value pairs.  The keys are always strings.  The
     values of all context properties provided by the user are strings.
     In general, all tests in a given use of &qmtest; will have the same
     context.  However, when a resource is set up, it may place
     additional information in the context of those tests that depend
!    upon it; the tests can use this information to locate the resource.
!    The values inserted by the resource may have any types.</para>
  
     <para>All context properties whose names begin with
     &quot;<literal>qmtest.</literal>&quot; are reserved for use by
     &qmtest;.  The values inserted by &qmtest; may have any type.  Test
     and resource classes should not depend on the presence or absence
--- 171,182 ----
     is a set of key/value pairs.  The keys are always strings.  The
     values of all context properties provided by the user are strings.
     In general, all tests in a given use of &qmtest; will have the same
     context.  However, when a resource is set up, it may place
     additional information in the context of those tests that depend
!    upon it.  The values inserted by the resource may have any type, so
!    long as they can be &quot;pickled&quot; by Python.</para>
  
     <para>All context properties whose names begin with
     &quot;<literal>qmtest.</literal>&quot; are reserved for use by
     &qmtest;.  The values inserted by &qmtest; may have any type.  Test
     and resource classes should not depend on the presence or absence


From ghost at cs.msu.su  Mon Apr 21 10:05:59 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Mon, 21 Apr 2003 14:05:59 +0400
Subject: Proposal: modules reload
Message-ID: <200304211405.59475.ghost@cs.msu.su>


Hello,
from time to run I run into a snag with QMTest. I start a gui, run a test and 
it fails. The test uses custom test class, and I decide there's problem with 
the test class itself. So I edit the module, but running gui does not notice 
that the module source has changed. I have to shutdown/restart QMTest,
which is not convenient. 

I propose that QMTest gui has a new command "reload modules", which
will use builtin "reload" function on all known extension modules or allow to
select modules to reload. 

If this idea is good from UI/functionality point of view, I can look at how it 
can be implemented in code. Opinions?

-- Volodya


From mark at codesourcery.com  Mon Apr 21 19:37:23 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 21 Apr 2003 12:37:23 -0700
Subject: [qmtest] Proposal: modules reload
In-Reply-To: <200304211405.59475.ghost@cs.msu.su>
References: <200304211405.59475.ghost@cs.msu.su>
Message-ID: <1050953843.8013.31.camel@doubledemon.codesourcery.com>

On Mon, 2003-04-21 at 03:05, Vladimir Prus wrote:
> 
> Hello,
> from time to run I run into a snag with QMTest. I start a gui, run a test and 
> it fails. The test uses custom test class, and I decide there's problem with 
> the test class itself. So I edit the module, but running gui does not notice 
> that the module source has changed. I have to shutdown/restart QMTest,
> which is not convenient. 
> 
> I propose that QMTest gui has a new command "reload modules", which
> will use builtin "reload" function on all known extension modules or allow to
> select modules to reload. 
> 
> If this idea is good from UI/functionality point of view, I can look at how it 
> can be implemented in code. Opinions?

I've thought about this in the past and never came to a definite
conclusion.  On the one hand, reloading the modules *should* work, but
I'm never sure it will always leave things in a consistent state.  (What
if there is global data in those modules, or data elsewhere that has
class types where the classes are defined in those modules?)

Another related problem is that if there is a bug in QMTest, which you
fix, you then have to restart everything to test your fix.

And yet another related problem is that it would be nice to be able to
switch databases (or, some day, use multiple databases at once) from the
GUI.  All of these require some kind of re-start capability.

Maybe a good place to start would be a "Restart" command on the QMTest
file menu that would just shut down QMTest, and restart it, on the same
port?

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From ghost at cs.msu.su  Tue Apr 22 11:46:08 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Tue, 22 Apr 2003 15:46:08 +0400
Subject: [qmtest] Proposal: modules reload
In-Reply-To: <1050953843.8013.31.camel@doubledemon.codesourcery.com>
References: <200304211405.59475.ghost@cs.msu.su> <1050953843.8013.31.camel@doubledemon.codesourcery.com>
Message-ID: <200304221546.08264.ghost@cs.msu.su>

Mark Mitchell wrote:
> On Mon, 2003-04-21 at 03:05, Vladimir Prus wrote:
> > Hello,
> > from time to run I run into a snag with QMTest. I start a gui, run a test
> > and it fails. The test uses custom test class, and I decide there's
> > problem with the test class itself. So I edit the module, but running gui
> > does not notice that the module source has changed. I have to
> > shutdown/restart QMTest, which is not convenient.
> >
> > I propose that QMTest gui has a new command "reload modules", which
> > will use builtin "reload" function on all known extension modules or
> > allow to select modules to reload.
> >
> > If this idea is good from UI/functionality point of view, I can look at
> > how it can be implemented in code. Opinions?
>
> I've thought about this in the past and never came to a definite
> conclusion.  On the one hand, reloading the modules *should* work, but
> I'm never sure it will always leave things in a consistent state.  (What
> if there is global data in those modules, or data elsewhere that has
> class types where the classes are defined in those modules?)

Is that really possible? I though that tests/resources are short-lived 
entities: i.e. they are loaded, run and leave only annotations behind.
Are test/resources instances stored anywhere?

> Another related problem is that if there is a bug in QMTest, which you
> fix, you then have to restart everything to test your fix.

True.

> And yet another related problem is that it would be nice to be able to
> switch databases (or, some day, use multiple databases at once) from the
> GUI.  All of these require some kind of re-start capability.
>
> Maybe a good place to start would be a "Restart" command on the QMTest
> file menu that would just shut down QMTest, and restart it, on the same
> port?

That would be good for use cases you mention, but I have no idea how to 
imlement this. Do you mean that a QMTestServer instance is restarted,
or entire qmtest script, or...

- Volodya



From mark at codesourcery.com  Tue Apr 22 15:22:29 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 22 Apr 2003 08:22:29 -0700
Subject: [qmtest] Proposal: modules reload
In-Reply-To: <200304221546.08264.ghost@cs.msu.su>
References: <200304211405.59475.ghost@cs.msu.su>
	<1050953843.8013.31.camel@doubledemon.codesourcery.com> 
	<200304221546.08264.ghost@cs.msu.su>
Message-ID: <1051024950.8303.192.camel@doubledemon.codesourcery.com>


> > I've thought about this in the past and never came to a definite
> > conclusion.  On the one hand, reloading the modules *should* work, but
> > I'm never sure it will always leave things in a consistent state.  (What
> > if there is global data in those modules, or data elsewhere that has
> > class types where the classes are defined in those modules?)
> 
> Is that really possible? I though that tests/resources are short-lived 
> entities: i.e. they are loaded, run and leave only annotations behind.
> Are test/resources instances stored anywhere?

No, test/resources are never stored, presently, and that is by design:
they might be big expensive objects.  However, it's possible that a
database implementation might cache them, and sometime we'd like QMTest
to be able to serve multiple test runs concurrently, so it might happen
someday.  

It would probably be OK to do what you suggest; we could always do some
kind of synchronization later, if required.

> > Maybe a good place to start would be a "Restart" command on the QMTest
> > file menu that would just shut down QMTest, and restart it, on the same
> > port?
> 
> That would be good for use cases you mention, but I have no idea how to 
> imlement this. Do you mean that a QMTestServer instance is restarted,
> or entire qmtest script, or...

The easiest thing is probably to restart the whole script; do a re-exec
of the main Python script, which will flush all the modules and such.
 
-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Wed Apr 23 19:02:42 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 23 Apr 2003 12:02:42 -0700
Subject: PATCH: Improve handling of resources that depend on other resources
Message-ID: <200304231902.h3NJ2gtC003611@minax.codesourcery.com>


One resource can depend on another in QMTest 2.1.

This patch fixes some bugs in the current implementation whereby
context properties set by the resources were not available to tests
depending on them.

There are a couple of the miscellaneous enhancements as well.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-04-23  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/context.py (Context.GetAddedProperties): New method.
	(ContextWrapper.GetAddedProperties): Recur.
	* qm/test/target.py (Target._SetUpResource): Handle resources
	dependent on other resources.

	* qm/test/file_database.py (ExtensionDatabase._IsFile): Handle
	empty extensions more gracefully.

	* qm/test/result.py (Result.SetOutcome): Add cause and annotations
	parameters.
	(Result.Fail): Use it.

Index: qm/test/context.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/context.py,v
retrieving revision 1.7
diff -c -5 -p -r1.7 context.py
*** qm/test/context.py	25 Nov 2002 10:24:05 -0000	1.7
--- qm/test/context.py	23 Apr 2003 18:54:48 -0000
***************
*** 5,15 ****
  # Date:   11/06/2001
  #
  # Contents:
  #   QMTest Context class
  #
! # Copyright (c) 2001, 2002, 2003 by CodeSourcery, LLC.  All rights reserved. 
  #
  ########################################################################
  
  ########################################################################
  # Imports
--- 5,15 ----
  # Date:   11/06/2001
  #
  # Contents:
  #   QMTest Context class
  #
! # Copyright (c) 2001, 2002, 2003 by CodeSourcery, LLC.  All rights reserved. 
  #
  ########################################################################
  
  ########################################################################
  # Imports
*************** class Context:
*** 168,177 ****
--- 168,186 ----
          return result
  
  
      # Helper methods.
  
+     def GetAddedProperties(self):
+         """Return the properties added to this context by resources.
+ 
+         returns -- A map from strings to values indicating properties
+         that were added to this context by resources."""
+         
+         return {}
+ 
+     
      def ValidateKey(self, key):
          """Validate 'key'.
  
          raises -- 'ValueError' if 'key' is not a string.
  
*************** class ContextWrapper:
*** 217,231 ****
          self.__extra = extra_properties.copy()
          self.__added = {}
  
  
      def GetAddedProperties(self):
!         """Return the properties added after this wrapper was created."""
  
!         return self.__added
  
  
      def __getitem__(self, key):
          """Return a property value."""
  
          # Check added properties first.
          try:
--- 226,255 ----
          self.__extra = extra_properties.copy()
          self.__added = {}
  
  
      def GetAddedProperties(self):
!         """Return the properties added to this context by resources.
! 
!         returns -- A map from strings to values indicating properties
!         that were added to this context by resources."""
  
!         added = self.__context.GetAddedProperties()
!         added.update(self.__added)
!         return added
  
  
+     def ValidateKey(self, key):
+         """Validate 'key'.
+ 
+         raises -- 'ValueError' if 'key' is not a string.
+ 
+         raises -- 'RuntimeError' if 'key' is not valid."""
+ 
+         return self.__context.ValidateKey(key)
+ 
+     
      def __getitem__(self, key):
          """Return a property value."""
  
          # Check added properties first.
          try:
Index: qm/test/file_database.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/file_database.py,v
retrieving revision 1.17
diff -c -5 -p -r1.17 file_database.py
*** qm/test/file_database.py	24 Mar 2003 07:24:24 -0000	1.17
--- qm/test/file_database.py	23 Apr 2003 18:54:48 -0000
*************** class FileDatabase(Database):
*** 453,463 ****
  
  
  
  class ExtensionDatabase(FileDatabase):
      """An 'ExtensionFileDatabase' is a 'FileDatabase' where each kind of
!     entity (test, suite, resource) has a particular extension.
  
      'ExtensionDatabase' is an abstract class."""
  
      arguments = [
          qm.fields.TextField(
--- 453,467 ----
  
  
  
  class ExtensionDatabase(FileDatabase):
      """An 'ExtensionFileDatabase' is a 'FileDatabase' where each kind of
!     entity (test, suite, resource) has a particular extension.  For
!     examples, if tests have the extension '.qmt', then all files ending
!     with '.qmt' are considered tests.  If an extension for a particular
!     kind of entity is not specified is the empty string, then all files
!     will be considered to be that kind of entity.
  
      'ExtensionDatabase' is an abstract class."""
  
      arguments = [
          qm.fields.TextField(
*************** class ExtensionDatabase(FileDatabase):
*** 552,564 ****
      def _IsFile(self, kind, path):
  
          if kind == Database.SUITE and path == self.GetRoot():
              return 1
  
!         extension = os.path.splitext(path)[1]
!         if extension != self._extensions[kind]:
!             return 0
  
          return (os.path.isfile(path)
                  or (kind == Database.SUITE and os.path.isdir(path)))
          
  
--- 556,570 ----
      def _IsFile(self, kind, path):
  
          if kind == Database.SUITE and path == self.GetRoot():
              return 1
  
!         kind_extension = self._extensions[kind]
!         if kind_extension:
!             extension = os.path.splitext(path)[1]
!             if extension != kind_extension:
!                 return 0
  
          return (os.path.isfile(path)
                  or (kind == Database.SUITE and os.path.isdir(path)))
          
  
Index: qm/test/result.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/result.py,v
retrieving revision 1.16
diff -c -5 -p -r1.16 result.py
*** qm/test/result.py	20 Mar 2003 16:55:17 -0000	1.16
--- qm/test/result.py	23 Apr 2003 18:54:48 -0000
*************** class Result:
*** 162,198 ****
          will be one of the 'Result.outcomes'."""
  
          return self.__outcome
      
          
!     def SetOutcome(self, outcome):
          """Set the outcome associated with the test.
  
!         'outcome' -- One of the 'Result.outcomes'."""
  
          assert outcome in Result.outcomes
          self.__outcome = outcome
  
  
      def Annotate(self, annotations):
          """Add 'annotations' to the current set of annotations."""
          self.__annotations.update(annotations)
  
  
!     def Fail(self, cause=None, annotations={}):
          """Mark the test as failing.
  
          'cause' -- If not 'None', this value becomes the value of the
          'Result.CAUSE' annotation.
  
          'annotations' -- The annotations are added to the current set
          of annotations."""
  
!         self.SetOutcome(Result.FAIL)
!         if cause:
!             self[Result.CAUSE] = cause
!         self.Annotate(annotations)
  
          
      def GetId(self):
          """Return the label for the test or resource.
  
--- 162,204 ----
          will be one of the 'Result.outcomes'."""
  
          return self.__outcome
      
          
!     def SetOutcome(self, outcome, cause = None, annotations = {}):
          """Set the outcome associated with the test.
  
!         'outcome' -- One of the 'Result.outcomes'.
! 
!         'cause' -- If not 'None', this value becomes the value of the
!         'Result.CAUSE' annotation.
! 
!         'annotations' -- The annotations are added to the current set
!         of annotations."""
  
          assert outcome in Result.outcomes
          self.__outcome = outcome
+         if cause:
+             self[Result.CAUSE] = cause
+         self.Annotate(annotations)
  
  
      def Annotate(self, annotations):
          """Add 'annotations' to the current set of annotations."""
          self.__annotations.update(annotations)
  
  
!     def Fail(self, cause = None, annotations = {}):
          """Mark the test as failing.
  
          'cause' -- If not 'None', this value becomes the value of the
          'Result.CAUSE' annotation.
  
          'annotations' -- The annotations are added to the current set
          of annotations."""
  
!         self.SetOutcome(Result.FAIL, cause, annotations)
  
          
      def GetId(self):
          """Return the label for the test or resource.
  
Index: qm/test/target.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/target.py,v
retrieving revision 1.18
diff -c -5 -p -r1.18 target.py
*** qm/test/target.py	17 Apr 2003 22:48:48 -0000	1.18
--- qm/test/target.py	23 Apr 2003 18:54:48 -0000
*************** class Target(qm.extension.Extension):
*** 291,302 ****
          indicating the test or resource that is about to be run.
  
          'context' -- The 'Context' in which the resources will be
          executed.
  
!         returns -- A list of additional context properties that should
!         be available to the test."""
          
          # See if there are resources that need to be set up.
          properties = {}
          for resource in descriptor.GetResources():
              (r, outcome, resource_properties) \
--- 291,303 ----
          indicating the test or resource that is about to be run.
  
          'context' -- The 'Context' in which the resources will be
          executed.
  
!         returns -- A tuple of the same form as is returned by
!         '_BeginResourceSetUp' when the resource has already been set
!         up."""
          
          # See if there are resources that need to be set up.
          properties = {}
          for resource in descriptor.GetResources():
              (r, outcome, resource_properties) \
*************** class Target(qm.extension.Extension):
*** 327,347 ****
          # If it has already been set up, there is no need to do it
          # again.
          if rop:
              return rop
          # Set up the context.
!         context = ContextWrapper(context)
!         result = Result(Result.RESOURCE_SETUP, resource_name, context,
                          Result.PASS)
          resource = None
          # Get the resource descriptor.
          try:
              resource_desc = self.GetDatabase().GetResource(resource_name)
              # Set up the resources on which this resource depends.
!             self.__SetUpResources(resource_desc, context)
              # Set up the resource itself.
!             resource_desc.SetUp(context, result)
              # Obtain the resource within the try-block so that if it
              # cannot be obtained the exception is handled below.
              resource = resource_desc.GetItem()
          except self.__ResourceSetUpException, e:
              result.Fail(qm.message("failed resource"),
--- 328,352 ----
          # If it has already been set up, there is no need to do it
          # again.
          if rop:
              return rop
          # Set up the context.
!         wrapper = ContextWrapper(context)
!         result = Result(Result.RESOURCE_SETUP, resource_name, wrapper,
                          Result.PASS)
          resource = None
          # Get the resource descriptor.
          try:
              resource_desc = self.GetDatabase().GetResource(resource_name)
              # Set up the resources on which this resource depends.
!             properties = self.__SetUpResources(resource_desc, context)
!             # Add the context properties from those resources to the
!             # context for the resource that is now being set up.
!             for k, v in properties.items():
!                 wrapper[k] = v
              # Set up the resource itself.
!             resource_desc.SetUp(wrapper, result)
              # Obtain the resource within the try-block so that if it
              # cannot be obtained the exception is handled below.
              resource = resource_desc.GetItem()
          except self.__ResourceSetUpException, e:
              result.Fail(qm.message("failed resource"),


From ghost at cs.msu.su  Fri Apr 25 06:28:25 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Fri, 25 Apr 2003 10:28:25 +0400
Subject: [qmtest] Proposal: modules reload
In-Reply-To: <1051024950.8303.192.camel@doubledemon.codesourcery.com>
References: <200304211405.59475.ghost@cs.msu.su> <200304221546.08264.ghost@cs.msu.su> <1051024950.8303.192.camel@doubledemon.codesourcery.com>
Message-ID: <200304251028.25514.ghost@cs.msu.su>

Mark Mitchell wrote:
> > > I've thought about this in the past and never came to a definite
> > > conclusion.  On the one hand, reloading the modules *should* work, but
> > > I'm never sure it will always leave things in a consistent state. 
> > > (What if there is global data in those modules, or data elsewhere that
> > > has class types where the classes are defined in those modules?)
> >
> > Is that really possible? I though that tests/resources are short-lived
> > entities: i.e. they are loaded, run and leave only annotations behind.
> > Are test/resources instances stored anywhere?
>
> No, test/resources are never stored, presently, and that is by design:
> they might be big expensive objects.  However, it's possible that a
> database implementation might cache them, and sometime we'd like QMTest
> to be able to serve multiple test runs concurrently, so it might happen
> someday.
>
> It would probably be OK to do what you suggest; we could always do some
> kind of synchronization later, if required.

I'll take a stab on it, then. The biggest advantage over complete restart, 
IMO, will be that  you don't loose already generated results. 

(Don't expect any patches sooner than a week, though)

> > > Maybe a good place to start would be a "Restart" command on the QMTest
> > > file menu that would just shut down QMTest, and restart it, on the same
> > > port?
> >
> > That would be good for use cases you mention, but I have no idea how to
> > imlement this. Do you mean that a QMTestServer instance is restarted,
> > or entire qmtest script, or...
>
> The easiest thing is probably to restart the whole script; do a re-exec
> of the main Python script, which will flush all the modules and such.

Then the main Python script would have to return special value (e.g. 2) 
meaning "restart me" and we must hope that brower won't timeout before new 
QMTest instance is started. Seems plausible, but less important for me.

- Volodya




