From Anders.Hasselqvist at tss.teleca.se  Wed Feb  4 17:06:41 2004
From: Anders.Hasselqvist at tss.teleca.se (Anders Hasselqvist)
Date: Wed, 4 Feb 2004 18:06:41 +0100 
Subject: Bug in ChoiceField?
Message-ID: <9EEF3C7F0B31F544919778197B64D76002593512@au-sth01-ex.ausys.se>

Hi,

There seems to be a bug in ChoiceField, atleast when using from
BooleanField.
The generated <select> statement doesn't contain a name parameter.


The supplied patch solves the problem for me.


BTW: Is the public cvs down? I only get "/home/qm/Repository: no such
repository"
when trying to update.

Regards,
--
Anders Hasselqvist <at> tss.teleca.se
Teleca Software Solutions AB, Umea
Tel: 08 - 579 116 85
Mob: 070 - 660 19 03

-------------- next part --------------
A non-text attachment was scrubbed...
Name: diff
Type: application/octet-stream
Size: 667 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040204/27b120bc/attachment.obj>

From slowrey at nextone.com  Wed Feb  4 20:09:39 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Wed, 04 Feb 2004 15:09:39 -0500
Subject: Resource Destruction Order
Message-ID: <40215183.1030701@nextone.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040204/b670a630/attachment.html>

From slowrey at nextone.com  Wed Feb  4 21:58:06 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Wed, 04 Feb 2004 16:58:06 -0500
Subject: [qmtest] Bug in ChoiceField?
In-Reply-To: <9EEF3C7F0B31F544919778197B64D76002593512@au-sth01-ex.ausys.se>
References: <9EEF3C7F0B31F544919778197B64D76002593512@au-sth01-ex.ausys.se>
Message-ID: <40216AEE.4030908@nextone.com>

Anders Hasselqvist wrote:

>Hi,
>
>There seems to be a bug in ChoiceField, atleast when using from
>BooleanField.
>The generated <select> statement doesn't contain a name parameter.
>
>
>The supplied patch solves the problem for me.
>  
>
Thank you, Anders!

I was attempting to use an EnumerationField just the other day and could 
not get it to work.  Your patch has fixed the problem.

-- 
*Scott Lowrey*
NexTone Communications
Germantown, Maryland

/(240)912-1369/
www.nextone.com <http://www.nextone.com>



From mark at codesourcery.com  Wed Feb  4 22:08:47 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 04 Feb 2004 14:08:47 -0800
Subject: [qmtest] Bug in ChoiceField?
In-Reply-To: <9EEF3C7F0B31F544919778197B64D76002593512@au-sth01-ex.ausys.se>
References: <9EEF3C7F0B31F544919778197B64D76002593512@au-sth01-ex.ausys.se>
Message-ID: <40216D6F.4030800@codesourcery.com>

Anders Hasselqvist wrote:

>Hi,
>
>There seems to be a bug in ChoiceField, atleast when using from
>BooleanField.
>The generated <select> statement doesn't contain a name parameter.
>
>  
>
Thanks for the patch!  I'm looking at it now.

>The supplied patch solves the problem for me.
>
>
>BTW: Is the public cvs down? I only get "/home/qm/Repository: no such
>repository"
>when trying to update.
>
That's unfortunate fallout from system maintenance done over the 
weekend; it should be fixed now.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From mark at codesourcery.com  Thu Feb  5 06:29:26 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 04 Feb 2004 22:29:26 -0800
Subject: [qmtest] Bug in ChoiceField?
In-Reply-To: <9EEF3C7F0B31F544919778197B64D76002593512@au-sth01-ex.ausys.se>
References: <9EEF3C7F0B31F544919778197B64D76002593512@au-sth01-ex.ausys.se>
Message-ID: <4021E2C6.5040801@codesourcery.com>

Anders Hasselqvist wrote:

>Hi,
>
>There seems to be a bug in ChoiceField, atleast when using from
>BooleanField.
>The generated <select> statement doesn't contain a name parameter.
>
>
>The supplied patch solves the problem for me.
>  
>

Yes, it's exactly the right fix.

I checked in your change.

Thanks!

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From mark at codesourcery.com  Thu Feb  5 07:08:47 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 04 Feb 2004 23:08:47 -0800
Subject: [qmtest] Resource Destruction Order
In-Reply-To: <40215183.1030701@nextone.com>
References: <40215183.1030701@nextone.com>
Message-ID: <4021EBFF.4030005@codesourcery.com>

Scott Lowrey wrote:

> I have a test that depends on resource A.  Resource A in turn depends 
> on resource B.
>
> When the test is run, resource B is set up first, followed by resource 
> A.  When the test finishes, resource B is getting torn down *before* 
> resource A, causing resource A's CleanUp to fail.
>
> The order of set up seems logical.  The teardown order does not, yet I 
> have a different test where dependent resources were torn down 
> correctly.  Is this random?  Shouldn't resource creation and 
> destruction be strictly ordered according to dependencies?

Yes -- this is a bug.  We'll fix that.

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From mark at codesourcery.com  Sun Feb  8 20:55:28 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 08 Feb 2004 12:55:28 -0800
Subject: [qmtest] QMtest Suites
In-Reply-To: <401830AA.1070108@nextone.com>
References: <4012A4E7.7020200@nextone.com> <40181370.4040109@codesourcery.com> <401830AA.1070108@nextone.com>
Message-ID: <4026A240.90501@codesourcery.com>

Scott Lowrey wrote:

> Mark Mitchell wrote:
>
>> Fixed with the attached patch, which has been checked into CVS.
>>
>
> Works great with one nit: Edit -> Delete Suite does nothing.

Fixed with the attached patch, now checked in.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: diffs
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040208/ac6f042e/attachment.ksh>

From mark at codesourcery.com  Sun Feb  8 20:59:57 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 08 Feb 2004 12:59:57 -0800
Subject: [qmtest] Test Completion With Running Processes
In-Reply-To: <40155064.9000705@nextone.com>
References: <40155064.9000705@nextone.com>
Message-ID: <4026A34D.4080805@codesourcery.com>

Scott Lowrey wrote:

> I've noticed a discrepancy in the behavior between running tests on 
> the command line and running them via the GUI.
>
> Scenario:
>
> Test code spawns several subprocesses.  Exception occurs while 
> executing test code.  Bug in the test class (mine) leaves one process 
> outstanding.
>
> Result:
>
> If this test is run via the command line ('qmtest run'), the exception 
> is properly noted and the test ends with an ERROR result.  The 
> outstanding process remains as an orphan.
>
> If this test is run via the GUI, the browser loops waiting for the 
> test to end.
>
> Obviously, QMTest is waiting for all processes associated with it to 
> end before declaring the test complete.  That is a Good Thing, I 
> think.  But why does the command-line test come back as soon as the 
> exception occurs, in spite of the outstanding process?

I'm not sure exactly what's causing the difference in behavior you're 
seeing.

The code in qm/executable.py is what handles executing subprocesses.  It 
contains logic to start the subprocesses in their own process group so 
that it can kill the entire process group if and when necessary.

The key difference in the GUI environment is probably that the GUI is 
running from within its own thread.  I suspect that something is going 
wrong with signal-delivery to the GUI thread and that is causing the 
difference.

The normal process control logic does *not* wait for all subprocesses to 
exit; just the main subprocess.  However, once the main subprocess exits 
it should kill the entire process group.   (See TimeoutExecutable.Run).  
Of course, if the subprocesses intentionally create new process groups 
for their children, or move themselves into different process groups, 
this logic will not be able to kill all of the children.)

I don't think we can fix this with the information you've provided so far.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From mark at codesourcery.com  Mon Feb  9 07:36:18 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 08 Feb 2004 23:36:18 -0800
Subject: QMTest 2.1 Released
Message-ID: <40273872.4060007@codesourcery.com>

QMTest 2.1 is now available from:

  http://www.codesourcery.com/qm/qmtest_download

This release contains a number of major improvements -- both new 
features and bugfixes -- relative to QMTest 2.0.x, as described in the 
attached NEWS file.

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com

-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: NEWS
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040208/613e441a/attachment.ksh>

From njs at pobox.com  Wed Feb 11 20:45:31 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 11 Feb 2004 12:45:31 -0800
Subject: [PATCH] Add more annotations to QMTest runs
Message-ID: <20040211204531.GA27774@njs.ddts.net>

This patch, attached for review, adds more default annotations to
QMTest.  These are required for emulation of the TET[1] output format,
but are useful generally.

Also adds a few more calls to ExecutionEngine._Trace, and
rationalizes the early termination handling;
ExecutionEnginer._RunTests used to sometimes signal early termination
by just exiting, and sometimes by raising an exception; we now always
raise an exception of some form.

New annotations:
  qmtest.run.user: user who started the test run
  qmtest.run.version: version of QMTest used for this test run
  qmtest.run.uname: uname of the machine that started this test run
  qmtest.run.aborted: present with value "True" if test run was
    aborted early

Questions:
  - Currently the simple presence of qmtest.run.aborted signals an
    aborted run; should we instead always write this annotation with
    value either "True" or "False"?
  - Is there any documentation that should be added for these?  As far
    as I can tell, annotations aren't documentated at all ATM...

[1] http://tetworks.opengroup.org

-- Nathaniel

-- 
"If you can explain how you do something, then you're very very bad at it."
  -- John Hopfield
-------------- next part --------------
? foo
? results.qmr
? qm/external/__init__.pyc
? tests/regress/QMTest/regression_database.pyc
? tests/regress/QMTest/selftest.pyc
? tests/regress/env_context1/output.qmr
? tests/regress/exception_test/output.qmr
? tests/regress/gilles1/output.qmr
? tests/regress/nocycle1/output.qmr
? tests/regress/tuple1/QMTest/tuple_test.pyc
? tests/results_files/QMTest/results_file_database.pyc
? tests/results_files/QMTest/results_file_test.pyc
Index: ChangeLog
===================================================================
RCS file: /home/qm/Repository/qm/ChangeLog,v
retrieving revision 1.595
diff -u -r1.595 ChangeLog
--- ChangeLog	28 Jan 2004 19:50:51 -0000	1.595
+++ ChangeLog	11 Feb 2004 20:06:22 -0000
@@ -1,3 +1,18 @@
+2004-02-11  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/common.py: Import getpass.  
+	(get_username): New function.
+	* qm/test/execution_engine.py
+	(ExecutionEngine._WriteInitialAnnotations): New method.
+	(ExecutionEngine.Run): Call it.
+	(TerminationRequested): New exception.
+	(ExecutionEngine._RunTests): Raise it when terminating.
+	(ExecutionEngine.Run): Check for exceptions in _RunTests.
+	
+	(ExecutionEngine.RequestTermination): More tracing.
+	(ExecutionEngine.Run): Likewise.
+	(ExecutionEngine._RunTests): Likewise.
+	
 2004-01-28  Mark Mitchell  <mark at codesourcery.com>
 
 	* qm/test/classes/explicit_suite.py (ExplicitSuite.is_implicit):
Index: qm/common.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/common.py,v
retrieving revision 1.79
diff -u -r1.79 common.py
--- qm/common.py	24 Nov 2003 23:00:54 -0000	1.79
+++ qm/common.py	11 Feb 2004 20:06:22 -0000
@@ -39,6 +39,7 @@
 import time
 import traceback
 import types
+import getpass
 if sys.platform != "win32":
     import fcntl
     
@@ -872,6 +873,31 @@
         assignments[name] = value
 
     return assignments
+
+
+def get_username():
+    """Returns the current username as a string.
+
+    If the username cannot be found, raises a 'QMException'."""
+
+    # First try using the 'getpass' module.
+    try:
+        return getpass.getuser()
+    except:
+        pass
+
+    # 'getpass' doesn't necessarily work on Windows, so if that fails,
+    # try the win32 function.
+    try:
+        import win32api
+    except ImportError:
+        pass
+    else:
+        return win32api.GetUserName()
+
+    # And if none of that worked, give up.
+    raise QMException, "Cannot determine user name."
+
 
 ########################################################################
 # variables
Index: qm/test/execution_engine.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/execution_engine.py,v
retrieving revision 1.25
diff -u -r1.25 execution_engine.py
--- qm/test/execution_engine.py	24 Nov 2003 06:35:01 -0000	1.25
+++ qm/test/execution_engine.py	11 Feb 2004 20:06:22 -0000
@@ -34,6 +34,13 @@
 # Classes
 ########################################################################
 
+class TerminationRequested(qm.common.QMException):
+    """A target requested termination of the test loop."""
+    
+    pass
+
+
+
 class ExecutionEngine:
     """A 'ExecutionEngine' executes tests.
 
@@ -232,6 +239,7 @@
         may take some time; tests that are already running will continue
         to run, for example."""
 
+        self._Trace("Test loop termination requested.")
         self.__terminated = 1
 
 
@@ -253,20 +261,27 @@
 
         returns -- True if any tests had unexpected outcomes."""
 
-        # Write out all the currently known annotations.
-        start_time_str = qm.common.format_time_iso(time.time())
-        for rs in self.__result_streams:
-            rs.WriteAllAnnotations(self.__context)
-            rs.WriteAnnotation("qmtest.run.start_time", start_time_str)
+        # Write out run metadata.
+        self._WriteInitialAnnotations()
 
         # Start all of the targets.
         for target in self.__targets:
             target.Start(self.__response_queue, self)
 
         # Run all of the tests.
+        self._Trace("Starting test loop")
         try:
-            self._RunTests()
+            try:
+                self._RunTests()
+            except:
+                self._Trace("Test loop exited with exception: %s"
+                            % str(sys.exc_info()))
+                for rs in self.__result_streams:
+                    rs.WriteAnnotation("qmtest.run.aborted", "True")
+                raise
         finally:
+            self._Trace("Test loop finished.")
+
             # Stop the targets.
             self._Trace("Stopping targets.")
             for target in self.__targets:
@@ -346,7 +361,9 @@
         while self.__num_tests_started < num_tests:
             # If the user interrupted QMTest, stop executing tests.
             if self._IsTerminationRequested():
-                break
+                self._Trace("Terminating test loop as requested.")
+                raise TerminationRequested, "Termination requested."
+
             # Process any responses and update the count of idle targets.
             while self.__CheckForResponse(wait=0):
                 pass
@@ -378,8 +395,9 @@
                     else:
                         self.__target_state[target] = self.__TARGET_BUSY
 
-        # Now all tests have been started; we just have wait for them
-        # all to finish.
+        # Now every test that we're going to start has started; we just
+        # have wait for them all to finish.
+        self._Trace("Waiting for remaining tests to finish.")
         while self.__running:
             self.__CheckForResponse(wait=1)
 
@@ -793,6 +811,31 @@
             tracer.Write(message, "exec")
 
     
+    def _WriteInitialAnnotations(self):
+
+        # Calculate annotations.
+        start_time_str = qm.common.format_time_iso(time.time())
+
+        try:
+            username = qm.common.get_username()
+        except:
+            username = None
+
+        try:
+            uname = " ".join(os.uname())
+        except:
+            uname = None
+
+        # Write them.
+        for rs in self.__result_streams:
+            rs.WriteAllAnnotations(self.__context)
+            rs.WriteAnnotation("qmtest.run.start_time", start_time_str)
+            if username is not None:
+                rs.WriteAnnotation("qmtest.run.user", username)
+            rs.WriteAnnotation("qmtest.run.version", qm.version)
+            rs.WriteAnnotation("qmtest.run.uname", uname)
+
+
 ########################################################################
 # Local Variables:
 # mode: python

From mark at codesourcery.com  Wed Feb 11 21:18:20 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 11 Feb 2004 13:18:20 -0800
Subject: [qmtest] [PATCH] Add more annotations to QMTest runs
In-Reply-To: <20040211204531.GA27774@njs.ddts.net>
References: <20040211204531.GA27774@njs.ddts.net>
Message-ID: <402A9C1C.5020509@codesourcery.com>

Nathaniel Smith wrote:

>This patch, attached for review, adds more default annotations to
>QMTest.  These are required for emulation of the TET[1] output format,
>but are useful generally.
>
>Also adds a few more calls to ExecutionEngine._Trace, and
>rationalizes the early termination handling;
>ExecutionEnginer._RunTests used to sometimes signal early termination
>by just exiting, and sometimes by raising an exception; we now always
>raise an exception of some form.
>  
>
Yay.

>New annotations:
>  qmtest.run.user: user who started the test run
>  qmtest.run.version: version of QMTest used for this test run
>  qmtest.run.uname: uname of the machine that started this test run
>  qmtest.run.aborted: present with value "True" if test run was
>    aborted early
>
>  
>
Cool.

>Questions:
>  - Currently the simple presence of qmtest.run.aborted signals an
>    aborted run; should we instead always write this annotation with
>    value either "True" or "False"?
>  
>
I think your way is OK.  Is "True" how we normally spell it in QMTest?  
(Check qm.fields.)  We should probably use a consistent spelling.

>  - Is there any documentation that should be added for these?  As far
>    as I can tell, annotations aren't documentated at all ATM...
>
>  
>
That's probably true -- but you should fix that. :-)  Let's add a new 
section in the manual somewhere.

>+def get_username():
>+    """Returns the current username as a string.
>+
>+    If the username cannot be found, raises a 'QMException'."""
>+
>+    # First try using the 'getpass' module.
>+    try:
>+        return getpass.getuser()
>+    except:
>+        pass
>
>  
>
Do we actually know that getpass doesn't work on Windows?  The docs 
don't suggest that.

>+    # 'getpass' doesn't necessarily work on Windows, so if that fails,
>+    # try the win32 function.
>+    try:
>+        import win32api
>  
>
I'm a little bit afraid that we could some how get here under UNIX, and 
then try to import this module, which might cause weird things to 
happen.  Perhaps we could assert that doesn't happen, or condition this 
whole block on sys.platform the way we do elsewhere in QMTest?

The rest of the patch is excellente.

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From zack at codesourcery.com  Wed Feb 11 22:29:09 2004
From: zack at codesourcery.com (Zack Weinberg)
Date: Wed, 11 Feb 2004 14:29:09 -0800
Subject: [qmtest] [PATCH] Add more annotations to QMTest runs
In-Reply-To: <402A9C1C.5020509@codesourcery.com> (Mark Mitchell's message of
 "Wed, 11 Feb 2004 13:18:20 -0800")
References: <20040211204531.GA27774@njs.ddts.net>
	<402A9C1C.5020509@codesourcery.com>
Message-ID: <87fzdhtfm2.fsf@egil.codesourcery.com>

Mark Mitchell <mark at codesourcery.com> writes:

>>+    # 'getpass' doesn't necessarily work on Windows, so if that fails,
>>+    # try the win32 function.
>>+    try:
>>+        import win32api
>>
>>
> I'm a little bit afraid that we could some how get here under UNIX,
> and then try to import this module, which might cause weird things
> to happen.  Perhaps we could assert that doesn't happen, or
> condition this whole block on sys.platform the way we do elsewhere
> in QMTest?

The import is wrapped in a try: ... except ImportError: block, which
should be adequate defense against getting here under Unix.

zw


From mark at codesourcery.com  Thu Feb 12 01:57:31 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 11 Feb 2004 17:57:31 -0800
Subject: [qmtest] [PATCH] Add more annotations to QMTest runs
In-Reply-To: <87fzdhtfm2.fsf@egil.codesourcery.com>
References: <20040211204531.GA27774@njs.ddts.net>	<402A9C1C.5020509@codesourcery.com> <87fzdhtfm2.fsf@egil.codesourcery.com>
Message-ID: <402ADD8B.2080805@codesourcery.com>

Zack Weinberg wrote:

>Mark Mitchell <mark at codesourcery.com> writes:
>
>  
>
>>>+    # 'getpass' doesn't necessarily work on Windows, so if that fails,
>>>+    # try the win32 function.
>>>+    try:
>>>+        import win32api
>>>
>>>
>>>      
>>>
>>I'm a little bit afraid that we could some how get here under UNIX,
>>and then try to import this module, which might cause weird things
>>to happen.  Perhaps we could assert that doesn't happen, or
>>condition this whole block on sys.platform the way we do elsewhere
>>in QMTest?
>>    
>>
>
>The import is wrapped in a try: ... except ImportError: block, which
>should be adequate defense against getting here under Unix.
>  
>
I wasn't sure about that.  Some modules can be loaded under a "wrong" 
OS, but then blow up when you try to use them.  I suppose win32api will 
fail hard at import-time, but I wasn't 100% sure.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From njs at pobox.com  Thu Feb 12 00:05:06 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 11 Feb 2004 16:05:06 -0800
Subject: [qmtest] [PATCH] Add more annotations to QMTest runs
In-Reply-To: <402A9C1C.5020509@codesourcery.com>
References: <20040211204531.GA27774@njs.ddts.net> <402A9C1C.5020509@codesourcery.com>
Message-ID: <20040212000506.GA8556@njs.ddts.net>

On Wed, Feb 11, 2004 at 01:18:20PM -0800, Mark Mitchell wrote:
> Nathaniel Smith wrote:
> >Questions:
> > - Currently the simple presence of qmtest.run.aborted signals an
> >   aborted run; should we instead always write this annotation with
> >   value either "True" or "False"?
> > 
> >
> I think your way is OK.  Is "True" how we normally spell it in QMTest?  
> (Check qm.fields.)  We should probably use a consistent spelling.

Oh, good point, I'd forgotten that we write out booleans in some
cases.  (We accept just about anything when reading booleans, in
qm.common.parse_boolean, so I just went for consistency with Python
booleans.)  I'll switch it to "true".

> > - Is there any documentation that should be added for these?  As far
> >   as I can tell, annotations aren't documentated at all ATM...
> >
> > 
> >
> That's probably true -- but you should fix that. :-)  Let's add a new 
> section in the manual somewhere.

Right.  It's a pre-existing problem, though; how about I file the bug
and commit this now?

> >+def get_username():
> >+    """Returns the current username as a string.
> >+
> >+    If the username cannot be found, raises a 'QMException'."""
> >+
> >+    # First try using the 'getpass' module.
> >+    try:
> >+        return getpass.getuser()
> >+    except:
> >+        pass
> >
> > 
> Do we actually know that getpass doesn't work on Windows?  The docs 
> don't suggest that.

It apparently works iff the user has the appropriate environment
variables set, which is common but not guaranteed.  At least, this is
the impression I got from various mailing list posts.

Basically, getpass on Windows works just like it does on Unix, but
without the fallback to looking things up in /etc/passwd; the win32api
call adds that fallback.

> >+    # 'getpass' doesn't necessarily work on Windows, so if that fails,
> >+    # try the win32 function.
> >+    try:
> >+        import win32api
> > 
> >
> I'm a little bit afraid that we could some how get here under UNIX, and 
> then try to import this module, which might cause weird things to 
> happen.  Perhaps we could assert that doesn't happen, or condition this 
> whole block on sys.platform the way we do elsewhere in QMTest?

We could get here under Unix, but it should just raise an ImportError;
using ImportErrors for runtime feature tests seems a fairly common
idiom in Python.  We could be more paranoid here, if you think it's
important, but I think it's unnecessary; "weird things" here means
"bugs in the interpreter".

-- Nathaniel

-- 
Eternity is very long, especially towards the end.
  -- Woody Allen


From seefeld at sympatico.ca  Thu Feb 12 03:05:38 2004
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Wed, 11 Feb 2004 22:05:38 -0500
Subject: API enhancements
Message-ID: <402AED82.1060004@sympatico.ca>

hi there,

now that the release is out, may I bring up the issue
of API enhancements in general and my suggested change
for field attributes in extensions in particular ?

Did anybody review it ? Beside breaking the attribute
ordering (which, according to Nathaniel, didn't follow
any specific requirement anyways) the change is fully
backward compatible, yet it provides a more compact
and clean way for declaring new extensions.

And, to put it into a broader context: what API
change requests would be acceptable for you ? Only
bug fixes ? Or some design cleanup, too ?

Thanks,
		Stefan



From zack at codesourcery.com  Thu Feb 12 04:11:28 2004
From: zack at codesourcery.com (Zack Weinberg)
Date: Wed, 11 Feb 2004 20:11:28 -0800
Subject: [qmtest] [PATCH] Add more annotations to QMTest runs
In-Reply-To: <402ADD8B.2080805@codesourcery.com> (Mark Mitchell's message of
 "Wed, 11 Feb 2004 17:57:31 -0800")
References: <20040211204531.GA27774@njs.ddts.net>
	<402A9C1C.5020509@codesourcery.com>
	<87fzdhtfm2.fsf@egil.codesourcery.com>
	<402ADD8B.2080805@codesourcery.com>
Message-ID: <87hdxxrl73.fsf@egil.codesourcery.com>

Mark Mitchell <mark at codesourcery.com> writes:

>>The import is wrapped in a try: ... except ImportError: block, which
>>should be adequate defense against getting here under Unix.
>>
>>
> I wasn't sure about that.  Some modules can be loaded under a "wrong"
> OS, but then blow up when you try to use them.  I suppose win32api
> will fail hard at import-time, but I wasn't 100% sure.

It would probably make sense to guard the actual call against weird
exceptions, too.

zw


From mark at codesourcery.com  Thu Feb 12 04:36:35 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 11 Feb 2004 20:36:35 -0800
Subject: [qmtest] [PATCH] Add more annotations to QMTest runs
In-Reply-To: <20040212000506.GA8556@njs.ddts.net>
References: <20040211204531.GA27774@njs.ddts.net> <402A9C1C.5020509@codesourcery.com> <20040212000506.GA8556@njs.ddts.net>
Message-ID: <402B02D3.6030801@codesourcery.com>


>>That's probably true -- but you should fix that. :-)  Let's add a new 
>>section in the manual somewhere.
>>    
>>
>
>Right.  It's a pre-existing problem, though; how about I file the bug
>and commit this now?
>  
>
OK.  I thought you were all fired up to do it. :-)

>We could get here under Unix, but it should just raise an ImportError;
>using ImportErrors for runtime feature tests seems a fairly common
>idiom in Python.
>
OK.

Please check in.  Thanks!

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From njs at pobox.com  Thu Feb 12 06:20:25 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 11 Feb 2004 22:20:25 -0800
Subject: [qmtest] [PATCH] Add more annotations to QMTest runs
In-Reply-To: <87hdxxrl73.fsf@egil.codesourcery.com>
References: <20040211204531.GA27774@njs.ddts.net> <402A9C1C.5020509@codesourcery.com> <87fzdhtfm2.fsf@egil.codesourcery.com> <402ADD8B.2080805@codesourcery.com> <87hdxxrl73.fsf@egil.codesourcery.com>
Message-ID: <20040212062024.GA18174@njs.ddts.net>

On Wed, Feb 11, 2004 at 08:11:28PM -0800, Zack Weinberg wrote:
> Mark Mitchell <mark at codesourcery.com> writes:
> >>The import is wrapped in a try: ... except ImportError: block, which
> >>should be adequate defense against getting here under Unix.
> >>
> > I wasn't sure about that.  Some modules can be loaded under a "wrong"
> > OS, but then blow up when you try to use them.  I suppose win32api
> > will fail hard at import-time, but I wasn't 100% sure.
> 
> It would probably make sense to guard the actual call against weird
> exceptions, too.

Okay, checked in with this change.

-- Nathaniel

-- 
The Universe may  /  Be as large as they say
But it wouldn't be missed  /  If it didn't exist.
  -- Piet Hein


From Anders.Hasselqvist at tss.teleca.se  Thu Feb 12 07:57:12 2004
From: Anders.Hasselqvist at tss.teleca.se (Anders Hasselqvist)
Date: Thu, 12 Feb 2004 08:57:12 +0100
Subject: [qmtest] [PATCH] Add more annotations to QMTest runs
Message-ID: <9EEF3C7F0B31F544919778197B64D7600259351B@au-sth01-ex.ausys.se>

Hi,

I always seems to forget using Reply All when replying to Marks mails,
Sorry about that.



> 
> >+def get_username():
> >+    """Returns the current username as a string.
> >+
> >+    If the username cannot be found, raises a 'QMException'."""
> >+
> >+    # First try using the 'getpass' module.
> >+    try:
> >+        return getpass.getuser()
> >+    except:
> >+        pass
> >
> >  
> >
> Do we actually know that getpass doesn't work on Windows?  The docs
> don't suggest that.
> 


import getpass
print getpass.getuser()
--
prints my username. I'm running WinXP and python 2.3.3.

Regards,
--
Anders Hasselqvist <at> tss.teleca.se
Teleca Software Solutions AB, Umea
Tel: 08 - 579 116 85
Mob: 070 - 660 19 03


From afunk at ll.mit.edu  Thu Feb 12 20:56:48 2004
From: afunk at ll.mit.edu (Andrew Funk)
Date: Thu, 12 Feb 2004 15:56:48 -0500
Subject: ShellScriptTest under Windows?
Message-ID: <000001c3f1aa$bb546330$7588229b@meriadoc>

Hi,

Are ShellScriptTests supported under Windows?  I created a very simple
one with the script:

 echo Hello World!

But the stdout isn't what I expected (see below).  

This same test runs correctly under Linux.  Is there any documentation
about the differences (if any) between *nix and Windows versions?

Thanks,
Andy



--- TEST RESULTS
-------------------------------------------------------------

  myfirsttest                                   : FAIL
    Unexpected standard output.

    ExecTest.exit_code:
      0

    ExecTest.expected_stdout:


    ExecTest.stderr:


    ExecTest.stdout:

      Microsoft Windows XP [Version 5.1.2600]
      (C) Copyright 1985-2001 Microsoft Corp.

      Z:\test>


    qmtest.target:
      local

--- TESTS THAT DID NOT PASS
--------------------------------------------------

  myfirsttest                                   : FAIL
    Unexpected standard output.


--- STATISTICS
---------------------------------------------------------------

       1        tests total
       1 (100%) tests FAIL




From slowrey at nextone.com  Thu Feb 12 21:16:06 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Thu, 12 Feb 2004 16:16:06 -0500
Subject: [qmtest] ShellScriptTest under Windows?
In-Reply-To: <000001c3f1aa$bb546330$7588229b@meriadoc>
References: <000001c3f1aa$bb546330$7588229b@meriadoc>
Message-ID: <402BED16.2060108@nextone.com>



Andrew Funk wrote:

>Hi,
>
>Are ShellScriptTests supported under Windows?  
>  
>
The shell script test is the same as the command test (which simply runs 
an executable) except the name of a shell is prepended to the contents 
of the script.  From the book:

    QMTest determines which shell to use by the following method:

      - If the context contains the property
        'ShellScriptTest.script_shell', its value is split into an
        argument list and used.

      - Otherwise, if the '.qmrc' configuration file contains the common
        property 'script_shell', its value is split into an argument
        list and used.

      - Otherwise, the default shell for the target system is used.

So, unless you point your script_shell variable to Cygwin or some other 
Windows rendition of a Unix shell, I'm guessing your script would get 
tossed to the Windows 'cmd' (DOS) shell... where it would crash and 
burn.  (Unless you entered a valid DOS script?)

-- 
*Scott Lowrey*
NexTone Communications
Germantown, Maryland

/(240)912-1369/
NexTone.com <http://nextone.com>



From afunk at ll.mit.edu  Thu Feb 12 21:45:34 2004
From: afunk at ll.mit.edu (Andrew Funk)
Date: Thu, 12 Feb 2004 16:45:34 -0500
Subject: [qmtest] ShellScriptTest under Windows?
In-Reply-To: <402BED16.2060108@nextone.com>
Message-ID: <000301c3f1b1$8b1bdbb0$7588229b@meriadoc>

Hi,

I did read that documentation in the code and I thought about editing
the context to use a different shell.  However I guess what I would like
is for QMTest to have the same behavior under Unix and Windows out of
the box, or if not then to know exactly what are the limitations so that
I can design my tests for both OS.

Thanks,
Andy

-----Original Message-----
From: Scott Lowrey [mailto:slowrey at nextone.com] 
Sent: Thursday, February 12, 2004 4:16 PM
To: Andrew Funk
Cc: qmtest at codesourcery.com
Subject: Re: [qmtest] ShellScriptTest under Windows?




Andrew Funk wrote:

>Hi,
>
>Are ShellScriptTests supported under Windows?
>  
>
The shell script test is the same as the command test (which simply runs

an executable) except the name of a shell is prepended to the contents 
of the script.  From the book:

    QMTest determines which shell to use by the following method:

      - If the context contains the property
        'ShellScriptTest.script_shell', its value is split into an
        argument list and used.

      - Otherwise, if the '.qmrc' configuration file contains the common
        property 'script_shell', its value is split into an argument
        list and used.

      - Otherwise, the default shell for the target system is used.

So, unless you point your script_shell variable to Cygwin or some other 
Windows rendition of a Unix shell, I'm guessing your script would get 
tossed to the Windows 'cmd' (DOS) shell... where it would crash and 
burn.  (Unless you entered a valid DOS script?)

-- 
*Scott Lowrey*
NexTone Communications
Germantown, Maryland

/(240)912-1369/
NexTone.com <http://nextone.com>




From slowrey at nextone.com  Fri Feb 13 00:09:22 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Thu, 12 Feb 2004 19:09:22 -0500
Subject: [qmtest] ShellScriptTest under Windows?
In-Reply-To: <000301c3f1b1$8b1bdbb0$7588229b@meriadoc>
References: <000301c3f1b1$8b1bdbb0$7588229b@meriadoc>
Message-ID: <402C15B2.2060900@nextone.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040212/d80f4002/attachment.html>

From mark at codesourcery.com  Fri Feb 13 05:17:28 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 12 Feb 2004 21:17:28 -0800
Subject: [qmtest] ShellScriptTest under Windows?
In-Reply-To: <000301c3f1b1$8b1bdbb0$7588229b@meriadoc>
References: <000301c3f1b1$8b1bdbb0$7588229b@meriadoc>
Message-ID: <402C5DE8.6000205@codesourcery.com>

Andrew Funk wrote:

>Hi,
>
>I did read that documentation in the code and I thought about editing
>the context to use a different shell.  However I guess what I would like
>is for QMTest to have the same behavior under Unix and Windows out of
>the box, or if not then to know exactly what are the limitations so that
>I can design my tests for both OS.
>  
>
I think it depends on what you mean by "the same behavior".  To us, 
"running the native shell, whatever it may be" is "the same behavior".  
It sounds like to you, "running the same shell, preferably a POSIX 
Bourne shell" would be "the same behavior."

Of course, there's no way (in general) to run a Bourne shell under 
Windows; such a thing is not always installed.

If you want that level of portability, I can see a few choices:

* Require that your users install a Bourne shell and then either set the 
QMTest context variable to use that shell, or, alternatively, subclass 
ShellScriptTest so that it explicitly uses a Bourne shell.

* Encode the logic you would normally express in the shell script 
directly in Python, depending on the portability you get that way, 
rather than trying to use a shell script.

* Have your test database pick different shell scripts depending on the 
host OS, magically substituting DOS commands for Bourne shell commands 
when on Windows.

Best,

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From mark at codesourcery.com  Fri Feb 13 05:22:23 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 12 Feb 2004 21:22:23 -0800
Subject: [qmtest] API enhancements
In-Reply-To: <402AED82.1060004@sympatico.ca>
References: <402AED82.1060004@sympatico.ca>
Message-ID: <402C5F0F.8090509@codesourcery.com>

Stefan Seefeld wrote:

> hi there,
>
> now that the release is out, may I bring up the issue
> of API enhancements in general and my suggested change
> for field attributes in extensions in particular ?

Yes, you may. :-)

> Did anybody review it ? Beside breaking the attribute
> ordering (which, according to Nathaniel, didn't follow
> any specific requirement anyways) the change is fully
> backward compatible, yet it provides a more compact
> and clean way for declaring new extensions.

I looked briefly at the patch, but not in terribly much detail.  If you 
will re-forward it to me, or point me at the URL on the online archives, 
I will take a harder look.  We should definitely update the 
documentation to explain how to use the new technique if we decide to 
adopt it; I can't remember if your patch did that or not.

Full backwards compatible is an important criteria for test classes, but 
if you've met that, that's not an issue.  For database classes, we can 
be a little more flexible; the API there is not quite as settled, and we 
know there are probably going to be some changes there.

> And, to put it into a broader context: what API
> change requests would be acceptable for you ? Only
> bug fixes ? Or some design cleanup, too ?

Design cleanup is OK, but backwards compatibility is paramound, and we 
do have a heavy weight on the side of if-it-aint't-broken-don't-fix-it 
in that any change does introduce risk.

As I mentioned before, we'd be particularly excited about new test 
classes; that's what we think would be the best use of major effort.  
But, it's not up to me to tell you how to spend your time, and we'll be 
very grateful for whatever you contribute!

Best,

-- 

Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From afunk at ll.mit.edu  Fri Feb 13 14:35:47 2004
From: afunk at ll.mit.edu (Andrew Funk)
Date: Fri, 13 Feb 2004 09:35:47 -0500
Subject: [qmtest] ShellScriptTest under Windows?
In-Reply-To: <402C5DE8.6000205@codesourcery.com>
Message-ID: <000001c3f23e$abf04410$7588229b@meriadoc>

Hi guys,

Thanks for the advice.  From what you both have said, it sounds like I
may want to go with a Python test class.  Since I need Python to run
QMTest anyway, that seems like a reasonable approach.

Not to beat a dead horse, but I just want to make sure I understand
something.  I understand that I can't expect any arbitrary Unix shell
script to run under Windows, but I think the one I used for a test "echo
Hello World!" should work on both, no?  I guess what I'm asking is, is
there any possible ShellScriptTest that would work under Windows?

Thanks,
Andy

-----Original Message-----
From: Mark Mitchell [mailto:mark at codesourcery.com] 
Sent: Friday, February 13, 2004 12:17 AM
To: Andrew Funk
Cc: 'Scott Lowrey'; qmtest at codesourcery.com
Subject: Re: [qmtest] ShellScriptTest under Windows?


Andrew Funk wrote:

>Hi,
>
>I did read that documentation in the code and I thought about editing 
>the context to use a different shell.  However I guess what I would 
>like is for QMTest to have the same behavior under Unix and Windows out

>of the box, or if not then to know exactly what are the limitations so 
>that I can design my tests for both OS.
>  
>
I think it depends on what you mean by "the same behavior".  To us, 
"running the native shell, whatever it may be" is "the same behavior".  
It sounds like to you, "running the same shell, preferably a POSIX 
Bourne shell" would be "the same behavior."

Of course, there's no way (in general) to run a Bourne shell under 
Windows; such a thing is not always installed.

If you want that level of portability, I can see a few choices:

* Require that your users install a Bourne shell and then either set the

QMTest context variable to use that shell, or, alternatively, subclass 
ShellScriptTest so that it explicitly uses a Bourne shell.

* Encode the logic you would normally express in the shell script 
directly in Python, depending on the portability you get that way, 
rather than trying to use a shell script.

* Have your test database pick different shell scripts depending on the 
host OS, magically substituting DOS commands for Bourne shell commands 
when on Windows.

Best,

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com




From slowrey at nextone.com  Fri Feb 13 15:50:43 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Fri, 13 Feb 2004 10:50:43 -0500
Subject: [qmtest] ShellScriptTest under Windows?
In-Reply-To: <000001c3f23e$abf04410$7588229b@meriadoc>
References: <000001c3f23e$abf04410$7588229b@meriadoc>
Message-ID: <402CF253.2030609@nextone.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040213/b1a8f699/attachment.html>

From mark at codesourcery.com  Fri Feb 13 16:40:21 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 13 Feb 2004 08:40:21 -0800
Subject: [qmtest] ShellScriptTest under Windows?
In-Reply-To: <000001c3f23e$abf04410$7588229b@meriadoc>
References: <000001c3f23e$abf04410$7588229b@meriadoc>
Message-ID: <402CFDF5.4030201@codesourcery.com>

Andrew Funk wrote:

>Hi guys,
>
>Thanks for the advice.  From what you both have said, it sounds like I
>may want to go with a Python test class.  Since I need Python to run
>QMTest anyway, that seems like a reasonable approach.
>
>Not to beat a dead horse, but I just want to make sure I understand
>something.  I understand that I can't expect any arbitrary Unix shell
>script to run under Windows, but I think the one I used for a test "echo
>Hello World!" should work on both, no?  I guess what I'm asking is, is
>there any possible ShellScriptTest that would work under Windows?
>
>  
>
Oh, I think I see what you're asking.

You're complaining that the "echo hi" didn't seem to have been passed to 
the shell at all!

That's certainly a valid complaint, if true; the ShellScriptTest should 
pass its input to the Windows command shell and capture the output, and 
if the input were a valid batch file, it should run.  If that's what 
you're saying, would you please send me the .qmt file for the failing 
test and we'll see if we can reproduce it.

Thanks!

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From seefeld at sympatico.ca  Sat Feb 14 02:37:58 2004
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 13 Feb 2004 21:37:58 -0500
Subject: [qmtest] API enhancements
In-Reply-To: <402C5F0F.8090509@codesourcery.com>
References: <402AED82.1060004@sympatico.ca> <402C5F0F.8090509@codesourcery.com>
Message-ID: <402D8A06.8030003@sympatico.ca>

Mark Mitchell wrote:
 > Stefan Seefeld wrote:
 >
 >> hi there,
 >>
 >> now that the release is out, may I bring up the issue
 >> of API enhancements in general and my suggested change
 >> for field attributes in extensions in particular ?
 >
 >
 > Yes, you may. :-)
 >
 >> Did anybody review it ? Beside breaking the attribute
 >> ordering (which, according to Nathaniel, didn't follow
 >> any specific requirement anyways) the change is fully
 >> backward compatible, yet it provides a more compact
 >> and clean way for declaring new extensions.
 >
 >
 > I looked briefly at the patch, but not in terribly much detail.  If you
 > will re-forward it to me, or point me at the URL on the online archives,
 > I will take a harder look.

Hmm, I can't seem to find the archives any more. Is there a link to
it from the qmtest home page ?
My suggestion ran under the subject "RFE concerning 'Extension' class".

 > We should definitely update the
 > documentation to explain how to use the new technique if we decide to
 > adopt it; I can't remember if your patch did that or not.

it did not, as I only supplied the patch in reply to Zack's request for
code to see how it would work. An actual working patch should indeed come
with some docs.

 > Full backwards compatible is an important criteria for test classes, but
 > if you've met that, that's not an issue.  For database classes, we can

I 'fixed' one test that failed, though the failure was due to some
assumptions concerning the ordering of attributes, which, according to
Nathaniel, isn't even specified (i.e. my impression was that this test
is in fact testing undocumented / unspecified behavior). If the ordering
should indeed by preserved I can certainly work out a way to preserve it
with the new technique and also provide some docs explaining what the
ordering is and why.

 > be a little more flexible; the API there is not quite as settled, and we
 > know there are probably going to be some changes there.

Phew :-). The Database API is in fact where I expect lots of potential users
to 'plug in' to adapt qmtest to their legacy systems, so this is definitely
where I'd be looking into for cleanup / clarifications.

 >> And, to put it into a broader context: what API
 >> change requests would be acceptable for you ? Only
 >> bug fixes ? Or some design cleanup, too ?
 >
 >
 > Design cleanup is OK, but backwards compatibility is paramound, and we
 > do have a heavy weight on the side of if-it-aint't-broken-don't-fix-it
 > in that any change does introduce risk.

Understood. What is qmtest's current user base ? Do they all use qmtest's
own databases ? Or do they extend them with their own classes and thus
depend on the actual API ?

 > As I mentioned before, we'd be particularly excited about new test
 > classes; that's what we think would be the best use of major effort.

I agree. You once pointed me to some additional code in another
module (qmtest_gcc et al.), which may be incorporated into the 'standard
tests / databases'. What are your plans for this code ?

Regards,
		Stefan



From njs at pobox.com  Sat Feb 14 16:18:14 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Sat, 14 Feb 2004 08:18:14 -0800
Subject: [PATCH] A few more small cleanups
Message-ID: <20040214161814.GA10937@njs.ddts.net>

Okay to commit?

-- Nathaniel

-- 
The Universe may  /  Be as large as they say
But it wouldn't be missed  /  If it didn't exist.
  -- Piet Hein
-------------- next part --------------
? results.qmr
? qm/external/__init__.pyc
? qm/test/classes/dejagnu_tet_stream.py
? tests/regress/QMTest/regression_database.pyc
? tests/regress/QMTest/selftest.pyc
? tests/regress/tuple1/QMTest/tuple_test.pyc
? tests/results_files/QMTest/results_file_database.pyc
? tests/results_files/QMTest/results_file_test.pyc
Index: ChangeLog
===================================================================
RCS file: /home/qm/Repository/qm/ChangeLog,v
retrieving revision 1.602
diff -u -r1.602 ChangeLog
--- ChangeLog	13 Feb 2004 23:21:51 -0000	1.602
+++ ChangeLog	14 Feb 2004 16:16:39 -0000
@@ -1,3 +1,9 @@
+2004-02-14  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/common.py (encode_data_as_text): Remove.
+	(decode_data_from_text): Likewise.
+	(format_byte_count): Likewise.
+
 2004-02-13  Mark Mitchell  <mark at codesourcery.com>
 
 	* qm/common.py (open_temporary_file_fd): Add suffix parameter.
Index: qm/common.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/common.py,v
retrieving revision 1.82
diff -u -r1.82 common.py
--- qm/common.py	13 Feb 2004 23:19:59 -0000	1.82
+++ qm/common.py	14 Feb 2004 16:16:39 -0000
@@ -243,31 +243,12 @@
     return string.join(traceback.format_tb(exc_info[2]), "\n")
 
 
-def format_byte_count(bytes):
-    """Return the traditional representation of 'bytes' bytes."""
-
-    kb = 1024.0
-    mb = kb * 1024
-    gb = mb * 1024
-    tb = gb * 1024
-    
-    for name, order in [
-        ("TB", tb),
-        ("GB", gb),
-        ("MB", mb),
-        ("KB", kb),
-        ]:
-        if bytes >= order:
-            return "%.1f %s" % (bytes / order, name)
-
-    return "%d bytes" % bytes
-
-
 def convert_from_dos_text(text):
     """Replace CRLF with LF in 'text'."""
 
     return string.replace(text, "\r\n", "\n")
 
+
 __load_module_lock = lock.RLock()
 """A lock used by load_module."""
 
@@ -419,66 +400,6 @@
         return [ entry ]
     else:
         return split_path_fully(dir) + [ entry ]
-
-
-def encode_data_as_text(data, mime_type="application/octet-stream"):
-    """Encode data as text.
-
-    'data' -- The data to encode.
-
-    'mime_type' -- The MIME type of the data.
-
-    returns -- A pair.  The first element designates the encoding scheme
-    used.  The second is a string containing the encoded data."""
-
-    base_type = string.split(mime_type, "/", 1)[0]
-
-    # For the text base MIME type, use a quoted-printable encoding.
-    # This makes the encoded data more human-friendly.
-    if base_type == "text":
-        encoding = "quoted-printable"
-        input_file = cStringIO.StringIO(data)
-        output_file = cStringIO.StringIO()
-        quopri.encode(input_file, output_file, 0)
-        data = output_file.getvalue()
-
-    # For everything else, gzip the data and then base64-encode it.
-    else:
-        encoding = "gzipped base64"
-        data = gzip.zlib.compress(data)
-        data = base64.encodestring(data)
-
-    return (encoding, data)
-
-
-def decode_data_from_text(data, encoding):
-    """Decode data that was encoded as text.
-
-    'data' -- The encoded data.
-
-    'encoding' -- The encoding scheme used to encode this data.
-
-    returns -- A string containing the decoded data."""
-
-    if encoding == "none":
-        return data
-
-    elif encoding == "quoted-printable":
-        # Decode quoted-printable text.
-        input_file = cStringIO.StringIO(data)
-        output_file = cStringIO.StringIO()
-        quopri.decode(input_file, output_file)
-        return output_file.getvalue()
-        
-    elif encoding == "gzipped base64":
-        # First base64-decode the data.
-        data = base64.decodestring(data)
-        # Now uncompress it.
-        return gzip.zlib.decompress(data)
-
-    else:
-        # Unknown encoding type.
-        raise ValueError, "unknown encoding %s" % encoding
 
 
 def open_temporary_file_fd(suffix = None):

From njs at pobox.com  Sat Feb 14 16:10:21 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Sat, 14 Feb 2004 08:10:21 -0800
Subject: [PATCH] Some small cleanups
Message-ID: <20040214161021.GA23647@njs.ddts.net>

(already committed)

-- Nathaniel

-- 
Eternity is very long, especially towards the end.
  -- Woody Allen
-------------- next part --------------
? results.qmr
? qm/external/__init__.pyc
? qm/test/classes/dejagnu_tet_stream.py
? tests/regress/QMTest/regression_database.pyc
? tests/regress/QMTest/selftest.pyc
? tests/regress/tuple1/QMTest/tuple_test.pyc
? tests/results_files/QMTest/results_file_database.pyc
? tests/results_files/QMTest/results_file_test.pyc
Index: ChangeLog
===================================================================
RCS file: /home/qm/Repository/qm/ChangeLog,v
retrieving revision 1.599
retrieving revision 1.600
diff -u -r1.599 -r1.600
--- ChangeLog	12 Feb 2004 06:19:08 -0000	1.599
+++ ChangeLog	12 Feb 2004 07:44:48 -0000	1.600
@@ -1,5 +1,17 @@
 2004-02-11  Nathaniel Smith  <njs at codesourcery.com>
 
+	* qm/fields.py: Use types.StringTypes instead of
+	qm.common.string_types.  Also remove tabs.
+	* qm/test/result.py: Likewise.
+	* qm/common.py (string_types): Remove.
+	(Empty): Remove.
+	(MutexError): Remove.
+	(MutexLockError): Remove.
+	(ConfigurationError): Remove.
+	(indent_lines): Remove.
+	
+2004-02-11  Nathaniel Smith  <njs at codesourcery.com>
+
 	* qm/common.py: Import getpass.  
 	(get_username): New function.
 	* qm/test/execution_engine.py
Index: qm/common.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/common.py,v
retrieving revision 1.80
retrieving revision 1.81
diff -u -r1.80 -r1.81
--- qm/common.py	12 Feb 2004 06:19:08 -0000	1.80
+++ qm/common.py	12 Feb 2004 07:44:48 -0000	1.81
@@ -54,13 +54,6 @@
 # exceptions
 ########################################################################
 
-class Empty:
-    """An empty class."""
-
-    pass
-
-
-
 class QMException(Exception):
     """An exception generated directly by QM.
 
@@ -77,26 +70,6 @@
 
 
 
-class MutexError(QMException):
-    """A problem occurred with a mutex."""
-
-    pass
-
-
-
-class MutexLockError(QMException):
-    """A lock was not obtained on the mutex."""
-
-    pass
-
-
-
-class ConfigurationError(QMException):
-
-    pass
-
-
-
 class UserError(QMException):
 
     pass
@@ -588,18 +561,6 @@
         return object
 
 
-def indent_lines(text, indent):
-    """Indent each line of 'text' by 'indent' spaces."""
-
-    indentation = ' ' * indent
-    # Break into lines.
-    lines = string.split(text, "\n")
-    # Indent each.
-    lines = map(lambda line, ind=indentation: ind + line, lines)
-    # Rejoin.
-    return string.join(lines, "\n")
-
-
 def wrap_lines(text, columns=72, break_delimiter="\\", indent=""):
     """Wrap lines in 'text' to 'columns' columns.
 
@@ -918,12 +879,6 @@
 
 # The next number to be used when handing out unqiue tag strings.
 _unique_tag = 0
-
-# The string types available in this implementation of Python.
-try:
-    string_types = (types.StringType, types.UnicodeType)
-except AttributeError:
-    string_types = (types.StringType,)
 
 ########################################################################
 # Local Variables:
Index: qm/fields.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/fields.py,v
retrieving revision 1.82
retrieving revision 1.83
diff -u -r1.82 -r1.83
--- qm/fields.py	5 Feb 2004 06:29:11 -0000	1.82
+++ qm/fields.py	12 Feb 2004 07:44:49 -0000	1.83
@@ -646,7 +646,7 @@
 
     def Validate(self, value):
 
-        if not isinstance(value, qm.common.string_types):
+        if not isinstance(value, types.StringTypes):
             raise ValueError, value
         
         # Clean up unless it's a verbatim string.
@@ -1062,7 +1062,7 @@
         # the set.
         contained_field = self.__contained
         element = 0
-	for element in xrange(int(request[name + "_count"])):
+        for element in xrange(int(request[name + "_count"])):
             element_name = name + "_%d" % element
             if not (action == "remove"
                     and request.get(element_name + "_remove") == "on"):
@@ -1073,7 +1073,7 @@
                 if r:
                     redisplay = 1
             element += 1
-	
+        
         # Remove entries from the request that might cause confusion
         # when the page is redisplayed.
         names = []
@@ -1535,8 +1535,8 @@
         if not default_value in enumerals and len(enumerals) > 0:
             default_value = enumerals[0]
         # Perform base class initialization.
-	super(EnumerationField, self).__init__(name, default_value, 
-					       **properties)
+        super(EnumerationField, self).__init__(name, default_value, 
+                                               **properties)
         # Remember the enumerals.
         self.__enumerals = enumerals
 
@@ -1571,7 +1571,7 @@
 
         # Store the name of the enumeral.
         return xmlutil.create_dom_text_element(document, "enumeral", 
-	                                       str(value))
+                                               str(value))
 
 
     ### Input methods.
Index: qm/test/result.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/result.py,v
retrieving revision 1.23
retrieving revision 1.24
diff -u -r1.23 -r1.24
--- qm/test/result.py	24 Nov 2003 14:06:09 -0000	1.23
+++ qm/test/result.py	12 Feb 2004 07:44:49 -0000	1.24
@@ -338,28 +338,28 @@
     # annotations.
     
     def __getitem__(self, key):
-        assert type(key) in qm.common.string_types
+        assert type(key) in types.StringTypes
         return self.__annotations[key]
 
 
     def __setitem__(self, key, value):
-        assert type(key) in qm.common.string_types
-        assert type(value) in qm.common.string_types
+        assert type(key) in types.StringTypes
+        assert type(value) in types.StringTypes
         self.__annotations[key] = value
 
 
     def __delitem__(self, key):
-        assert type(key) in qm.common.string_types
+        assert type(key) in types.StringTypes
         del self.__annotations[key]
 
 
     def get(self, key, default=None):
-        assert type(key) in qm.common.string_types
+        assert type(key) in types.StringTypes
         return self.__annotations.get(key, default)
 
 
     def has_key(self, key):
-        assert type(key) in qm.common.string_types
+        assert type(key) in types.StringTypes
         return self.__annotations.has_key(key)
 
 

From mark at codesourcery.com  Sat Feb 14 20:17:01 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Sat, 14 Feb 2004 12:17:01 -0800
Subject: [qmtest] [PATCH] A few more small cleanups
In-Reply-To: <20040214161814.GA10937@njs.ddts.net>
References: <20040214161814.GA10937@njs.ddts.net>
Message-ID: <402E823D.5030701@codesourcery.com>

Nathaniel Smith wrote:

> Okay to commit?

OK.

Can we stop importing the gzip module at this point?  (That tends not to 
get built with Python on some non-Linux platforms, so if we didn't need 
to import it we would make it a little easier for people to use QMTest.)

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From njs at pobox.com  Sun Feb 15 03:33:21 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Sat, 14 Feb 2004 19:33:21 -0800
Subject: [PATCH] Fix open_temporary_file_fd
Message-ID: <20040215033321.GA17639@njs.ddts.net>

Attached patch fixes regressions caused by changes to
open_temporary_file_fd.

Okay to apply?  Feels ugly, using the if there, but I guess the
function'll get ripped out entirely when we start assuming Python
2.3...

-- Nathaniel

-- 
.i dei jitfa fanmo xatra

This email may be read aloud.
-------------- next part --------------
? results.qmr
? qm/external/__init__.pyc
? qm/test/classes/dejagnu_tet_stream.py
? tests/regress/QMTest/regression_database.pyc
? tests/regress/QMTest/selftest.pyc
? tests/regress/tuple1/QMTest/tuple_test.pyc
? tests/results_files/QMTest/results_file_database.pyc
? tests/results_files/QMTest/results_file_test.pyc
Index: ChangeLog
===================================================================
RCS file: /home/qm/Repository/qm/ChangeLog,v
retrieving revision 1.603
diff -u -r1.603 ChangeLog
--- ChangeLog	15 Feb 2004 03:20:24 -0000	1.603
+++ ChangeLog	15 Feb 2004 03:28:07 -0000
@@ -1,9 +1,14 @@
 2004-02-14  Nathaniel Smith  <njs at codesourcery.com>
 
+	(open_temporary_file_fd): Pass suffix to mktemp() iff caller
+	provides suffix.
+	
+2004-02-14  Nathaniel Smith  <njs at codesourcery.com>
+
 	* qm/common.py (encode_data_as_text): Remove.
 	(decode_data_from_text): Likewise.
 	(format_byte_count): Likewise.
-	
+
 	(base64): Don't import.
 	(cPickle): Likewise.
 	(cStringIO): Likewise.
Index: qm/common.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/common.py,v
retrieving revision 1.83
diff -u -r1.83 common.py
--- qm/common.py	15 Feb 2004 03:20:24 -0000	1.83
+++ qm/common.py	15 Feb 2004 03:28:07 -0000
@@ -406,7 +406,11 @@
     returns -- A pair '(file_name, file_descriptor)' for the temporary
     file."""
 
-    file_name = tempfile.mktemp(suffix)
+    if suffix is not None:
+        file_name = tempfile.mktemp(suffix)
+    else:
+        file_name = tempfile.mktemp()
+        
     try:
         # Attempt to open the file.
         fd = os.open(file_name,

From mark at codesourcery.com  Sun Feb 15 20:38:38 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 15 Feb 2004 12:38:38 -0800
Subject: [qmtest] [PATCH] Fix open_temporary_file_fd
In-Reply-To: <20040215033321.GA17639@njs.ddts.net>
References: <20040215033321.GA17639@njs.ddts.net>
Message-ID: <402FD8CE.7090502@codesourcery.com>

Nathaniel Smith wrote:

> Attached patch fixes regressions caused by changes to
> open_temporary_file_fd.

Oh, bummer.  I only tested on Windows, as is clear.

> Okay to apply?  Feels ugly, using the if there, but I guess the
> function'll get ripped out entirely when we start assuming Python
> 2.3...

I'm disappointed that "mktemp" doesn't do the right thing with a "None"
argument.  Maybe using the empty string ("") as the default (instead of 
None) would be the right choice and avoid the conditional?

If that works, it's OK; if not, your original patch is OK.

Please apply it to the 2.1 branch as well as the mainline, since I put 
my patch in both places.

And, yes, at some point (perhaps 2.2) we'll require Python 2.3, and then 
we can just get rid of this stuff.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From njs at codesourcery.com  Mon Feb 16 06:31:16 2004
From: njs at codesourcery.com (Nathaniel Smith)
Date: Sun, 15 Feb 2004 22:31:16 -0800
Subject: [qmtest] [PATCH] Fix open_temporary_file_fd
In-Reply-To: <402FD8CE.7090502@codesourcery.com>
References: <20040215033321.GA17639@njs.ddts.net> <402FD8CE.7090502@codesourcery.com>
Message-ID: <20040216063116.GA1897@njs.ddts.net>

On Sun, Feb 15, 2004 at 12:38:38PM -0800, Mark Mitchell wrote:
> Nathaniel Smith wrote:
> 
> >Attached patch fixes regressions caused by changes to
> >open_temporary_file_fd.
> 
> Oh, bummer.  I only tested on Windows, as is clear.
> 
> >Okay to apply?  Feels ugly, using the if there, but I guess the
> >function'll get ripped out entirely when we start assuming Python
> >2.3...
> 
> I'm disappointed that "mktemp" doesn't do the right thing with a "None"
> argument.  Maybe using the empty string ("") as the default (instead of 
> None) would be the right choice and avoid the conditional?

Hmm, for some reason I was thinking that mktemp was documented to add
a "default suffix" rather than "no suffix", so I didn't do that.  But
I was wrong.  Applied with that change to both HEAD and
release-2-1-branch.

-- Nathaniel

-- 
When the flush of a new-born sun fell first on Eden's green and gold,
Our father Adam sat under the Tree and scratched with a stick in the mould;
And the first rude sketch that the world had seen was joy to his mighty heart,
Till the Devil whispered behind the leaves, "It's pretty, but is it Art?"
  -- The Conundrum of the Workshops, Rudyard Kipling


From mark at codesourcery.com  Mon Feb 16 07:04:00 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 15 Feb 2004 23:04:00 -0800
Subject: [qmtest] [PATCH] Fix open_temporary_file_fd
In-Reply-To: <20040216063116.GA1897@njs.ddts.net>
References: <20040215033321.GA17639@njs.ddts.net> <402FD8CE.7090502@codesourcery.com> <20040216063116.GA1897@njs.ddts.net>
Message-ID: <40306B60.2000906@codesourcery.com>


>Hmm, for some reason I was thinking that mktemp was documented to add
>a "default suffix" rather than "no suffix", so I didn't do that.  But
>I was wrong.  Applied with that change to both HEAD and
>release-2-1-branch.
>
Cool-o.

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From njs at codesourcery.com  Tue Feb 17 08:26:33 2004
From: njs at codesourcery.com (Nathaniel Smith)
Date: Tue, 17 Feb 2004 00:26:33 -0800
Subject: TimeField removal?
Message-ID: <20040217082633.GA25519@njs.ddts.net>

Currently QMTest has a field class "TimeField".  It is entirely unused
and untested in all test classes distributed with QMTest, uses a
strange time format with much grungy support code, and I can't really
think of any plausible use cases.

Does anyone actually use this code?  Does anyone object to its being
removed?  (Does anyone know if it even works?)

-- Nathaniel

-- 
When the flush of a new-born sun fell first on Eden's green and gold,
Our father Adam sat under the Tree and scratched with a stick in the mould;
And the first rude sketch that the world had seen was joy to his mighty heart,
Till the Devil whispered behind the leaves, "It's pretty, but is it Art?"
  -- The Conundrum of the Workshops, Rudyard Kipling


From mark at codesourcery.com  Tue Feb 17 10:16:52 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 17 Feb 2004 02:16:52 -0800
Subject: [qmtest] TimeField removal?
In-Reply-To: <20040217082633.GA25519@njs.ddts.net>
References: <20040217082633.GA25519@njs.ddts.net>
Message-ID: <4031EA14.9020700@codesourcery.com>

Nathaniel Smith wrote:

>Currently QMTest has a field class "TimeField".  It is entirely unused
>and untested in all test classes distributed with QMTest, uses a
>strange time format with much grungy support code, and I can't really
>think of any plausible use cases.
>
>Does anyone actually use this code?  Does anyone object to its being
>removed?  (Does anyone know if it even works?)
>
You can remove it if you want.  It came from something in QMTrack to do 
with allowing people to enter abbreviated times.

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From afunk at ll.mit.edu  Tue Feb 17 15:08:07 2004
From: afunk at ll.mit.edu (Andrew Funk)
Date: Tue, 17 Feb 2004 10:08:07 -0500
Subject: [qmtest] [PATCH] Fix open_temporary_file_fd
In-Reply-To: <402FD8CE.7090502@codesourcery.com>
Message-ID: <001801c3f567$d99345d0$7588229b@meriadoc>

Hi Mark,

Since I have only just started to use QMTest under Windows I am still
getting up to speed.  To get started, I downloaded the self-extracting
executable from the website and followed the instructions.  This
installed something in my C:\Python23\Scripts directory, separate from
the installation that I use under Linux.  What should be my procedure
for installing and running the latest CVS version under Windows?

Thanks,
Andy

-----Original Message-----
From: Mark Mitchell [mailto:mark at codesourcery.com] 
Sent: Sunday, February 15, 2004 3:39 PM
To: Nathaniel Smith
Cc: QMTest List
Subject: Re: [qmtest] [PATCH] Fix open_temporary_file_fd


Nathaniel Smith wrote:

> Attached patch fixes regressions caused by changes to 
> open_temporary_file_fd.

Oh, bummer.  I only tested on Windows, as is clear.

> Okay to apply?  Feels ugly, using the if there, but I guess the 
> function'll get ripped out entirely when we start assuming Python 
> 2.3...

I'm disappointed that "mktemp" doesn't do the right thing with a "None"
argument.  Maybe using the empty string ("") as the default (instead of 
None) would be the right choice and avoid the conditional?

If that works, it's OK; if not, your original patch is OK.

Please apply it to the 2.1 branch as well as the mainline, since I put 
my patch in both places.

And, yes, at some point (perhaps 2.2) we'll require Python 2.3, and then

we can just get rid of this stuff.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com




From mark at codesourcery.com  Tue Feb 17 17:47:48 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 17 Feb 2004 09:47:48 -0800
Subject: [qmtest] [PATCH] Fix open_temporary_file_fd
In-Reply-To: <001801c3f567$d99345d0$7588229b@meriadoc>
References: <001801c3f567$d99345d0$7588229b@meriadoc>
Message-ID: <403253C4.5010906@codesourcery.com>

Andrew Funk wrote:

>Hi Mark,
>
>Since I have only just started to use QMTest under Windows I am still
>getting up to speed.  To get started, I downloaded the self-extracting
>executable from the website and followed the instructions.  This
>installed something in my C:\Python23\Scripts directory, separate from
>the installation that I use under Linux.  What should be my procedure
>for installing and running the latest CVS version under Windows?
>
>  
>
You should be able to do a normal "./configure; make; make install" 
under Windows using Cygwin, but you want to make sure that the Python 
you're using is the non-Cygwin Python.

You can also use linux and do "python ./setup.py bdist_wininst" to build 
a new Windows-installer binary.  (That shold work under Windows too, 
actually).

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From mark at codesourcery.com  Wed Feb 18 11:05:14 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 18 Feb 2004 03:05:14 -0800
Subject: PATCH: Improve Windows file-not-found failure mode
Message-ID: <200402181105.i1IB5ERE028711@sirius.codesourcery.com>


When the file invoked by TimeoutExecutable did not exist, we got an
additional fault on Windows: the __monitor_thread had not been created
yet, and so we got an exception tried to join it.

Applied on the 2.1 branch and on the mainline.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2004-02-18  Mark Mitchell  <mark at codesourcery.com>

	* qm/executable.py (TimeoutExecutable.Run): Handle failure to
	locate the executable file robustly under Windows.

Index: qm/executable.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/executable.py,v
retrieving revision 1.22
diff -c -5 -p -r1.22 executable.py
*** qm/executable.py	24 Nov 2003 23:00:54 -0000	1.22
--- qm/executable.py	18 Feb 2004 11:00:03 -0000
*************** class TimeoutExecutable(Executable):
*** 498,521 ****
  
  
      def Run(self, arguments=[], environment = None, dir = None,
              path = None):
  
          # Run the process.
          try:
              status = super(TimeoutExecutable, self).Run(arguments,
                                                          environment,
                                                          dir,
                                                          path)
          finally:
              if self.__UseSeparateProcessGroupForChild():
                  # Clean up the monitoring program; it is no longer needed.
                  os.kill(-self._GetChildPID(), signal.SIGKILL)
!                 os.waitpid(self.__monitor_pid, 0)
              elif self.__timeout >= 0 and sys.platform == "win32":
                  # Join the monitoring thread.
!                 self.__monitor_thread.join()
                  
          return status
  
  
      def __UseSeparateProcessGroupForChild(self):
--- 498,528 ----
  
  
      def Run(self, arguments=[], environment = None, dir = None,
              path = None):
  
+         if self.__UseSeparateProcessGroupForChild():
+             self.__monitor_pid = None
+         elif self.__timeout >= 0 and sys.platform == "win32":
+             self.__monitor_thread = None
+             
          # Run the process.
          try:
              status = super(TimeoutExecutable, self).Run(arguments,
                                                          environment,
                                                          dir,
                                                          path)
          finally:
              if self.__UseSeparateProcessGroupForChild():
                  # Clean up the monitoring program; it is no longer needed.
                  os.kill(-self._GetChildPID(), signal.SIGKILL)
!                 if self.__monitor_pid is not None:
!                     os.waitpid(self.__monitor_pid, 0)
              elif self.__timeout >= 0 and sys.platform == "win32":
                  # Join the monitoring thread.
!                 if self.__monitor_thread is not None:
!                     self.__monitor_thread.join()
                  
          return status
  
  
      def __UseSeparateProcessGroupForChild(self):


From slowrey at nextone.com  Wed Feb 18 18:27:02 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Wed, 18 Feb 2004 13:27:02 -0500
Subject: CodeSourceDoc Link Broken
Message-ID: <4033AE76.9030907@nextone.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040218/df540d95/attachment.html>

From mark at codesourcery.com  Wed Feb 18 18:34:11 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 18 Feb 2004 10:34:11 -0800
Subject: [qmtest] CodeSourceDoc Link Broken
In-Reply-To: <4033AE76.9030907@nextone.com>
References: <4033AE76.9030907@nextone.com>
Message-ID: <4033B023.6060609@codesourcery.com>

Scott Lowrey wrote:

> The link for the HTML version of the QMTest manual at codesourcery.com 
> is returning an error.  I noticed the same error yesterday when I 
> clicked on a specific link within the doc set.  Now it appears to be 
> completely out of commission...?

The completely brokenness was a transient failure relating to the 2.1.1 
release.  That should be fixed.

If you see a specific link that is broken, let me know.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From njs at pobox.com  Thu Feb 19 01:27:10 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 18 Feb 2004 17:27:10 -0800
Subject: TET result stream
Message-ID: <20040219012710.GA31797@njs.ddts.net>

Wow, this was more annoying than I expected, but, here's what I think
is a working TET-emulating result stream[1].  The code feels a bit
grungy, but it's not obvious to me how to fix it up; it may be that
the TET journal format is just that grungy.  Anyway, comments and
review requested.

[1] http://tetworks.opengroup.org/

-- Nathaniel

-- 
"On arrival in my ward I was immediately served with lunch. `This is
what you ordered yesterday.' I pointed out that I had just arrived,
only to be told: `This is what your bed ordered.'"
  -- Letter to the Editor, The Times, September 2000
-------------- next part --------------
########################################################################
#
# File:   tet_stream.py
# Author: Nathaniel Smith
# Date:   2004-02-11
#
# Contents:
#   TETStream
#
# Copyright (c) 2004 by CodeSourcery, LLC.  All rights reserved. 
#
# For license terms see the file COPYING.
#
########################################################################

########################################################################
# Imports
########################################################################

from   dejagnu_test import DejaGNUTest
import qm.fields
import qm.common
from   qm.test.file_result_stream import FileResultStream
from   qm.test.result import Result
import time

########################################################################
# Classes
########################################################################

class TETStream(FileResultStream):
    """A 'TETStream' formats results as a TET journal.

    Provides special handling for 'DejaGNUTest' results.
    
    TET: http://tetworks.opengroup.org/
    TET journal format: see appendix C and D of
       http://tetworks.opengroup.org/documents/3.7/uguide.pdf

    """

    # TET result codes:
    PASS = (0, "PASS")
    FAIL = (1, "FAIL")
    UNRESOLVED = (2, "UNRESOLVED")
    NOTINUSE = (3, "NOTINUSE")
    UNSUPPORTED = (4, "UNSUPPORTED")
    UNTESTED = (5, "UNTESTED")
    UNINITIATED = (6, "UNINITIATED")
    NORESULT = (7, "NORESULT")


    def __init__(self, arguments):

        super(TETStream, self).__init__(arguments)
        
        self._start_time = "<unknown_start_time>"
        self._finish_time = "<unknown_finish_time>"
        self._aborted = False
        self._user = "<unknown_user>"
        self._version = "<unknown_version>"
        self._uname = "<unknown_uname>"
        self._settings = {}

        self._tcc_number = 0
        self._printed_initial_stuff = False
            
            
    def _WriteLine(self, code, data, comment):

        self.file.write("%i|%s|%s\n" % (code, data, comment))


    def _IsDejaGNUResult(self, result):

        for key in result.keys():
            if key.startswith(DejaGNUTest.RESULT_PREFIX):
                return True
        return False


    def _TETFormatTime(self, time_string):

        t = time.gmtime(qm.common.parse_time_iso(time_string))

        return (time.strftime("%H:%M:%S", t),
                time.strftime("%Y%m%d", t))


    def WriteAnnotation(self, key, value):

        if key == "qmtest.run.start_time":
            self._start_time, self._start_date \
                              = self._TETFormatTime(value)
        elif key == "qmtest.run.end_time":
            self._finish_time, self._finish_data \
                               = self._TETFormatTime(value)
        elif key == "qmtest.run.aborted" and value == "true":
            self._aborted = True
        elif key == "qmtest.run.user":
            self._user = value
        elif key == "qmtest.run.version":
            self._version = "qmtest-" + value
        elif key == "qmtest.run.uname":
            self._uname = value
        else:
            self._settings[key] = value


    def _WriteInitialStuff(self):

        if self._printed_initial_stuff:
            return

        # Test case controller start
        # 0 | version time date | who
        self._WriteLine(0,
                        "%s %s %s" % (self._version,
                                      self._start_time,
                                      self._start_date),
                        "User: " + qm.common.get_username())
        # Local system information
        # 5 | sysname nodename release version machine | text
        self._WriteLine(5, self._uname, "")
        # Local system configuration start
        # 20 | pathname mode | text
        self._WriteLine(20, "qmtest -1", "Config Start")
        for item in self._settings.iteritems():
            # Configuration variable setting
            # 30 || variable=value
            self._WriteLine(30, "", "%s=%s" % item)
        # Configuration end
        # 40 || text
        self._WriteLine(40, "", "Config End")
        
        self._printed_initial_stuff = True


    def WriteResult(self, result):

        self._WriteInitialStuff()
        if result.GetKind() == Result.TEST:
            self._tcc_number += 1
            if self._IsDejaGNUResult(result):
                self._WriteDejaGNUResult(result)
            else:
                self._WriteTestResult(result)
        else:
            # We have a resource result.
            self._WriteResourceResult(result)


    def _WriteTCStart(self, result):

        # Test case start
        # 10 | activity_number testcase_path time | invocable_components
        self._WriteLine(10,
                        "%i %s 00:00:00"
                        % (self._tcc_number, result.GetId()),
                        "")

    def _WriteResultAnnotations(self, result, seq_start=1):

        seqnum = seq_start
        for key, value in result.items():
            for line in value.split("\n"):
                # Test case information
                # 520 | activity_num tp_num context block sequence | text
                #
                # We always set 'tp_num' to zero, because annotations
                #   for us are associated with test cases, not test
                #   purposes.
                # 'context' is to distinguish text coming from different
                #   subprocesses making up the test purpose; it's
                #   generally the pid.  For us, it's always zero.
                # I do not know what 'block' is; it appears entirely
                #   undocumented, and the examples have it always set to
                #   one.
                # 'sequence' appears to be incremented for each line
                #   within a single test purpose and context.
                self._WriteLine(520,
                                "%i 0 0 1 %i" % (self._tcc_number, seqnum),
                                "%s: %s" % (key, line))
                seqnum += 1


    def _WriteDejaGNUResult(self, result):

        self._WriteTCStart(result)
        
        # Get the DejaGNU annotations in sorted order.
        keys = filter(lambda k: k.startswith(DejaGNUTest.RESULT_PREFIX),
                      result.keys())
        keys.sort(lambda k1, k2: cmp(int(k1[len(DejaGNUTest.RESULT_PREFIX):]),
                                     int(k2[len(DejaGNUTest.RESULT_PREFIX):])))

        self._WriteResultAnnotations(result)
                
        purpose = 1
        for k in keys:
            r = result[k]
            outcome = r[:r.find(":")]
            # Test purpose start
            # 200 | activity_number test_purpose_number time | text
            self._WriteLine(200,
                            "%i %i 00:00:00"
                            % (self._tcc_number, purpose),
                            "")
            outcome_num, outcome_name \
                         = { DejaGNUTest.PASS: self.PASS,
                             DejaGNUTest.XPASS: self.PASS,
                             DejaGNUTest.FAIL: self.FAIL,
                             DejaGNUTest.XFAIL: self.FAIL,
                             DejaGNUTest.WARNING: self.NORESULT,
                             DejaGNUTest.ERROR: self.NORESULT,
                             DejaGNUTest.UNTESTED: self.UNTESTED,
                             DejaGNUTest.UNRESOLVED: self.UNRESOLVED,
                             DejaGNUTest.UNSUPPORTED: self.UNSUPPORTED,
                           }[outcome]
            # Test purpose result
            # 220 | activity_number tp_number result time | result-name
            self._WriteLine(220,
                            "%i %i %i 00:00:00"
                            % (self._tcc_number, purpose, outcome_num),
                            outcome_name)
            if outcome == DejaGNUTest.WARNING:
                # Test case information
                # 520 | activity_num tp_num context block sequence | text
                # (see _WriteResultAnnotations for details)
                self._WriteLine(520,
                                "%i %i 0 1 1" % (self._tcc_number,
                                                 purpose),
                                "WARNING")
            if outcome == DejaGNUTest.ERROR:
                # Test case controller message
                # 50 || text describing problem
                # (see _WriteResultAnnotations for details)
                self._WriteLine(520,
                                "%i %i 0 1 1" % (self._tcc_number,
                                                 purpose),
                                "ERROR")

            purpose += 1
            
        # Test case end
        # 80 | activity_number completion_status time | text
        # I don't know what completion status means; it is zero in all of the
        # documented examples.
        self._WriteLine(80,
                        "%i 0 00:00:00" % self._tcc_number,
                        "")

            
    def _WriteTestResult(self, result):

        self._WriteTCStart(result)
        # Test purpose start
        # 200 | activity_number test_purpose_number time | text
        self._WriteLine(200, "%i 0 00:00:00" % self._tcc_number, "")

        outcome_num, outcome_name = { Result.FAIL: self.FAIL,
                                      Result.PASS: self.PASS,
                                      Result.UNTESTED: self.UNTESTED,
                                      Result.ERROR: self.NORESULT,
                                    }[result.GetOutcome()]
        # Test purpose result
        # 220 | activity_number tp_number result time | result-name
        self._WriteLine(220,
                        "%i 0 %i 00:00:00"
                        % (self._tcc_number, outcome_num),
                        outcome_name)

        if result.GetOutcome() == Result.ERROR:
            # Test case controller message
            # 50 || text describing problem
            # (see _WriteResultAnnotations for details)
            self._WriteLine(520,
                            "%i 0 0 1 1" % self._tcc_number,
                            "ERROR in test " + result.GetId())
            self._WriteResultAnnotations(result, 2)
        else:
            self._WriteResultAnnotations(result)

        # Test case end
        # 80 | activity_number completion_status time | text
        # I don't know what completion status means; it is zero in all of the
        # documented examples.
        self._WriteLine(80,
                        "%i 0 00:00:00" % self._tcc_number,
                        "")


    def _WriteResourceResult(self, result):

        if result.GetOutcome() in (Result.FAIL, Result.ERROR):
            if result.GetKind() == Result.RESOURCE_SETUP:
                verbing = "setting up"
            elif result.GetKind() == Result.RESOURCE_CLEANUP:
                verbing = "cleaning up"
            else:
                assert False, "Unexpected result kind"
            id = result.GetId()
            outcome = result.GetOutcome()
            # Test case controller message
            # 50 || text describing problem
            self._WriteLine(50, "", "Problem with %s resource %s: %s"
                                    % (verbing, id, outcome))

            for key, value in result.items():
                for line in value.split("\n"):
                    self._WriteLine(50, "", "%s: %s" % (key, line))


    def Summarize(self):

        self._WriteInitialStuff()
        
        if self._aborted:
            # User abort
            # 90 | time | text
            self._WriteLine(90, self._finish_time, "Aborted.")

        # Test case controller end
        # 900 | time | text
        self._WriteLine(900, self._finish_time, "Done.")

From afunk at ll.mit.edu  Thu Feb 19 14:36:46 2004
From: afunk at ll.mit.edu (Andrew Funk)
Date: Thu, 19 Feb 2004 09:36:46 -0500
Subject: [qmtest] [PATCH] Fix open_temporary_file_fd
In-Reply-To: <403253C4.5010906@codesourcery.com>
Message-ID: <001301c3f6f5$cd50c970$7588229b@meriadoc>

Hi Mark,

This brings up a number of questions for me, so I will try to be
organized:

1. How would I do a ./configure; make; make install with the target
being the C:\Python23\Lib\site-packages directory (if that's what you
mean)?  When I set the prefix under Linux to say /home/afunk/qm, it will
install to /home/afunk/qm/lib/python2.3/site-packages.  So it seems the
directory structures are different.

2. If I go with option 2, where is the Windows-installer binary created?
I ran the script but then didn't know what to do next.

3. I wanted to try reinstalling the stable release under Windows, so I
deleted what I thought were all the relevant folders under the
C:\Python23 directory, then re-ran the installation file.  It created
the qm tree under site-packages, but didn't put anything in the Scripts
directory this time..?  

4. As an alternative to building under Windows, I have my Linux
directories mounted under Windows, so I wonder if I could somehow point
the Windows qmtest.py script to use the Linux installation under
/home/afunk/qm/lib/python2.3/site-packages?

Thanks for your help,
Andy

-----Original Message-----
From: Mark Mitchell [mailto:mark at codesourcery.com] 
Sent: Tuesday, February 17, 2004 12:48 PM
To: Andrew Funk
Cc: 'Nathaniel Smith'; 'QMTest List'
Subject: Re: [qmtest] [PATCH] Fix open_temporary_file_fd


Andrew Funk wrote:

>Hi Mark,
>
>Since I have only just started to use QMTest under Windows I am still 
>getting up to speed.  To get started, I downloaded the self-extracting 
>executable from the website and followed the instructions.  This 
>installed something in my C:\Python23\Scripts directory, separate from 
>the installation that I use under Linux.  What should be my procedure 
>for installing and running the latest CVS version under Windows?
>
>  
>
You should be able to do a normal "./configure; make; make install" 
under Windows using Cygwin, but you want to make sure that the Python 
you're using is the non-Cygwin Python.

You can also use linux and do "python ./setup.py bdist_wininst" to build

a new Windows-installer binary.  (That shold work under Windows too, 
actually).

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com




From mark at codesourcery.com  Thu Feb 19 16:11:18 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 19 Feb 2004 08:11:18 -0800
Subject: [qmtest] [PATCH] Fix open_temporary_file_fd
In-Reply-To: <001301c3f6f5$cd50c970$7588229b@meriadoc>
References: <001301c3f6f5$cd50c970$7588229b@meriadoc>
Message-ID: <4034E026.3010804@codesourcery.com>

Andrew Funk wrote:

> Hi Mark,
> 
> This brings up a number of questions for me, so I will try to be
> organized:
> 
> 1. How would I do a ./configure; make; make install with the target
> being the C:\Python23\Lib\site-packages directory (if that's what you
> mean)?  When I set the prefix under Linux to say /home/afunk/qm, it will
> install to /home/afunk/qm/lib/python2.3/site-packages.  So it seems the
> directory structures are different.

Yes.  The Windows installer generated by Python's distutils does use a 
different directory layout.  It's not possible to replicate that with

   ./configure --prefix=...

You'd have to look at how distutils work to duplicate that.

You should be able to use the --prefix= approach on Windows, though; 
you'll just end up with a slightly different layout.

> 2. If I go with option 2, where is the Windows-installer binary created?
> I ran the script but then didn't know what to do next.

It is in the 'dist/' subdirectory.  Look for the .exe file.

> 3. I wanted to try reinstalling the stable release under Windows, so I
> deleted what I thought were all the relevant folders under the
> C:\Python23 directory, then re-ran the installation file.  It created
> the qm tree under site-packages, but didn't put anything in the Scripts
> directory this time..?  

It's possible that you confused it by manually removing the files rather 
than by going through the Control Panel to Add/Remove Programs.

There should be a Scripts\qmtest.py file when the new version is 
installed, but if not that might represent some kind of packaging 
problem.  I'll look into that.

> 4. As an alternative to building under Windows, I have my Linux
> directories mounted under Windows, so I wonder if I could somehow point
> the Windows qmtest.py script to use the Linux installation under
> /home/afunk/qm/lib/python2.3/site-packages?

You might be able to do that, indeed.  I'm not sure how well that might 
work.  You could also try just using the "qmtest" script that is 
installed on the GNU/Linux side.  There may be directory assumptions 
built into the code that are different for Windows vs. UNIX-like 
systems, but if there are, we might want to eliminate them.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From mark at codesourcery.com  Thu Feb 19 20:01:44 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 19 Feb 2004 12:01:44 -0800
Subject: [qmtest] TET result stream
In-Reply-To: <20040219012710.GA31797@njs.ddts.net>
References: <20040219012710.GA31797@njs.ddts.net>
Message-ID: <40351628.7030507@codesourcery.com>

Nathaniel Smith wrote:

> Wow, this was more annoying than I expected, but, here's what I think
> is a working TET-emulating result stream[1].  The code feels a bit
> grungy, but it's not obvious to me how to fix it up; it may be that
> the TET journal format is just that grungy.  Anyway, comments and
> review requested.

Nice work.

>     def _WriteInitialStuff(self):

Since this function is not an override (or, at least I don't *think* it 
is), it should have a doc string.  That goes for the other non-override 
functions as well.

>                         "%i %s 00:00:00"

As I mentioned on IRC, I'd like to see us use a valid time here.  I 
suggest extending QMTest to collect start/stop time for tests; I can see 
that being useful to other people as well.

>         # I don't know what completion status means; it is zero in all of the
>         # documented examples.

Let's not have the first person singular appear in comments.  One always 
wonders "who was I?" later.

You could just say "the completion status is zero in all of the 
documented examples".  But, we can also see if we can figure out how 
that is supposed to work.  I've updated our internal Wiki with the email 
address of the people to ask.

You can check it in without resolving that, though -- just fix up the 
other minor issues above.

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From njs at pobox.com  Fri Feb 20 07:37:55 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Thu, 19 Feb 2004 23:37:55 -0800
Subject: [qmtest] TET result stream
In-Reply-To: <20040219012710.GA31797@njs.ddts.net>
References: <20040219012710.GA31797@njs.ddts.net>
Message-ID: <20040220073755.GA18181@njs.ddts.net>

On Wed, Feb 18, 2004 at 05:27:10PM -0800, Nathaniel Smith wrote:
> Anyway, comments and review requested.

Oh, right, and another bit, added to common.py:

def parse_time_iso(time_string):
    """Parse a ISO8601-compliant formatted date and time.

    See also 'format_time_iso'.

    'time_string' -- The string to be parsed, as returned by
    e.g. 'format_time_iso'.

    returns -- The time as a float, like that returned by
    'time.time'."""

    return time.mktime(time.strptime(time_string, "%Y-%m-%dT%H:%M:%SZ"))

-- Nathaniel

-- 
Eternity is very long, especially towards the end.
  -- Woody Allen

This email may be read aloud.


From mark at codesourcery.com  Fri Feb 20 07:47:09 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 19 Feb 2004 23:47:09 -0800
Subject: [qmtest] TET result stream
In-Reply-To: <20040220073755.GA18181@njs.ddts.net>
References: <20040219012710.GA31797@njs.ddts.net> <20040220073755.GA18181@njs.ddts.net>
Message-ID: <4035BB7D.5010601@codesourcery.com>

Nathaniel Smith wrote:

>On Wed, Feb 18, 2004 at 05:27:10PM -0800, Nathaniel Smith wrote:
>  
>
>>Anyway, comments and review requested.
>>    
>>
>
>Oh, right, and another bit, added to common.py:
>
Okie-dokie.

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From njs at pobox.com  Fri Feb 20 09:22:47 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 20 Feb 2004 01:22:47 -0800
Subject: [qmtest] TET result stream
In-Reply-To: <40351628.7030507@codesourcery.com>
References: <20040219012710.GA31797@njs.ddts.net> <40351628.7030507@codesourcery.com>
Message-ID: <20040220092247.GB32725@njs.ddts.net>

On Thu, Feb 19, 2004 at 12:01:44PM -0800, Mark Mitchell wrote:
> Nathaniel Smith wrote:
> >                        "%i %s 00:00:00"
> 
> As I mentioned on IRC, I'd like to see us use a valid time here.  I 
> suggest extending QMTest to collect start/stop time for tests; I can see 
> that being useful to other people as well.

Hmm, okay.  The thought had occurred to me, but I figured you wouldn't
like the size increase in results files -- a bit over 40 bytes per
result -- based on some conversations we had a while ago when I was
hacking on the pickle format.  This adds more functionality, of
course...

Patch attached for review.

Question: current patch assumes that dejagnu subtests all start and
end simultaneously with their containing test.  I know this is true
for the compiler tests, where subtests are basically different ways
of scanning compiler output, but if it's not true in general than I'd
rather lie obviously then lie subtly... (i.e., switch back to using
00:00:00 for purpose start/end times, so it's obvious that the times
can't be trusted).

> >        # I don't know what completion status means; it is zero in all of 
> >        the
> >        # documented examples.
> 
> Let's not have the first person singular appear in comments.  One always 
> wonders "who was I?" later.

Gah, someday, I (Nathaniel Smith <njs at pobox.com>) will remember this
rule.

-- Nathaniel

-- 
"But in Middle-earth, the distinct accusative case disappeared from
the speech of the Noldor (such things happen when you are busy
fighting Orcs, Balrogs, and Dragons)."
-------------- next part --------------
? results.qmr
? qm/external/__init__.pyc
? tests/regress/QMTest/regression_database.pyc
? tests/regress/QMTest/selftest.pyc
? tests/regress/tuple1/QMTest/tuple_test.pyc
? tests/results_files/QMTest/results_file_database.pyc
? tests/results_files/QMTest/results_file_test.pyc
Index: ChangeLog
===================================================================
RCS file: /home/qm/Repository/qm/ChangeLog,v
retrieving revision 1.607
diff -u -r1.607 ChangeLog
--- ChangeLog	20 Feb 2004 07:51:31 -0000	1.607
+++ ChangeLog	20 Feb 2004 09:22:19 -0000
@@ -1,3 +1,20 @@
+2004-02-20  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/common.py (format_time_iso): Make argument default to
+	current time.
+	* qm/test/execution_engine.py (ExecutionEngine.Run): Don't pass
+	explicit argument to 'format_time_iso'.
+	(ExecutionEngine._WriteInitialAnnotations): Likewise.
+	
+	* qm/test/target.py (qm.common): Import.
+	(Target.RunTest): Record start and end times.
+
+	* qm/test/classes/tet_stream.py (TETStream._ExtractTime): New
+	function.
+	(TETStream._WriteTCStart): Use it.
+	(TETStream._WriteDejaGNUResult): Likewise.
+	(TETStream._WriteTestResult): Likewise.
+
 2004-02-19  Nathaniel Smith  <njs at codesourcery.com>
 
 	* qm/common.py (parse_time_iso): New function.
Index: qm/common.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/common.py,v
retrieving revision 1.85
diff -u -r1.85 common.py
--- qm/common.py	20 Feb 2004 07:48:56 -0000	1.85
+++ qm/common.py	20 Feb 2004 09:22:19 -0000
@@ -556,7 +556,7 @@
            "%(hour)02d:%(minute)02d %(time_zone)s" % locals()
 
 
-def format_time_iso(time_secs):
+def format_time_iso(time_secs=None):
     """Generate a ISO8601-compliant formatted date and time.
 
     The output is in the format "YYYY-MM-DDThh:mm:ss+TZ", where TZ is
@@ -565,10 +565,13 @@
     sorting behaviour.
 
     'time_secs' -- The time to be formatted, as returned by
-    e.g. 'time.time()'.
+    e.g. 'time.time()'.  If 'None' (the default), uses the current
+    time.
 
     returns -- The formatted time as a string."""
 
+    if time_secs is None:
+        time_secs = time.time()
     return time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime(time_secs))
 
 
Index: qm/test/execution_engine.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/execution_engine.py,v
retrieving revision 1.26
diff -u -r1.26 execution_engine.py
--- qm/test/execution_engine.py	12 Feb 2004 06:19:08 -0000	1.26
+++ qm/test/execution_engine.py	20 Feb 2004 09:22:20 -0000
@@ -294,7 +294,7 @@
             
             # Let all of the result streams know that the test run is
             # complete.
-            end_time_str = qm.common.format_time_iso(time.time())
+            end_time_str = qm.common.format_time_iso()
             for rs in self.__result_streams:
                 rs.WriteAnnotation("qmtest.run.end_time", end_time_str)
                 rs.Summarize()
@@ -814,7 +814,7 @@
     def _WriteInitialAnnotations(self):
 
         # Calculate annotations.
-        start_time_str = qm.common.format_time_iso(time.time())
+        start_time_str = qm.common.format_time_iso()
 
         try:
             username = qm.common.get_username()
Index: qm/test/result.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/result.py,v
retrieving revision 1.24
diff -u -r1.24 result.py
--- qm/test/result.py	12 Feb 2004 07:44:49 -0000	1.24
+++ qm/test/result.py	20 Feb 2004 09:22:20 -0000
@@ -106,6 +106,8 @@
     RESOURCE = "qmtest.resource"
     TARGET = "qmtest.target"
     TRACEBACK = "qmtest.traceback"
+    START_TIME = "qmtest.start_time"
+    END_TIME = "qmtest.end_time"
     
     # Other class variables.
 
Index: qm/test/target.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/target.py,v
retrieving revision 1.23
diff -u -r1.23 target.py
--- qm/test/target.py	13 Nov 2003 04:24:43 -0000	1.23
+++ qm/test/target.py	20 Feb 2004 09:22:20 -0000
@@ -18,6 +18,7 @@
 ########################################################################
 
 import qm
+import qm.common
 import qm.extension
 import qm.platform
 from   qm.test.context import *
@@ -211,8 +212,14 @@
             self.__SetUpResources(descriptor, context)
             # Make the ID of the test available.
             context[context.ID_CONTEXT_PROPERTY] = descriptor.GetId()
+            # Note the start time.
+            result[Result.START_TIME] = qm.common.format_time_iso()
             # Run the test.
-            descriptor.Run(context, result)
+            try:
+                descriptor.Run(context, result)
+            finally:
+                # Note the end time.
+                result[Result.END_TIME] = qm.common.format_time_iso()
         except KeyboardInterrupt:
             result.NoteException(cause = "Interrupted by user.")
             # We received a KeyboardInterrupt, indicating that the
Index: qm/test/classes/tet_stream.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/classes/tet_stream.py,v
retrieving revision 1.1
diff -u -r1.1 tet_stream.py
--- qm/test/classes/tet_stream.py	20 Feb 2004 07:48:57 -0000	1.1
+++ qm/test/classes/tet_stream.py	20 Feb 2004 09:22:20 -0000
@@ -93,6 +93,15 @@
                 time.strftime("%Y%m%d", t))
 
 
+    def _ExtractTime(self, result, key):
+        """Extracts the start time from a result."""
+
+        if result.has_key(key):
+            return self._TETFormatTime(result[key])[0]
+        else:
+            return "00:00:00"
+
+
     def WriteAnnotation(self, key, value):
 
         if key == "qmtest.run.start_time":
@@ -164,10 +173,10 @@
 
         # Test case start
         # 10 | activity_number testcase_path time | invocable_components
-        self._WriteLine(10,
-                        "%i %s 00:00:00"
-                        % (self._tcc_number, result.GetId()),
-                        "")
+        started = self._ExtractTime(result, Result.START_TIME)
+        data = "%i %s %s" % (self._tcc_number, result.GetId(), started)
+        self._WriteLine(10, data, "")
+
 
     def _WriteResultAnnotations(self, result, seq_start=1):
         """Writes out annotations for a 'result' in TET format.
@@ -216,6 +225,9 @@
 
         self._WriteResultAnnotations(result)
                 
+        start_time = self._ExtractTime(result, Result.START_TIME)
+        end_time = self._ExtractTime(result, Result.END_TIME)
+
         purpose = 1
         for k in keys:
             r = result[k]
@@ -223,8 +235,8 @@
             # Test purpose start
             # 200 | activity_number test_purpose_number time | text
             self._WriteLine(200,
-                            "%i %i 00:00:00"
-                            % (self._tcc_number, purpose),
+                            "%i %i %s"
+                            % (self._tcc_number, purpose, start_time),
                             "")
             outcome_num, outcome_name \
                          = { DejaGNUTest.PASS: self.PASS,
@@ -239,10 +251,12 @@
                            }[outcome]
             # Test purpose result
             # 220 | activity_number tp_number result time | result-name
-            self._WriteLine(220,
-                            "%i %i %i 00:00:00"
-                            % (self._tcc_number, purpose, outcome_num),
-                            outcome_name)
+            data = "%i %i %i %s" % (self._tcc_number,
+                                    purpose,
+                                    outcome_num,
+                                    end_time)
+            self._WriteLine(220, data, outcome_name)
+            
             if outcome == DejaGNUTest.WARNING:
                 # Test case information
                 # 520 | activity_num tp_num context block sequence | text
@@ -267,7 +281,7 @@
         # "completion status" appears undocumented; it is zero in all of
         # the documented examples.
         self._WriteLine(80,
-                        "%i 0 00:00:00" % self._tcc_number,
+                        "%i 0 %s" % (self._tcc_number, end_time),
                         "")
 
             
@@ -277,7 +291,9 @@
         self._WriteTCStart(result)
         # Test purpose start
         # 200 | activity_number test_purpose_number time | text
-        self._WriteLine(200, "%i 0 00:00:00" % self._tcc_number, "")
+        start_time = self._ExtractTime(result, Result.START_TIME)
+        data = "%i 0 %s" % (self._tcc_number, start_time)
+        self._WriteLine(200, data, "")
 
         outcome_num, outcome_name = { Result.FAIL: self.FAIL,
                                       Result.PASS: self.PASS,
@@ -286,10 +302,9 @@
                                     }[result.GetOutcome()]
         # Test purpose result
         # 220 | activity_number tp_number result time | result-name
-        self._WriteLine(220,
-                        "%i 0 %i 00:00:00"
-                        % (self._tcc_number, outcome_num),
-                        outcome_name)
+        end_time = self._ExtractTime(result, Result.END_TIME)
+        data = "%i 0 %i %s" % (self._tcc_number, outcome_num, end_time)
+        self._WriteLine(220, data, outcome_name)
 
         if result.GetOutcome() == Result.ERROR:
             # Test case controller message
@@ -307,7 +322,7 @@
         # "completion status" appears undocumented; it is zero in all of
         # the documented examples.
         self._WriteLine(80,
-                        "%i 0 00:00:00" % self._tcc_number,
+                        "%i 0 %s" % (self._tcc_number, end_time),
                         "")
 
 

From mark at codesourcery.com  Fri Feb 20 09:31:28 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 20 Feb 2004 01:31:28 -0800
Subject: [qmtest] TET result stream
In-Reply-To: <20040220092247.GB32725@njs.ddts.net>
References: <20040219012710.GA31797@njs.ddts.net> <40351628.7030507@codesourcery.com> <20040220092247.GB32725@njs.ddts.net>
Message-ID: <4035D3F0.6030809@codesourcery.com>

Nathaniel Smith wrote:

>On Thu, Feb 19, 2004 at 12:01:44PM -0800, Mark Mitchell wrote:
>  
>
>>Nathaniel Smith wrote:
>>    
>>
>>>                       "%i %s 00:00:00"
>>>      
>>>
>>As I mentioned on IRC, I'd like to see us use a valid time here.  I 
>>suggest extending QMTest to collect start/stop time for tests; I can see 
>>that being useful to other people as well.
>>    
>>
>
>Hmm, okay.  The thought had occurred to me, but I figured you wouldn't
>like the size increase in results files -- a bit over 40 bytes per
>result -- based on some conversations we had a while ago when I was
>hacking on the pickle format.  This adds more functionality, of
>course...
>  
>
Yes.  I'm starting to conclude that either (a) users should not mind 
having giant results files, or (b) they should use something like the 
SQL interface you worked on to store the data on a big old pile of disks 
somewhere, or (c) not run too many tests. :-)

>Patch attached for reviews.
>  
>
OK, check it in.

>Question: current patch assumes that dejagnu subtests all start and
>end simultaneously with their containing test.  I know this is true
>for the compiler tests, where subtests are basically different ways
>of scanning compiler output, but if it's not true in general than I'd
>rather lie obviously then lie subtly... (i.e., switch back to using
>00:00:00 for purpose start/end times, so it's obvious that the times
>can't be trusted).
>  
>
I'm afraid that something like 00:00:00 will (a) be coincidentally right 
twice a day, and (b) result in the appearance that time is going 
backwards for some tool, with corresponding weird behavior.  The subtle 
lie is at least logically consistent.

I'd not sweat this detail too much -- we can cross this bridge when we 
have tons of users running old non-compiler DejaGNU tests with the Tet 
output format.  Note that I do say "when", not "if", because it is 
obvious that this will in fact become a dominant use case for QMTest. :-)

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From njs at pobox.com  Fri Feb 20 10:13:45 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 20 Feb 2004 02:13:45 -0800
Subject: [qmtest] TET result stream
In-Reply-To: <4035D3F0.6030809@codesourcery.com>
References: <20040219012710.GA31797@njs.ddts.net> <40351628.7030507@codesourcery.com> <20040220092247.GB32725@njs.ddts.net> <4035D3F0.6030809@codesourcery.com>
Message-ID: <20040220101345.GA26279@njs.ddts.net>

On Fri, Feb 20, 2004 at 01:31:28AM -0800, Mark Mitchell wrote:
> Nathaniel Smith wrote:
> >Patch attached for reviews.
> OK, check it in.

Done.

> >Question: current patch assumes that dejagnu subtests all start and
> >end simultaneously with their containing test.  I know this is true
> >for the compiler tests, where subtests are basically different ways
> >of scanning compiler output, but if it's not true in general than I'd
> >rather lie obviously then lie subtly... (i.e., switch back to using
> >00:00:00 for purpose start/end times, so it's obvious that the times
> >can't be trusted).
> >
> I'm afraid that something like 00:00:00 will (a) be coincidentally right 
> twice a day, and (b) result in the appearance that time is going 
> backwards for some tool, with corresponding weird behavior.  The subtle 
> lie is at least logically consistent.

Can't do much about (a).  Besides, if it's coincidentally right, then
what is there to complain about? :-)

(b) is fair enough, I suppose, but arguably you want your tool to do
weird stuff, because you might then notice that it's somehow depending
on invalid information.  But:

> I'd not sweat this detail too much -- we can cross this bridge when we 
> have tons of users running old non-compiler DejaGNU tests with the Tet 
> output format.  Note that I do say "when", not "if", because it is 
> obvious that this will in fact become a dominant use case for QMTest. :-)

Right.  It's such a compelling combination, in fact, that I predict
many people will start writing non-compiler DejaGNU tests emulated
under QMTest just so they can use my wonderful new output mode.

-- Nathaniel

-- 
When the flush of a new-born sun fell first on Eden's green and gold,
Our father Adam sat under the Tree and scratched with a stick in the mould;
And the first rude sketch that the world had seen was joy to his mighty heart,
Till the Devil whispered behind the leaves, "It's pretty, but is it Art?"
  -- The Conundrum of the Workshops, Rudyard Kipling


From slowrey at nextone.com  Fri Feb 20 17:51:11 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Fri, 20 Feb 2004 12:51:11 -0500
Subject: HTTP Server Trouble
Message-ID: <4036490F.7060802@nextone.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040220/b4ddc081/attachment.html>

From njs at pobox.com  Fri Feb 20 20:14:56 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Fri, 20 Feb 2004 12:14:56 -0800
Subject: [qmtest] HTTP Server Trouble
In-Reply-To: <4036490F.7060802@nextone.com>
References: <4036490F.7060802@nextone.com>
Message-ID: <20040220201456.GB10181@njs.ddts.net>

On Fri, Feb 20, 2004 at 12:51:11PM -0500, Scott Lowrey wrote:
>    I'm using QMTest 2.1 on a RedHat 9 server with the following command line:
> 
>    qmtest gui --no-browser --port 8787 --address moondog
> 
>    The response is:
> 
>    QMTest running at http://moondog:8787/test/dir
> 
>    I can then connect to QMTest using a web browser on the same machine
>    (moondog).  Everything seems fine.

What address does moondog resolve to on your server?  Are you sure
that you don't have a "127.0.0.1 moondog" line in your /etc/hosts?
(Don't use 'host' to check, use 'ping' or something, because 'host'
won't look in /etc/hosts.)

If you want the GUI to be accessible from other computers, you have to
pass an external IP to the --address option.

Hope this helps,
-- Nathaniel

-- 
Details are all that matters; God dwells there, and you never get to
see Him if you don't struggle to get them right. -- Stephen Jay Gould


From slowrey at nextone.com  Fri Feb 20 22:48:37 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Fri, 20 Feb 2004 17:48:37 -0500
Subject: [qmtest] HTTP Server Trouble
In-Reply-To: <20040220201456.GB10181@njs.ddts.net>
References: <4036490F.7060802@nextone.com> <20040220201456.GB10181@njs.ddts.net>
Message-ID: <40368EC5.8020302@nextone.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040220/d30f093a/attachment.html>

From afunk at ll.mit.edu  Mon Feb 23 22:03:35 2004
From: afunk at ll.mit.edu (Andrew Funk)
Date: Mon, 23 Feb 2004 17:03:35 -0500
Subject: List test ids at command line?
Message-ID: <007601c3fa58$e28d1a30$7588229b@meriadoc>

Hi,

Is there a way to list all the test ids in a database from the qmtest
command line interface?  I realize this would essentially be a listing
of the directory tree, but for my application (generating tests at
runtime) it would be a helpful feature.  I think it will be simple for
me to implement but I thought I should check first in case it is already
in there.

Thanks,
Andy



From mark at codesourcery.com  Mon Feb 23 23:40:07 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 23 Feb 2004 15:40:07 -0800
Subject: [qmtest] List test ids at command line?
In-Reply-To: <007601c3fa58$e28d1a30$7588229b@meriadoc>
References: <007601c3fa58$e28d1a30$7588229b@meriadoc>
Message-ID: <403A8F57.1090307@codesourcery.com>

Andrew Funk wrote:

> Hi,
> 
> Is there a way to list all the test ids in a database from the qmtest
> command line interface?  I realize this would essentially be a listing
> of the directory tree, but for my application (generating tests at
> runtime) it would be a helpful feature.  I think it will be simple for
> me to implement but I thought I should check first in case it is already
> in there.

No, there's no way to do that.

Yes, that could be useful, but it would be much nicer if it would work 
as follows:

(1) Accept a --kind parameter that allows you to say what kind of 
extensions you want displayed (tests, suites, resources, etc.).  If no 
--kind parameter is displayed, show everything.

(2) Accept a series of optional arguments (e.g, "test1 
suite1.subsuite2") and show information only for those entities.  In 
other words, operate like "ls -R" with no arguments, and like "ls -R foo 
bar" for arguments "foo" and "bar".

You could call the new command "qmtest list".

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From njs at pobox.com  Tue Feb 24 06:55:53 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Mon, 23 Feb 2004 22:55:53 -0800
Subject: [PATCH] Fixes to qmtest_gcc
Message-ID: <20040224065553.GA16542@njs.ddts.net>

Attached patch collects a number of fixes to the qmtest_gcc module,
updating it to work with modern QMTest and modern gcc, fixing some
typoes, fixing some inconsistencies with DejaGNU output, etc.

-- Nathaniel

-- 
- Don't let your informants burn anything.
- Don't grow old.
- Be good grad students.
  -- advice of Murray B. Emeneau on the occasion of his 100th birthday
-------------- next part --------------
? MT
Index: compat_test.py
===================================================================
RCS file: /home/qm/Repository/qmtest_gcc/compat_test.py,v
retrieving revision 1.4
diff -u -r1.4 compat_test.py
--- compat_test.py	12 Jun 2003 23:43:00 -0000	1.4
+++ compat_test.py	24 Feb 2004 06:29:31 -0000
@@ -36,6 +36,9 @@
     the first match group gives special options that should be used to
     run the test-case."""
     
+    dejagnu_file_prefix = None
+    """The prefix a real DejaGNU test uses for its filenames."""
+
     def Run(self, context, result):
 
         self._SetUp(context)
@@ -59,6 +62,8 @@
         src3 = src1.replace("_main", "_y")
 
         temp_dir = context.GetTemporaryDirectory()
+        result["compat_test_dejagnu_prefix"] = self.dejagnu_file_prefix
+        result["compat_test_qmtest_prefix"] = temp_dir + os.path.sep
         obj1 = os.path.join(temp_dir, "main_tst.o")
         obj2_tst = os.path.join(temp_dir, "x_tst.o")
         obj2_alt = os.path.join(temp_dir, "x_alt.o")
@@ -211,12 +216,14 @@
 class GCCCompatTest(CompatTest, GCCTestBase):
     """A 'GPPCompatTest' emulates a GCC 'compat.exp' test."""
 
-    pass
+    dejagnu_file_prefix = "c_compat_"
 
 
 
 class GPPCompatTest(CompatTest, GPPTestBase):
     """A 'GPPCompatTest' emulates a G++ 'compat.exp' test."""
+
+    dejagnu_file_prefix = "cp_compat_"
 
     def _GetTargetEnvironment(self, context):
 
Index: debug_test.py
===================================================================
RCS file: /home/qm/Repository/qmtest_gcc/debug_test.py,v
retrieving revision 1.1
diff -u -r1.1 debug_test.py
--- debug_test.py	2 Jun 2003 21:08:50 -0000	1.1
+++ debug_test.py	24 Feb 2004 06:29:31 -0000
@@ -29,9 +29,7 @@
 ########################################################################
 
 class DebugInit(Resource, DejaGNUBase, GCCTestBase):
-    """A 'DebugInit' stores information for debugging tests.
-
-    Every G++ debugging test depends on a 'GPPDebugInit' resource."""
+    """A 'DebugInit' stores information for debugging tests."""
 
     OPTIONS_TAG = None
     """This context property indicates what debugging options are available.
Index: dg_pch_test.py
===================================================================
RCS file: /home/qm/Repository/qmtest_gcc/dg_pch_test.py,v
retrieving revision 1.2
diff -u -r1.2 dg_pch_test.py
--- dg_pch_test.py	6 Jun 2003 21:31:36 -0000	1.2
+++ dg_pch_test.py	24 Feb 2004 06:29:31 -0000
@@ -94,7 +94,7 @@
                 self._RecordDejaGNUOutcome(result,
                                            self.UNTESTED,
                                            self._name + " " + o)
-            message = self._name + " " + o + " assembly comparision"
+            message = self._name + " " + o + " assembly comparison"
             self._RecordDejaGNUOutcome(result, assembly_outcome, message)
 
 
Index: dg_tls_test.py
===================================================================
RCS file: /home/qm/Repository/qmtest_gcc/dg_tls_test.py,v
retrieving revision 1.1
diff -u -r1.1 dg_tls_test.py
--- dg_tls_test.py	6 Jun 2003 21:31:36 -0000	1.1
+++ dg_tls_test.py	24 Feb 2004 06:29:31 -0000
@@ -21,7 +21,6 @@
 from   gcc_dg_test import GCCDGTest
 from   gpp_dg_test import GPPDGTest
 from   gpp_test_base import GPPTestBase
-from   gpp_tls_init import GPPTLSInit
 from   qm.test.result import Result
 from   qm.test.resource import Resource
 import os
Index: gcc_database.py
===================================================================
RCS file: /home/qm/Repository/qmtest_gcc/gcc_database.py,v
retrieving revision 1.12
diff -u -r1.12 gcc_database.py
--- gcc_database.py	23 Jun 2003 06:34:04 -0000	1.12
+++ gcc_database.py	24 Feb 2004 06:29:31 -0000
@@ -18,12 +18,12 @@
 import fnmatch
 import os
 import qm
+import qm.test.base
 from   qm.attachment import Attachment, FileAttachmentStore
 from   qm.test.database import ResourceDescriptor, TestDescriptor
 from   qm.test.file_database import FileDatabase
 from   qm.test.directory_suite import DirectorySuite
 from   qm.test.runnable import Runnable
-from   qm.test.suite import Suite
 
 ########################################################################
 # Classes
@@ -163,12 +163,19 @@
 
     def GetSuite(self, suite_id):
 
+        suite_class = qm.test.base.get_extension_class(
+            "explicit_suite.ExplicitSuite", "suite", self)
+        extras = { suite_class.EXTRA_DATABASE: self,
+                   suite_class.EXTRA_ID: suite_id }
+        arguments = { "is_implicit": 1,
+                      "test_ids": [] }
+                   
         if suite_id == "g++":
-            return Suite(self, suite_id, implicit = 1,
-                         suite_ids = ["g++.dg", "g++.old-deja"])
+            arguments["suite_ids"] = ["g++.dg", "g++.old-deja"]
+            return suite_class(arguments, **extras)
         elif suite_id == "gcc":
-            return Suite(self, suite_id, implicit = 1,
-                         suite_ids = ["gcc.dg"])
+            arguments["suite_ids"] = ["gcc.dg"]
+            return suite_class(arguments, **extras)
 
         return super(GCCDatabase, self).GetSuite(suite_id)
                      
Index: gpp_init.py
===================================================================
RCS file: /home/qm/Repository/qmtest_gcc/gpp_init.py,v
retrieving revision 1.5
diff -u -r1.5 gpp_init.py
--- gpp_init.py	6 Jun 2003 21:31:36 -0000	1.5
+++ gpp_init.py	24 Feb 2004 06:29:31 -0000
@@ -76,7 +76,9 @@
 
         # Run "testsuite_flags" to figure out which -I options to use
         # when running tests.
-        command = [os.path.join(v3_directory, "testsuite_flags"),
+        command = [os.path.join(v3_directory,
+                                "scripts",
+                                "testsuite_flags"),
                    "--build-includes"]
         result["GPPInit.testsuite_flags_command"] \
             = "<pre>" + " ".join(command) + "</pre>"
Index: gpp_test_base.py
===================================================================
RCS file: /home/qm/Repository/qmtest_gcc/gpp_test_base.py,v
retrieving revision 1.1
diff -u -r1.1 gpp_test_base.py
--- gpp_test_base.py	2 Jun 2003 21:08:50 -0000	1.1
+++ gpp_test_base.py	24 Feb 2004 06:29:31 -0000
@@ -25,7 +25,7 @@
 class GPPTestBase(GCCTestBase):
     """A 'GPPTestBase' is a base for all G++ tests.
 
-    This class emulates functional in 'g++.exp' in the GCC
+    This class emulates functionality in 'g++.exp' in the GCC
     testsuite."""
 
     _language = "cplusplus"

From mark at codesourcery.com  Tue Feb 24 07:56:44 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 23 Feb 2004 23:56:44 -0800
Subject: [qmtest] [PATCH] Fixes to qmtest_gcc
In-Reply-To: <20040224065553.GA16542@njs.ddts.net>
References: <20040224065553.GA16542@njs.ddts.net>
Message-ID: <403B03BC.5030005@codesourcery.com>

Nathaniel Smith wrote:

> Attached patch collects a number of fixes to the qmtest_gcc module,
> updating it to work with modern QMTest and modern gcc, fixing some
> typoes, fixing some inconsistencies with DejaGNU output, etc.

Looks to be goodness.

Check it in!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From seefeld at sympatico.ca  Tue Feb 24 14:01:02 2004
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Tue, 24 Feb 2004 09:01:02 -0500
Subject: [qmtest] List test ids at command line?
References: <007601c3fa58$e28d1a30$7588229b@meriadoc> <403A8F57.1090307@codesourcery.com>
Message-ID: <a5dcf4f05305aef0521876604df9e109403b577e@Orthosoft.ca>

Mark Mitchell wrote:
> Andrew Funk wrote:
> 
>> Hi,
>>
>> Is there a way to list all the test ids in a database from the qmtest
>> command line interface?  I realize this would essentially be a listing
>> of the directory tree, but for my application (generating tests at
>> runtime) it would be a helpful feature.  I think it will be simple for
>> me to implement but I thought I should check first in case it is already
>> in there.
> 
> 
> No, there's no way to do that.
> 
> Yes, that could be useful, but it would be much nicer if it would work 
> as follows:
> 
> (1) Accept a --kind parameter that allows you to say what kind of 
> extensions you want displayed (tests, suites, resources, etc.).  If no 
> --kind parameter is displayed, show everything.
> 
> (2) Accept a series of optional arguments (e.g, "test1 
> suite1.subsuite2") and show information only for those entities.  In 
> other words, operate like "ls -R" with no arguments, and like "ls -R foo 
> bar" for arguments "foo" and "bar".
> 
> You could call the new command "qmtest list".
> 


I agree that such a listing would be nice. However I'm wondering about
the semantics: if - as I understood - I can refer to the same test via
different suites, wouldn't that imply that tests are listed multiple
times ?
Would that require some additional logic (or at least user-defined
policy) to know what to list ? Such as a 'primary' (or 'owning') suite ?

Regards,
		Stefan



From afunk at ll.mit.edu  Tue Feb 24 14:52:16 2004
From: afunk at ll.mit.edu (Andrew Funk)
Date: Tue, 24 Feb 2004 09:52:16 -0500
Subject: qmtest gui under Windows
Message-ID: <000001c3fae5$cbe4f360$7588229b@meriadoc>

Hi,

I am having trouble with the qmtest gui under Windows.  The same thing
happens with the stable release or the cvs version.  It could be a
problem with my proxy settings, although I am able to view directories
and run tests.  However, when I try to edit a test, for example by
clicking Environment->Add Another, it takes me to the URL
http://127.0.0.1:1046/test/submit-test and I get an error saying the
page cannot be displayed.

Under Linux when I do the same thing, it takes me to the same URL but in
this case it works as expected.

Any ideas?

Thanks,
Andy



From mark at codesourcery.com  Tue Feb 24 16:02:24 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 24 Feb 2004 08:02:24 -0800
Subject: [qmtest] List test ids at command line?
In-Reply-To: <a5dcf4f05305aef0521876604df9e109403b577e@Orthosoft.ca>
References: <007601c3fa58$e28d1a30$7588229b@meriadoc> <403A8F57.1090307@codesourcery.com> <a5dcf4f05305aef0521876604df9e109403b577e@Orthosoft.ca>
Message-ID: <403B7590.2000508@codesourcery.com>


> I agree that such a listing would be nice. However I'm wondering about
> the semantics: if - as I understood - I can refer to the same test via
> different suites, wouldn't that imply that tests are listed multiple
> times ?
> Would that require some additional logic (or at least user-defined
> policy) to know what to list ? Such as a 'primary' (or 'owning') suite ?

We've already got that, although it's not well-specified: the implicit 
directory suites are the ones that are "really there".

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From njs at pobox.com  Tue Feb 24 19:19:35 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Tue, 24 Feb 2004 11:19:35 -0800
Subject: [qmtest] List test ids at command line?
In-Reply-To: <a5dcf4f05305aef0521876604df9e109403b577e@Orthosoft.ca>
References: <007601c3fa58$e28d1a30$7588229b@meriadoc> <403A8F57.1090307@codesourcery.com> <a5dcf4f05305aef0521876604df9e109403b577e@Orthosoft.ca>
Message-ID: <20040224191935.GA10796@njs.ddts.net>

On Tue, Feb 24, 2004 at 09:01:02AM -0500, Stefan Seefeld wrote:
> I agree that such a listing would be nice. However I'm wondering about
> the semantics: if - as I understood - I can refer to the same test via
> different suites, wouldn't that imply that tests are listed multiple
> times ?

I'm not convinced this is a problem, off-hand.

~$ ls / / 
/:
bin/   cdrom/  etc/     home/  lost+found/  proc/  sbin/  usr/
boot/  dev/    floppy/  lib/   mnt/         root/  tmp/   var/

/:
bin/   cdrom/  etc/     home/  lost+found/  proc/  sbin/  usr/
boot/  dev/    floppy/  lib/   mnt/         root/  tmp/   var/
~$

-- Nathaniel

-- 
"Of course, the entire effort is to put oneself
 Outside the ordinary range
 Of what are called statistics."
  -- Stephan Spender


From seefeld at sympatico.ca  Tue Feb 24 19:26:14 2004
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Tue, 24 Feb 2004 14:26:14 -0500
Subject: [qmtest] List test ids at command line?
References: <007601c3fa58$e28d1a30$7588229b@meriadoc> <403A8F57.1090307@codesourcery.com> <a5dcf4f05305aef0521876604df9e109403b577e@Orthosoft.ca> <20040224191935.GA10796@njs.ddts.net>
Message-ID: <32280b09184a643665694f4ebe427baa403ba3f7@Orthosoft.ca>

Nathaniel Smith wrote:
> On Tue, Feb 24, 2004 at 09:01:02AM -0500, Stefan Seefeld wrote:
> 
>>I agree that such a listing would be nice. However I'm wondering about
>>the semantics: if - as I understood - I can refer to the same test via
>>different suites, wouldn't that imply that tests are listed multiple
>>times ?
> 
> 
> I'm not convinced this is a problem, off-hand.
> 
> ~$ ls / / 
> /:
> bin/   cdrom/  etc/     home/  lost+found/  proc/  sbin/  usr/
> boot/  dev/    floppy/  lib/   mnt/         root/  tmp/   var/
> 
> /:
> bin/   cdrom/  etc/     home/  lost+found/  proc/  sbin/  usr/
> boot/  dev/    floppy/  lib/   mnt/         root/  tmp/   var/
> ~$


sorry, I don't see your point. Could you elaborate ?
To clarify: My question was how to be able to obtain a listing
of all (unique) tests, i.e. how to avoid secondary associations
in the listing.

Stefan



From njs at pobox.com  Tue Feb 24 22:40:28 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Tue, 24 Feb 2004 14:40:28 -0800
Subject: [PATCH] Use maximal prefix matching in qmtest_gcc databases
Message-ID: <20040224224028.GA7015@njs.ddts.net>

See attached.

-- Nathaniel

-- 
"On arrival in my ward I was immediately served with lunch. `This is
what you ordered yesterday.' I pointed out that I had just arrived,
only to be told: `This is what your bed ordered.'"
  -- Letter to the Editor, The Times, September 2000
-------------- next part --------------
? maximal_prefix.py
Index: gcc_database.py
===================================================================
RCS file: /home/qm/Repository/qmtest_gcc/gcc_database.py,v
retrieving revision 1.13
diff -u -r1.13 gcc_database.py
--- gcc_database.py	24 Feb 2004 08:23:12 -0000	1.13
+++ gcc_database.py	24 Feb 2004 22:38:55 -0000
@@ -25,6 +25,8 @@
 from   qm.test.directory_suite import DirectorySuite
 from   qm.test.runnable import Runnable
 
+import maximal_prefix
+
 ########################################################################
 # Classes
 ########################################################################
@@ -54,53 +56,38 @@
             ),
         ]
     
-    __test_class_map = (
-        (os.path.join("gcc.c-torture", "compile"),
-         "gcc_dg_test.GCCCTortureCompileTest"),
-        (os.path.join("gcc.c-torture", "unsorted"),
-         "gcc_dg_test.GCCCTortureCompileTest"),
-        (os.path.join("gcc.dg", "compat"),
-         "compat_test.GCCCompatTest"),
-        (os.path.join("gcc.dg", "cpp", "trad"),
-         "gcc_dg_test.GCCDGCPPTradTest"),
-        (os.path.join("gcc.dg", "cpp"),
-         "gcc_dg_test.GCCDGCPPTest"),
-        (os.path.join("gcc.dg", "debug"),
-         "debug_test.GCCDGDebugTest"),
-        (os.path.join("gcc.dg", "format"),
-         "gcc_dg_test.GCCDGFormatTest"),
-        (os.path.join("gcc.dg", "noncompile"),
-         "gcc_dg_test.GCCDGNoncompileTest"),
-        (os.path.join("gcc.dg", "pch"),
-         "dg_pch_test.GCCDGPCHTest"),
-        (os.path.join("gcc.dg", "tls"),
-         "dg_tls_test.GCCDGTLSTest"),
-        (os.path.join("gcc.dg", "torture"),
-         "gcc_dg_test.GCCDGTortureTest"),
-        ("gcc.dg",
-         "gcc_dg_test.GCCDGTest"),
-        (os.path.join("g++.dg", "bprob"),
-         "gpp_profile_test.GPPProfileTest"),
-        (os.path.join("g++.dg", "tls"),
-         "dg_tls_test.GPPDGTLSTest"),
-        (os.path.join("g++.dg", "compat"),
-         "compat_test.GPPCompatTest"),
-        (os.path.join("g++.dg", "debug"),
-         "debug_test.GPPDGDebugTest"),
-        (os.path.join("g++.dg", "gcov"),
-         "gpp_gcov_test.GPPGCOVTest"),
-        (os.path.join("g++.dg", "pch"),
-         "dg_pch_test.GPPDGPCHTest"),
-        ("g++.dg",
-         "gpp_dg_test.GPPDGTest"),
-        ("g++.old-deja",
-         "gpp_old_deja_test.GPPOldDejaTest")
-        )
+    _j = os.path.join
+    __test_class_map = {
+        # GCC tests:
+        "gcc.dg": "gcc_dg_test.GCCDGTest",
+        _j("gcc.c-torture", "compile"):
+            "gcc_dg_test.GCCCTortureCompileTest",
+        _j("gcc.c-torture", "unsorted"):
+            "gcc_dg_test.GCCCTortureCompileTest",
+        _j("gcc.dg", "compat"): "compat_test.GCCCompatTest",
+        _j("gcc.dg", "cpp", "trad"): "gcc_dg_test.GCCDGCPPTradTest",
+        _j("gcc.dg", "cpp"): "gcc_dg_test.GCCDGCPPTest",
+        _j("gcc.dg", "debug"): "debug_test.GCCDGDebugTest",
+        _j("gcc.dg", "format"): "gcc_dg_test.GCCDGFormatTest",
+        _j("gcc.dg", "noncompile"): "gcc_dg_test.GCCDGNoncompileTest",
+        _j("gcc.dg", "pch"): "dg_pch_test.GCCDGPCHTest",
+        _j("gcc.dg", "tls"): "dg_tls_test.GCCDGTLSTest",
+        _j("gcc.dg", "torture"): "gcc_dg_test.GCCDGTortureTest", 
+        # G++ tests:
+        "g++.dg": "gpp_dg_test.GPPDGTest",
+        _j("g++.dg", "bprob"): "gpp_profile_test.GPPProfileTst",
+        _j("g++.dg", "tls"): "dg_tls_test.GPPDGTLSTet",
+        _j("g++.dg", "compat"): "compat_test.GPPCompatTest",
+        _j("g++.dg", "debug"): "debug_test.GPPDGDebugTest",
+        _j("g++.dg", "gcov"): "gpp_gcov_test.GPPGCOVTest",
+        _j("g++.dg", "pch"): "dg_pch_test.GPPDGPCHTest",
+        "g++.old-deja": "gpp_old_deja_test.GPPOldDejaTest"
+        }
     """A map from test name prefixes to test classes.
 
     The databases determines which test class to use for a particular
-    test by scanning this list.  The test class used is the one
-    associated with the first matching prefix."""
+    test by finding the longest entry in this table which is a prefix of
+    the test's filename."""
 
     def __init__(self, path, arguments):
 
@@ -108,6 +95,9 @@
         super(GCCDatabase, self).__init__(path, arguments)
         # Create an attachment store.
         self.__store = FileAttachmentStore()
+        # Create the prefix matcher.
+        self.__matcher = maximal_prefix.MaximalPrefixMatcher()
+        self.__matcher.add(self.__test_class_map)
 
         
     def GetResource(self, resource_id):
@@ -184,9 +174,8 @@
 
         # Figure out which test class to use.
         p = path[len(self.GetRoot()) + 1:]
-        for prefix, test_class in self.__test_class_map:
-            if p.startswith(prefix):
-                break
+        prefix = self.__matcher[p]
+        test_class = self.__test_class_map[prefix]
 
         # Construct the attachment representing the primary source
         # file.
-------------- next part --------------
########################################################################
#
# File:   maximal_prefix.py
# Author: Nathaniel Smith
# Date:   2003-06-09
#
# Contents:
#   MaximalPrefixMatcher
#
# Copyright (c) 2003 by CodeSourcery, LLC.  All rights reserved. 
#
# For license terms see the file COPYING.
#
########################################################################

########################################################################
# Classes
########################################################################

_INFINITY = 0x20000000
"""For purposes of this file, this is a sufficiently close
approximation to infinity.  (The highest possible Unicode code point
is 0x10ffffff, which is smaller.)  Used for the upper bound
markers."""

_MINUS_ZERO = -1
"""A number smaller than the smallest possible Unicode code point,
used for search keys."""

_MINUS_INFINITY = -10
"""A number smaller than the smallest possible Unicode code point and
also smaller than _MINUS_ZERO, used for the lower bound markers."""

class MaximalPrefixMatcher(object):
    """Given a string, finds the maximal prefix from some set.

    Builds a database of prefixes, and then given a string returns the
    longest prefix in our database that is a prefix of the given
    string.  For example:

        >>> m = MaximalPrefixMatcher(["foo", "foobar", "quux"])
        >>> m["foobarbaz"]
        'foobar'
        >>> m["fooba"]
        'foo'
        >>> m["foo"]
        'foo'
        >>> m["fo"]
        Traceback (most recent call last):
          File "<stdin>", line 1, in ?
          File "maximal_prefix.py", line 206, in match
            raise KeyError, string
        KeyError: 'fo'

    Algorithm based on Lampson, Srinivasan and Varghese 1998 [1].  This
    code will make much more sense if you read their paper first.
    'match' operates in (both worst and average case) O(log_2 N) time,
    where N is the total number of prefixes.  Initialization and 'add'
    are both O(N).  (Adding multiple prefixes is just as cheap as adding
    a single prefix, though; if necessary this class could be made to
    batch prefix adds).

    Their algorithm operates over bitstrings, and requires each leaf
    node to hold two possible values (one if the query matches the leaf
    exactly, one if it does not).  We operate over strings, but there's
    no good way to write down maximal/minimal strings starting with a
    given prefix, so for keys we unpack each string into a tuple of
    integers, and then append a marker integer at the end.  There are
    three marker integers, chosen so that for any string,
       lower_marker(string) < query(string) < upper_marker(string)
    .  Because we have strict inequality, we don't need to track
    multiple values per leaf node; queries never match leafs exactly.

    [1] Lampson, Srinivasan and Varghese 1998, IP Lookups using Multiway
    and Multicolumn Search, in IEEE/ACM Transactions on Networking.
    http://wustl.edu/~varghese/PAPERS/bsearch.ps.Z or
    http://citeseer.nj.nec.com/95678.html .

    """

    def __init__(self, prefixes=[]):
        """Create a MaximalPrefixMatcher.

        'prefixes' - A sequence containing the initial list of prefixes
        to match against, as if provided to 'add'."""

        self._prefixes = tuple(prefixes)
        self._rebuild()


    def add(self, prefixes):
        """Add a sequence of prefixes to be matched against."""
        
        # Optimization note: it might make sense to call _rebuild()
        # lazily, i.e., batch up add()s until a call to match; this
        # makes multiple sequential calls to add() essentially free.
        self._prefixes = self._prefixes + tuple(prefixes)
        self._rebuild()


    def _str2key(self, string, marker):
        """Converts a string to our internal key type."""

        # Optimization note: could make this more space-efficient by
        # returning an array.array instead of a tuple.
        lst = map(ord, string)
        lst.append(marker)
        return tuple(lst)


    def _rebuild(self):
        """Rebuilds the prefix lookup tree.

        Must be called after any modifications to '_prefixes'."""

        # Tree structure does not make sense for the empty prefix list,
        # so we special-case it.
        if not self._prefixes:
            return

        # Optimization note: could make the sort() and munging much
        # cheaper by keeping the old munged_nodes list around rather
        # than reconstructing it from scratch on each insert; Python's
        # sort() is very efficient on almost-sorted data.
        def munge_low(prefix):
            return (self._str2key(prefix, _MINUS_INFINITY), 1, prefix)
        def munge_high(prefix):
            return (self._str2key(prefix, _INFINITY), 0, prefix)
        munged_nodes = map(munge_low, self._prefixes)
        munged_nodes += map(munge_high, self._prefixes)
        munged_nodes.sort()

        leaf_nodes = []
        stack = []
        for key, low, prefix in munged_nodes:
            # If we get to a node, it means we are less than it,
            # except for the far rightmost node.  But that special
            # case is handled in match().
            if low:
                # If the node is a low end of the range, then we're
                # outside the range, and into the next range out.  If
                # the node marks an outermost range, then we're
                # outside all ranges.
                if stack: value = stack[-1]
                else: value = None
                stack.append(prefix)
            else:
                was = stack.pop()
                if was != prefix:
                    raise Exception, "Bug: %s != %s" % (was, prefix)
                # If the node is a high end of the range, then we're
                # inside the range.
                value = prefix
            # Tuple: key, leafp, value
            leaf_nodes.append((key, 1, value))

        # Now build a tree of tuples from a bunch of leaf nodes.
        def tree(lst):
            "Returns (tree, maximal key)."
            if len(lst) == 1:
                return (lst[0], lst[0][0])
            midpoint = len(lst) // 2
            (left, left_max) = tree(lst[:midpoint])
            (right, right_max) = tree(lst[midpoint:])
            # < key goes to left, > key goes to right
            key = left_max
            # Tuple: key, leafp, left, right
            node = (key, 0, left, right)
            return (node, right_max)

        self._tree = tree(leaf_nodes)[0]

    def _print_tree(self, tree, indent_incr=4):
        """Prints a prefix tree for debugging."""

        def do_print(t, indent):
            if t[1]:
                (key, leafp, value) = t
                print (" " * indent + "Leaf node: " + repr(key) +
                       " for " + repr(value))
            else:
                (key, leafp, left, right) = t
                print " " * indent + "Node: " + repr(key)
                print " " * indent + "Left: "
                do_print(left, indent + indent_incr)
                print " " * indent + "Right: "
                do_print(right, indent + indent_incr)
        do_print(tree, 0)

    def match(self, string):
        """Finds the maximal prefix for the given string.

        Raises a 'KeyError' if there is no matching prefix.
        
        returns - The maximal prefix as a string."""

        # Tree structure does not make sense for the empty prefix list,
        # so we special-case it.
        if not self._prefixes:
            raise KeyError, string

        query = self._str2key(string, _MINUS_ZERO)
        node = self._tree
        while not node[1]:  # not a leaf
            if query > node[0]: # if we're strictly bigger...
                node = node[3]  # ...go right,
            else:               # otherwise...
                node = node[2]  # ...go left.
        # Got a leaf node, return its value.
        # The nodes are built so that node[2] is the correct value for
        # a query that is (slightly) less than node[0].  This is
        # always true if we get here, unless we are at the far
        # rightmost node, in which case we also collect all queries
        # that are bigger than anything.  We handle these queries as a
        # special case; they always have no prefix.
        if query < node[0]:
            prefix = node[2]
            if prefix is None:
                raise KeyError, string
            return prefix
        else:
            raise KeyError, string

    __getitem__ = match
    """Can be used as a dict mapping strings to their maximal prefix."""



########################################################################
# PyUnit tests
########################################################################

import unittest

class _MaximalPrefixMatcherTest(unittest.TestCase):
    def setUp(self):
        self.prefixes = ["foo", "bar", "foobar", "foobaz", "barbaz"]
        self.matcher = MaximalPrefixMatcher(self.prefixes)

    def failUnlessMatch(self, string, prefix):
        actual = self.matcher.match(string)
        self.failUnless(actual == prefix,
                        "Prefix for %s is not %s, but %s"
                        % (string, prefix, actual))

    def failIfMatch(self, string, matcher=None):
        if matcher is None:
            matcher = self.matcher
        self.failUnlessRaises(KeyError, matcher.match, string)

    def testEmptyMatcher(self):
        m = MaximalPrefixMatcher()
        self.failIfMatch("foo", m)

    def testExactPrefixes(self):
        for p in self.prefixes:
            self.failUnlessMatch(p, p)

    def testPrefixesPlusX(self):
        for p in self.prefixes:
            self.failUnlessMatch(p + "X", p)

    def testAdd(self):
        self.failUnlessMatch("fooquux", "foo")
        self.matcher.add(["fooquux"])
        self.failUnlessMatch("fooquux", "fooquux")
        self.failUnlessMatch("fooquuxblah", "fooquux")

    def testShorter(self):
        self.failUnlessMatch("fooba", "foo")
        self.failUnlessMatch("barba", "bar")
        self.failIfMatch("fo")
        self.failIfMatch("ba")

    def testBig(self):
        self.failIfMatch("xyzzy")

    def testSmall(self):
        self.failIfMatch("aaaaa")

unittest.makeSuite(_MaximalPrefixMatcherTest, "test")
    
if __name__ == "__main__":
    unittest.main()


########################################################################
# Local Variables:
# mode: python
# indent-tabs-mode: nil
# fill-column: 72
# End:

From njs at pobox.com  Tue Feb 24 22:45:44 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Tue, 24 Feb 2004 14:45:44 -0800
Subject: [qmtest] List test ids at command line?
In-Reply-To: <32280b09184a643665694f4ebe427baa403ba3f7@Orthosoft.ca>
References: <007601c3fa58$e28d1a30$7588229b@meriadoc> <403A8F57.1090307@codesourcery.com> <a5dcf4f05305aef0521876604df9e109403b577e@Orthosoft.ca> <20040224191935.GA10796@njs.ddts.net> <32280b09184a643665694f4ebe427baa403ba3f7@Orthosoft.ca>
Message-ID: <20040224224544.GB7015@njs.ddts.net>

On Tue, Feb 24, 2004 at 02:26:14PM -0500, Stefan Seefeld wrote:
> Nathaniel Smith wrote:
> >On Tue, Feb 24, 2004 at 09:01:02AM -0500, Stefan Seefeld wrote:
> >>I agree that such a listing would be nice. However I'm wondering about
> >>the semantics: if - as I understood - I can refer to the same test via
> >>different suites, wouldn't that imply that tests are listed multiple
> >>times ?
> >
> >I'm not convinced this is a problem, off-hand.
> >
> >~$ ls / / 
> >/:
> >bin/   cdrom/  etc/     home/  lost+found/  proc/  sbin/  usr/
> >boot/  dev/    floppy/  lib/   mnt/         root/  tmp/   var/
> >
> >/:
> >bin/   cdrom/  etc/     home/  lost+found/  proc/  sbin/  usr/
> >boot/  dev/    floppy/  lib/   mnt/         root/  tmp/   var/
> >~$
> 
> sorry, I don't see your point. Could you elaborate ?
> To clarify: My question was how to be able to obtain a listing
> of all (unique) tests, i.e. how to avoid secondary associations
> in the listing.

Ah, if that's what you want, you'd just list the top-level directory
suite, which contains each test exactly once.  I thought you were
complaining that if you listed two suites on the command line that had
some overlap, overlapping tests might be printed multiple times, and I
was pointing out that this would be consistent with other unix tools
like ls.

-- Nathaniel

-- 
"But in Middle-earth, the distinct accusative case disappeared from
the speech of the Noldor (such things happen when you are busy
fighting Orcs, Balrogs, and Dragons)."


From mark at codesourcery.com  Wed Feb 25 02:28:44 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 24 Feb 2004 18:28:44 -0800
Subject: [qmtest] [PATCH] Use maximal prefix matching in qmtest_gcc databases
In-Reply-To: <20040224224028.GA7015@njs.ddts.net>
References: <20040224224028.GA7015@njs.ddts.net>
Message-ID: <403C085C.2050506@codesourcery.com>

Nathaniel Smith wrote:

>See attached.
>
>-- Nathaniel
>  
>
Cute.

Looks good; check it in!

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From afunk at ll.mit.edu  Wed Feb 25 20:31:20 2004
From: afunk at ll.mit.edu (Andrew Funk)
Date: Wed, 25 Feb 2004 15:31:20 -0500
Subject: exceptions.TypeError: All dictionary items must be strings, or all must be unicode
Message-ID: <000e01c3fbde$53f989c0$7588229b@meriadoc>

Hi,

Using QMTest 2.2 under Linux, I added an environment variable to a test,
and the test ran correctly.  When I try to run the same test under
Windows, I get the following error.  I have also attached the test
below.  I will look into this further but I wonder if anyone has a clue
about the qmtest.exception raised.

Thanks,
Andy


--- TEST RESULTS
-------------------------------------------------------------

  myfirsttest                                   : ERROR
    An exception occurred.

    qmtest.exception:
      exceptions.TypeError: All dictionary items must be strings, or all
must
      be unicode

    qmtest.target:
      local

    qmtest.traceback:

        File "C:\Python23\Lib\site-packages\qm\test\target.py", line
215, in Run
Test
          descriptor.Run(context, result)

        File "C:\Python23\Lib\site-packages\qm\test\database.py", line
246, in R
un
          self._Execute(context, result, "Run")

        File "C:\Python23\Lib\site-packages\qm\test\database.py", line
168, in _
Execute
          eval("item.%s(context, result)" % method)

        File "", line 0, in ?

        File "C:\Python23\Lib\site-packages\qm\test\classes\command.py",
line 46
8, in Run
          self.RunProgram(arguments[0], arguments, context, result)

        File "C:\Python23\Lib\site-packages\qm\test\classes\command.py",
line 18
7, in RunProgram
          exit_status = e.Run(arguments, environment, path = program)

        File "C:\Python23\Lib\site-packages\qm\executable.py", line 513,
in Run
          path)

        File "C:\Python23\Lib\site-packages\qm\executable.py", line 232,
in Run
          child = self.Spawn(arguments, environment, dir, path,
exception_pipe)

        File "C:\Python23\Lib\site-packages\qm\executable.py", line 145,
in Spaw
n
          startupinfo)[0]






<?xml version="1.0" ?>
<!DOCTYPE extension
  PUBLIC '-//QM/2.2/Extension//EN'
  'http://www.codesourcery.com/qm/dtds/2.2/-//qm/2.2/extension//en.dtd'>
<extension class="command.ShellScriptTest" kind="test"><argument
name="stdin"><text/></argument><argument
name="stderr"><text/></argument><argument
name="stdout"><text/></argument><argument
name="prerequisites"><set/></argument><argument
name="target_group"><text>.*</text></argument><argument
name="exit_code"><integer>0</integer></argument><argument
name="environment"><set><text>e=mc2</text></set></argument><argument
name="script"><text>echo ${e}</text></argument><argument
name="arguments"><set/></argument><argument
name="timeout"><integer>-1</integer></argument><argument
name="resources"><set/></argument></extension>



From mark at codesourcery.com  Wed Feb 25 21:25:31 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 25 Feb 2004 13:25:31 -0800
Subject: [qmtest] exceptions.TypeError: All dictionary items must be strings,
 or all must be unicode
In-Reply-To: <000e01c3fbde$53f989c0$7588229b@meriadoc>
References: <000e01c3fbde$53f989c0$7588229b@meriadoc>
Message-ID: <403D12CB.80507@codesourcery.com>

Andrew Funk wrote:

>Hi,
>
>Using QMTest 2.2 under Linux, I added an environment variable to a test,
>and the test ran correctly.  When I try to run the same test under
>Windows, I get the following error.  I have also attached the test
>below.  I will look into this further but I wonder if anyone has a clue
>about the qmtest.exception raised.
>
>  
>
Neat. :-)

It looks like that's coming from the fact that Windows can support both 
Unicode and ASCII strings.  In ExecTestBase.MakeEnvironment, would you 
please try replacing:

               environment[variable] = value
 
with
  
               environment[variable] = str(value)

Does that help?

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From mark at codesourcery.com  Fri Feb 27 22:20:24 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 27 Feb 2004 14:20:24 -0800
Subject: PATCH: Fix packaging glitch
Message-ID: <200402272220.i1RMKOju000830@sirius.codesourcery.com>


The code in setup.py that tried to decide whether we were building a
Windows package or a UNIX package, and name the main QMTest script
"qmtest" or "qmtest.py" accordingly, was very fragile.  So fragile
that the Windows 2.1.1 release packages failed to contain "qmtest.py",
which is a major glitch.

This patch removes this fragility and been committed on the 2.1 branch
and the mainline.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


2004-02-27  Mark Mitchell  <mark at codesourcery.com>

	* setup.py: Install both "qmtest" and "qmtest.py" on all systems.

Index: setup.py
===================================================================
RCS file: /home/qm/Repository/qm/setup.py,v
retrieving revision 1.9
diff -c -5 -p -r1.9 setup.py
*** setup.py	4 Dec 2003 02:38:08 -0000	1.9
--- setup.py	27 Feb 2004 21:59:55 -0000
*************** tutorial_files = files_with_ext("qm/test
*** 84,108 ****
  test_dtml_files = files_with_ext("qm/test/share/dtml", ".dtml")
  
  share_files = {}
  os.path.walk("share", select_share_files, share_files)
  
! # On UNIX, we want the main script to be "qmtest".  On Windows, we need
! # to use a ".py" extension so that users can invoke the script directly;
! # if we were to omit the ".py" extension they would have to explicitly
! # type "python qmtest" to invoke the script.  Searching for
! # "bdist_wininst" in sys.argv is an (inelegant) way of checking to see
! # if we are building a Windows binary installer.
  qmtest_script = join("qm", "test", "qmtest")
! py_script = qmtest_script + ".py"
! if "bdist_wininst" in sys.argv:
!     shutil.copyfile(qmtest_script, py_script)
!     qmtest_script = py_script
! elif os.path.exists(py_script):
!     # Avoid accidentally packaging the ".py" version of the script, if
!     # it exists.
!     os.remove(py_script)
       
  setup(name="qm", 
        version=version,
        author="CodeSourcery, LLC",
        author_email="info at codesourcery.com",
--- 84,100 ----
  test_dtml_files = files_with_ext("qm/test/share/dtml", ".dtml")
  
  share_files = {}
  os.path.walk("share", select_share_files, share_files)
  
! # On UNIX, users invoke "qmtest".  On Windows, there is no way to make a
! # Python script directly executable, unless its suffix is ".py".  It is
! # difficult to get distutils to install just one script or the other, so
! # we install both on all platforms.
  qmtest_script = join("qm", "test", "qmtest")
! qmtest_py_script = qmtest_script + ".py"
! shutil.copyfile(qmtest_script, qmtest_py_script)
       
  setup(name="qm", 
        version=version,
        author="CodeSourcery, LLC",
        author_email="info at codesourcery.com",
*************** setup(name="qm", 
*** 122,132 ****
                  'qm/external',
                  'qm/external/DocumentTemplate',
                  'qm/test',
                  'qm/test/classes',
                  'qm/test/web'),
!       scripts=[qmtest_script],
        data_files=[('qm/messages/test',
                     prefix(messages, 'qm/test/share/messages')),
                    # DTML files for the GUI.
                    ("qm/dtml/test", test_dtml_files),
                    # The documentation.
--- 114,124 ----
                  'qm/external',
                  'qm/external/DocumentTemplate',
                  'qm/test',
                  'qm/test/classes',
                  'qm/test/web'),
!       scripts=[qmtest_script, qmtest_py_script],
        data_files=[('qm/messages/test',
                     prefix(messages, 'qm/test/share/messages')),
                    # DTML files for the GUI.
                    ("qm/dtml/test", test_dtml_files),
                    # The documentation.


