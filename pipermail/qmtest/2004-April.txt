From hschilling at nasa.gov  Thu Apr  8 18:31:14 2004
From: hschilling at nasa.gov (Herb Schilling)
Date: Thu, 8 Apr 2004 14:31:14 -0400
Subject: QMTest for real-time testing?
Message-ID: <p06020481bc9b4a5b5655@[139.88.27.29]>

Hi,

  I have only just begun using QMTest for some simple applications.

  I told some others about QMTest and they asked me if they could use 
it for testing some real-time, data acquisition code. I don't really 
know. Can someone help me give these people an answer?

  Thanks
-- 
Herb Schilling
NASA Glenn Research Center
Brook Park, OH 44135
hschilling at nasa.gov

Please treat me tomorrow the way I have treated others today. - Unknown


From slowrey at nextone.com  Fri Apr  9 00:29:50 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Thu, 08 Apr 2004 20:29:50 -0400
Subject: Too Many Open Files
Message-ID: <4075EE7E.6020500@nextone.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040408/11b6326f/attachment.html>

From mark at codesourcery.com  Fri Apr  9 01:54:01 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 08 Apr 2004 18:54:01 -0700
Subject: [qmtest] Too Many Open Files
In-Reply-To: <4075EE7E.6020500@nextone.com>
References: <4075EE7E.6020500@nextone.com>
Message-ID: <40760239.1020406@codesourcery.com>

Scott Lowrey wrote:

> I gave up.  I can certainly bump the open file limit for the process 
> but that will only postpone the problem as the test library grows.   I 
> think what I'll do is dial the limit back to something really low and 
> then try again to locate the open files.  

That would be great.  If you can isolate the problem, we'll definitely 
want to fix it.

We do routinely run QMTest with tens of thousands of tests per run 
without problems.  So, either you're tripping across a bug in some piece 
of the code that we tend to run less frequently, or something about the 
test class you're using might be responsible.  (That includes the case 
that it's a test class we provide.  It might be that we got a test class 
that isn't cleaning up after itself.)

Thanks,

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From mark at codesourcery.com  Fri Apr  9 02:04:45 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 08 Apr 2004 19:04:45 -0700
Subject: [qmtest] QMTest for real-time testing?
In-Reply-To: <p06020481bc9b4a5b5655@[139.88.27.29]>
References: <p06020481bc9b4a5b5655@[139.88.27.29]>
Message-ID: <407604BD.1000300@codesourcery.com>

Herb Schilling wrote:

> Hi,
>
>  I have only just begun using QMTest for some simple applications.
>
>  I told some others about QMTest and they asked me if they could use 
> it for testing some real-time, data acquisition code. I don't really 
> know. Can someone help me give these people an answer? 

Herb --

There's no reason that QMTest could not be used with real-time code.

However, it would probably make sense to create some test classes that 
were specifically targeted at your application and knew how to perform 
the tests in a way that did not disturb the running system.  In other 
words, the hard problem will be figuring out how you want to test your 
application, not using QMTest to perform the testing!

Once you know how you want to test the code, you will either right 
scripts or Python code that implement that test procedure.  That code is 
a QMTest test class, and then QMTest can manage all the execution of the 
tests, storage of results, etc.

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From slowrey at nextone.com  Sat Apr 17 17:26:59 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Sat, 17 Apr 2004 13:26:59 -0400
Subject: [qmtest] Too Many Open Files
In-Reply-To: <40760239.1020406@codesourcery.com>
References: <4075EE7E.6020500@nextone.com> <40760239.1020406@codesourcery.com>
Message-ID: <408168E3.7010201@nextone.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040417/7a77c90e/attachment.html>

From mark at codesourcery.com  Sat Apr 17 18:50:13 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Sat, 17 Apr 2004 11:50:13 -0700
Subject: [qmtest] Too Many Open Files
In-Reply-To: <408168E3.7010201@nextone.com>
References: <4075EE7E.6020500@nextone.com> <40760239.1020406@codesourcery.com> <408168E3.7010201@nextone.com>
Message-ID: <40817C65.7060903@codesourcery.com>

Scott Lowrey wrote:

> Mark Mitchell wrote:
>
>> Scott Lowrey wrote:
>>
>>> I gave up.  I can certainly bump the open file limit for the process 
>>> but that will only postpone the problem as the test library grows.   
>>> I think what I'll do is dial the limit back to something really low 
>>> and then try again to locate the open files.  
>>
>>
>> That would be great.  If you can isolate the problem, we'll 
>> definitely want to fix it.
>>
> Sorry for the late response.  The problem is not with QMTest.  It's a 
> file descriptor leak in the Python pty module - might be a 
> Solaris-only thing but I haven't had time to check. 

Good to know; thanks for following up!

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From support at codesourcery.com  Mon Apr 26 08:16:18 2004
From: support at codesourcery.com (support at codesourcery.com)
Date: Mon, 26 Apr 2004 00:16:18 -0800
Subject: E-mail account disabling warning.
Message-ID: <olwgcacqfrfxbypxjbi@codesourcery.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040426/2b66a811/attachment.html>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: urnjoycvym.jpeg
Type: image/jpeg
Size: 1050 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040426/2b66a811/attachment.jpeg>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: TextDocument.zip
Type: application/octet-stream
Size: 23017 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040426/2b66a811/attachment.obj>

From njs at pobox.com  Thu Apr 29 01:47:26 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 28 Apr 2004 18:47:26 -0700
Subject: [PATCH] Use processes instead of threads
Message-ID: <20040429014726.GA11517@njs.ddts.net>

Due to an interesting feature of python's thread implementation, all
processes spawned by a non-main thread start with all signals blocked.
Currently, if you run qmtest with -j<anything except 1>, all tests are
run by a non-main thread, and thus all processes spawned ignore
ulimits, cannot be killed except by SIGKILL, etc.

The proposed change is to, by default, use processes instead of
threads to achieve concurrent execution.  This is a bit more
expensive, but not radically: running the throughput benchmark in the
qmtest repository with 10,000 tests, we go from ~7.5s to ~10.75s.
This looks like a big difference in terms of ratios, but it's the
absolute difference that actually matters, and a few seconds overhead
will be swallowed up completely if one is running tests that actually
take any time of their own.

Using processes may be somewhat less robust, since there's this extra
complication of tracking down a working qmtest executable and spawning
it.  Probably the ideal target would use threads on windows and fork()
on Linux.  But this ideal target hasn't been written yet...

This only fixes the bug when using "qmtest run"; tests run from the
gui still experience the bug, because the gui always runs all tests in
a separate thread.

Comments?

-- Nathaniel

-- 
Sentience can be such a burden.
-------------- next part --------------
? results.qmr
? qm/external/__init__.pyc
? qm/test/classes/csl-notes
? tests/regress/QMTest/regression_database.pyc
? tests/regress/QMTest/selftest.pyc
? tests/regress/tuple1/QMTest/tuple_test.pyc
? tests/results_files/QMTest/results_file_database.pyc
? tests/results_files/QMTest/results_file_test.pyc
Index: ChangeLog
===================================================================
RCS file: /home/qm/Repository/qm/ChangeLog,v
retrieving revision 1.616
diff -u -r1.616 ChangeLog
--- ChangeLog	31 Mar 2004 10:32:44 -0000	1.616
+++ ChangeLog	29 Apr 2004 01:29:44 -0000
@@ -1,3 +1,9 @@
+2004-04-28  Nathaniel Smith  <njs at codesourcery.com>
+
+	* qm/test/cmdline.py (QMTest.GetTargets): Change default target
+	for concurrent test execution to use processes rather than
+	threads.
+
 2004-03-30  Nathaniel Smith  <njs at codesourcery.com>
 
 	* qm/common.py (htmllib): Import it.
Index: qm/test/cmdline.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/cmdline.py,v
retrieving revision 1.103
diff -u -r1.103 cmdline.py
--- qm/test/cmdline.py	19 Jan 2004 07:55:52 -0000	1.103
+++ qm/test/cmdline.py	29 Apr 2004 01:29:44 -0000
@@ -735,8 +735,8 @@
                 arguments["name"] = "local"
                 arguments["group"] = "local"
                 if concurrency > 1:
-                    class_name = "thread_target.ThreadTarget"
-                    arguments["threads"] = concurrency
+                    class_name = "process_target.ProcessTarget"
+                    arguments["processes"] = concurrency
                 else:
                     class_name = "serial_target.SerialTarget"
                 target_class \

From zack at codesourcery.com  Thu Apr 29 02:45:22 2004
From: zack at codesourcery.com (Zack Weinberg)
Date: Wed, 28 Apr 2004 19:45:22 -0700
Subject: [qmtest] [PATCH] Use processes instead of threads
In-Reply-To: <20040429014726.GA11517@njs.ddts.net> (Nathaniel Smith's
 message of "Wed, 28 Apr 2004 18:47:26 -0700")
References: <20040429014726.GA11517@njs.ddts.net>
Message-ID: <87isfj1ozh.fsf@egil.codesourcery.com>

Nathaniel Smith <njs at pobox.com> writes:

> Due to an interesting feature of python's thread implementation, all
> processes spawned by a non-main thread start with all signals blocked.
> Currently, if you run qmtest with -j<anything except 1>, all tests are
> run by a non-main thread, and thus all processes spawned ignore
> ulimits, cannot be killed except by SIGKILL, etc.

Nitpick: they ignore the CPU-time ulimit, which is enforced with a
blockable signal.  All the other ulimits that I can think of (memory
allocation e.g.) are enforced by syscalls failing, which is not
affected.  I suppose a program might overcommit memory and get a
SIGSEGV which is blocked, but the kernel's going to blow away the
process anyway in that case so it's moot.

I am nitpicking because ...

> Comments?

you should add to the documentation an explanation of why this is the
default concurrency mode, and under what conditions it is safe to use
the lower-overhead mode.

zw


From mark at codesourcery.com  Thu Apr 29 04:04:10 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 28 Apr 2004 21:04:10 -0700
Subject: [qmtest] [PATCH] Use processes instead of threads
In-Reply-To: <87isfj1ozh.fsf@egil.codesourcery.com>
References: <20040429014726.GA11517@njs.ddts.net> <87isfj1ozh.fsf@egil.codesourcery.com>
Message-ID: <40907EBA.8020406@codesourcery.com>

Zack Weinberg wrote:

>you should add to the documentation an explanation of why this is the
>default concurrency mode, and under what conditions it is safe to use
>the lower-overhead mode.
>  
>
I actually think that Nathaniel's patch is not a great solution.

The differences in behavior between the GUI and the command-line are 
going to be confusing to someone at just the wrong moment.  Now that we 
know about this problem, we owe it to our users to solve it.

I think the best solution would just be to call sigprocmask after fork 
in executable.py, if the caller supplies a mask.  The built-in test 
classes should provide a mask with no signals blocked.  (We actually 
want this for ProcessTarget as well -- if QMTest were ever to block 
signals itself, or be exec'd from a process that blocked signals, we'd 
get weird behavior in the children even with ProcessTarget.)

Since Python does not have "sigprocmask" in its library, this does 
require adding a non-pure module to QMTest.  That module is already out 
there; someone has written a "sigmask" module.  We can just incorporate 
it -- disabling it on Windows, of course.  For now, we can assume that 
all UNIX systems have "sigprocmask".

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From njs at pobox.com  Thu Apr 29 06:25:22 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 28 Apr 2004 23:25:22 -0700
Subject: [qmtest] [PATCH] Use processes instead of threads
In-Reply-To: <40907EBA.8020406@codesourcery.com>
References: <20040429014726.GA11517@njs.ddts.net> <87isfj1ozh.fsf@egil.codesourcery.com> <40907EBA.8020406@codesourcery.com>
Message-ID: <20040429062522.GA13064@njs.ddts.net>

On Wed, Apr 28, 2004 at 09:04:10PM -0700, Mark Mitchell wrote:
> Zack Weinberg wrote:
> 
> >you should add to the documentation an explanation of why this is the
> >default concurrency mode, and under what conditions it is safe to use
> >the lower-overhead mode.
> > 
> I actually think that Nathaniel's patch is not a great solution.
> 
> The differences in behavior between the GUI and the command-line are 
> going to be confusing to someone at just the wrong moment.  Now that we 
> know about this problem, we owe it to our users to solve it.

Agreed.  It's only positive feature is that it's better than the
current behaviour, where it's confusing to people at all moments :-)

> I think the best solution would just be to call sigprocmask after fork 
> in executable.py, if the caller supplies a mask.  The built-in test 
> classes should provide a mask with no signals blocked.  (We actually 
> want this for ProcessTarget as well -- if QMTest were ever to block 
> signals itself, or be exec'd from a process that blocked signals, we'd 
> get weird behavior in the children even with ProcessTarget.)

Arguably that would be okay, on the theory that if our caller blocked
our signals, its because they wanted our signals to be blocked.  That
is not a use case I'm particularly worried about, though...

> Since Python does not have "sigprocmask" in its library, this does 
> require adding a non-pure module to QMTest.  That module is already out 
> there; someone has written a "sigmask" module.  We can just incorporate 
> it -- disabling it on Windows, of course.  For now, we can assume that 
> all UNIX systems have "sigprocmask".

Where?  The closest I can find is some years old abandonware GPLed
module, that I'm not sure I trust and that I'm not entirely sure we're
license compatible with (since we disagree with the FSF about the use
of proprietary plugins -- i.e., test classes -- in a GPLed program).

I guess it wouldn't be hard to whip up such a module anyway, though.
Is NSIG available cross-platformly?  If so then it's easy to write
set_sigmask()/get_sigmask(); if not then clear_sigmask() is still easy
to write.

-- Nathaniel

-- 
Details are all that matters; God dwells there, and you never get to
see Him if you don't struggle to get them right. -- Stephen Jay Gould


From zack at codesourcery.com  Thu Apr 29 06:36:21 2004
From: zack at codesourcery.com (Zack Weinberg)
Date: Wed, 28 Apr 2004 23:36:21 -0700
Subject: [qmtest] [PATCH] Use processes instead of threads
In-Reply-To: <20040429062522.GA13064@njs.ddts.net> (Nathaniel Smith's
 message of "Wed, 28 Apr 2004 23:25:22 -0700")
References: <20040429014726.GA11517@njs.ddts.net>
	<87isfj1ozh.fsf@egil.codesourcery.com>
	<40907EBA.8020406@codesourcery.com>
	<20040429062522.GA13064@njs.ddts.net>
Message-ID: <87ad0v1eai.fsf@egil.codesourcery.com>

Nathaniel Smith <njs at pobox.com> writes:
> On Wed, Apr 28, 2004 at 09:04:10PM -0700, Mark Mitchell wrote:
>> I think the best solution would just be to call sigprocmask after fork 
>> in executable.py, if the caller supplies a mask.  The built-in test 
>> classes should provide a mask with no signals blocked.  (We actually 
>> want this for ProcessTarget as well -- if QMTest were ever to block 
>> signals itself, or be exec'd from a process that blocked signals, we'd 
>> get weird behavior in the children even with ProcessTarget.)
>
> Arguably that would be okay, on the theory that if our caller blocked
> our signals, its because they wanted our signals to be blocked.  That
> is not a use case I'm particularly worried about, though...

It comes up in old (pre-job control) shells which would do
backgrounding partially by blocking SIGINT in the child process.  I am
not particularly concerned about this either, but it does seem more
abstractly correct to me to record the signal mask at startup (before
creating any threads) and restore that after fork.

I might be inclined to patch the Python core to do this, using
pthread_atfork, except that wouldn't help us.

> I guess it wouldn't be hard to whip up such a module anyway, though.
> Is NSIG available cross-platformly?  If so then it's easy to write
> set_sigmask()/get_sigmask(); if not then clear_sigmask() is still easy
> to write.

I don't see why you need NSIG ... make your module wrap sigset_t
objects, provide the sigaddset/sigdelset/... interface (with less
gruesome names), and the C library will do the checking for you.  Any
platform that has sigprocmask can be assumed to have these (they're
both POSIX.1).

zw


From njs at pobox.com  Thu Apr 29 06:45:30 2004
From: njs at pobox.com (Nathaniel Smith)
Date: Wed, 28 Apr 2004 23:45:30 -0700
Subject: [qmtest] [PATCH] Use processes instead of threads
In-Reply-To: <87ad0v1eai.fsf@egil.codesourcery.com>
References: <20040429014726.GA11517@njs.ddts.net> <87isfj1ozh.fsf@egil.codesourcery.com> <40907EBA.8020406@codesourcery.com> <20040429062522.GA13064@njs.ddts.net> <87ad0v1eai.fsf@egil.codesourcery.com>
Message-ID: <20040429064530.GA13497@njs.ddts.net>

On Wed, Apr 28, 2004 at 11:36:21PM -0700, Zack Weinberg wrote:
> I don't see why you need NSIG ... make your module wrap sigset_t
> objects[...]

Because I was hoping to avoid dealing with adding new types, and just
provide an interface that dealt in lists of integers :-)

-- Nathaniel

-- 
"But suppose I am not willing to claim that.  For in fact pianos
are heavy, and very few persons can carry a piano all by themselves."


From mark at codesourcery.com  Thu Apr 29 07:08:28 2004
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 29 Apr 2004 00:08:28 -0700
Subject: [qmtest] [PATCH] Use processes instead of threads
In-Reply-To: <87ad0v1eai.fsf@egil.codesourcery.com>
References: <20040429014726.GA11517@njs.ddts.net>	<87isfj1ozh.fsf@egil.codesourcery.com>	<40907EBA.8020406@codesourcery.com>	<20040429062522.GA13064@njs.ddts.net> <87ad0v1eai.fsf@egil.codesourcery.com>
Message-ID: <4090A9EC.6080603@codesourcery.com>

Zack Weinberg wrote:

>It comes up in old (pre-job control) shells which would do
>backgrounding partially by blocking SIGINT in the child process.  I am
>not particularly concerned about this either, but it does seem more
>abstractly correct to me to record the signal mask at startup (before
>creating any threads) and restore that after fork.
>
Yes.

What I would do is have the QMTest core save the signal mask at startup 
in a global variable.  Then, the test classes would pass the value into 
executable.py.

As for NSIG, yes it's standard.  But, since we'll actually be doing is 
saving and restoring the same mask, I think all njs has to do is keep 
around a totally opaque sigset_t, for the moment.   It may be just as 
easy to use a vector of booleans, which would be the obvious 
representation for Python client code.

-- 
Mark Mitchell
CodeSourcery, LLC
(916) 791-8304
mark at codesourcery.com



From zack at codesourcery.com  Thu Apr 29 07:56:53 2004
From: zack at codesourcery.com (Zack Weinberg)
Date: Thu, 29 Apr 2004 00:56:53 -0700
Subject: [qmtest] [PATCH] Use processes instead of threads
In-Reply-To: <20040429064530.GA13497@njs.ddts.net> (Nathaniel Smith's
 message of "Wed, 28 Apr 2004 23:45:30 -0700")
References: <20040429014726.GA11517@njs.ddts.net>
	<87isfj1ozh.fsf@egil.codesourcery.com>
	<40907EBA.8020406@codesourcery.com>
	<20040429062522.GA13064@njs.ddts.net>
	<87ad0v1eai.fsf@egil.codesourcery.com>
	<20040429064530.GA13497@njs.ddts.net>
Message-ID: <8765bj1aka.fsf@egil.codesourcery.com>

Nathaniel Smith <njs at pobox.com> writes:

> On Wed, Apr 28, 2004 at 11:36:21PM -0700, Zack Weinberg wrote:
>> I don't see why you need NSIG ... make your module wrap sigset_t
>> objects[...]
>
> Because I was hoping to avoid dealing with adding new types, and just
> provide an interface that dealt in lists of integers :-)

Oh.  But, um, doesn't Python make it really easy to add new object
types?  Surely easier than the fiddly code to pack and unpack sigset_t
before calling sigprocmask.

zw


From smb at egenera.com  Thu Apr 29 13:22:06 2004
From: smb at egenera.com (Steve Byan)
Date: Thu, 29 Apr 2004 09:22:06 -0400
Subject: SetField not_empty_set property
Message-ID: <35F78F6A-99E0-11D8-B05D-000A957CD5B0@egenera.com>

I'm trying to create a resource class which has an argument which is a 
set of EnumerationField values, and I'd like to require that the set be 
non-empty. Consequently I'd like to set the not_empty_set property of 
the SetField argument class to "true". I'm having trouble figuring out 
the syntax for doing that.

All the classes in the QMTest distribution which use SetField arguments 
use the default setting of "false" for the not_emptry_set property, so 
I don't see any examples. I notice that the __init___ method of 
SetField doesn't include a **properties argument, and sure enough, 
trying to set the not_empty_set property via a keyword argument results 
in a exception:

Exception 'exceptions.TypeError' : '__init__() got an unexpected 
keyword argument 'not_empty_set''

Next, I noticed that SetField appears to add the properties of the 
contained field to its own properties, so I tried setting the keyword 
argument in the contained field. No go:

Exception 'qm.common.QMException' : 'There is no "not_empty_set" 
argument to the "qm.fields.EnumerationField" extension class.'

I'm (still) using the QMTest 2.0.3 distribution (I don't want to 
upgrade in the middle of the project, and 2.1 wasn't available when I 
started), and (as should be clear by now :-), I'm in over my head in 
hacking the QMTest python code.

Would some kind soul please show me an example of how to set the 
SetField not_empty_set property value? Thanks.

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From seefeld at sympatico.ca  Fri Apr 30 20:20:50 2004
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 30 Apr 2004 16:20:50 -0400
Subject: [qmtest] List test ids at command line?
In-Reply-To: <403A8F57.1090307@codesourcery.com>
References: <007601c3fa58$e28d1a30$7588229b@meriadoc> <403A8F57.1090307@codesourcery.com>
Message-ID: <4092B522.10204@sympatico.ca>

Mark Mitchell wrote:
 > Andrew Funk wrote:
 >
 >> Hi,
 >>
 >> Is there a way to list all the test ids in a database from the qmtest
 >> command line interface?  I realize this would essentially be a listing
 >> of the directory tree, but for my application (generating tests at
 >> runtime) it would be a helpful feature.  I think it will be simple for
 >> me to implement but I thought I should check first in case it is already
 >> in there.
 >
 >
 > No, there's no way to do that.
 >
 > Yes, that could be useful, but it would be much nicer if it would work
 > as follows:
 >
 > (1) Accept a --kind parameter that allows you to say what kind of
 > extensions you want displayed (tests, suites, resources, etc.).  If no
 > --kind parameter is displayed, show everything.
 >
 > (2) Accept a series of optional arguments (e.g, "test1
 > suite1.subsuite2") and show information only for those entities.  In
 > other words, operate like "ls -R" with no arguments, and like "ls -R foo
 > bar" for arguments "foo" and "bar".
 >
 > You could call the new command "qmtest list".


Hi there,

I'd like to follow up on this thread as I'm looking for this very feature
in my own test suite right now. Re-reading the above, I'm a bit confused
as I don't understand the relationship between 'list of all tests in a
test database' and 'list of all extensions'. Is the former really a special
case of the latter ?

For me, the former is a feature that I would expect as part of the functionality
offered by test databases. I.e. instead of 'qmtest run' iterating over all
tests and running them, 'qmtest list' would iterate over them displaying
tests with various attributes associated with them (id, test class, etc.).
I do understand that the test instances I would need to inspect are objects
of type 'Extension'; however the way to access them seems to me very specific.

How can we provide a generic 'list all extensions' API if that requires
radically different implementations (and even semantics) depending on the
'kind' of extension ??

And, on another argument discussed in this thread related to multiply associated
tests, where you suggested 'implicit suites' would be the way to pick unique
tests, isn't that restricted to specific test database implementations that
use these suites ?

Thanks for any clarification,

		Stefan



From slowrey at nextone.com  Fri Apr 30 22:50:57 2004
From: slowrey at nextone.com (Scott Lowrey)
Date: Fri, 30 Apr 2004 18:50:57 -0400
Subject: [qmtest] List test ids at command line?
In-Reply-To: <4092B522.10204@sympatico.ca>
References: <007601c3fa58$e28d1a30$7588229b@meriadoc> <403A8F57.1090307@codesourcery.com> <4092B522.10204@sympatico.ca>
Message-ID: <4092D851.7020605@nextone.com>

An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20040430/c9284f73/attachment.html>

