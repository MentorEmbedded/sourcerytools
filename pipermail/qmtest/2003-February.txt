From tonic at nondot.org  Tue Feb  4 18:08:40 2003
From: tonic at nondot.org (Tanya Brethour)
Date: Tue, 4 Feb 2003 12:08:40 -0600 (CST)
Subject: Qmtest make errors
Message-ID: <Pine.LNX.4.44.0302041120290.32439-100000@nondot.org>


Hello. I downloaded qmtest 2.0.2 and I am attempting to build the source.
Some background info: Mandrake 9.0 (2.4.19-16mdk), python 2.2.1

I ran configure with this command:
./configure --prefix=/home/tonic/llvm/qm --enable-maintainer-mode

Then I ran: make

Initially I got the error:/bin/sh: line 1: pdfjadetex: command not found

So I installed jadetex and repeated the steps above.

Now I get the following error:
cd `dirname qm/test/doc/print/manual.pdf`; \
  pdfjadetex manual.tex; \
  pdfjadetex manual.tex; \
  pdfjadetex manual.tex
This is pdfTeX, Version 3.14159-1.00b-pretest-20020211-HO20020731 (Web2C
7.3.7)
(Fatal format file error; I'm stymied)
This is pdfTeX, Version 3.14159-1.00b-pretest-20020211-HO20020731 (Web2C
7.3.7)
(Fatal format file error; I'm stymied)
This is pdfTeX, Version 3.14159-1.00b-pretest-20020211-HO20020731 (Web2C
7.3.7)
(Fatal format file error; I'm stymied)
make: *** [qm/test/doc/print/manual.pdf] Error 1


So, I can build qmtest without documentation just fine, but I'm not a Tex
guru.. so not sure what to do next :)

Any advice is appreciated.. or if I can provide more information, please
let me know.

Thanks,
Tanya




From mark at codesourcery.com  Tue Feb  4 18:08:06 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 04 Feb 2003 18:08:06 -0000
Subject: [qmtest] Qmtest make errors
In-Reply-To: <Pine.LNX.4.44.0302041120290.32439-100000@nondot.org>
Message-ID: <705033105.1044382086@[192.168.0.103]>



--On Tuesday, February 04, 2003 12:08 PM -0600 Tanya Brethour 
<tonic at nondot.org> wrote:

>
> Hello. I downloaded qmtest 2.0.2 and I am attempting to build the source.
> Some background info: Mandrake 9.0 (2.4.19-16mdk), python 2.2.1
>
> I ran configure with this command:
> ./configure --prefix=/home/tonic/llvm/qm --enable-maintainer-mode

You shouldn't need to use "--enable-maintainer-mode" when building from
source tarballs; the documentation has been pre-built and included in
the source packages.  Would you try again without that?

Thanks,

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com


From tonic at nondot.org  Tue Feb  4 18:27:03 2003
From: tonic at nondot.org (Tanya Brethour)
Date: Tue, 4 Feb 2003 12:27:03 -0600 (CST)
Subject: [qmtest] Qmtest make errors
In-Reply-To: <705033105.1044382086@[192.168.0.103]>
Message-ID: <Pine.LNX.4.44.0302041225580.727-100000@nondot.org>


> > Hello. I downloaded qmtest 2.0.2 and I am attempting to build the source.
> > Some background info: Mandrake 9.0 (2.4.19-16mdk), python 2.2.1
> >
> > I ran configure with this command:
> > ./configure --prefix=/home/tonic/llvm/qm --enable-maintainer-mode
>
> You shouldn't need to use "--enable-maintainer-mode" when building from
> source tarballs; the documentation has been pre-built and included in
> the source packages.  Would you try again without that?

I'm sorry. You are right, I do not need to do that. I just was looking in
the wrong place for the documentation :)

Sorry bout that!

-Tanya



From jschmitt at kealia.com  Thu Feb 13 01:22:25 2003
From: jschmitt at kealia.com (John Schmitt)
Date: Wed, 12 Feb 2003 17:22:25 -0800
Subject: getting started
Message-ID: <001d01c2d2fe$5db4c790$a5452a0a@jschmittlt>

I could use a gentle nudge in the right direction.

I want to get qmtest up and running on my redhat 7.2 install (now with
mozilla 1.2.1 and Python 2.2.2) and I'm having a bit of trouble.  

I'm following along in the manual and created he tdb directory and
copied the files (exec0.qmt etc).  I invoke 'qmtest gui' in that
directory which launches mozilla and brings up
http://127.0.0.1:1038/test/dir just fine.  It has a menu bar and some
other content on the page.  The menu bar menus don't seem to do anythig.
For instance, if I click on File->Exit, nothing happens except that the
pop-down menu now disappears and the status bar reports 'Done'.  Same
for Run->All Tests.

Advice and pointers warmly received.

John



From eichin at metacarta.com  Thu Feb 13 04:23:03 2003
From: eichin at metacarta.com (eichin at metacarta.com)
Date: 12 Feb 2003 23:23:03 -0500
Subject: [qmtest] getting started
In-Reply-To: <001d01c2d2fe$5db4c790$a5452a0a@jschmittlt>
References: <001d01c2d2fe$5db4c790$a5452a0a@jschmittlt>
Message-ID: <7gr8acajx4.fsf@pikespeak.metacarta.com>

Do you have javascript turned off?  (though I'm not sure you'd even
*see* the menus if you did, it is worth checking.)  


From jschmitt at kealia.com  Thu Feb 13 19:44:26 2003
From: jschmitt at kealia.com (John Schmitt)
Date: Thu, 13 Feb 2003 11:44:26 -0800
Subject: [qmtest] getting started
In-Reply-To: <7gr8acajx4.fsf@pikespeak.metacarta.com>
Message-ID: <000101c2d398$50c80250$a5452a0a@jschmittlt>

Thanks for the response.

Judging by the buttons in Mozilla's Preferences dialog box, Javascript
is indeed on.  

(The README doesn't say so, but I take it for granted that you have to
login as root to run 'make install' when I install qmtest from sources)
I deleted qmtest, and then reinstalled from sources rather than the RPM,
but exactly the same behaviour.  Running 'make check' after compiling
reports that 29 tests ran and all 29 passed.

This is a bit of a downer for me.  If I can't get this going today, I
may be reduced to using dejagnu and then writing tcl scripts for the
next few months.  I'm trying to avoid that.

What other things could I check?  Are there resource/lock files that
aren't being freed?  Is there an error log generated somewhere?  Setting
QM_PYTHON_FLAGS=-v doesn't reveal anything interesting.  I can only quit
qmtest by closing the mozilla browser window and then pressing control-c
in the console window that launched qmtest.

Thanks for the help.

John

-----Original Message-----
From: eichin at metacarta.com [mailto:eichin at metacarta.com] 
Sent: Wednesday, February 12, 2003 8:23 PM
To: John Schmitt
Cc: qmtest at codesourcery.com
Subject: Re: [qmtest] getting started

Do you have javascript turned off?  (though I'm not sure you'd even
*see* the menus if you did, it is worth checking.)  



From anguiano at codesourcery.com  Thu Feb 13 20:12:24 2003
From: anguiano at codesourcery.com (Ricardo Anguiano)
Date: 13 Feb 2003 12:12:24 -0800
Subject: [qmtest] getting started
In-Reply-To: <000101c2d398$50c80250$a5452a0a@jschmittlt>
References: <000101c2d398$50c80250$a5452a0a@jschmittlt>
Message-ID: <86u1f8549j.fsf@potter.codesourcery.com>

"John Schmitt" <jschmitt at kealia.com> writes:

> Thanks for the response.
> 
> Judging by the buttons in Mozilla's Preferences dialog box, Javascript
> is indeed on.  
> 
> (The README doesn't say so, but I take it for granted that you have to
> login as root to run 'make install' when I install qmtest from sources)
> I deleted qmtest, and then reinstalled from sources rather than the RPM,
> but exactly the same behaviour.  Running 'make check' after compiling
> reports that 29 tests ran and all 29 passed.
> 
> This is a bit of a downer for me.  If I can't get this going today, I
> may be reduced to using dejagnu and then writing tcl scripts for the
> next few months.  I'm trying to avoid that.
> 
> What other things could I check?  Are there resource/lock files that
> aren't being freed?  Is there an error log generated somewhere?  Setting
> QM_PYTHON_FLAGS=-v doesn't reveal anything interesting.  I can only quit
> qmtest by closing the mozilla browser window and then pressing control-c
> in the console window that launched qmtest.
> 
> Thanks for the help.

Do you have any other browser lying around?  Try starting qmtest like
this:

        qmtest gui --no-browser

It will spit out a URL to point your (other) favorite browser at.  For
example, the text mode browser "links" seems to do ok with the
javascript.  KDE and GNOME also have their own browsers which are
worth a shot.

-- 
Ricardo Anguiano
http://www.codesourcery.com


From jschmitt at kealia.com  Thu Feb 13 22:58:59 2003
From: jschmitt at kealia.com (John Schmitt)
Date: Thu, 13 Feb 2003 14:58:59 -0800
Subject: [qmtest] getting started
In-Reply-To: <86u1f8549j.fsf@potter.codesourcery.com>
Message-ID: <000001c2d3b3$7ec4d230$a5452a0a@jschmittlt>

This is very cool, thank you.

Links does interesting things, once I can figure out how to invoke menu
items.  Not having used links before, it's a bit confusing, but
workeable.

Konqueror 2.2.1 also works but the menus are a little bit off - I have
to be careful to move the mouse pointer down near the right side of the
File popdown menu, otherwise the popdown menu disappears as if I've
moved the mouse pointer out of that menu's rectangle.

Anyway, now I seem to be up and running.  I edited my http.conf to add
the ~/tdb Directory, restarted httpd and then invoked:

qmtest gui --no-browser -A 10.42.69.69 &

Then, I went to my windows machine and pointed my browser to that
address and voila!  I saw what I expected and the menu bar does things
and I can run all those tests.  Very nice indeed.

Thanks for the pointer - I'll probably be back. Right now, I'm going
back to the tutorial...

John

-----Original Message-----
From: Ricardo Anguiano [mailto:anguiano at codesourcery.com] 
Sent: Thursday, February 13, 2003 12:12 PM
To: John Schmitt
Cc: qmtest at codesourcery.com
Subject: Re: [qmtest] getting started

"John Schmitt" <jschmitt at kealia.com> writes:

> Thanks for the response.
> 
> Judging by the buttons in Mozilla's Preferences dialog box, Javascript
> is indeed on.  
> 
> (The README doesn't say so, but I take it for granted that you have to
> login as root to run 'make install' when I install qmtest from
sources)
> I deleted qmtest, and then reinstalled from sources rather than the
RPM,
> but exactly the same behaviour.  Running 'make check' after compiling
> reports that 29 tests ran and all 29 passed.
> 
> This is a bit of a downer for me.  If I can't get this going today, I
> may be reduced to using dejagnu and then writing tcl scripts for the
> next few months.  I'm trying to avoid that.
> 
> What other things could I check?  Are there resource/lock files that
> aren't being freed?  Is there an error log generated somewhere?
Setting
> QM_PYTHON_FLAGS=-v doesn't reveal anything interesting.  I can only
quit
> qmtest by closing the mozilla browser window and then pressing
control-c
> in the console window that launched qmtest.
> 
> Thanks for the help.

Do you have any other browser lying around?  Try starting qmtest like
this:

        qmtest gui --no-browser

It will spit out a URL to point your (other) favorite browser at.  For
example, the text mode browser "links" seems to do ok with the
javascript.  KDE and GNOME also have their own browsers which are
worth a shot.

-- 
Ricardo Anguiano
http://www.codesourcery.com



From mark at codesourcery.com  Mon Feb 17 17:56:34 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 17 Feb 2003 09:56:34 -0800
Subject: [qmtest] getting started
In-Reply-To: <000001c2d3b3$7ec4d230$a5452a0a@jschmittlt>
Message-ID: <91620000.1045504594@warlock.codesourcery.com>



--On Thursday, February 13, 2003 02:58:59 PM -0800 John Schmitt 
<jschmitt at kealia.com> wrote:

> Links does interesting things, once I can figure out how to invoke menu
> items.  Not having used links before, it's a bit confusing, but
> workeable.

The menu problem you were having is a known problem -- sort of.  We have 
seen this in one other case; a user could not get the menus to work. 
Interestingly, logging in on the exact same machine as another user worked 
fine; it was something -- but we don't know what -- to do with that 
particular user's account.  Unfortunately, we've never been able to figure 
out what caused that -- but it is almost certainly a Mozilla bug of some 
kind.

I apologize for the problems that you had.

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From jschmitt at kealia.com  Wed Feb 19 20:06:55 2003
From: jschmitt at kealia.com (John Schmitt)
Date: Wed, 19 Feb 2003 12:06:55 -0800
Subject: [qmtest] getting started
In-Reply-To: <91620000.1045504594@warlock.codesourcery.com>
Message-ID: <000a01c2d852$73b254a0$a5452a0a@jschmittlt>



> -----Original Message-----
> From: Mark Mitchell [mailto:mark at codesourcery.com]
> Sent: Monday, February 17, 2003 9:57 AM
> Subject: RE: [qmtest] getting started
> [...]
> The menu problem you were having is a known problem -- sort of.  We
have
> seen this in one other case; a user could not get the menus to work.
> Interestingly, logging in on the exact same machine as another user
worked
> fine; it was something -- but we don't know what -- to do with that
> particular user's account.  Unfortunately, we've never been able to
figure
> out what caused that -- but it is almost certainly a Mozilla bug of
some
> kind.

I assume then that it is not perfectly reproducible.  Perhaps, the
Mozilla team could benefit from using QMTest and the pexpect module. ;-)
http://pexpect.sourceforge.net/
http://pexpect.sourceforge.net/doc/pexpect.html
http://mail.python.org/pipermail/python-dev/2002-November/030320.html 

> 
> I apologize for the problems that you had.

No need to apologize at all.

I still have the job of deciding how we're going to do testing and I
have to decide whether to use DejaGnu/Expect, write my own, or use
QMTest.  I'm almost the only real Python advocate here and there are
some expect/tcl advocates here which might carry some weight even though
the implementation languages shouldn't be the deciding factors in this
decision.  

Are there any docs or discussions in the mail archives that discuss
real-world QMTest deployment?  I'm thinking about things like:
- kicking off the nightly build
  -- does QMTest kick it off or does make/cron
     kick off QMTest?
- policy/procedure for maintaining tests
  -- do developers check them in or add them via the
     gui/browser?
  -- if they're checked in, do you make a resource a
     prerequisite install them to a useful place?
- automatically create bugzilla tickets for
  new/unexpected failures?
- when reporting a failure, how can I specify which
  tag should be used to check out the source when
  attempting to reproduce the problem
- how is the test database propogated to the test machines?
  -- share them over nfs?
- are there any database classes that stores tests as
  plain text files?

Doing a cursory scan (by thread) of the mail archives didn't answer
these questions.  Thanks for all the feedback.

John




From mark at codesourcery.com  Wed Feb 19 21:45:14 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 19 Feb 2003 13:45:14 -0800
Subject: [qmtest] getting started
In-Reply-To: <000a01c2d852$73b254a0$a5452a0a@jschmittlt>
Message-ID: <82470000.1045691114@warlock.codesourcery.com>

> - kicking off the nightly build
>   -- does QMTest kick it off or does make/cron
>      kick off QMTest?

The former.

> - policy/procedure for maintaining tests
>   -- do developers check them in or add them via the
>      gui/browser?

Either works; the goal is to be as flexible as possible.  We generally use 
a CVS repository full of tests; users update that and check it back in to 
share the tests.

>   -- if they're checked in, do you make a resource a
>      prerequisite install them to a useful place?

I'm not sure if I understand this question, but I think the answer is "no". 
There's no integration between QMTest and source management systems; how 
the tests get back into an official repository is beyond the scope of 
QMTest.

> - automatically create bugzilla tickets for
>   new/unexpected failures?

No -- although adding automatic support for talking to defect tracking 
systems is definitely something in which we are interested.

> - when reporting a failure, how can I specify which
>   tag should be used to check out the source when
>   attempting to reproduce the problem

A failure in QMTest, or a failure in the tested sotware?

> - how is the test database propogated to the test machines?
>   -- share them over nfs?

Correct -- or any other method you like.  The key constraint is that the 
test database has to be accessible in the same way on all of the machines 
being used to run tests.

> - are there any database classes that stores tests as
>   plain text files?

Our GCC test database handles GCC tests that are stored simply as source 
code, which might qualify.

Yours,

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From jschmitt at kealia.com  Thu Feb 20 01:30:03 2003
From: jschmitt at kealia.com (John Schmitt)
Date: Wed, 19 Feb 2003 17:30:03 -0800
Subject: [qmtest] getting started
In-Reply-To: <82470000.1045691114@warlock.codesourcery.com>
Message-ID: <000301c2d87f$97d7e570$a5452a0a@jschmittlt>

Apologies for being so ambiguous...

> -----Original Message-----
> From: Mark Mitchell [mailto:mark at codesourcery.com]
> Sent: Wednesday, February 19, 2003 1:45 PM
> To: John Schmitt
> Cc: qmtest at codesourcery.com
> Subject: RE: [qmtest] getting started


> [random stuff]

> I'm not sure if I understand this question, but I think the answer is
> "no".
> There's no integration between QMTest and source management systems;
how
> the tests get back into an official repository is beyond the scope of
> QMTest.

That's exactly what I was asking about.  I realise that this isn't
QMTest's responsibility, but if you have any best practice guidelines,
I'd love to hear them.

> > - automatically create bugzilla tickets for
> >   new/unexpected failures?
> 
> No -- although adding automatic support for talking to defect tracking
> systems is definitely something in which we are interested.

In the case of bugzilla, this might be a place to start:
http://quigley.durrow.com/bugzilla.html

> 
> > - when reporting a failure, how can I specify which
> >   tag should be used to check out the source when
> >   attempting to reproduce the problem
> 
> A failure in QMTest, or a failure in the tested sotware?

A failure in tested software.  I guess the test suite needs to set some
variable (the value of the tag) when the prerequisite is run (which
checks out the software about to be tested)  and then reference that
variable when the report is generated.  Advice on other approaches
welcome.

> 
> > - how is the test database propogated to the test machines?
> >   -- share them over nfs?
> 
> Correct -- or any other method you like.  The key constraint is that
the
> test database has to be accessible in the same way on all of the
machines
> being used to run tests.

My thought was that one of the first prerequisites must ensure that the
test database gets checked-out/copied/propogated to a machine that is
about to be tested.  Am I describing a chicken-and-egg thing here?

> 
> > - are there any database classes that stores tests as
> >   plain text files?
> 
> Our GCC test database handles GCC tests that are stored simply as
source
> code, which might qualify.

I browsed the source a little and I think
/home/qmtest/lib/qm/qm/test/file_database.py is what I was thinking
about.  I fear that I don't quite understand the cost/benefit of
plaintext/xml tradeoff here.  Am I missing some obvious benefit?

Thanks for the feedback.

John



From ghost at cs.msu.su  Thu Feb 20 06:25:58 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Thu, 20 Feb 2003 09:25:58 +0300
Subject: [qmtest] getting started
In-Reply-To: <000301c2d87f$97d7e570$a5452a0a@jschmittlt>
References: <000301c2d87f$97d7e570$a5452a0a@jschmittlt>
Message-ID: <200302200925.58426.ghost@cs.msu.su>

John Schmitt wrote:

> > > - automatically create bugzilla tickets for
> > >   new/unexpected failures?
> >
> > No -- although adding automatic support for talking to defect tracking
> > systems is definitely something in which we are interested.
>
> In the case of bugzilla, this might be a place to start:
> http://quigley.durrow.com/bugzilla.html

This might be obvious, but still it's not mentioned. QMTest can output test 
results as XML file. It would be simple to read that XML, find tests with 
failed expectation, and open bugzilla issues for those, for example using
command line interface tool you mention. 

> > > - when reporting a failure, how can I specify which
> > >   tag should be used to check out the source when
> > >   attempting to reproduce the problem
> >
> > A failure in QMTest, or a failure in the tested sotware?
>
> A failure in tested software.  I guess the test suite needs to set some
> variable (the value of the tag) when the prerequisite is run (which
> checks out the software about to be tested)  and then reference that
> variable when the report is generated.  Advice on other approaches
> welcome.

I have not yet set up nightly builds/tests and there are no branches at the 
moment, but still.... when I get to it the the procedure will be simple

1. Checkout the needed version
2. Build
3. Test

I think this is more straigtforward than making resource for checking 
out/building. And less work: you don't have to make all your tests depend on 
the resource.

> I browsed the source a little and I think
> /home/qmtest/lib/qm/qm/test/file_database.py is what I was thinking
> about.  I fear that I don't quite understand the cost/benefit of
> plaintext/xml tradeoff here.  Am I missing some obvious benefit?

IMO, xml database is good because it's already implemented. I get the ability 
to manipulate all the fields from the gui and store tests. Other test formats 
might be good for special purposes (like testing compiler, where source file 
is natural test case)

- Volodya


From mark at codesourcery.com  Tue Feb 25 00:27:15 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 24 Feb 2003 16:27:15 -0800
Subject: PATCH: Fix JavaScript menus
Message-ID: <200302250027.h1P0RFx7009234@doubledemon.codesourcery.com>


This patch (checked in to the 2.0 branch and the mainline) fixes the
problem that some people have had with the JavaScript menus not
working correctly in Mozilla.

We'll be spinning a new 2.0.3 release shortly with this fix, and the
fix for parallel runs.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-02-24  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/share/dtml/navigation-bar.dtml (hide_menu): Tweak for
	Mozilla 1.0.1 compatibility.

Index: qm/test/share/dtml/navigation-bar.dtml
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/share/dtml/navigation-bar.dtml,v
retrieving revision 1.5
diff -c -5 -p -r1.5 navigation-bar.dtml
*** qm/test/share/dtml/navigation-bar.dtml	1 Jan 2003 03:38:45 -0000	1.5
--- qm/test/share/dtml/navigation-bar.dtml	25 Feb 2003 00:09:14 -0000
*************** function show_menu(event, id) {
*** 77,103 ****
          active_menu.style.visibility = "hidden";
      menu.style.visibility = "visible";
      active_menu = menu;
  }
  
  
  function hide_menu(event) {
      var target;
    
      if (window.event) {
          target = window.event.toElement;
      } else {
          target = event.relatedTarget;
      }
!     if (!is_parent_of(this, target))
          this.style.visibility = "hidden";
  }
  
  
  function hide_active_menu(event) {
      var target;
  
      if (!active_menu)
          return;
    
      if (window.event) {
          target = window.event.toElement;
--- 77,109 ----
          active_menu.style.visibility = "hidden";
      menu.style.visibility = "visible";
      active_menu = menu;
  }
  
+ /* Called when the mouseout event is received by a menu.  */
  
  function hide_menu(event) {
      var target;
    
+     /* Figure out to which element the mouse is moving.  */
      if (window.event) {
          target = window.event.toElement;
      } else {
          target = event.relatedTarget;
      }
!     /* If that element is not a child of the menu, hide the menu.  */
!     if (target && !is_parent_of(this, target))
          this.style.visibility = "hidden";
  }
  
+ /* Called when an item on the menu bar is activated.  The event is
+    either a mouseover or onclick event.  */
  
  function hide_active_menu(event) {
      var target;
  
+     /* If there is no active menu, there's nothing to hide.  */
      if (!active_menu)
          return;
    
      if (window.event) {
          target = window.event.toElement;


From mark at codesourcery.com  Tue Feb 25 07:35:01 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 24 Feb 2003 23:35:01 -0800
Subject: QMTest 2.0.3 Released
Message-ID: <1046158501.11789.294.camel@doubledemon.codesourcery.com>

QMTest 2.0.3 has been released.

This is a bug-fix release with fixes for exactly two bugs:

  A JavaScript issue that prevented the pop-up menus in the GUI from
  working correctly with Mozilla 1.0.1 was corrected.

  A bug that could cause QMTest to hang when running tests in parallel
  has been corrected.

The release is available here:

  http://www.codesourcery.com/qm/qmtest_download

For this release, the GNU/Linux binaries and RPMS were built on a
Red Hat 8.0 machine, rather than a Red Hat 7.x machine.

If you would like a Red Hat 7.x RPM, let me know -- we can build those
binaries too, if there is still demand.

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From ghost at cs.msu.su  Tue Feb 25 11:02:58 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Tue, 25 Feb 2003 14:02:58 +0300
Subject: Expectations for "qmtest gui"
Message-ID: <200302251402.58218.ghost@cs.msu.su>


Hello,
I've noticed (and I think not for the first time), that "qmtest gui" command 
does not allow to specify expectations on the command line. Is this 
deliberate? I find the need to go though the gui quite troublesome.

I can write a patch myself, if this is a good idea.

- Volodya


From mark at codesourcery.com  Thu Feb 27 08:08:49 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Thu, 27 Feb 2003 00:08:49 -0800
Subject: [qmtest] Expectations for "qmtest gui"
In-Reply-To: <200302251402.58218.ghost@cs.msu.su>
Message-ID: <4200000.1046333329@warlock.codesourcery.com>



--On Tuesday, February 25, 2003 02:02:58 PM +0300 Vladimir Prus 
<ghost at cs.msu.su> wrote:

> I've noticed (and I think not for the first time), that "qmtest gui"
> command  does not allow to specify expectations on the command line. Is
> this  deliberate?

No, just an oversight.  If you have a patch for this, that would be great!

-- 
Mark Mitchell                mark at codesourcery.com
CodeSourcery, LLC            http://www.codesourcery.com


From ghost at cs.msu.su  Thu Feb 27 09:38:44 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Thu, 27 Feb 2003 12:38:44 +0300
Subject: [PATCH] Expectations for "qmtest gui"
In-Reply-To: <4200000.1046333329@warlock.codesourcery.com>
References: <4200000.1046333329@warlock.codesourcery.com>
Message-ID: <200302271238.44343.ghost@cs.msu.su>

Mark Mitchell wrote:
> --On Tuesday, February 25, 2003 02:02:58 PM +0300 Vladimir Prus
>
> <ghost at cs.msu.su> wrote:
> > I've noticed (and I think not for the first time), that "qmtest gui"
> > command  does not allow to specify expectations on the command line. Is
> > this  deliberate?
>
> No, just an oversight.  If you have a patch for this, that would be great!

Here it goes:

Log message:
Add -O option to "qmtest gui". 

* qm/test/cmdline.py
  (QMTest.commands_spec): Add the option.
  (QMTest.__ExecuteServer): Get expectations and pass them to
     server

* qm/test/web/web.py
  (QMTestServer.__init__): New parameter 'expectations'. Set
    self.__expected_outcomes to the parameter's value.

Patch: (against HEAD)

Index: qm/test/cmdline.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/cmdline.py,v
retrieving revision 1.79
diff -u -r1.79 cmdline.py
--- qm/test/cmdline.py	3 Jan 2003 04:18:21 -0000	1.79
+++ qm/test/cmdline.py	27 Feb 2003 09:35:47 -0000
@@ -294,6 +294,7 @@
            pid_file_option_spec,
            port_option_spec,
            result_format_spec,
+           outcomes_option_spec,           
            targets_option_spec
            )
          ),
@@ -1356,9 +1357,13 @@
         # Compute the context in which the tests will be run.
         context = self.MakeContext()
 
+        # Get the expected outcomes.
+        expectations = self.__GetExpectedOutcomes()
+        
         # Set up the server.
         server = qm.test.web.web.QMTestServer(database, port_number, address,
-                                              log_file, targets, context)
+                                              log_file, targets, context,
+                                              expectations)
         port_number = server.GetServerAddress()[1]
         
         # Construct the URL to the main page on the server.
Index: qm/test/web/web.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/web/web.py,v
retrieving revision 1.58
diff -u -r1.58 web.py
--- qm/test/web/web.py	3 Jan 2003 21:54:24 -0000	1.58
+++ qm/test/web/web.py	27 Feb 2003 09:35:48 -0000
@@ -1472,7 +1472,7 @@
     """A 'QMTestServer' is the web GUI interface to QMTest."""
 
     def __init__(self, database, port, address, log_file,
-                 targets, context):
+                 targets, context, expectations):
         """Create and bind an HTTP server.
 
         'database' -- The test database to serve.
@@ -1567,8 +1567,8 @@
             self.RegisterScript(qm.fields.AttachmentField.download_url,
                                 attachment_store.HandleDownloadRequest)
 
-        # There are no results yet.
-        self.__expected_outcomes = {}
+        self.__expected_outcomes = expectations
+        # There are no results yet.        
         self.__results_stream = StorageResultsStream()
         self.__results_stream.Summarize()
         # There is no execution thread.




- Volodya



From ghost at cs.msu.su  Thu Feb 27 09:44:34 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Thu, 27 Feb 2003 12:44:34 +0300
Subject: [PATCH] make "qmtest extension" list result streams
Message-ID: <200302271244.34551.ghost@cs.msu.su>


Hi,
I've noticed that "qmtest extensions" does not list result stream classes.
The patch is really trivial:

Log: 
Fix "qmtest extensions".

* qt/test/cmdline.py
    (QMTest.__ExecuteExtensions): Use global 'extension_kinds' variable,
      instead of duplicating the same list of kinds.

Index: qm/test/cmdline.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/cmdline.py,v
retrieving revision 1.79
diff -u -r1.79 cmdline.py
--- qm/test/cmdline.py	3 Jan 2003 04:18:21 -0000	1.79
+++ qm/test/cmdline.py	27 Feb 2003 09:44:47 -0000
@@ -888,7 +888,8 @@
 
         # Figure out what kinds of extensions we're going to list.
         kind = self.GetCommandOption("kind")
-        kinds = ['test', 'resource', 'database', 'target']
+        global extension_kinds
+        kinds = extension_kinds
         if kind:
             if kind not in kinds:
                 raise qm.cmdline.CommandError, \


- Volodya



From mark at codesourcery.com  Fri Feb 28 06:19:58 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 27 Feb 2003 22:19:58 -0800
Subject: [PATCH] Expectations for "qmtest gui"
In-Reply-To: <200302271238.44343.ghost@cs.msu.su>
References: <4200000.1046333329@warlock.codesourcery.com> 
	<200302271238.44343.ghost@cs.msu.su>
Message-ID: <1046413198.5171.85.camel@doubledemon.codesourcery.com>

On Thu, 2003-02-27 at 01:38, Vladimir Prus wrote:
> Mark Mitchell wrote:
> > --On Tuesday, February 25, 2003 02:02:58 PM +0300 Vladimir Prus
> >
> > <ghost at cs.msu.su> wrote:
> > > I've noticed (and I think not for the first time), that "qmtest gui"
> > > command  does not allow to specify expectations on the command line. Is
> > > this  deliberate?
> >
> > No, just an oversight.  If you have a patch for this, that would be great!
> 
> Here it goes:

I've committed this on the mainline.  Thanks!

(I added the requisite documentation to test/doc/reference.xml.)

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com



From mark at codesourcery.com  Fri Feb 28 07:00:05 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 27 Feb 2003 23:00:05 -0800
Subject: [qmtest] [PATCH] make "qmtest extension" list result streams
In-Reply-To: <200302271244.34551.ghost@cs.msu.su>
References: <200302271244.34551.ghost@cs.msu.su>
Message-ID: <1046415605.4831.88.camel@doubledemon.codesourcery.com>

On Thu, 2003-02-27 at 01:44, Vladimir Prus wrote:
> 
> Hi,
> I've noticed that "qmtest extensions" does not list result stream classes.
> The patch is really trivial:
> 
> Log: 
> Fix "qmtest extensions".
> 
> * qt/test/cmdline.py
>     (QMTest.__ExecuteExtensions): Use global 'extension_kinds' variable,
>       instead of duplicating the same list of kinds.

I committed this variant.  Thanks!

-- 
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com
-------------- next part --------------
2003-02-27  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/cmdline.py (_make_comma_separated_string): New
	function.
	(QMTest.commands_spec): Use it.
	(QMTest.__ExecuteExtensions): Use base.extension_kinds.
	(QMTest.__ExecuteRegister): Likewise.

Index: qm/test/cmdline.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/cmdline.py,v
retrieving revision 1.80
diff -c -5 -p -r1.80 cmdline.py
*** qm/test/cmdline.py	28 Feb 2003 06:17:12 -0000	1.80
--- qm/test/cmdline.py	28 Feb 2003 06:42:47 -0000
***************
*** 12,22 ****
  # For license terms see the file COPYING.
  #
  ########################################################################
  
  ########################################################################
! # imports
  ########################################################################
  
  from   __future__ import nested_scopes
  import base
  import database
--- 12,22 ----
  # For license terms see the file COPYING.
  #
  ########################################################################
  
  ########################################################################
! # Imports
  ########################################################################
  
  from   __future__ import nested_scopes
  import base
  import database
*************** import signal
*** 37,54 ****
  import string
  import sys
  import xml.sax
  
  ########################################################################
! # variables
  ########################################################################
  
  _the_qmtest = None
  """The global 'QMTest' object."""
  
  ########################################################################
! # classes
  ########################################################################
  
  class QMTest:
      """An instance of QMTest."""
  
--- 37,90 ----
  import string
  import sys
  import xml.sax
  
  ########################################################################
! # Variables
  ########################################################################
  
  _the_qmtest = None
  """The global 'QMTest' object."""
  
  ########################################################################
! # Functions
! ########################################################################
! 
! def _make_comma_separated_string (items, conjunction):
!     """Return a string consisting of the 'items', separated by commas.
! 
!     'items' -- A list of strings giving the items in the list.
! 
!     'conjunction' -- A string to use before the final item, if there is
!     more than one.
! 
!     returns -- A string consisting all of the 'items', separated by
!     commas, and with the 'conjunction' before the final item."""
!     
!     s = ""
!     need_comma = 0
!     # Go through almost all of the items, adding them to the
!     # comma-separated list.
!     for i in items[:-1]:
!         # Add a comma if this isn't the first item in the list.
!         if need_comma:
!             s += ", "
!         else:
!             need_comma = 1
!         # Add this item.
!         s += "'%s'" % i
!     # The last item is special, because we need to include the "or".
!     if items:
!         i = items[-1]
!         if need_comma:
!             s += ", %s " % conjunction
!         s += "'%s'" % i
! 
!     return s
!     
! ########################################################################
! # Classes
  ########################################################################
  
  class QMTest:
      """An instance of QMTest."""
  
*************** class QMTest:
*** 304,316 ****
           "",
           """
  List the available extension classes.
  
  Use the '--kind' option to limit the classes displayed to test classes,
! resource classes, etc.  The parameter to '--kind' can be one of 'test',
! 'resource', 'database', or 'target'.
!          """,
           (
             extension_kind_option_spec,
             help_option_spec,
           )
          ),
--- 340,351 ----
           "",
           """
  List the available extension classes.
  
  Use the '--kind' option to limit the classes displayed to test classes,
! resource classes, etc.  The parameter to '--kind' can be one of """  + \
!          _make_comma_separated_string(base.extension_kinds, "or") + "\n",
           (
             extension_kind_option_spec,
             help_option_spec,
           )
          ),
*************** resource classes, etc.  The parameter to
*** 325,336 ****
          ("register",
           "Register an extension class.",
           "KIND CLASS",
           """
  Register an extension class with QMTest.  KIND is the kind of extension
! class to register; it must be one of 'test', 'resource', 'database',
! or 'target'.
  
  The CLASS gives the name of the class in the form 'module.class'.
  
  QMTest will search the available extension class directories to find the
  new CLASS.  QMTest looks for files whose basename is the module name and
--- 360,371 ----
          ("register",
           "Register an extension class.",
           "KIND CLASS",
           """
  Register an extension class with QMTest.  KIND is the kind of extension
! class to register; it must be one of """ + \
!          _make_comma_separated_string(base.extension_kinds, "or") + """
  
  The CLASS gives the name of the class in the form 'module.class'.
  
  QMTest will search the available extension class directories to find the
  new CLASS.  QMTest looks for files whose basename is the module name and
*************** Valid formats are "full", "brief" (the d
*** 887,897 ****
              # command can be used without a database.
              database = None
  
          # Figure out what kinds of extensions we're going to list.
          kind = self.GetCommandOption("kind")
!         kinds = ['test', 'resource', 'database', 'target']
          if kind:
              if kind not in kinds:
                  raise qm.cmdline.CommandError, \
                        qm.error("invalid extension kind",
                                 kind = kind)
--- 922,932 ----
              # command can be used without a database.
              database = None
  
          # Figure out what kinds of extensions we're going to list.
          kind = self.GetCommandOption("kind")
!         kinds = base.extension_kinds
          if kind:
              if kind not in kinds:
                  raise qm.cmdline.CommandError, \
                        qm.error("invalid extension kind",
                                 kind = kind)
*************** Valid formats are "full", "brief" (the d
*** 930,940 ****
              return 1
          kind = self.__arguments[0]
          class_name = self.__arguments[1]
  
          # Check that the KIND is valid.
!         if kind not in ['test', 'resource', 'database', 'target']:
              raise qm.cmdline.CommandError, \
                    qm.error("invalid extension kind",
                             kind = kind)
  
          # Check that the CLASS_NAME is well-formed.
--- 965,975 ----
              return 1
          kind = self.__arguments[0]
          class_name = self.__arguments[1]
  
          # Check that the KIND is valid.
!         if kind not in base.extension_kinds:
              raise qm.cmdline.CommandError, \
                    qm.error("invalid extension kind",
                             kind = kind)
  
          # Check that the CLASS_NAME is well-formed.
*************** Valid formats are "full", "brief" (the d
*** 1474,1484 ****
          
          return test_names
  
                         
  ########################################################################
! # functions
  ########################################################################
  
  def get_qmtest():
      """Returns the global QMTest object.
  
--- 1509,1519 ----
          
          return test_names
  
                         
  ########################################################################
! # Functions
  ########################################################################
  
  def get_qmtest():
      """Returns the global QMTest object.
  

From ghost at cs.msu.su  Fri Feb 28 07:11:49 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Fri, 28 Feb 2003 10:11:49 +0300
Subject: [qmtest] Re: [PATCH] Expectations for "qmtest gui"
In-Reply-To: <1046413198.5171.85.camel@doubledemon.codesourcery.com>
References: <4200000.1046333329@warlock.codesourcery.com> <200302271238.44343.ghost@cs.msu.su> <1046413198.5171.85.camel@doubledemon.codesourcery.com>
Message-ID: <200302281011.49596.ghost@cs.msu.su>

Mark Mitchell wrote:

> > > No, just an oversight.  If you have a patch for this, that would be
> > > great!
> >
> > Here it goes:
>
> I've committed this on the mainline.  Thanks!

Great!

> (I added the requisite documentation to test/doc/reference.xml.)

I will try to add docs with if I even send further patches for which docs 
changes are relevant. OTOH, having almost no experience with DocBook, I might 
fail ;-)

- Volodya



