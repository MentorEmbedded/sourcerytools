From mark at codesourcery.com  Thu Dec  4 02:39:19 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Wed, 3 Dec 2003 18:39:19 -0800
Subject: PATCH: Fix no-documentation builds
Message-ID: <200312040239.hB42dJ65006709@sirius.codesourcery.com>


My recent configury changes caused problems for builds where Jade was
unavailable and where the documentation had not already been pre-built
into the source tree.  Fixed thusly.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-12-03  Mark Mitchell  <mark at codesourcery.com>

	* setup.py: Use glob expressions for documentation.
	* doc/qm-sgml.dsl: Do not produce a manifest.
	* qmdist/command/build_doc.py (build_doc.run): Tidy.
	* qmdist/command/install_data.py (glob): Import it.
	(types.StringType): Likewise.
	(install_data.initialize_options): New method.

Index: setup.py
===================================================================
RCS file: /home/qm/Repository/qm/setup.py,v
retrieving revision 1.8
diff -c -5 -p -r1.8 setup.py
*** setup.py	24 Nov 2003 06:35:00 -0000	1.8
--- setup.py	4 Dec 2003 02:34:58 -0000
*************** def select_share_files(share_files, dir,
*** 78,96 ****
  
  diagnostics=['common.txt','common-help.txt']
  
  messages=['help.txt', 'diagnostics.txt']
  
- if not os.path.isdir(os.path.normpath('qm/test/doc/html')):
-     print """Warning: to include documentation run the
-              \'build_doc\' command first."""
-     html_docs = []
- 
- else:
-     html_docs = filter(lambda f: f.endswith(".html"),
-                        os.listdir(os.path.normpath('qm/test/doc/html')))
- 
  tutorial_files = files_with_ext("qm/test/share/tutorial/tdb", ".qmt")
  test_dtml_files = files_with_ext("qm/test/share/dtml", ".dtml")
  
  share_files = {}
  os.path.walk("share", select_share_files, share_files)
--- 78,87 ----
*************** setup(name="qm", 
*** 138,151 ****
                     prefix(messages, 'qm/test/share/messages')),
                    # DTML files for the GUI.
                    ("qm/dtml/test", test_dtml_files),
                    # The documentation.
                    ('qm/doc', ('README', 'COPYING')),
!                   ('qm/doc/test/html',
!                    prefix(html_docs, 'qm/test/doc/html')),
!                   ('qm/doc/test/print',
!                    ["qm/test/doc/print/manual.pdf"]),
                    # The tutorial.
                    ("qm/tutorial/test/tdb", tutorial_files),
                    ("qm/tutorial/test/tdb/QMTest",
                     ("qm/test/share/tutorial/tdb/QMTest/configuration",))]
                   # The files from the top-level "share" directory.
--- 129,140 ----
                     prefix(messages, 'qm/test/share/messages')),
                    # DTML files for the GUI.
                    ("qm/dtml/test", test_dtml_files),
                    # The documentation.
                    ('qm/doc', ('README', 'COPYING')),
!                   ('qm/doc/test/html', ['qm/test/doc/html/*.html']),
!                   ('qm/doc/test/print', ["qm/test/doc/print/*.pdf"]),
                    # The tutorial.
                    ("qm/tutorial/test/tdb", tutorial_files),
                    ("qm/tutorial/test/tdb/QMTest",
                     ("qm/test/share/tutorial/tdb/QMTest/configuration",))]
                   # The files from the top-level "share" directory.
Index: doc/qm-sgml.dsl
===================================================================
RCS file: /home/qm/Repository/qm/doc/qm-sgml.dsl,v
retrieving revision 1.2
diff -c -5 -p -r1.2 qm-sgml.dsl
*** doc/qm-sgml.dsl	28 May 2002 01:37:53 -0000	1.2
--- doc/qm-sgml.dsl	4 Dec 2003 02:34:59 -0000
***************
*** 44,57 ****
  
  ;; Don't place the first section of each chapter in the same chunk as
  ;; the chapter head.
  (define (chunk-skip-first-element-list) (list))
  
- ;; Write a manifest of created files to docbook-html.manifest.
- (define html-manifest #t)
- (define html-manifest-filename "docbook-html.manifest")
- 
  ;; Use element ids to generate chunk filenames
  (define %use-id-as-filename% #t)
  
  ;; Emit legal notices in a separate chunk.
  (define %generate-legalnotice-link% #t)
--- 44,53 ----
Index: qmdist/command/build_doc.py
===================================================================
RCS file: /home/qm/Repository/qm/qmdist/command/build_doc.py,v
retrieving revision 1.2
diff -c -5 -p -r1.2 build_doc.py
*** qmdist/command/build_doc.py	24 Nov 2003 00:52:58 -0000	1.2
--- qmdist/command/build_doc.py	4 Dec 2003 02:34:59 -0000
*************** class build_doc(build.build):
*** 96,106 ****
          source_files = map(normpath,
                             ['qm/test/doc/manual.xml',
                              'qm/test/doc/introduction.xml',
                              'qm/test/doc/tour.xml',
                              'qm/test/doc/reference.xml'])
! 
          jade = find_executable('jade')
          dcl = find_file(map(normpath,
                              ['/usr/share/doc/jade*/pubtext/xml.dcl',
                               '/usr/share/doc/openjade*/pubtext/xml.dcl',
                               '/usr/doc/jade*/pubtext/xml.dcl',
--- 96,106 ----
          source_files = map(normpath,
                             ['qm/test/doc/manual.xml',
                              'qm/test/doc/introduction.xml',
                              'qm/test/doc/tour.xml',
                              'qm/test/doc/reference.xml'])
!         
          jade = find_executable('jade')
          dcl = find_file(map(normpath,
                              ['/usr/share/doc/jade*/pubtext/xml.dcl',
                               '/usr/share/doc/openjade*/pubtext/xml.dcl',
                               '/usr/doc/jade*/pubtext/xml.dcl',
*************** class build_doc(build.build):
*** 117,143 ****
                              ['/usr/lib/sgml',
                               '/usr/share/sgml/docbook']),
                          os.path.isdir)
  
          if not jade or not dcl or not stylesheets or not dtd:
!             self.warn("can't build documentation")
              return
  
          # All files that are generated below are generated in the
          # source tree.  That is the only way that Distutils will
          # install the documentation as data files (in "share") rather
          # than as program files (in "lib").
          
          #
          # Build html output.
          #
!         target = normpath("qm/test/doc/html")
!         if newer_group(source_files, target):
              self.announce("building html manual")
!             # Remove the target first such that its new mtime reflects
              # this build.
!             if os.path.isdir(target): remove_tree(target)
              self.call_jade(jade, ['-D%s'%dtd, '-D%s'%stylesheets],
                             dcl, 'sgml',
                             normpath('qm/test/doc/manual.xml'),
                             normpath('qm/test/doc'))
              tidy = find_executable('tidy')
--- 117,143 ----
                              ['/usr/lib/sgml',
                               '/usr/share/sgml/docbook']),
                          os.path.isdir)
  
          if not jade or not dcl or not stylesheets or not dtd:
!             self.warn("cannot build documentation")
              return
  
          # All files that are generated below are generated in the
          # source tree.  That is the only way that Distutils will
          # install the documentation as data files (in "share") rather
          # than as program files (in "lib").
          
          #
          # Build html output.
          #
!         html_dir = os.path.join("qm", "test", "doc", "html")
!         if newer_group(source_files, html_dir):
              self.announce("building html manual")
!             # Remove the html_dir first such that its new mtime reflects
              # this build.
!             if os.path.isdir(html_dir): remove_tree(html_dir)
              self.call_jade(jade, ['-D%s'%dtd, '-D%s'%stylesheets],
                             dcl, 'sgml',
                             normpath('qm/test/doc/manual.xml'),
                             normpath('qm/test/doc'))
              tidy = find_executable('tidy')
*************** class build_doc(build.build):
*** 175,190 ****
              os.remove(orig_tex_manual)
  
          #
          # Build pdf output.
          #
!         target = normpath("qm/test/doc/print/manual.pdf")
!         if newer_group(source_files, target):
              self.announce("building pdf manual")
!             # Remove the target first such that its new mtime reflects
              # this build.
!             if os.path.isfile(target): os.remove(target)
              cwd = os.getcwd()
              os.chdir("qm/test/doc/print")
              for i in xrange(3):
                  self.spawn(['pdfjadetex', "manual.tex"])
              os.chdir(cwd)
--- 175,190 ----
              os.remove(orig_tex_manual)
  
          #
          # Build pdf output.
          #
!         pdf_file = os.path.join("qm", "test", "doc", "print", "manual.pdf")
!         if newer_group(source_files, pdf_file):
              self.announce("building pdf manual")
!             # Remove the pdf_file first such that its new mtime reflects
              # this build.
!             if os.path.isfile(pdf_file): os.remove(pdf_file)
              cwd = os.getcwd()
              os.chdir("qm/test/doc/print")
              for i in xrange(3):
                  self.spawn(['pdfjadetex', "manual.tex"])
              os.chdir(cwd)
Index: qmdist/command/install_data.py
===================================================================
RCS file: /home/qm/Repository/qm/qmdist/command/install_data.py,v
retrieving revision 1.5
diff -c -5 -p -r1.5 install_data.py
*** qmdist/command/install_data.py	24 Nov 2003 00:52:58 -0000	1.5
--- qmdist/command/install_data.py	4 Dec 2003 02:34:59 -0000
***************
*** 16,27 ****
--- 16,29 ----
  ########################################################################
  # Imports
  ########################################################################
  
  from   distutils.command import install_data as base
+ import glob
  import os
  from   qmdist.command import get_relative_path
+ from   types import StringType
  
  ########################################################################
  # Classes
  ########################################################################
  
*************** class install_data(base.install_data):
*** 29,40 ****
      """Extends 'install_data' by generating a config module.
  
      This module contains data only available at installation time,
      such as installation paths for data files."""
  
!     def run(self):
  
          # Do the standard installation.
          base.install_data.run(self)
          
          i = self.distribution.get_command_obj('install')
          il = self.distribution.get_command_obj('install_lib')
--- 31,61 ----
      """Extends 'install_data' by generating a config module.
  
      This module contains data only available at installation time,
      such as installation paths for data files."""
  
!     def initialize_options(self):
! 
!         base.install_data.initialize_options(self)
!         # Expand glob expressions in 'data_files'.
!         new_data_files = []
!         for f in self.data_files:
!             if type(f) == StringType:
!                 f = glob.glob(f)
!             else:
!                 dir, fs = f
!                 new_fs = []
!                 for f in fs:
!                     new_fs.extend(glob.glob(f))
!                 f = (dir, new_fs)
!             new_data_files.append(f)
!         self.data_files = new_data_files
!         self.distribution.data_files = new_data_files
  
+ 
+     def run(self):
+         
          # Do the standard installation.
          base.install_data.run(self)
          
          i = self.distribution.get_command_obj('install')
          il = self.distribution.get_command_obj('install_lib')


From jtc at acorntoolworks.com  Wed Dec 10 20:46:59 2003
From: jtc at acorntoolworks.com (J.T. Conklin)
Date: 10 Dec 2003 12:46:59 -0800
Subject: Some newbie questions...
Message-ID: <87ptewqu2k.fsf@orac.acorntoolworks.com>

I have been experimenting with QMTest, have read the manual, and have
gone through the tutorial.

I have hopes that QMTest will enable my project to follow through on
good intentions of having a good testsuite.  There have been efforts
in the past (primarily a hoge-poge of unit tests, each with it's own
mechanism for reporting success/failure), the lack of an framework has
lead to the tests not being run and eventually to test bitrot.

While the manual is pretty good at explaining what can be done, it is
a light on general recommendations for making an effective testsuite.
Part of this is the nature of a flexible framework, but there must be
some best practices that are applicable to wide variety of
applications.

* Are there any recommendations for the use of QMTest with a code
  control system -- especially those unlike CVS where an explicit
  "edit" command must be used before changing files.  There is no
  indication that a change will fail (within the GUI) until you
  OK the changes, where QMTest fails with a python exception (because 
  of the read-only test file).

* Are there any recommendations for the location of executables used
  by tests?  Our unit tests are currently built in the same
  subdirectory as the code that implements the module.  Using absolute
  paths to the test executables does not work, as every engineer has
  their own sandbox; Using relative paths does not work because QMTest
  seems to change directories as it executes.  We could set the PATH
  to include all of the modules in our makefiles (actually SConscripts
  in our case) or maybe have a QMTest wrapper, but that seems pretty
  clumsy.

* The canned Exec tests cause the test program to inherit environment
  variables.  These semantics seem to be just asking for testsuites
  that behaves differently for different users.  If I understand the
  concept of test classes correctly, I think I can get around this 
  by subclassing ExecTestBase and overriding MakeEnvironment, but it
  seems odd that this is necessary.

        --jtc

-- 
J.T. Conklin


From mark at codesourcery.com  Sun Dec 14 22:14:36 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 14 Dec 2003 14:14:36 -0800
Subject: [qmtest] Some newbie questions...
In-Reply-To: <87ptewqu2k.fsf@orac.acorntoolworks.com>
References: <87ptewqu2k.fsf@orac.acorntoolworks.com>
Message-ID: <1071440076.4804.25.camel@minax.codesourcery.com>


> * Are there any recommendations for the use of QMTest with a code
>   control system -- especially those unlike CVS where an explicit
>   "edit" command must be used before changing files.  There is no
>   indication that a change will fail (within the GUI) until you
>   OK the changes, where QMTest fails with a python exception (because 
>   of the read-only test file).

There's no recommendation for that.  It would be nice if QMTest did
better than report the Python exception, though!

> * Are there any recommendations for the location of executables used
>   by tests?  Our unit tests are currently built in the same
>   subdirectory as the code that implements the module.  Using absolute
>   paths to the test executables does not work, as every engineer has
>   their own sandbox; Using relative paths does not work because QMTest
>   seems to change directories as it executes.  We could set the PATH
>   to include all of the modules in our makefiles (actually SConscripts
>   in our case) or maybe have a QMTest wrapper, but that seems pretty
>   clumsy.

QMTest (as of relatively recent versions) does not change directories as
it executes.  It used to (in QMTest 1.x), but does not in QMTest 2.x. 
So, relative paths should work.

> * The canned Exec tests cause the test program to inherit environment
>   variables.  These semantics seem to be just asking for testsuites
>   that behaves differently for different users.  If I understand the
>   concept of test classes correctly, I think I can get around this 
>   by subclassing ExecTestBase and overriding MakeEnvironment, but it
>   seems odd that this is necessary.

We used to think as you do. :-)  However, on many systems some
environment variables (like LD_LIBRARY_PATH on GNU/Linux) must be set or
nothing will work at all.  Therefore, we decided to simply propoagate
the environment.  You are correct about how you can solve the problem.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From Eyalr at corrigent.com  Mon Dec 15 07:58:07 2003
From: Eyalr at corrigent.com (Eyal Raab)
Date: Mon, 15 Dec 2003 09:58:07 +0200
Subject: 'command.ExecTest' could not be found Error
Message-ID: <8FA6CEF9A4E42B48A5F8DC038655B353014EA0A7@mxtlv1.corrigent.com>

Hi, 
I've just installed QMTest and I would like to start using it.
I've followed the instructions in the manual and installed QMTest on Win2000
with Python 22.
The application start successfully and I can add test suites. However, when
I try to add a new test I get the following error shown below.
What am I doing wrong?
Thanks in advance,
Eyal Raab.
Corrigent Systems

Here is the exception:
----------------------
Exception type: qm.common.PythonException
Exception value: The extension class 'command.ExecTest' could not be found.
You may need to set the 'QMTEST_CLASS_PATH' environment variable.
Stack trace:
  File "C:\programs\qm\lib\qm\qm\web.py", line 495, in __HandleScriptRequest
    script_output = self.server.ProcessScript(request)

  File "C:\programs\qm\lib\qm\qm\web.py", line 833, in ProcessScript
    return self.__scripts[request.GetUrl()](request)

  File "C:\programs\qm\lib\qm\qm\test\web\web.py", line 1785, in
HandleNewTest
    return NewItemPage(self, "test")(request)

  File "C:\programs\qm\lib\qm\qm\web.py", line 168, in __call__
    return html_file(self)

  File "C:\programs\qm\lib\qm\zope-dtml\DocumentTemplate\DT_String.py", line
538, in __call__
    try: result = render_blocks(self._v_blocks, md)

  File
"C:\programs\qm\lib\qm\zope-dtml\DocumentTemplate\pDocumentTemplate.py",
line 273, in render_blocks
    if section: section=render_blocks(section,md)

  File
"C:\programs\qm\lib\qm\zope-dtml\DocumentTemplate\pDocumentTemplate.py",
line 250, in render_blocks
    else: section=section(md)

  File "C:\programs\qm\lib\qm\zope-dtml\DocumentTemplate\DT_Util.py", line
334, in eval
    return eval(code,globals,d)

  File "<string>", line 0, in ?

  File "C:\programs\qm\lib\qm\qm\test\web\web.py", line 826, in
GetClassDescriptions
    self.database)

  File "C:\programs\qm\lib\qm\qm\test\base.py", line 285, in
get_extension_class
    directory, directories)

  File "C:\programs\qm\lib\qm\qm\test\base.py", line 217, in
get_extension_class_from_directory
    path + sys.path)

  File "C:\programs\qm\lib\qm\qm\common.py", line 450, in load_class
    module = load_module(module_name, search_path, load_path)

  File "C:\programs\qm\lib\qm\qm\common.py", line 396, in load_module
    module = imp.load_module(name, file, file_name, description)

  File "C:\programs\qm\lib\qm\qm\test\classes\command.py", line 24, in ?
    import qm.executable

  File "C:\programs\qm\lib\qm\qm\executable.py", line 26, in ?
    import pywintypes



From ghost at cs.msu.su  Mon Dec 15 08:06:23 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Mon, 15 Dec 2003 11:06:23 +0300
Subject: Upgrading tests
Message-ID: <200312151106.23686.ghost@cs.msu.su>


I have a bunch of existing tests, which use my custom test class, and the 
primary argument to which are sets of filenames. Now I'd like to change that 
and pass something else instead of set of filenames -- such a the target to 
be built.

The problem is that even if I rewrite the test class to do what I want now, 
I'll still have old database, and I don't want to update it by hand -- and in 
most cases, new test can be created from and old one automatically.

It would be really nice if there were a way to upgrade the test database 
automatically. I envision that each test class has a 'version' attribute, and 
a method which takes old test data, and version of that old data, and creates 
new test. Together with some new command (qmtest upgrate-db, for example), 
that would allow to automatically upgrate test database.

Is something like this available somewhere, or planned?

TIA,
Volodya




From mark at codesourcery.com  Mon Dec 15 16:24:35 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 15 Dec 2003 08:24:35 -0800
Subject: [qmtest] Upgrading tests
In-Reply-To: <200312151106.23686.ghost@cs.msu.su>
References: <200312151106.23686.ghost@cs.msu.su>
Message-ID: <1071505475.17592.3.camel@doubledemon.codesourcery.com>

> Is something like this available somewhere, or planned?

No, there's nothing like that available, but it is a good idea.

It should not be too hard to write a method that iterates over each test
in a database, and rewrites the test.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From jtc at acorntoolworks.com  Mon Dec 15 19:21:18 2003
From: jtc at acorntoolworks.com (J.T. Conklin)
Date: 15 Dec 2003 11:21:18 -0800
Subject: [qmtest] Some newbie questions...
In-Reply-To: <1071440076.4804.25.camel@minax.codesourcery.com>
References: <87ptewqu2k.fsf@orac.acorntoolworks.com>
	<1071440076.4804.25.camel@minax.codesourcery.com>
Message-ID: <87y8tdopjl.fsf@orac.acorntoolworks.com>

Mark Mitchell <mark at codesourcery.com> writes:
> QMTest (as of relatively recent versions) does not change directories as
> it executes.  It used to (in QMTest 1.x), but does not in QMTest 2.x. 
> So, relative paths should work.

I had been using 2.0.3, which changed directories.  But relative paths
work now that I've upgraded to the current CVS snapshot.

        --jtc

-- 
J.T. Conklin


From mark at codesourcery.com  Tue Dec 16 02:30:07 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 15 Dec 2003 18:30:07 -0800
Subject: [qmtest] 'command.ExecTest' could not be found Error
In-Reply-To: <8FA6CEF9A4E42B48A5F8DC038655B353014EA0A7@mxtlv1.corrigent.com>
References: <8FA6CEF9A4E42B48A5F8DC038655B353014EA0A7@mxtlv1.corrigent.com>
Message-ID: <1071541807.6320.82.camel@minax.codesourcery.com>

On Sun, 2003-12-14 at 23:58, Eyal Raab wrote:
> Hi, 
> I've just installed QMTest and I would like to start using it.
> I've followed the instructions in the manual and installed QMTest on Win2000
> with Python 22.
> The application start successfully and I can add test suites. However, when
> I try to add a new test I get the following error shown below.
> What am I doing wrong?

It looks like you didn't install the Python Win32 extensions from:

http://starship.python.net/crew/mhammond/win32/Downloads.html

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From Anders.Hasselqvist at tss.teleca.se  Thu Dec 18 13:19:04 2003
From: Anders.Hasselqvist at tss.teleca.se (Anders Hasselqvist)
Date: Thu, 18 Dec 2003 14:19:04 +0100
Subject: Fewer entries in prerequisites listbox
Message-ID: <9EEF3C7F0B31F544919778197B64D760025934D1@au-sth01-ex.ausys.se>

Hi,

I have a test structure which looks something like this:
---
Functional
  Send
    Send1
      Test1
      Test2
      Test3
    Send2
      Test1
      Test3
  Recv
    Recv1
      Test1
      Test2
---

Test* is my own test classes. In a test group (as I call them) there is
always
atleast one test case and that is always using test class 1. Tests using
class 2
and 3 always have to depend on 1. There is no need for cross dependencies
between
groups.

This structure is used because I inherited an old suite of test scripts
which
We don't want to throw away.

Everything works perfectly. The only thing that annoys me is when editing
tests.
When I want to specify my simple dependencies (prerequisuites) in these
groups
I have to pick the correct test case among 600 other test cases in the
listbox.

My vision is that I can narrow down the entries in the listbox to the test
cases
in the current test group.

What is the best way to do this?

(My head aches, I have a fever and I am very tired but I need to solve this
for
my personal health in the longrun :) )


Regards,
--
Anders Hasselqvist


From mark at codesourcery.com  Mon Dec 22 06:28:44 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 21 Dec 2003 22:28:44 -0800
Subject: [qmtest] Fewer entries in prerequisites listbox
In-Reply-To: <9EEF3C7F0B31F544919778197B64D760025934D1@au-sth01-ex.ausys.se>
References: <9EEF3C7F0B31F544919778197B64D760025934D1@au-sth01-ex.ausys.se>
Message-ID: <1072074524.3474.4.camel@minax.codesourcery.com>

> What is the best way to do this?

We need to build a JavaScript + HTML control for displaying test lists
in a hierarchical fashion, ala the usual "File->Open" dialogs that come
with most Windowing systems.

That would be a nice project, but I don't imagine that we will have time
to work on it any time soon, unless one of our clients specifically
requires that feature.

Yours,

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From ghost at cs.msu.su  Wed Dec 24 09:24:46 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Wed, 24 Dec 2003 12:24:46 +0300
Subject: [qmtest] Upgrading tests
In-Reply-To: <1071505475.17592.3.camel@doubledemon.codesourcery.com>
References: <200312151106.23686.ghost@cs.msu.su> <1071505475.17592.3.camel@doubledemon.codesourcery.com>
Message-ID: <200312241224.46048.ghost@cs.msu.su>

Mark Mitchell wrote:
> > Is something like this available somewhere, or planned?
>
> No, there's nothing like that available, but it is a good idea.
>
> It should not be too hard to write a method that iterates over each test
> in a database, and rewrites the test.

Okay, I've implemented this, and successfully processed around 70 tests -- 
which would be pain to upgrade manually.

The way upgrading works with my implementation is quite simple. If a user 
wants to change some test class, say "History", he first writes new class 
"History2". The new class, besides other methods, should have 'Upgrade' 
method. He tests the new class on a couple of tests -- which must be manually 
upgraded, and they runs
 
   qmtest ...  upgrade-tdb 
             --from some_module.History --to some_module.History2

The upgrade logic is
1. Old test is loaded
2. Instance of new test class is created
3. Method 'Upgrade' on the new instance is called with the old class instance
4. The test is saved.

I'd be happy to send the patch, if there's interest, but there are two things 
I don't like and would prefer to cleanup -- and that requires some 
discussion.

First, problem is that database can't save tests, only instances of 
TestDescriptor. I'm thinking that either database should be able to save 
tests, too, or there should be a method in  Test which return TestDescriptor. 

The biggest problem is that it's hard to create default-initialized instance 
of new test class. I can pass empty mapping for arguments, but 
Runnable.__init__ expects 'extra' keyword arguments. I can work around this, 
too, by passing what Runnable expects, but this starts to be rather messy. 
E.g., if Runnable is changes to require another extra keyword argument, my 
code will break. Is there some way I can cleanly create default-initialized 
test instance?

- Volodya




From ghost at cs.msu.su  Thu Dec 25 11:11:43 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Thu, 25 Dec 2003 14:11:43 +0300
Subject: Colors for fails and unexpected fails
Message-ID: <200312251411.43339.ghost@cs.msu.su>


Hi,
the way QMTest GUI works now, it's not visually apparent where are tests with 
unexpected results. All failed tests are shown in red. Is it possible to 
change color for tests which are expected to fail?

I though it would be nice to mimic the colors used in
http://boost.sourceforge.net/regression-logs/cs-Linux/
developer_summary_page.html

and the result of my attempts are in:

    http://zigzag.cs.msu.su:7813/show_dir.html

Is this idea reasonable? It really should be minor change: just two minor 
tweaks to css and html generation.

- Volodya




From zack at codesourcery.com  Fri Dec 26 03:52:41 2003
From: zack at codesourcery.com (Zack Weinberg)
Date: Thu, 25 Dec 2003 19:52:41 -0800
Subject: [qmtest] Colors for fails and unexpected fails
In-Reply-To: <200312251411.43339.ghost@cs.msu.su> (Vladimir Prus's message
 of "Thu, 25 Dec 2003 14:11:43 +0300")
References: <200312251411.43339.ghost@cs.msu.su>
Message-ID: <878yl0jkvq.fsf@egil.codesourcery.com>

Vladimir Prus <ghost at cs.msu.su> writes:

> Hi,
> the way QMTest GUI works now, it's not visually apparent where are tests with 
> unexpected results. All failed tests are shown in red. Is it possible to 
> change color for tests which are expected to fail?
>
> I though it would be nice to mimic the colors used in
> http://boost.sourceforge.net/regression-logs/cs-Linux/
> developer_summary_page.html
>
> and the result of my attempts are in:
>
>     http://zigzag.cs.msu.su:7813/show_dir.html
>
> Is this idea reasonable? It really should be minor change: just two minor 
> tweaks to css and html generation.

I like the looks of this, but since I suspect it's an area where
reasonable people may disagree I'd suggest you do two things.  First,
I'm pretty sure the GUI is currently done with sloppy nonstandard
HTML.  If you were willing to clean it up, - doing testing with a wide
variety of realworld browsers to ensure it at least degrades
gracefully, - that would be most welcome.  Second, after you do that
it should be easy to let the user "reskin" the GUI with custom CSS,
and we could make your style the default without annoying people who
liked it the old way.

Please forgive if this is incoherent, I'm very tired.

zw



From ghost at cs.msu.su  Fri Dec 26 08:01:12 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Fri, 26 Dec 2003 11:01:12 +0300
Subject: [qmtest] Colors for fails and unexpected fails
In-Reply-To: <878yl0jkvq.fsf@egil.codesourcery.com>
References: <200312251411.43339.ghost@cs.msu.su> <878yl0jkvq.fsf@egil.codesourcery.com>
Message-ID: <200312261101.12042.ghost@cs.msu.su>

Zack Weinberg wrote:

> > and the result of my attempts are in:
> >
> >     http://zigzag.cs.msu.su:7813/show_dir.html
> >
> > Is this idea reasonable? It really should be minor change: just two minor
> > tweaks to css and html generation.
>
> I like the looks of this, but since I suspect it's an area where
> reasonable people may disagree I'd suggest you do two things.  First,
> I'm pretty sure the GUI is currently done with sloppy nonstandard
> HTML.  If you were willing to clean it up, - doing testing with a wide
> variety of realworld browsers to ensure it at least degrades
> gracefully, - that would be most welcome.  Second, after you do that
> it should be easy to let the user "reskin" the GUI with custom CSS,
> and we could make your style the default without annoying people who
> liked it the old way.

I think testing all GUI with lots of realworld browsers is a bit too much work 
for me -- especially since I have convenient access only to Konqueror and 
Mozilla. 

I'm not exactly sure what problems with HTML you mean. The only thing I've 
noticed is that one element has class of qmtest_fail, instead of 
qmtest_unexpected. After this is fixed, change in color is a matter of 
editing css -- which is precisely what I've done. 

The only problem is that I have no idea how to override part of css by browser 
settings -- which I'll try to figure out.

- Volodya




From seefeld at sympatico.ca  Sun Dec 28 19:12:24 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Sun, 28 Dec 2003 14:12:24 -0500
Subject: [qmtest] bug in file_database.FileDatabase
In-Reply-To: <14c89b584e950e889421345cfdbad6333fc7af16@Orthosoft.ca>
References: <14c89b584e950e889421345cfdbad6333fc7af16@Orthosoft.ca>
Message-ID: <3FEF2B18.9090002@sympatico.ca>

Hi there,

could somebody please review the patch attached to the original mail ?

Also, I'd appreciate some help in understanding the design / rational
of the database API. I believe that for all those for whom qmtest does
not work out of the box it is important to understand how to extend
the database classes to adapt qmtest to their own needs.

Thanks,
		Stefan



From mark at codesourcery.com  Sun Dec 28 19:44:04 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 28 Dec 2003 11:44:04 -0800
Subject: [qmtest] Colors for fails and unexpected fails
In-Reply-To: <200312251411.43339.ghost@cs.msu.su>
References: <200312251411.43339.ghost@cs.msu.su>
Message-ID: <1072640644.9994.82.camel@doubledemon.codesourcery.com>

On Thu, 2003-12-25 at 03:11, Vladimir Prus wrote:
> Hi,
> the way QMTest GUI works now, it's not visually apparent where are tests with 
> unexpected results. All failed tests are shown in red. Is it possible to 
> change color for tests which are expected to fail?
> 
> I though it would be nice to mimic the colors used in
> http://boost.sourceforge.net/regression-logs/cs-Linux/
> developer_summary_page.html
> 
> and the result of my attempts are in:
> 
>     http://zigzag.cs.msu.su:7813/show_dir.html
> 
> Is this idea reasonable? It really should be minor change: just two minor 
> tweaks to css and html generation.

I think this is a nice improvement.  Would you please submit a patch?

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From mark at codesourcery.com  Sun Dec 28 19:45:00 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 28 Dec 2003 11:45:00 -0800
Subject: [qmtest] Colors for fails and unexpected fails
In-Reply-To: <878yl0jkvq.fsf@egil.codesourcery.com>
References: <200312251411.43339.ghost@cs.msu.su>
	 <878yl0jkvq.fsf@egil.codesourcery.com>
Message-ID: <1072640700.9996.84.camel@doubledemon.codesourcery.com>

On Thu, 2003-12-25 at 19:52, Zack Weinberg wrote:
> Vladimir Prus <ghost at cs.msu.su> writes:
> 
> > Hi,
> > the way QMTest GUI works now, it's not visually apparent where are tests with 
> > unexpected results. All failed tests are shown in red. Is it possible to 
> > change color for tests which are expected to fail?
> >
> > I though it would be nice to mimic the colors used in
> > http://boost.sourceforge.net/regression-logs/cs-Linux/
> > developer_summary_page.html
> >
> > and the result of my attempts are in:
> >
> >     http://zigzag.cs.msu.su:7813/show_dir.html
> >
> > Is this idea reasonable? It really should be minor change: just two minor 
> > tweaks to css and html generation.
> 
> I like the looks of this, but since I suspect it's an area where
> reasonable people may disagree I'd suggest you do two things.  First,
> I'm pretty sure the GUI is currently done with sloppy nonstandard
> HTML.  

Actually, that's not really true.  I've been over most of the pages with
the W3C validator and fixed most of the problems.  There are definitely
more places where we should rely on CSS, and there are probably still a
few bugs, but a lot of the visual presentation is already being done
with CSS.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From slowrey at nextone.com  Tue Dec 30 21:42:17 2003
From: slowrey at nextone.com (Scott Lowrey)
Date: Tue, 30 Dec 2003 16:42:17 -0500
Subject: Patch 2.0.3 or use latest CVS?
Message-ID: <3FF1F139.5090502@nextone.com>

Hi All,

I'm new to QMTest and, although it's looking like a tool with great 
possibilities, I'm having some problems.  I'm trying to decide if it's 
worth the time to get up to speed with QMTest - my need is urgent and I 
need a robust framework for production test automation soon.

In running 2.0.3 from the website, I came across a small bug that shows 
up during a simple test on a remote target.  The bug is in 
qm/test/classes/rsh_target.py.  I was able to hack it and get the test 
to work.

Today, I built a version of QMTest from the CVS repository and it blew 
up a bit more violently for the same test:

 File "/opt/nextest/lib/qm/qm/test/qmtest.py", line 78, in ?
    exit_code = command.Execute()
  File "/lib/qm/qm/test/cmdline.py", line 569, in Execute
  File "/lib/qm/qm/test/cmdline.py", line 1099, in __ExecuteRemote
  File "/opt/nextest/lib/python2.3/copy_reg.py", line 50, in _reconstructor
    obj = base.__new__(cls, state)
TypeError: ('dict.__new__(X): X is not a type object (classobj)', 
<function _reconstructor at 0x81827d4>, (<class qm.test.context.Context 
at 0x833477c>, <type 'dict'>, {}))

I understand that anything taken directly out of head-of-tree in CVS is 
not going to be a stable release, but I wanted to check it out.  I'm 
happy to stick with 2.0.3 if it's reliable.  (If any further info is 
needed to reproduce the error, let me know.)

Anyway, exploring the mail list archive, I see that several patches have 
been released (for 2.0.3?), and an alpha 2.1 announcement was made some 
time ago.  My questions:

Should I go with 2.0.3 for production use and apply the patches? 
Are there any glaring deficiencies in 2.0.3? 

On a related note, should I send documentation errors and bugs to this list?

Thanks for your time.
-- 
*Scott Lowrey*
NexTone Communications
Germantown, Maryland

/(240)912-1369/
www.nextone.com <http://www.nextone.com>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20031230/78a56456/attachment.html>

