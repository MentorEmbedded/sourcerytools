From gilles_depeyrot at mac.com  Sun Nov  9 08:58:13 2003
From: gilles_depeyrot at mac.com (Gilles Depeyrot)
Date: Sun, 9 Nov 2003 09:58:13 +0100
Subject: command.ShellCommandTest run directory
Message-ID: <D9A066AA-1292-11D8-B4E2-00050211D146@mac.com>

Hi,

I would like to have command.ShellCommandTest tests in a QMTest 
database that run shell scripts that are in the same directory as the 
current test. Previous QMTest releases used to change the current 
directory to the test directory itself which allowed commands to be 
specified as "./someshell.sh". CVS of QMTest no longer seems to change 
the current directory so that the command "./someshell.sh" is no longer 
found.

What is the correct way to specify the directory of the current test in 
the command field of command.ShellCommandTest tests?

Best regards,
Gilles

-- 
Gilles Depeyrot
<mailto:Gilles_Depeyrot at mac.com>



From mark at codesourcery.com  Mon Nov 10 07:56:58 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 09 Nov 2003 23:56:58 -0800
Subject: PATCH: Remove unncessary configury
Message-ID: <1068451018.3120.25.camel@minax.codesourcery.com>

Now that we've switched over to distutils, there's no need for some of
the checks we were previously doing at configure-time.  This patch
removes the unneeded checks, and makes corresponding simplifications of
the GNUMakefile.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
2003-11-09  Mark Mitchell  <mark at codesourcery.com>

	* GNUmakefile.in (DOCUMENTATION): Set value to MAINTAINER_MODE.
	(TIDY): Likewise.
	(TIDYFLAGS): Likewise.
	* configure.in: Do not search for Jade, tidy, DocBook stylesheets,
	etc.

Index: GNUmakefile.in
===================================================================
RCS file: /home/sc/Repository/qm/GNUmakefile.in,v
retrieving revision 1.30
diff -c -5 -p -r1.30 GNUmakefile.in
*** GNUmakefile.in	14 Oct 2003 21:56:06 -0000	1.30
--- GNUmakefile.in	10 Nov 2003 07:47:33 -0000
*************** PYTHON 		= PYTHONPATH=$(subst $(SPACE),:
*** 30,44 ****
  		  $(PYTHONBIN) -O
  PYTHON_PLATFORM = @PYTHON_PLATFORM@
  PYTHONDIRS	= $(TOPDIR)
  
  # Whether or not we should generate documentation.
! DOCUMENTATION = @DOCUMENTATION@
! 
! # Tidy configuration.
! TIDY 		= @TIDY@
! TIDYFLAGS	= -wrap 72 -i --indent-spaces 1
  
  # HappyDoc configuration.
  HAPPYDOC	= @HAPPYDOC@
  
  # Places to install things.
--- 30,40 ----
  		  $(PYTHONBIN) -O
  PYTHON_PLATFORM = @PYTHON_PLATFORM@
  PYTHONDIRS	= $(TOPDIR)
  
  # Whether or not we should generate documentation.
! DOCUMENTATION = @MAINTAINER_MODE@
  
  # HappyDoc configuration.
  HAPPYDOC	= @HAPPYDOC@
  
  # Places to install things.
*************** bindir		= @bindir@
*** 52,62 ****
  # Build Rules
  ########################################################################
  
  .PHONY: all
  all:
! ifeq ($(DOCUMENTATION), yes)
  	$(PYTHON) ./setup.py build_doc
  endif
  	$(PYTHON) ./setup.py build
  
  # Build internal documentation.
--- 48,58 ----
  # Build Rules
  ########################################################################
  
  .PHONY: all
  all:
! ifeq ($(DOCUMENTATION),1)
  	$(PYTHON) ./setup.py build_doc
  endif
  	$(PYTHON) ./setup.py build
  
  # Build internal documentation.
Index: configure.in
===================================================================
RCS file: /home/sc/Repository/qm/configure.in,v
retrieving revision 1.32
diff -c -5 -p -r1.32 configure.in
*** configure.in	10 Aug 2003 21:31:58 -0000	1.32
--- configure.in	10 Nov 2003 07:47:33 -0000
*************** dnl ####################################
*** 111,216 ****
  dnl Look for HappyDoc, which we use to build source documentation.
  dnl ####################################################################
  
  AC_PATH_PROG(HAPPYDOC, happydoc)
  
- dnl ####################################################################
- dnl Jade and Tidy are used to generate documentation.  Without Jade,
- dnl documentation will not be built.
- dnl ####################################################################
- 
- AC_PATH_PROG(JADE, jade, no)
- AC_PATH_PROG(TIDY, tidy, no)
- 
- dnl ####################################################################
- dnl We need XML declarations for Jade, in xml.dcl.  This file should be 
- dnl included with Jade.  Look for it in some usual places.
- dnl ####################################################################
- 
- if test "$JADE" != no; then
-   AC_MSG_CHECKING(xml.dcl)
-   XML_DCL=no
-   for file in \
-     /usr/share/doc/jade*/pubtext/xml.dcl \
-     /usr/share/doc/openjade*/pubtext/xml.dcl \
-     /usr/doc/jade*/pubtext/xml.dcl \
-     /usr/share/sgml/declaration/xml.dcl \
-   ; do
-     if test -r "$file"; then
-       XML_DCL=$file
-       break
-     fi
-   done
-   AC_MSG_RESULT($XML_DCL)
-   AC_SUBST(XML_DCL)
- fi
- 
- dnl ####################################################################
- dnl To build documentation, we need DSSSL stylesheets for DocBook.  Look
- dnl for them in some usual places.
- dnl ####################################################################
- 
- AC_MSG_CHECKING(DocBook stylesheets)
- DOCBOOK_STYLESHEETS=no
- for dir in \
-   /usr/lib/sgml/stylesheets/docbook \
-   /usr/lib/sgml/stylesheet/dsssl/docbook \
- ; do
-   if test -d $dir; then
-     DOCBOOK_STYLESHEETS=$dir
-     break
-   fi
- done
- AC_MSG_RESULT($DOCBOOK_STYLESHEETS)
- AC_SUBST(DOCBOOK_STYLESHEETS)
- 
- dnl #####################
- dnl Find the Docbook DTD.
- dnl #####################
- 
- DOCBOOK_DTD=
- AC_MSG_CHECKING(for docbook DTD)
- AC_ARG_WITH(docbook-dtd, 
-             [  --with-docbook-dtd=PATH directory containing the docbook DTD.],
-             [case $withval in
-                yes) DOCBOOK_DTD=/usr/lib/sgml;;
-                no)  ;;
-                *)   DOCBOOK_DTD=$withval;;
-              esac],
-             DOCBOOK_DTD=/usr/lib/sgml)
- AC_MSG_RESULT($DOCBOOK_DTD)
- AC_SUBST(DOCBOOK_DTD)
- 
- if test "$JADE" = no -o "$XML_DCL" = no -o "$DOCBOOK_DTD" = no; then
-   AC_MSG_WARN(Documentation will not be built.)
-   DOCUMENTATION=no
- else
-   DOCUMENTATION=yes
- fi
- 
  # Do not try to build documentation unless --enable-maintainer-mode
  # was specified.  The documentation is pre-generated for releases.
! if test $DOCUMENTATION = yes && test $MAINTAINER_MODE = 0; then
!   AC_MSG_WARN(Documentation is only built in maintainer mode.)
!   DOCUMENTATION=no
! fi
! 
! # Maintainers should be building documentation.
! if test $DOCUMENTATION = no && test $MAINTAINER_MODE = 1; then
!   AC_MSG_WARN(Documentation will not be built despite --enable-maintainer-mode.)
!   AC_MSG_WARN(Check that Jade and Docbook have been installed.)
! fi
! 
! if test $DOCUMENTATION = yes \
!    || test -f "$srcdir/qm/test/doc/print/manual.pdf"; then
!   INSTALL_DOCUMENTATION=yes
! else
!   INSTALL_DOCUMENTATION=no
  fi
- 
- AC_SUBST(DOCUMENTATION)
- AC_SUBST(INSTALL_DOCUMENTATION)
  
  dnl ####################################################################
  dnl Generate results
  dnl ####################################################################
  
--- 111,125 ----
  dnl Look for HappyDoc, which we use to build source documentation.
  dnl ####################################################################
  
  AC_PATH_PROG(HAPPYDOC, happydoc)
  
  # Do not try to build documentation unless --enable-maintainer-mode
  # was specified.  The documentation is pre-generated for releases.
! if test $MAINTAINER_MODE = 0; then
!   AC_MSG_WARN(Documentation is only built with --enable-maintainer-mode.)
  fi
  
  dnl ####################################################################
  dnl Generate results
  dnl ####################################################################
  

From mark at codesourcery.com  Mon Nov 10 08:15:04 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 10 Nov 2003 00:15:04 -0800
Subject: PATCH: Do not build documentation when running 'make check'
Message-ID: <1068452104.3120.28.camel@minax.codesourcery.com>

It makes sense to have "make check" to rebuild QMTest before running
tests in order to avoid using a stale version of QMTest for testing. 
However, it does not make sense to rebuild the documentation at that
point; that's inordinately time-consuming.

This patch implements this idea.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
A non-text attachment was scrubbed...
Name: diffs
Type: text/x-patch
Size: 708 bytes
Desc: not available
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20031110/466bdae2/attachment.bin>

From mark at codesourcery.com  Mon Nov 10 08:17:17 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 10 Nov 2003 00:17:17 -0800
Subject: PATCH: Fix error-handling in temporary_directory.py
Message-ID: <1068452237.3120.32.camel@minax.codesourcery.com>

This patch fixes a problem with temporary_directory.py; in particular,
in the case that we cannot create the new temporary directory, we
double-faulted by trying to call "sys.exc_info" whithout having first
imported the "sys" module.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
2003-11-09  Mark Mitchell  <mark at codesourcery.com>

	* qm/temporary_directory.py (sys): Import it.

Index: qm/temporary_directory.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/temporary_directory.py,v
retrieving revision 1.1
diff -c -5 -p -r1.1 temporary_directory.py
*** qm/temporary_directory.py	9 May 2003 22:17:44 -0000	1.1
--- qm/temporary_directory.py	10 Nov 2003 08:08:07 -0000
***************
*** 16,25 ****
--- 16,26 ----
  ########################################################################
  
  import dircache
  import os
  import qm
+ import sys
  import tempfile
  
  ########################################################################
  # Classes
  ########################################################################

From mark at codesourcery.com  Mon Nov 10 08:17:51 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 10 Nov 2003 00:17:51 -0800
Subject: [qmtest] PATCH: Do not build documentation when running 'make
	check'
In-Reply-To: <1068452104.3120.28.camel@minax.codesourcery.com>
References: <1068452104.3120.28.camel@minax.codesourcery.com>
Message-ID: <1068452271.3120.34.camel@minax.codesourcery.com>

On Mon, 2003-11-10 at 00:15, Mark Mitchell wrote:
> It makes sense to have "make check" to rebuild QMTest before running
> tests in order to avoid using a stale version of QMTest for testing. 
> However, it does not make sense to rebuild the documentation at that
> point; that's inordinately time-consuming.
> 
> This patch implements this idea.

Oops!  Wrong patch.  Here's the correct one.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
2003-11-09  Mark Mitchell  <mark at codesourcery.com>

	* GNUmakefile.in (.PHONY): Add build and doc.
	(build): New target.
	(doc): Likewise.
	(check-serial): Depend on build, not all.
	(check-threads): Likewise.
	(check-processes): Likewise.
	(check-rsh): Likewise.

Index: GNUmakefile.in
===================================================================
RCS file: /home/sc/Repository/qm/GNUmakefile.in,v
retrieving revision 1.31
diff -c -5 -p -r1.31 GNUmakefile.in
*** GNUmakefile.in	10 Nov 2003 07:52:55 -0000	1.31
--- GNUmakefile.in	10 Nov 2003 08:08:06 -0000
*************** bindir		= @bindir@
*** 46,62 ****
  
  ########################################################################
  # Build Rules
  ########################################################################
  
! .PHONY: all
! all:
  ifeq ($(DOCUMENTATION),1)
! 	$(PYTHON) ./setup.py build_doc
  endif
  	$(PYTHON) ./setup.py build
  
  # Build internal documentation.
  ifneq ($(HAPPYDOC),)
  doc-python:
  	$(PYTHON) $(HAPPYDOC) qm
  else
--- 46,72 ----
  
  ########################################################################
  # Build Rules
  ########################################################################
  
! # Do not want "make all" to build the documentation if the user did
! # not request documentation at configure-time.
  ifeq ($(DOCUMENTATION),1)
! maybe_doc=doc
! else
! maybe_doc=
  endif
+ 
+ .PHONY: all build doc
+ all: build $(maybe_doc)
+ 
+ build:
  	$(PYTHON) ./setup.py build
  
+ doc:
+ 	$(PYTHON) ./setup.py build_doc
+ 
  # Build internal documentation.
  ifneq ($(HAPPYDOC),)
  doc-python:
  	$(PYTHON) $(HAPPYDOC) qm
  else
*************** install: all
*** 98,132 ****
  
  # The check-rsh target is not included here because it requires
  # networking support.
  check: check-serial check-threads check-processes
  
! check-serial: all
  	qm/test/qmtest -D tests run $(QMTESTFLAGS) \
  		-c qmtest_path=qm/test/qmtest
  
! check-threads: all
  	rm -f tests/QMTest/thread_target
  	qm/test/qmtest -D tests create-target -a threads=4 \
  		-T tests/QMTest/thread_target \
  		thread thread_target.ThreadTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/thread_target \
  		$(QMTESTFLAGS) \
  		-c qmtest_path=qm/test/qmtest \
  		-c qmtest_target=tests/QMTest/thread_target
  
! check-processes: all
  	rm -f tests/QMTest/process_target
  	qm/test/qmtest -D tests create-target -a processes=4 \
  		-T tests/QMTest/process_target \
  		process process_target.ProcessTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/process_target \
  		$(QMTESTFLAGS) \
  		-c qmtest_path=qm/test/qmtest \
  		-c qmtest_target=tests/QMTest/process_target
  
! check-rsh: all
  	rm -f tests/QMTest/rsh_target
  	qm/test/qmtest -D tests create-target \
                  -a host=localhost -a remote_shell=ssh \
  		-T tests/QMTest/rsh_target \
  		rsh rsh_target.RSHTarget
--- 108,142 ----
  
  # The check-rsh target is not included here because it requires
  # networking support.
  check: check-serial check-threads check-processes
  
! check-serial: build
  	qm/test/qmtest -D tests run $(QMTESTFLAGS) \
  		-c qmtest_path=qm/test/qmtest
  
! check-threads: build
  	rm -f tests/QMTest/thread_target
  	qm/test/qmtest -D tests create-target -a threads=4 \
  		-T tests/QMTest/thread_target \
  		thread thread_target.ThreadTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/thread_target \
  		$(QMTESTFLAGS) \
  		-c qmtest_path=qm/test/qmtest \
  		-c qmtest_target=tests/QMTest/thread_target
  
! check-processes: build
  	rm -f tests/QMTest/process_target
  	qm/test/qmtest -D tests create-target -a processes=4 \
  		-T tests/QMTest/process_target \
  		process process_target.ProcessTarget
  	qm/test/qmtest -D tests run -T tests/QMTest/process_target \
  		$(QMTESTFLAGS) \
  		-c qmtest_path=qm/test/qmtest \
  		-c qmtest_target=tests/QMTest/process_target
  
! check-rsh: build
  	rm -f tests/QMTest/rsh_target
  	qm/test/qmtest -D tests create-target \
                  -a host=localhost -a remote_shell=ssh \
  		-T tests/QMTest/rsh_target \
  		rsh rsh_target.RSHTarget

From mark at codesourcery.com  Mon Nov 10 17:39:16 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 10 Nov 2003 09:39:16 -0800
Subject: [qmtest] command.ShellCommandTest run directory
In-Reply-To: <D9A066AA-1292-11D8-B4E2-00050211D146@mac.com>
References: <D9A066AA-1292-11D8-B4E2-00050211D146@mac.com>
Message-ID: <1068485956.19347.18.camel@doubledemon.codesourcery.com>

On Sun, 2003-11-09 at 00:58, Gilles Depeyrot wrote:
> Hi,
> 
> I would like to have command.ShellCommandTest tests in a QMTest 
> database that run shell scripts that are in the same directory as the 
> current test. Previous QMTest releases used to change the current 
> directory to the test directory itself which allowed commands to be 
> specified as "./someshell.sh". CVS of QMTest no longer seems to change 
> the current directory so that the command "./someshell.sh" is no longer 
> found.

The reason that QMTest no longer changes the directory is that it is not
safe to change the directory in a multi-threaded program.  In
particular, the directory change affects all of the threads, so if
QMTest were to change the directory for every test it would no longer be
able to run more than one test at once.

> What is the correct way to specify the directory of the current test in 
> the command field of command.ShellCommandTest tests?

I think that the best change would be to have QMTest include the test ID
and the database path in the shell-script context, i.e., as $QMV_*
variables.

Would that work for you?

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From gilles_depeyrot at mac.com  Mon Nov 10 19:42:40 2003
From: gilles_depeyrot at mac.com (Gilles Depeyrot)
Date: Mon, 10 Nov 2003 20:42:40 +0100
Subject: [qmtest] command.ShellCommandTest run directory
In-Reply-To: <1068485956.19347.18.camel@doubledemon.codesourcery.com>
References: <D9A066AA-1292-11D8-B4E2-00050211D146@mac.com> <1068485956.19347.18.camel@doubledemon.codesourcery.com>
Message-ID: <0BB28A9D-13B6-11D8-8341-00050211D146@mac.com>

Hi,

Le 10 nov. 03, ? 18:39, Mark Mitchell a ?crit :

> The reason that QMTest no longer changes the directory is that it is 
> not
> safe to change the directory in a multi-threaded program.  In
> particular, the directory change affects all of the threads, so if
> QMTest were to change the directory for every test it would no longer 
> be
> able to run more than one test at once.

Ok, thanks for the explanation :-)

> I think that the best change would be to have QMTest include the test 
> ID
> and the database path in the shell-script context, i.e., as $QMV_*
> variables.
>
> Would that work for you?

That would be perfect and is exactly what I was looking for.

Regards,
Gilles

-- 
Gilles Depeyrot
<mailto:Gilles_Depeyrot at mac.com>



From hschilling at nasa.gov  Mon Nov 10 20:23:23 2003
From: hschilling at nasa.gov (Herb Schilling)
Date: Mon, 10 Nov 2003 15:23:23 -0500
Subject: Access to CVS version of QMtest?
Message-ID: <p05200fbebbd5a23d20b5@[139.88.38.71]>

Hi,

  I am using the cvs command listed on the web site for logging in to 
the CVS server:

cvs -d :pserver:anoncvs at cvs.codesourcery.com:/home/qm/Repository login

I get

cvs [login aborted]: connect to cvs.codesourcery.com:2401 failed: 
Connection refused


I can log into other CVS servers outside our network here so that 
makes me think that it's not some firewall problem. I have been 
trying this off and on for weeks with no success.

What could be wrong?

Thanks in advance!


-- 
Herb Schilling
NASA Glenn Research Center
Brook Park, OH 44135
hschilling at nasa.gov

If all our misfortunes were laid in one common heap whence everyone 
must take an equal portion, most people would be contented to take 
their own and dep
art. -Socrates (469?-399 B.C.)
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20031110/0269ba88/attachment.html>

From mark at codesourcery.com  Mon Nov 10 20:32:28 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 10 Nov 2003 12:32:28 -0800
Subject: PATCH: Provide more control over statistics formatting
Message-ID: <200311102032.hAAKWS3r009161@sirius.codesourcery.com>


This patch makes it possible for users to specify a custom format for
statistics by providing an argument to TextResultStream.

For example:

  qmtest run -f none --result-stream "text_result_stream.TextResultStream(format = 'stats', statistics_format='%(PASS)d\t%(FAIL)d\t%(ERROR)d\t%(UNEXPECTED)d\n')"

yielded this output:

  41	0	0	0

with one particular test database.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-11-10  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/classes/text_result_stream.py
	(TextResultStream.arguments): Add statistics_format.
	(TextResultStream._DisplayArguments): Do not write out the
	heading here.  Honor the statistics_format, if provided.
	(TextResultStream._SummarizeTestStats): Use _FormatStatistics.
	(TextResultStream._SummarizeRelativeTestStats): Likewise.
	(TextResultStream._FormatStatistics): New function.

Index: qm/test/classes/text_result_stream.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/classes/text_result_stream.py,v
retrieving revision 1.5
diff -c -5 -p -r1.5 text_result_stream.py
*** qm/test/classes/text_result_stream.py	28 Sep 2003 21:08:02 -0000	1.5
--- qm/test/classes/text_result_stream.py	10 Nov 2003 20:28:39 -0000
*************** class TextResultStream(FileResultStream)
*** 81,91 ****
              The "full" format is like "brief" except that all
              annotations are shown for tests as they are run.
  
              In the "stats" format only the summary statistics are
              displayed.""",
!             enumerals = ["brief", "batch", "full", "stats"])
          ]
      
      def __init__(self, arguments):
          """Construct a 'TextResultStream'.
  
--- 81,125 ----
              The "full" format is like "brief" except that all
              annotations are shown for tests as they are run.
  
              In the "stats" format only the summary statistics are
              displayed.""",
!             enumerals = ["brief", "batch", "full", "stats"]),
!         qm.fields.TextField(
!             name = "statistics_format",
!             title = "Statistics Format",
!             verbatim = "true",
!             multiline = "true",
!             description = """The format string used to display statistics.
! 
!             The format string is an ordinary Python format string.
!             The following fill-ins are available:
! 
!             'TOTAL' -- The total number of tests.
! 
!             'EXPECTED' -- The total number of tests that had an
!             expected outcome.
! 
!             'EXPECTED_PERCENT' -- The percentage of tests with
!             expected outcomes.
! 
!             'UNEXPECTED' -- The total number of tests that had an 
!             unexpected outcome.
! 
!             For each outcome 'O', there are additional fill-ins:
! 
!             'O' -- The total number of tests with outcome 'O'.
!             
!             'O_PERCENT' -- The percentage of tests with outcome 'O' to
!             total tests, as a floating point value.
! 
!             'O_UNEXPECTED' -- The total number of tests with an
!             unexpected outcome of 'O'.
! 
!             'O_UNEXEPECTED_PERCENT' -- The ratio of tests without an
!             unexpected outcome of 'O' to total tests, as a floating
!             point value."""),
          ]
      
      def __init__(self, arguments):
          """Construct a 'TextResultStream'.
  
*************** class TextResultStream(FileResultStream)
*** 207,273 ****
      def _DisplayStatistics(self):
          """Write out statistical information about the results.
  
          Write out statistical information about the results."""
  
-         self.file.write("\n")
-         self._DisplayHeading("STATISTICS")
- 
          # Summarize the test statistics.
!         if self.expected_outcomes:
              self._SummarizeRelativeTestStats()
          else:
              self._SummarizeTestStats()
  
  
      def _SummarizeTestStats(self):
          """Generate statistics about the overall results."""
  
!         num_tests = self.__num_tests
!         self.file.write("  %6d        tests total\n" % num_tests)
  
!         # If there are no tests, there is no need to go into detail.
!         if num_tests == 0:
!             return
  
!         for outcome in Result.outcomes:
!             count = self.__outcome_counts[outcome]
!             if count > 0:
!                 self.file.write("  %6d (%3.0f%%) tests %s\n"
!                                 % (count, (100. * count) / num_tests,
!                                    outcome))
!         self.file.write("\n")
  
          
      def _SummarizeRelativeTestStats(self):
          """Generate statistics showing results relative to expectations."""
  
!         # Indicate the total number of tests.
!         num_tests = self.__num_tests
!         self.file.write("  %6d        tests total\n" % num_tests)
  
!         # If there are no tests, there is no need to go into detail.
!         if num_tests == 0:
!             return
  
!         # Report the number that produced expected outcomes.
!         unexpected_count = len(self.__unexpected_test_results)
!         expected_count = num_tests - unexpected_count
!         self.file.write("  %6d (%3.0f%%) tests as expected\n"
!                         % (expected_count,
!                            (100. * expected_count) / num_tests))
!         # For results that produced unexpected outcomes, break them down by
!         # actual outcome.
!         for outcome in Result.outcomes:
!             count = self.__unexpected_outcome_counts[outcome]
!             if count > 0:
!                 self.file.write("  %6d (%3.0f%%) tests unexpected %s\n"
!                                 % (count, (100. * count) / num_tests,
!                                    outcome))
!         self.file.write("\n")
  
  
      def _SummarizeResults(self, results):
          """Summarize each of the results.
  
          'results' -- The sequence of 'Result' objects to summarize."""
  
--- 241,338 ----
      def _DisplayStatistics(self):
          """Write out statistical information about the results.
  
          Write out statistical information about the results."""
  
          # Summarize the test statistics.
!         if self.statistics_format:
!             self._FormatStatistics(self.statistics_format)
!         elif self.expected_outcomes:
              self._SummarizeRelativeTestStats()
          else:
              self._SummarizeTestStats()
  
  
      def _SummarizeTestStats(self):
          """Generate statistics about the overall results."""
  
!         # Print a header.
!         self.file.write("\n")
!         self._DisplayHeading("STATISTICS")
  
!         # Build the format string.  If there are no tests we do not
!         # provide any output.
!         if self.__num_tests != 0:
!             # Indicate the total number of tests.
!             format = "  %(TOTAL)6d        tests total\n"
!             # Include a line for each outcome.
!             for o in Result.outcomes:
!                 if self.__outcome_counts[o] != 0:
!                     format += ("  %%(%s)6d (%%(%s)3.0f%%%%) tests %s\n"
!                                % (o, o + "_PERCENT", o))
!             format += "\n"
!         else:
!             format = ""
  
!         self._FormatStatistics(format)
  
          
      def _SummarizeRelativeTestStats(self):
          """Generate statistics showing results relative to expectations."""
  
!         # Print a header.
!         self.file.write("\n")
!         self._DisplayHeading("STATISTICS")
  
!         # Build the format string.  If there are no tests we do not
!         # provide any output.
!         if self.__num_tests != 0:
!             # Indicate the total number of tests.
!             format = ("  %(EXPECTED)6d (%(EXPECTED_PERCENT)3.0f%%) "
!                       "tests as expected\n")
!             # Include a line for each outcome.
!             for o in Result.outcomes:
!                 if self.__unexpected_outcome_counts[o] != 0:
!                     format += ("  %%(%s)6d (%%(%s)3.0f%%%%) tests "
!                                "unexpected %s\n"
!                                % (o + "_UNEXPECTED",
!                                   o + "_UNEXPECTED_PERCENT",
!                                   o))
!             format += "\n"
!         else:
!             format = ""
  
!         self._FormatStatistics(format)
  
  
+     def _FormatStatistics(self, format):
+         """Output statistical information.
+ 
+         'format' -- A format string with (optional) fill-ins
+         corresponding to statistical information.
+ 
+         The formatted string is written to the result file."""
+ 
+         # Build the dictionary of format fill-ins.
+         num_tests = self.__num_tests
+         unexpected = len(self.__unexpected_test_results)
+         expected = num_tests - unexpected
+         values = { "TOTAL" : num_tests,
+                    "EXPECTED" : expected,
+                    "EXPECTED_PERCENT" : (100. * expected) / num_tests,
+                    "UNEXPECTED" : unexpected }
+         for o in Result.outcomes:
+             count = self.__outcome_counts[o]
+             values[o] = count
+             values[o + "_PERCENT"] = (100. * count) / num_tests
+             count = self.__unexpected_outcome_counts[o]
+             values[o + "_UNEXPECTED"] = count
+             values[o + "_UNEXPECTED_PERCENT"] = (100. * count) / num_tests
+ 
+         self.file.write(format % values)
+ 
+         
      def _SummarizeResults(self, results):
          """Summarize each of the results.
  
          'results' -- The sequence of 'Result' objects to summarize."""
  


From hschilling at nasa.gov  Mon Nov 10 20:33:55 2003
From: hschilling at nasa.gov (Herb Schilling)
Date: Mon, 10 Nov 2003 15:33:55 -0500
Subject: Basic suites question
Message-ID: <p05200fbfbbd5a43c98b5@[139.88.38.71]>

Hi,

  I have been trying to make use of suites and I have a basic question 
about them.  Pardon my ignorance.

  I see how if you have a directory whose name ends in ".qms" QMTest 
will run .qmt files in that directory and also recursively do any 
.qms sub-directories.

  This works out fine if a given test only needs to be in one suite. 
But I also want to create new suites that run the same tests that are 
already defined in .qmt files in other suites. I really don't want to 
duplicate these .qmt files. I tried using links but QMTest didn't 
seem to work with that. I hope I explained this well enough!

  Thanks in advance.
-- 
Herb Schilling
NASA Glenn Research Center
Brook Park, OH 44135
hschilling at nasa.gov

If all our misfortunes were laid in one common heap whence everyone 
must take an equal portion, most people would be contented to take 
their own and depart. -Socrates (469?-399 B.C.)


From seefeld at sympatico.ca  Mon Nov 10 21:56:47 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Mon, 10 Nov 2003 16:56:47 -0500
Subject: [qmtest] Basic suites question
In-Reply-To: <p05200fbfbbd5a43c98b5@[139.88.38.71]>
References: <p05200fbfbbd5a43c98b5@[139.88.38.71]>
Message-ID: <3FB0099F.7070904@sympatico.ca>

There are different answers to your question:

First of all, you may want to provide your own 'Database'
implementation that knows how to look up tests, and how to
group them into suites. (In particular, you may have your own
idea of how to associate files and directories with tests
and suites, and the Database implementation is the place to
encode that relationship.)

Your idea of using suites as aliases for groups of tests
sounds very interesting, but I believe right now the semantics
are such that tests are associated which exactly one parent
test suite. Mark, please correct me if I'm wrong.

Regards,
		Stefan



From mark at codesourcery.com  Mon Nov 10 21:06:26 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 10 Nov 2003 13:06:26 -0800
Subject: [qmtest] Basic suites question
In-Reply-To: <3FB0099F.7070904@sympatico.ca>
References: <p05200fbfbbd5a43c98b5@[139.88.38.71]>
	 <3FB0099F.7070904@sympatico.ca>
Message-ID: <1068498385.19349.36.camel@doubledemon.codesourcery.com>

On Mon, 2003-11-10 at 13:56, Stefan Seefeld wrote:
> There are different answers to your question:
> 
> First of all, you may want to provide your own 'Database'
> implementation that knows how to look up tests, and how to
> group them into suites. (In particular, you may have your own
> idea of how to associate files and directories with tests
> and suites, and the Database implementation is the place to
> encode that relationship.)

Correct.

> Your idea of using suites as aliases for groups of tests
> sounds very interesting, but I believe right now the semantics
> are such that tests are associated which exactly one parent
> test suite. Mark, please correct me if I'm wrong.

You're wrong. :-)

A suite is an arbitrary group of suites.  For every database, there are
implicitly created suites corresponding to the directories in the
database, but the database can have additional suites as well.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From anguiano at codesourcery.com  Mon Nov 10 21:24:27 2003
From: anguiano at codesourcery.com (Ricardo Anguiano)
Date: Mon, 10 Nov 2003 13:24:27 -0800
Subject: [qmtest] Access to CVS version of QMtest?
In-Reply-To: <p05200fbebbd5a23d20b5@[139.88.38.71]> (Herb Schilling's
 message of "Mon, 10 Nov 2003 15:23:23 -0500")
References: <p05200fbebbd5a23d20b5@[139.88.38.71]>
Message-ID: <m3ptfznchg.fsf@mordack.codesourcery.com>

Herb Schilling <hschilling at nasa.gov> writes:
>   I am using the cvs command listed on the web site for logging in to
> the CVS server:
>
> cvs -d :pserver:anoncvs at cvs.codesourcery.com:/home/qm/Repository login
>
> I get
>
> cvs [login aborted]: connect to cvs.codesourcery.com:2401 failed:
> Connection refused
>
>
> I can log into other CVS servers outside our network here so that
> makes me think that it's not some firewall problem. I have been trying
> this off and on for weeks with no success.
>
> What could be wrong?

Herb,

I am not sure what the problem is.  Here's my attempt from a
non-CodeSourcery account:

     $ cvs -d :pserver:anoncvs at cvs.codesourcery.com:/home/qm/Repository login
     Logging in to :pserver:anoncvs at cvs.codesourcery.com:2401/home/qm/Repository
     CVS password: anoncvs
     $ cvs -d :pserver:anoncvs at cvs.codesourcery.com:/home/qm/Repository co qm
     cvs server: Updating qm
     U qm/.cvsignore
     U qm/COPYING
     U qm/ChangeLog
     [...]

Contact me off list if you continue to have problems.

Thanks,
-- 
Ricardo Anguiano
http://www.codesourcery.com


From mark at codesourcery.com  Thu Nov 13 01:56:19 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 12 Nov 2003 17:56:19 -0800
Subject: PATCH: Fix typo in error-handling
Message-ID: <1068688578.6079.13.camel@minax.codesourcery.com>

This patch fixes a typo in an exception-handler.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
2003-11-12  Mark Mitchell  <mark at codesourcery.com>

	* qm/common.py (open_temporary_file): Fix typo.

Index: qm/common.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/common.py,v
retrieving revision 1.75
diff -c -5 -p -r1.75 common.py
*** qm/common.py	14 Oct 2003 21:56:06 -0000	1.75
--- qm/common.py	12 Nov 2003 22:07:05 -0000
*************** def open_temporary_file_fd():
*** 514,524 ****
          fd = os.open(file_name,
                       os.O_CREAT | os.O_EXCL | os.O_RDWR,
                       0600)
      except:
          exc_info = sys.exc_info()
!         raise common.QMException, \
                qm.error("temp file error",
                         file_name=file_name,
                         exc_class=str(exc_info[0]),
                         exc_arg=str(exc_info[1]))
      return (file_name, fd)
--- 514,524 ----
          fd = os.open(file_name,
                       os.O_CREAT | os.O_EXCL | os.O_RDWR,
                       0600)
      except:
          exc_info = sys.exc_info()
!         raise QMException, \
                qm.error("temp file error",
                         file_name=file_name,
                         exc_class=str(exc_info[0]),
                         exc_arg=str(exc_info[1]))
      return (file_name, fd)

From mark at codesourcery.com  Thu Nov 13 03:12:16 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 12 Nov 2003 19:12:16 -0800
Subject: PATCH: Boolean convenience function for Context
Message-ID: <1068693136.6079.95.camel@minax.codesourcery.com>

This patch adds a convenience function for getting the values of boolean
context variables.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
2003-11-12  Mark Mitchell  <mark at codesourcery.com>

	* qm/common.py (parse_boolean): New function.
	* qm/fields.py (BooleanField.Validate): New method.
	* qm/test/context.py (ContextException.__init__): Generalize.
	(Context.GetBoolean): New method.
	* qm/test/result.py (Result.NoteException): Simplify.
	* qm/test/share/messages/diagnostics.txt (invalid boolean context
	var): New message.
	(missing context variable): Likewise.

Index: qm/common.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/common.py,v
retrieving revision 1.76
diff -c -5 -p -r1.76 common.py
*** qm/common.py	13 Nov 2003 01:52:58 -0000	1.76
--- qm/common.py	13 Nov 2003 02:52:55 -0000
*************** def split_argument_list(command):
*** 680,689 ****
--- 680,710 ----
      # Split the command into argument list elements at spaces.
      argument_list = re.split(" +", command)
      return argument_list
  
  
+ def parse_boolean(value):
+     """Parse a boolean string.
+ 
+     'value' -- A string.
+ 
+     returns -- True if 'value' is a true string, false if 'value' is a
+     false string.
+ 
+     raises -- 'ValueError' if 'value' is neither a true string, nor a
+     false string."""
+ 
+     value = value.lower()
+     if value in ("1", "true", "yes", "on"):
+         return 1
+     elif value in ("0", "false", "no", "off"):
+         return 0
+     else:
+         raise ValueError, value
+ 
+     
+     
  # No 'time.strptime' on non-UNIX systems, so use this instead.  This
  # version is more forgiving, anyway, and uses our standardized timestamp
  # format. 
  
  def parse_time(time_string, default_local_time_zone=1):
Index: qm/fields.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/fields.py,v
retrieving revision 1.79
diff -c -5 -p -r1.79 fields.py
*** qm/fields.py	15 Oct 2003 08:34:29 -0000	1.79
--- qm/fields.py	13 Nov 2003 02:52:55 -0000
*************** class BooleanField(EnumerationField):
*** 1583,1592 ****
--- 1583,1600 ----
  
          # Construct the base class.
          EnumerationField.__init__(self, name, default_value,
                                    ["true", "false"], **properties)
  
+ 
+     def Validate(self, value):
+ 
+         if qm.common.parse_boolean(value):
+             value = "true"
+         else:
+             value = "false"
+         return super(BooleanField, self).Validate(value)
          
  
  ########################################################################
  
  class TimeField(IntegerField):
Index: qm/test/context.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/context.py,v
retrieving revision 1.12
diff -c -5 -p -r1.12 context.py
*** qm/test/context.py	9 Aug 2003 05:15:02 -0000	1.12
--- qm/test/context.py	13 Nov 2003 02:52:56 -0000
*************** import types
*** 24,42 ****
  ########################################################################
  # Classes
  ########################################################################
  
  class ContextException(qm.common.QMException):
!     """A 'ContextException' indicates a missing context variable."""
  
!     def __init__(self, key):
          """Construct a new 'ContextException'.
  
!         'key' -- A string giving the context key for which no value
!         was available."""
  
!         qm.common.QMException.__init__(self, "Missing context variable.")
          self.key = key
  
          
      
  class ContextWrapper:
--- 24,46 ----
  ########################################################################
  # Classes
  ########################################################################
  
  class ContextException(qm.common.QMException):
!     """A 'ContextException' indicates an invalid context variable."""
  
!     def __init__(self, key, msg = "missing context variable"):
          """Construct a new 'ContextException'.
  
!         'key' -- A string giving the context key for which no valid
!         value was available.
  
!         'msg' -- A diagnostic identifier explaining the problem.  The
!         message string may contain a fill-in for the key."""
! 
!         msg = qm.error(msg, key = key)
!         qm.common.QMException.__init__(self, msg)
          self.key = key
  
          
      
  class ContextWrapper:
*************** class Context(types.DictType):
*** 99,108 ****
--- 103,137 ----
              value = qm.rc.Get(option, None)
              assert value is not None
              self[option] = value
  
  
+     def GetBoolean(self, key, default = None):
+         """Return the boolean value associated with 'key'.
+ 
+         'key' -- A string.
+ 
+         'default' -- A default value, used if 'key' has no assicated
+         value.
+ 
+         returns -- The value associated with 'key' in the context,
+         interpreted as a boolean.
+ 
+         The value associated with 'key' must be a string.  If not, an
+         exception is raised.  If the value is a string, but does not
+         correspond to a boolean value, an exception is raised."""
+ 
+         valstr = self.get(key)
+         if valstr is None:
+             raise ContextException(key)
+ 
+         try:
+             return qm.common.parse_boolean(valstr)
+         except ValueError:
+             raise ContextException(key, "invalid boolean context var")
+         
+ 
      def GetTemporaryDirectory(self):
          """Return the path to the a temporary directory.
  
          returns -- The path to the a temporary directory.  The
          'Runnable' object may make free use of this temporary
*************** class Context(types.DictType):
*** 207,212 ****
--- 236,242 ----
              return {}
          
          added = self.__context.GetAddedProperties()
          added.update(self)
          return added
+ 
  
Index: qm/test/result.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/result.py,v
retrieving revision 1.21
diff -c -5 -p -r1.21 result.py
*** qm/test/result.py	2 Oct 2003 16:23:22 -0000	1.21
--- qm/test/result.py	13 Nov 2003 02:52:56 -0000
*************** class Result:
*** 284,301 ****
          exception_type = exc_info[0]
          
          # If no cause was specified, use an appropriate message.
          if not cause:
              if exception_type is ContextException:
!                 cause = 'Missing context variable "%s".' % exc_info[1].key
              else:
                  cause = "An exception occurred."
  
          # For a 'ContextException', indicate which context variable
!         # was missing.
          if exception_type is ContextException:
!             self["qmtest.missing_variable"] = exc_info[1].key
              
          self.SetOutcome(outcome)
          self[Result.CAUSE] = cause
          self[Result.EXCEPTION] = "%s: %s" % exc_info[:2]
          self[Result.TRACEBACK] \
--- 284,301 ----
          exception_type = exc_info[0]
          
          # If no cause was specified, use an appropriate message.
          if not cause:
              if exception_type is ContextException:
!                 cause = str(exc_info[1])
              else:
                  cause = "An exception occurred."
  
          # For a 'ContextException', indicate which context variable
!         # was invalid.
          if exception_type is ContextException:
!             self["qmtest.context_variable"] = exc_info[1].key
              
          self.SetOutcome(outcome)
          self[Result.CAUSE] = cause
          self[Result.EXCEPTION] = "%s: %s" % exc_info[:2]
          self[Result.TRACEBACK] \
Index: qm/test/share/messages/diagnostics.txt
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/share/messages/diagnostics.txt,v
retrieving revision 1.10
diff -c -5 -p -r1.10 diagnostics.txt
*** qm/test/share/messages/diagnostics.txt	24 Mar 2003 07:24:24 -0000	1.10
--- qm/test/share/messages/diagnostics.txt	13 Nov 2003 02:52:56 -0000
*************** should be a valid Python regular express
*** 70,79 ****
--- 70,82 ----
  
  @ file invalid substitution
  The substitution "%(substitution)s" is invalid.  A substitution should
  have the form "/*pattern*/*replacement*/".
  
+ @ invalid boolean context var
+ The value of "%(key)s" is not a valid boolean value.  
+ 
  @ invalid class
  There is no test class "%(class_name)s".
  
  @ invalid class name
  The class name "%(class_name)s" is invalid.  Specify the class name in
*************** form KEY=VALUE.
*** 117,126 ****
--- 120,132 ----
  @ missing arg for template
  Specify the name of the test class and the test ID of the new test.
  
  @ missing argument
  A value for the "%(title)s" parameter is missing.
+ 
+ @ missing context variable
+ The context variable "%(key)s" was not defined.
  
  @ missing test id
  There is no test with ID "%(test_id)s".
  
  @ module does not exist

From mark at codesourcery.com  Thu Nov 13 04:28:16 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 12 Nov 2003 20:28:16 -0800
Subject: [qmtest] command.ShellCommandTest run directory
In-Reply-To: <0BB28A9D-13B6-11D8-8341-00050211D146@mac.com>
References: <D9A066AA-1292-11D8-B4E2-00050211D146@mac.com>
	 <1068485956.19347.18.camel@doubledemon.codesourcery.com>
	 <0BB28A9D-13B6-11D8-8341-00050211D146@mac.com>
Message-ID: <1068697696.6079.124.camel@minax.codesourcery.com>

> > I think that the best change would be to have QMTest include the test 
> > ID
> > and the database path in the shell-script context, i.e., as $QMV_*
> > variables.
> >
> > Would that work for you?
> 
> That would be perfect and is exactly what I was looking for.

This patch implements that change.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
2003-11-12  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/context.py (Context.DB_PATH_CONTEXT_PROPERTY): New
	variable.
	(Context.ID_CONTEXT_PROPERTY): Likewise.
	(Context.TMPDIR_CONTEXT_PROPERTY): Likewise.
	* qm/test/target.py (Target.RunTest): Set them.
	(Target._FinishResourceSetUp): Clear ID_CONTEXT_PROPERTY.
	(Target._SetUpResource): Set ID_CONTEXT_PROPERTY.

Index: qm/test/context.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/context.py,v
retrieving revision 1.13
diff -c -5 -p -r1.13 context.py
*** qm/test/context.py	13 Nov 2003 03:08:01 -0000	1.13
--- qm/test/context.py	13 Nov 2003 03:48:20 -0000
*************** class Context(types.DictType):
*** 73,82 ****
--- 73,97 ----
          the command line.
  
      A 'Context' object is effectively a mapping object whose keys must
      be labels and values must be strings."""
  
+     DB_PATH_CONTEXT_PROPERTY = "qmtest.dbpath"
+     """The context variable giving the path to the database.
+ 
+     The value of this context variable will be a string giving the
+     path to the database directory.  For example, if QMTest is invoked
+     as 'qmtest -D /path/to/db run', the value of this variable would
+     be '/path/to/db'.  The value may be an absolute or a relative
+     path."""
+ 
+     ID_CONTEXT_PROPERTY = "qmtest.id"
+     """The context variable giving the name of the running test or resource.
+ 
+     This value of this context variable will be the string giving the
+     name of the of the test or resource that is presently executing."""
+     
      TMPDIR_CONTEXT_PROPERTY = "qmtest.tmpdir"
      """A context property whose value is a string giving the path to a
      temporary directory.  This directory will be used only by the
      'Runnable' in whose context this property occurs during the
      execution of that 'Runnable'. No other object will use the same
Index: qm/test/target.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/target.py,v
retrieving revision 1.22
diff -c -5 -p -r1.22 target.py
*** qm/test/target.py	29 Aug 2003 22:59:22 -0000	1.22
--- qm/test/target.py	13 Nov 2003 03:48:20 -0000
*************** class Target(qm.extension.Extension):
*** 199,214 ****
          Derived classes may override this method."""
  
          # Create the result.
          result = Result(Result.TEST, descriptor.GetId())
          try:
!             # Augment the context with the tmpdir property.
              context = Context(context)
              context[context.TMPDIR_CONTEXT_PROPERTY] \
                  = self._GetTemporaryDirectory()
              # Set up any required resources.
              self.__SetUpResources(descriptor, context)
              # Run the test.
              descriptor.Run(context, result)
          except KeyboardInterrupt:
              result.NoteException(cause = "Interrupted by user.")
              # We received a KeyboardInterrupt, indicating that the
--- 199,218 ----
          Derived classes may override this method."""
  
          # Create the result.
          result = Result(Result.TEST, descriptor.GetId())
          try:
!             # Augment the context appropriately.
              context = Context(context)
              context[context.TMPDIR_CONTEXT_PROPERTY] \
                  = self._GetTemporaryDirectory()
+             context[context.DB_PATH_CONTEXT_PROPERTY] \
+                 = descriptor.GetDatabase().GetPath()
              # Set up any required resources.
              self.__SetUpResources(descriptor, context)
+             # Make the ID of the test available.
+             context[context.ID_CONTEXT_PROPERTY] = descriptor.GetId()
              # Run the test.
              descriptor.Run(context, result)
          except KeyboardInterrupt:
              result.NoteException(cause = "Interrupted by user.")
              # We received a KeyboardInterrupt, indicating that the
*************** class Target(qm.extension.Extension):
*** 302,311 ****
--- 306,318 ----
  
          # The temporary directory is not be preserved; there is no
          # guarantee that it will be the same in a test that depends on
          # this resource as it was in the resource itself.
          del properties[Context.TMPDIR_CONTEXT_PROPERTY]
+         # Similarly, the ID property should be the name of the dependent
+         # entity, not the name of the reosurce.
+         del properties[Context.ID_CONTEXT_PROPERTY]
          rop = (resource, result.GetOutcome(), properties)
          self.__resources[result.GetId()] = rop
          return rop
  
  
*************** class Target(qm.extension.Extension):
*** 360,369 ****
--- 367,378 ----
          # Get the resource descriptor.
          try:
              resource_desc = self.GetDatabase().GetResource(resource_name)
              # Set up the resources on which this resource depends.
              self.__SetUpResources(resource_desc, wrapper)
+             # Make the ID of the resource available.
+             wrapper[Context.ID_CONTEXT_PROPERTY] = resource_name
              # Set up the resource itself.
              resource_desc.SetUp(wrapper, result)
              # Obtain the resource within the try-block so that if it
              # cannot be obtained the exception is handled below.
              resource = resource_desc.GetItem()

From Anders.Hasselqvist at tss.teleca.se  Thu Nov 13 15:59:31 2003
From: Anders.Hasselqvist at tss.teleca.se (Anders Hasselqvist)
Date: Thu, 13 Nov 2003 16:59:31 +0100
Subject: Pass context variables between test classes
Message-ID: <9EEF3C7F0B31F544919778197B64D760025934B3@au-sth01-ex.ausys.se>

Hi,

I have a structure in my test suite like this:
Test.blabla.1
Test.blabla.2

Class 2 depends on 1 and need some info created there.

I thought of sharing this info with a key in the context variable
but it seems to be "reset" between each test class so the newly
Added key doesn't exist in class 2.

Is this how it is supposed to work?

Regards,
--
Anders Hasselqvist


From mark at codesourcery.com  Thu Nov 13 16:34:05 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 13 Nov 2003 08:34:05 -0800
Subject: [qmtest] Pass context variables between test classes
In-Reply-To: <9EEF3C7F0B31F544919778197B64D760025934B3@au-sth01-ex.ausys.se>
References: <9EEF3C7F0B31F544919778197B64D760025934B3@au-sth01-ex.ausys.se>
Message-ID: <1068741245.3852.3.camel@minax.codesourcery.com>

On Thu, 2003-11-13 at 07:59, Anders Hasselqvist wrote:
> Hi,
> 
> I have a structure in my test suite like this:
> Test.blabla.1
> Test.blabla.2
> 
> Class 2 depends on 1 and need some info created there.

QMTest is designed to make that hard for you to do.

That was a conscious and intentional decision.

Each test should be independent of other tests.  That is the only way
that you can get good reproducibility in your testsuite over time, and
it is the only way that tests can be run in parallel.

You can cheat, by (for example), having the first test write files into
the filesystem which the second test reads, but that's not encouraged.

Generally, the right solution is to factor the bits common to test 1 and
test 2 into a "resource", and have both tests depend on the resource. 
The context variables created by a resource are visible to its dependent
tests.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From afunk at ll.mit.edu  Thu Nov 13 20:51:30 2003
From: afunk at ll.mit.edu (Andrew Funk)
Date: Thu, 13 Nov 2003 15:51:30 -0500
Subject: QMTest on AIX?
Message-ID: <006201c3aa27$ea07c4d0$7588229b@meriadoc>

Hi,

Is QMTest supported on AIX?  I got this error on installation.  I wonder
if it will be as simple as installing the zlib module, or will I run
into bigger issues?

Thanks,
Andy Funk
MIT Lincoln Laboratory



twister:~/install/qm % gmake check
cd qm && PYTHONPATH=. /usr/local/bin/python -O ./setup.py -q build
package init file './test/classes/__init__.py' not found (or not a
regular file)
package init file './test/classes/__init__.py' not found (or not a
regular file)
qm/test/qmtest -D tests run  \
        -c qmtest_path=qm/test/qmtest
Traceback (most recent call last):
  File "/usr4/maraff/afunk/install/qm/qm/test/qmtest.py", line 38, in ?
    import qm
  File "/usr4/maraff/afunk/install/qm/qm/__init__.py", line 35, in ?
    from qm.common import *
  File "/usr4/maraff/afunk/install/qm/qm/common.py", line 26, in ?
    import gzip
  File "/usr/local/IT/python-2.3.2/lib/python2.3/gzip.py", line 9, in ?
    import zlib
ImportError: No module named zlib
gmake: *** [check-serial] Error 1
twister:~/install/qm % uname -a
AIX twister 2 5 0020697A4C00



From mark at codesourcery.com  Thu Nov 13 20:59:32 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 13 Nov 2003 12:59:32 -0800
Subject: [qmtest] QMTest on AIX?
In-Reply-To: <006201c3aa27$ea07c4d0$7588229b@meriadoc>
References: <006201c3aa27$ea07c4d0$7588229b@meriadoc>
Message-ID: <1068757172.3852.38.camel@minax.codesourcery.com>

On Thu, 2003-11-13 at 12:51, Andrew Funk wrote:
> Hi,
> 
> Is QMTest supported on AIX?  I got this error on installation.  I wonder
> if it will be as simple as installing the zlib module, or will I run
> into bigger issues?

QMTest will certainly work on AIX; we have used it there in the past.  

The only challenge is in getting Python built correctly (including
things like the zlib module).  If you configure Python to build all the
modules, QMTest shoujld work fine.

We don't presently have an AIX machine, so I'm not sure exactly how best
to help, though.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From gk4 at austin.ibm.com  Mon Nov 17 19:10:18 2003
From: gk4 at austin.ibm.com (George Kraft)
Date: 17 Nov 2003 13:10:18 -0600
Subject: Installation of qm-2.0.3-0.i386.rpm
Message-ID: <1069096217.1814.44.camel@gkraft4>

It would be nice if qm-2.0.3-0.i386.rpm would install in
/opt/codesourcery/qm/ instead of /usr/local/ per the FHS and LSB.

http://www.pathname.com/fhs/2.2/fhs-3.12.html

http://www.linuxjournal.com/article.php?sid=4121

http://www.linuxbase.org/spec/errata/errata/execenv.html

-- 
George (gk4)




From njs at pobox.com  Mon Nov 17 23:11:56 2003
From: njs at pobox.com (Nathaniel Smith)
Date: Mon, 17 Nov 2003 15:11:56 -0800
Subject: [qmtest] Installation of qm-2.0.3-0.i386.rpm
In-Reply-To: <1069096217.1814.44.camel@gkraft4>
References: <1069096217.1814.44.camel@gkraft4>
Message-ID: <20031117231156.GA29977@njs.dhis.org>

On Mon, Nov 17, 2003 at 01:10:18PM -0600, George Kraft wrote:
> It would be nice if qm-2.0.3-0.i386.rpm would install in
> /opt/codesourcery/qm/ instead of /usr/local/ per the FHS and LSB.
> 
> http://www.pathname.com/fhs/2.2/fhs-3.12.html
> 
> http://www.linuxjournal.com/article.php?sid=4121
> 
> http://www.linuxbase.org/spec/errata/errata/execenv.html

The FHS states ( http://www.pathname.com/fhs/2.2/fhs-4.9.html ):
   The /usr/local hierarchy is for use by the system administrator when
   installing software locally. It needs to be safe from being
   overwritten when the system software is updated.
That sounds like a reasonable location for local qmtest installs to
me, and it's my understanding that so long as you're not using a RPM
provided by Redhat (which would install to /usr), it's considered a
local install...

The Linux Journal article you link to talks about the FHS, and then
says that /opt is the correct place for RPMs to install.  While it's
true that "...the LSB...established the /opt/ directory for add-on
software", /usr/local is blessed in the standards with a similar role.
Nowhere does the article actually provide a citation describing why
/opt/ should be preferred over /usr/local/...

There's also the fact that the layout of /opt is rather obnoxious,
necessitating changes to PATH, LD_LIBRARY_PATH, etc. every time a new
package is installed.  But this just might be my bias from growing up
in an /opt-free world...

Am I totally misreading the standards here?  Or is there some de-facto
standard for RPM-based systems on how the /opt vs. /usr/local
ambiguity should be resolved?  My Debian system doesn't even _have_ an
/opt...

-- Nathaniel

-- 
When the flush of a new-born sun fell first on Eden's green and gold,
Our father Adam sat under the Tree and scratched with a stick in the mould;
And the first rude sketch that the world had seen was joy to his mighty heart,
Till the Devil whispered behind the leaves, "It's pretty, but is it Art?"
  -- The Conundrum of the Workshops, Rudyard Kipling


From seefeld at sympatico.ca  Tue Nov 18 02:15:14 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Mon, 17 Nov 2003 21:15:14 -0500
Subject: [qmtest] Installation of qm-2.0.3-0.i386.rpm
In-Reply-To: <20031117231156.GA29977@njs.dhis.org>
References: <1069096217.1814.44.camel@gkraft4> <20031117231156.GA29977@njs.dhis.org>
Message-ID: <3FB980B2.9070307@sympatico.ca>

Nathaniel Smith wrote:

> Am I totally misreading the standards here?  Or is there some de-facto
> standard for RPM-based systems on how the /opt vs. /usr/local
> ambiguity should be resolved?  My Debian system doesn't even _have_ an
> /opt...

...and mine (RH 9.0) is empty.

Stefan





From smb at egenera.com  Wed Nov 19 15:15:18 2003
From: smb at egenera.com (Steve Byan)
Date: Wed, 19 Nov 2003 10:15:18 -0500
Subject: qm-2.0.3 builds on Mac OS X 10.3.1 but fails self-test
Message-ID: <2FB67DB8-1AA3-11D8-B59F-000A957CD5B0@egenera.com>

A status update on QMTest on Mac OS X: I've upgraded to OS X 10.3.1  
from 10.2.8 and now QMTest 2.0.3 builds successfully.

However, it fails the self-test:

multivac% make check
cd qm && PYTHONPATH=.:./zope-dtml:./zope-dtml/ExtensionClass python -O  
./setup.py -q build
package init file './test/classes/__init__.py' not found (or not a  
regular file)
package init file './test/classes/__init__.py' not found (or not a  
regular file)
cd zope-dtml/DocumentTemplate &&  
PYTHONPATH=.:./zope-dtml:./zope-dtml/ExtensionClass python -O  
./setup.py -q build
cd zope-dtml/ExtensionClass &&  
PYTHONPATH=.:./zope-dtml:./zope-dtml/ExtensionClass python -O  
./setup.py -q build
qm/test/qmtest -D tests run  \
         -c qmtest_path=qm/test/qmtest
--- TEST RESULTS  
-------------------------------------------------------------

   regress.cycle1                                : PASS

   regress.cycle2                                : PASS

   regress.cycle3                                : PASS

   regress.cycle4                                : PASS

   regress.cycle5                                : PASS

   regress.gilles1                               : PASS

   regress.noresource                            : PASS

   regress.xml1                                  : FAIL
     Child process exited unsuccessfully

     qmtest.target:
       local

     selftest.RegTest.cmdline:
       qm/test/qmtest -D
        
/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
tests/regress/xml1
       run -O
        
/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
tests/regress/xml1/results.qmr
       -o
        
/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
tests/regress/xml1/output.qmr

     selftest.RegTest.exitcode:
       256

     selftest.RegTest.stderr:


     selftest.RegTest.stdout:

       --- TEST RESULTS  
-------------------------------------------------------------

         asdfasdf                                      : ERROR   ,  
expected PASS
           An exception occurred.

           qmtest.exception:
             exceptions.OSError: [Errno 2] No such file or directory

           qmtest.target:
             local

           qmtest.traceback:

               File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/target.py", line 208, in RunTest
                 descriptor.Run(context, result)
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/database.py", line 281, in Run
                 self._Execute(context, result, "Run")
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/database.py", line 188, in _Execute
                 eval("item.%s(context, result)" % method)
                File "", line 0, in ?
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/classes/command.py", line 296, in Run
                 context, result)
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/classes/command.py", line 191, in RunProgram
                 exit_status = e.Run(arguments, environment, path =  
program)
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/executable.py", line 242, in Run
                 raise exc_info[0], exc_info[1]


         fnord                                         : ERROR   ,  
expected PASS
           An exception occurred.

           qmtest.exception:
             exceptions.OSError: [Errno 2] No such file or directory

           qmtest.target:
             local

           qmtest.traceback:

               File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/target.py", line 208, in RunTest
                 descriptor.Run(context, result)
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/database.py", line 281, in Run
                 self._Execute(context, result, "Run")
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/database.py", line 188, in _Execute
                 eval("item.%s(context, result)" % method)
                File "", line 0, in ?
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/classes/command.py", line 296, in Run
                 context, result)
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/test/classes/command.py", line 191, in RunProgram
                 exit_status = e.Run(arguments, environment, path =  
program)
                File  
"/Users/smb/work/projects/scsi_reservations/doc/test/QMTest/qm-2.0.3/ 
qm/executable.py", line 242, in Run
                 raise exc_info[0], exc_info[1]



       --- STATISTICS  
---------------------------------------------------------------

              2        tests total
              0 (  0%) tests as expected
              2 (100%) tests unexpected ERROR

       --- TESTS WITH UNEXPECTED OUTCOMES  
-------------------------------------------

         asdfasdf                                      : ERROR   ,  
expected PASS
           An exception occurred.

         fnord                                         : ERROR   ,  
expected PASS
           An exception occurred.



   xmldb.api.test.derived                        : PASS

   xmldb.api.test.test_interface                 : PASS

   xmldb.common.format_time1                     : PASS

   xmldb.common.graph_complete                   : PASS

   xmldb.common.graph_cycle                      : PASS

   xmldb.common.graph_pass                       : PASS

   xmldb.common.label_is_valid                   : PASS

   xmldb.common.label_thunk                      : PASS

   xmldb.common.parse_time1                      : PASS

   xmldb.common.parse_time2                      : PASS

   xmldb.common.parse_time3                      : PASS

   xmldb.common.parse_time4                      : PASS

   xmldb.common.parser_create                    : PASS

   xmldb.common.parser_dup_command_long          : PASS

   xmldb.common.parser_dup_command_short         : PASS

   xmldb.common.parser_no_long                   : PASS

   xmldb.common.parser_two_char_short            : PASS

   xmldb.test.classes.scripttest1                : PASS

   Setup xmldb.test.classes.tempdir1             : PASS

   xmldb.test.classes.tempdir1                   : PASS

   xmldb.common.parser_help                      : PASS

   xmldb.common.parser_parse                     : PASS

   Cleanup xmldb.test.classes.tempdir1           : PASS


--- STATISTICS  
---------------------------------------------------------------

       29        tests total
        1 (  3%) tests FAIL
       28 ( 97%) tests PASS

--- TESTS THAT DID NOT PASS  
--------------------------------------------------

   regress.xml1                                  : FAIL
     Child process exited unsuccessfully

make: *** [check-serial] Error 1
multivac%

--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From hschilling at nasa.gov  Wed Nov 19 16:51:28 2003
From: hschilling at nasa.gov (Herb Schilling)
Date: Wed, 19 Nov 2003 11:51:28 -0500
Subject: Suite file format ?
Message-ID: <p05200f63bbe14f974411@[139.88.38.71]>

Hi,

  I did a little digging into the QMTest code and I saw references to 
"suite files" ( as opposed to implicit suites defined by directories 
). I can't find any documentation on these and I don't see any 
examples. Can anyone give more info about these "suite files" ? I 
think I would like to use them!

  Thanks.
-- 
Herb Schilling
NASA Glenn Research Center
Brook Park, OH 44135
hschilling at nasa.gov

There are two ways to slide easily through life: to believe 
everything or to doubt everything; both ways save us from thinking. 
-Theodore Rubin


From smb at egenera.com  Wed Nov 19 17:29:28 2003
From: smb at egenera.com (Steve Byan)
Date: Wed, 19 Nov 2003 12:29:28 -0500
Subject: [qmtest] Suite file format ?
In-Reply-To: <p05200f63bbe14f974411@[139.88.38.71]>
References: <p05200f63bbe14f974411@[139.88.38.71]>
Message-ID: <ED8397B1-1AB5-11D8-B59F-000A957CD5B0@egenera.com>


On Nov 19, 2003, at 11:51 AM, Herb Schilling wrote:

>  I did a little digging into the QMTest code and I saw references to 
> "suite files" ( as opposed to implicit suites defined by directories 
> ). I can't find any documentation on these and I don't see any 
> examples. Can anyone give more info about these "suite files" ? I 
> think I would like to use them!

I accidentally created some when I thought I was creating directories 
:-). In the GUI, select View->Directory, then select File->New Suite, 
and fill in the following dialog boxes. Go look in your tdb, and voila, 
there's a suite file with the same name as the suite you just added 
with a ".qms" extension. Note that this is a regular file, not a 
directory:

<suite><test_id>environment</test_id></suite>[smb at edvac tdb]$ ls -l
total 32
-rw-rw-rw-    1 smb      software      173 Nov 19 12:07 context
drwxrwxrwx    2 smb      software     4096 Nov 13 09:39 CVS
-rw-rw-r--    1 smb      software     2069 Nov 19 12:03 environment.qmt
-rw-rw-r--    1 smb      software       68 Nov 19 12:21 
fooling-around.qms
-rwxrwxrwx    1 smb      software      214 Nov 13 09:10 Makefile
drwxrwxr-x    3 smb      software     4096 Nov 19 11:44 primary.qms
drwxrwxr-x    2 smb      software     4096 Nov 18 16:54 QMTest
-rwxr-xr-x    1 smb      software       59 Nov 19 11:19 start_qmtest.sh

My toy test suite contains the following text:

[smb at edvac tdb]$ cat fooling-around.qms
<?xml version="1.0" ?>
<suite><test_id>environment</test_id></suite>

BTW, there's a bug in QMTest; if one creates a test suite "foo" and 
then creates a test "foo.bar", QMTest fails with a traceback indicating 
that "foo is not a directory". It's not obvious what the behavior 
should be in this case, but a traceback is a bit over the top :-)

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From smb at egenera.com  Wed Nov 19 17:41:59 2003
From: smb at egenera.com (Steve Byan)
Date: Wed, 19 Nov 2003 12:41:59 -0500
Subject: syntax for creating targets?
Message-ID: <ACF6AEE0-1AB7-11D8-B59F-000A957CD5B0@egenera.com>

I'm trying to create a target using one of the started target classes, 
e,g, SerialTarget. I'm getting the following error from qmtest 2.0.3:

[smb at edvac tdb]$ qmtest create-target minigolf SerialTarget BladeFrame
qmtest: error: The extension class 'SerialTarget' could not be found.  
You may
                need to set the 'QMTEST_CLASS_PATH' environment variable.


I tried setting QMTEST_CLASS_PATH to the installed directory containing 
the standard classes:

[smb at edvac tdb]$ echo $QMTEST_CLASS_PATH
/usr/local/lib/qm/qm/test/classes

but I still get the same error.

The doc's say QMTest includes the standard classes in it's default 
search-path. Am I using the wrong syntax for the class-name?

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From smb at egenera.com  Wed Nov 19 17:51:57 2003
From: smb at egenera.com (Steve Byan)
Date: Wed, 19 Nov 2003 12:51:57 -0500
Subject: [qmtest] Suite file format ?
In-Reply-To: <p05200f67bbe15c323890@[139.88.38.71]>
References: <p05200f63bbe14f974411@[139.88.38.71]> <ED8397B1-1AB5-11D8-B59F-000A957CD5B0@egenera.com> <p05200f67bbe15c323890@[139.88.38.71]>
Message-ID: <1177616A-1AB9-11D8-B59F-000A957CD5B0@egenera.com>


On Nov 19, 2003, at 12:46 PM, Herb Schilling wrote:

>
>  Thanks!  I just copied your example with my setup and it worked just  
> fine.
>
>  Now if I can figure out how to have a suite file which contains tests  
> in different subdirectories, I will be very happy!

The GUI gave me a picklist with all my tests listed, including those in  
different directories. I picked three tests, all in different  
directories:

environment
primary.unshared.spc2.commands.release10.logical-unit
secondary.foo

The resulting test suite file is:

[smb at edvac tdb]$ cat fooling-around.qms
<?xml version="1.0" ?>
<suite><test_id>environment</ 
test_id><test_id>primary.unshared.spc2.commands.release10.logical- 
unit<test_id><test_id>secondary.foo</test_id></suite>


Have fun!

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From smb at egenera.com  Wed Nov 19 17:55:34 2003
From: smb at egenera.com (Steve Byan)
Date: Wed, 19 Nov 2003 12:55:34 -0500
Subject: [qmtest] syntax for creating targets?
In-Reply-To: <ACF6AEE0-1AB7-11D8-B59F-000A957CD5B0@egenera.com>
References: <ACF6AEE0-1AB7-11D8-B59F-000A957CD5B0@egenera.com>
Message-ID: <92D26FA4-1AB9-11D8-B59F-000A957CD5B0@egenera.com>


On Nov 19, 2003, at 12:41 PM, Steve Byan wrote:

> I'm trying to create a target using one of the started target classes, 
> e,g, SerialTarget. I'm getting the following error from

I meant "one of the standard target classes". Grrr.

Regards,
-Steve



From smb at egenera.com  Wed Nov 19 18:05:17 2003
From: smb at egenera.com (Steve Byan)
Date: Wed, 19 Nov 2003 13:05:17 -0500
Subject: [qmtest] syntax for creating targets?
In-Reply-To: <ACF6AEE0-1AB7-11D8-B59F-000A957CD5B0@egenera.com>
References: <ACF6AEE0-1AB7-11D8-B59F-000A957CD5B0@egenera.com>
Message-ID: <EECAF60A-1ABA-11D8-B59F-000A957CD5B0@egenera.com>


On Nov 19, 2003, at 12:41 PM, Steve Byan wrote:

> I'm trying to create a target using one of the started target classes, 
> e,g, SerialTarget. I'm getting the following error from qmtest 2.0.3:
>
> [smb at edvac tdb]$ qmtest create-target minigolf SerialTarget BladeFrame
> qmtest: error: The extension class 'SerialTarget' could not be found.  
> You may
>                need to set the 'QMTEST_CLASS_PATH' environment 
> variable.

I found the hint I needed in the "classes.qmc" file in the 
/usr/local/qm/qm/test/classes directory; the class name to use is 
"serial_target.SerialTarget". Perhaps adding an example in section 
3.4.2 of the doc's would help others in the future.

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From smb at egenera.com  Wed Nov 19 22:41:57 2003
From: smb at egenera.com (Steve Byan)
Date: Wed, 19 Nov 2003 17:41:57 -0500
Subject: adding context variables in a target extension class
Message-ID: <94E224E0-1AE1-11D8-B59F-000A957CD5B0@egenera.com>

I'd like to add some test context variables in a target extension 
class. Unless I've missing something (quite possible), the only obvious 
place where a target extension class can get its paws on the context is 
in the RunTest method. So I imagine something like this:

	def RunTest(self, descriptor, context):
		properties = { "TARGET_HOSTNAME" : "minigolf.egenera.com" }
		context = ContextWrapper(context, properties)
		Target.RunTest(self, descriptor, context)


It seems a little heavyweight to be constructing a ContextWrapper in 
the RunTest  method in the MyTarget class and then constructing yet 
another ContextWrapper on the ContextWrapper in the RunTest method in 
the base Target class.  Have I missed something - isn't there a way to 
add to the context in the __init__ or Start methods?

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From mark at codesourcery.com  Thu Nov 20 02:50:38 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 19 Nov 2003 18:50:38 -0800
Subject: [qmtest] syntax for creating targets?
In-Reply-To: <EECAF60A-1ABA-11D8-B59F-000A957CD5B0@egenera.com>
References: <ACF6AEE0-1AB7-11D8-B59F-000A957CD5B0@egenera.com>
	 <EECAF60A-1ABA-11D8-B59F-000A957CD5B0@egenera.com>
Message-ID: <1069296638.3853.36.camel@minax.codesourcery.com>

On Wed, 2003-11-19 at 10:05, Steve Byan wrote:
> On Nov 19, 2003, at 12:41 PM, Steve Byan wrote:
> 
> > I'm trying to create a target using one of the started target classes, 
> > e,g, SerialTarget. I'm getting the following error from qmtest 2.0.3:
> >
> > [smb at edvac tdb]$ qmtest create-target minigolf SerialTarget BladeFrame
> > qmtest: error: The extension class 'SerialTarget' could not be found.  
> > You may
> >                need to set the 'QMTEST_CLASS_PATH' environment 
> > variable.
> 
> I found the hint I needed in the "classes.qmc" file in the 
> /usr/local/qm/qm/test/classes directory; the class name to use is 
> "serial_target.SerialTarget". Perhaps adding an example in section 
> 3.4.2 of the doc's would help others in the future.

I agree.  

Here's the patch I checked in.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
2003-11-19  Mark Mitchell  <mark at codesourcery.com>

	* qm/test/doc/reference.xml: Improve documentation for "qmtest
	create".

Index: qm/test/doc/reference.xml
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/doc/reference.xml,v
retrieving revision 1.34
diff -c -5 -p -r1.34 reference.xml
*** qm/test/doc/reference.xml	14 Oct 2003 21:56:07 -0000	1.34
--- qm/test/doc/reference.xml	20 Nov 2003 02:44:10 -0000
***************
*** 628,667 ****
       <command>&qmtest-cmd; create</command>
       <arg choice="opt" rep="repeat">
        <replaceable>option</replaceable>
       </arg>
       <arg choice="plain">
        <replaceable>descriptor</replaceable>
       </arg>
      </cmdsynopsis>
     </section>
      
     <section>
      <title>Description</title>
      <para>The <command>&qmtest-cmd; create</command> creates a new
      extension instance.  For example, this command can be used to
!     create a new test or resource.  For a list of the types of
      extensions supported by &qmtest;, run <command>&qmtest-cmd;
!     extensions</command>.</para>
  
      <para>The descriptor specifies an extension class and (optionally)
      attributes for that extension class.  The form of the descriptor is
      <command><replaceable>class</replaceable>(<replaceable>attributes</replaceable>)</command>,
      where the attributes are of the form
      <command><replaceable>attr</replaceable> =
      &quot;<replaceable>val</replaceable>&quot;</command>.  If there
      are no attributes, the parentheses may be omitted.</para>
  
!     <para>If the <replaceable>class</replaceable> names a extension
!     file (such as an existing test or resource file), that file is
!     read.  The extension class used is the one specified in that
!     file.  Any attributes specified in the file are also read.</para>
! 
!     <para>Any attributes specified in the descriptor (including those
!     in the extension file, if <replaceable>class</replaceable>
!     indicates an extension file) override those provided on the
!     command line using the <option>&dashdash;attribute</option> option.</para>
  
      <para>The new extension file is written to the file specified with
      the <option>&dashdash;output</option> option, or to the standard
      output if no <option>&dashdash;output</option> is specified.</para>
  
--- 628,681 ----
       <command>&qmtest-cmd; create</command>
       <arg choice="opt" rep="repeat">
        <replaceable>option</replaceable>
       </arg>
       <arg choice="plain">
+       <replaceable>kind</replaceable>
+      </arg>
+      <arg choice="plain">
        <replaceable>descriptor</replaceable>
       </arg>
      </cmdsynopsis>
     </section>
      
     <section>
      <title>Description</title>
      <para>The <command>&qmtest-cmd; create</command> creates a new
      extension instance.  For example, this command can be used to
!     create a new test or resource.  For a list of the kinds of
      extensions supported by &qmtest;, run <command>&qmtest-cmd;
!     extensions</command>.  The <replaceable>kind</replaceable>
!     must be one of these extension kinds.</para>
  
      <para>The descriptor specifies an extension class and (optionally)
      attributes for that extension class.  The form of the descriptor is
      <command><replaceable>class</replaceable>(<replaceable>attributes</replaceable>)</command>,
      where the attributes are of the form
      <command><replaceable>attr</replaceable> =
      &quot;<replaceable>val</replaceable>&quot;</command>.  If there
      are no attributes, the parentheses may be omitted.</para>
  
!     <para>The <replaceable>class</replaceable> may be either the path
!     to an extension file or a QMTest class name in the form
!     <replaceable>module.class</replaceable>.  If the
!     <replaceable>class</replaceable> is the path to an extension file
!     (such as an existing test or resource file), the class name used
!     is the one provided in the file; otherwise the class named used is
!     the name provided on the command line.</para>
! 
!     <para>The attributes used to construct the extension instance come
!     from three sources: the attributes in the extension file (if the
!     <replaceable>class</replaceable> is the path to an extension
!     file), the <option>&dashdash;attribute</option> options provided
!     on the command line, and the explicit attributes provided in the
!     descriptor.  If multiple values for the the same attribute name
!     are provided, the value used is taken from the first source in the
!     following list for which there is a value: the rightmost attribute
!     provided in the descriptor, the extension file, or the rightmost
!     <option>&dashdash;attribute</option> present on the command
!     line.</para>
  
      <para>The new extension file is written to the file specified with
      the <option>&dashdash;output</option> option, or to the standard
      output if no <option>&dashdash;output</option> is specified.</para>
  
***************
*** 693,704 ****
--- 707,731 ----
         <para>Write a description of the extension instance to
         <replaceable>file</replaceable>.</para>
        </listitem>
       </varlistentry>
      </variablelist>
+    </section>
  
+    <section>
+     <title>Example</title>
+ 
+     <para>
+       This command:
+       <screen><userinput><![CDATA[
+   qmtest create -a format=stats -o rs
+          result_stream text_result_stream.TextResultStream(filename="rs")]]></userinput></screen>
+      creates a file called <filename>rs</filename> containing an
+      instance of <classname>TextResultStream</classname>.
+     </para>
     </section>
+ 
    </section>
  
    <section id="sec-testcmd-create-target">
     <title><command>&qmtest-cmd; create-target</command></title>
  

From mark at codesourcery.com  Thu Nov 20 03:04:31 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 19 Nov 2003 19:04:31 -0800
Subject: [qmtest] adding context variables in a target extension class
In-Reply-To: <94E224E0-1AE1-11D8-B59F-000A957CD5B0@egenera.com>
References: <94E224E0-1AE1-11D8-B59F-000A957CD5B0@egenera.com>
Message-ID: <1069297471.3853.46.camel@minax.codesourcery.com>

On Wed, 2003-11-19 at 14:41, Steve Byan wrote:
> I'd like to add some test context variables in a target extension 
> class. Unless I've missing something (quite possible), the only obvious 
> place where a target extension class can get its paws on the context is 
> in the RunTest method. So I imagine something like this:
> 
> 	def RunTest(self, descriptor, context):
> 		properties = { "TARGET_HOSTNAME" : "minigolf.egenera.com" }
> 		context = ContextWrapper(context, properties)
> 		Target.RunTest(self, descriptor, context)
> 
> 
> It seems a little heavyweight to be constructing a ContextWrapper in 
> the RunTest  method in the MyTarget class and then constructing yet 
> another ContextWrapper on the ContextWrapper in the RunTest method in 
> the base Target class.  Have I missed something - isn't there a way to 
> add to the context in the __init__ or Start methods?

In the CVS version of QMTest, there is no ContextWrapper class any
more.  Instead, Context has taken the place of both Context and
ContextWrapper.  However, the basic idea you're using would still work
in the same way.

There's no way to set the default set of context properties other than
the technique you've discovered.  It's not really all that heavyweight;
I'd be surprised if you could measure any difference when
creating/destroying the extra Context objects.

I think that you wouldn't want to have a single Target change the global
context because that would affect tests running on other targets as
well.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From ghost at cs.msu.su  Thu Nov 20 12:09:38 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Thu, 20 Nov 2003 15:09:38 +0300
Subject: Bug with editing attachments
Message-ID: <200311201509.38719.ghost@cs.msu.su>


Hello,
using CVS HEAD of QMTest, I have problems with attachments.

Case 1. An existing test has 'core.qms/test4.itrace' as location for 
attachment. When I click "OK" button on editing page, without editing 
attachment at all, QMTest creates new attachment with the same name, location 
and so on, but in temporary attachments store. Note that it does not really 
creates the data in temporary attachment store, when when saving Attachment 
to the attachment store associated with the xml_database, I get exception.

Case 2. I create new test with attachment. The location of attachment is 
computed as:

    /home/ghost/Work/Module/nm_model/tdb/jamconfig

And that's really unfortunate. I don't get any exceptions, since when 
temporary attachment store joins its locations with this absolute path, it 
gets valid path. But, when saving, a new file is created, with name 

    /home/ghost/Work/Module/nm_model/tdb/jamconfig.2

And the number is incremented on all subsequent saves -- and the data is just 
duplicated.

I think the issues which must be solved are:

1. Some way to remove attachments which are no longer used. Is there any way 
for attachment to be used by two tests? If not, it should be simple to find 
which attachment fields are used by the saved tests, and which are modified.

2. I think the logic of XMLDatabase.__MakeDataFilePath somewhat breaks 
encapsulation of attachment store. Instead of directly doing os.path.exists, 
there should be some method in FileAttachmentStore (or, better yet, in 
AttachmentStore), which allows to check if location is used or not.

3. Finally, when creating Attachment from form data, we need to know, if it's 
attachment in the origianal attachment store of XMLDatabase -- which happens 
if the user has not modified attachment, or it if's in the temporary 
attachment store -- which happends if new attachment was uploaded. Currently, 
the second case is assumed, which causes the first problem.

Thoughts? If the above makes sense I can try to do something about it.

- Volodya








From smb at egenera.com  Thu Nov 20 14:21:26 2003
From: smb at egenera.com (Steve Byan)
Date: Thu, 20 Nov 2003 09:21:26 -0500
Subject: [qmtest] adding context variables in a target extension class
In-Reply-To: <1069297471.3853.46.camel@minax.codesourcery.com>
References: <94E224E0-1AE1-11D8-B59F-000A957CD5B0@egenera.com> <1069297471.3853.46.camel@minax.codesourcery.com>
Message-ID: <D34C39CA-1B64-11D8-B59F-000A957CD5B0@egenera.com>


On Nov 19, 2003, at 10:04 PM, Mark Mitchell wrote:
> In the CVS version of QMTest, there is no ContextWrapper class any
> more.  Instead, Context has taken the place of both Context and
> ContextWrapper.  However, the basic idea you're using would still work
> in the same way.

Thanks.

> There's no way to set the default set of context properties other than
> the technique you've discovered.  It's not really all that heavyweight;
> I'd be surprised if you could measure any difference when
> creating/destroying the extra Context objects.

I'm sure you're right. It just felt like I had the wrong design for my 
extension, mostly because I haven't yet grokked the design of QMTest's 
inplementation.

> I think that you wouldn't want to have a single Target change the 
> global
> context because that would affect tests running on other targets as
> well.

If I understand ContextWrappers correctly, I'd only be changing the 
context for tests running on instances of my target class, and the 
variables added to the context would not persist past the invocation of 
my RunTest method.

But in the new implementation, that's a good point; I don't want to be 
making modifications to the global context. I'm using QMTest for 
functional testing of a distributed system, so thus far I've only 
considered having a single test target.

I need to pass a bunch of node hostnames associated with a particular 
test target to shell script tests that implement a distributed system 
test case. These hostnames must be parameters to the test harness, so 
as near as I can tell they have to be passed either in the QMTest 
context file or as attributes to a target extension class. I suppose I 
could hack up a Resource class to go reading external config files, but 
the Target class seemed to be the right home for what I want to do.

Does anyone have any suggestions for a better way to accomplish my goal 
of passing a set of hostname parameters associated with a single 
system-under-test to shell-script tests?

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From smb at egenera.com  Thu Nov 20 17:26:47 2003
From: smb at egenera.com (Steve Byan)
Date: Thu, 20 Nov 2003 12:26:47 -0500
Subject: [qmtest] qm-2.0.3 builds on Mac OS X 10.3.1 but fails self-test
In-Reply-To: <2FB67DB8-1AA3-11D8-B59F-000A957CD5B0@egenera.com>
References: <2FB67DB8-1AA3-11D8-B59F-000A957CD5B0@egenera.com>
Message-ID: <B7E250B4-1B7E-11D8-8304-000A957CD5B0@egenera.com>

qm-2.0.3 is functional on Mac OS X 10.3.1, despite the self-test 
failure. Mark has a patch which corrects the self-test problem.

I had been using QMTest remotely with the latest OmniWeb web-browser on 
OS X 10.2.8 , and haven't noticed any problems in its Javascript 
support; the GUI seems to work fine. The latest OmniWeb browser uses 
Apple's html framework, so presumably Apple's Safari web-browser would 
work just as well, but I haven't tried it.

I don't have mozilla installed on my OS X system, so I've had to use 
the following .qmrc file to bring up the GUI for local instances of 
QMTest:

multivac% cat .qmrc
[common]
browser=open /Applications/OmniWeb.app

Substitute "Safari" or "Internet\ Explorer" for "OmniWeb" if you prefer 
a different browser.

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From hschilling at nasa.gov  Fri Nov 21 17:28:48 2003
From: hschilling at nasa.gov (Herb Schilling)
Date: Fri, 21 Nov 2003 12:28:48 -0500
Subject: tests in subdirectories in suite files
Message-ID: <p05200f82bbe276b87089@[139.88.38.71]>

Hi,

   With Steve Byan's help, I am using suite files now. Unfortunately, 
I can't get them to work with tests in a subdirectory.

  Here's my situation:

  I am in a directory with ( among other things, including the QMTest 
directories):

	testSuite.qms
	testjunk.qmt
	testrubbish.qmt
	subdirectory/testjunk.qmt


The file testSuite.qms contains:

	<?xml version='1.0' encoding='ISO-8859-1'?>
	<!DOCTYPE test PUBLIC "-//Software Carpentry//QMTest Test 
V0.1//EN" "http://www.software-carpentry.com/qm/xml/test.dtd">

	<suite>
	<test_id>subdirectory.testjunk</test_id>
	<test_id>testjunk</test_id>
	<test_id>testrubbish</test_id>
	</suite>


When I run :

	qmtest run testSuite

I get

   subdirectory.testjunk                         : UNTESTED
     Could not load test.

     qmtest.exception:
       qm.test.database.NoSuchTestError: There is no test with the test ID
       "subdirectory.testjunk".


The following commands work just fine.


	qmtest run subdirectory/testjunk

	cd subdirectory
	qmtest run

What am I doing wrong? ( PS. I am using the release version of 
QMTest. I wish I could try the CVS version but I still can't login to 
the CVS server at codesourcery. )

Thanks in advance!


-- 
Herb Schilling
NASA Glenn Research Center
Brook Park, OH 44135
hschilling at nasa.gov

There are two ways to slide easily through life: to believe 
everything or todoubt everything; both ways save us from thinking. 
-Theodore Rubin


From mark at codesourcery.com  Fri Nov 21 19:19:28 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 21 Nov 2003 11:19:28 -0800
Subject: [qmtest] adding context variables in a target extension class
In-Reply-To: <D34C39CA-1B64-11D8-B59F-000A957CD5B0@egenera.com>
References: <94E224E0-1AE1-11D8-B59F-000A957CD5B0@egenera.com>
	 <1069297471.3853.46.camel@minax.codesourcery.com>
	 <D34C39CA-1B64-11D8-B59F-000A957CD5B0@egenera.com>
Message-ID: <1069442368.30320.35.camel@doubledemon.codesourcery.com>


> I need to pass a bunch of node hostnames associated with a particular 
> test target to shell script tests that implement a distributed system 
> test case. These hostnames must be parameters to the test harness, so 
> as near as I can tell they have to be passed either in the QMTest 
> context file or as attributes to a target extension class.

I think using a target extension class is appropriate.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From smb at egenera.com  Fri Nov 21 21:54:02 2003
From: smb at egenera.com (Steve Byan)
Date: Fri, 21 Nov 2003 16:54:02 -0500
Subject: os.system0 use in resource SetUp methods
Message-ID: <385054F4-1C6D-11D8-A233-000A957CD5B0@egenera.com>

I've written a couple of test extension classes modeled on 
ShellCommandTest and ShellScriptTest which use a remote shell to 
execute the tests on a remote host specified by a "node" resource 
extension class, which selects one host from those provided in the 
context by a target extension class.

I'd like to check the state of the selected host in the resource SetUp 
method. I've tried using code like this:

         # test that pServer is up and running
         if os.system("ping -c 3 " + remote_host + " >/dev/null") != 0:
             cause = "Can't ping " + blade + " at hostname " + 
remote_host
             result.Fail(cause=cause)
             return

Unfortunately, this breaks QMTest in such as way that the tests execute 
perfectly from the command-line, but the GUI hangs in the "All tests 
have not yet been run.  These  results will be updated every few 
seconds." state.

If I remove the os.system call, all is fine.

I'm a total newbie to zope-dhtml, so I'd rather not go there if I don't 
have to. Is there some basic assumption in Zope or in QMTest which 
prevents one from using os.system() calls in the guts of the html 
server?

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From mark at codesourcery.com  Sat Nov 22 01:39:48 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 21 Nov 2003 17:39:48 -0800
Subject: [qmtest] os.system0 use in resource SetUp methods
In-Reply-To: <385054F4-1C6D-11D8-A233-000A957CD5B0@egenera.com>
References: <385054F4-1C6D-11D8-A233-000A957CD5B0@egenera.com>
Message-ID: <1069465188.30322.147.camel@doubledemon.codesourcery.com>

On Fri, 2003-11-21 at 13:54, Steve Byan wrote:
> I've written a couple of test extension classes modeled on 
> ShellCommandTest and ShellScriptTest which use a remote shell to 
> execute the tests on a remote host specified by a "node" resource 
> extension class, which selects one host from those provided in the 
> context by a target extension class.
> 
> I'd like to check the state of the selected host in the resource SetUp 
> method. I've tried using code like this:
> 
>          # test that pServer is up and running
>          if os.system("ping -c 3 " + remote_host + " >/dev/null") != 0:
>              cause = "Can't ping " + blade + " at hostname " + 
> remote_host
>              result.Fail(cause=cause)
>              return

Does this problem happen with the CVS version of QMTest or only with
QMTest 2.0.3?  In 2.0.3, there were some bugs involving test/resource
dependencies that might have caused problems here.

I can't think of any reason that the GUI should present particular
problems here; we'll have to have more information to figure out what's
going wrong.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From mark at codesourcery.com  Mon Nov 24 00:59:26 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 23 Nov 2003 16:59:26 -0800
Subject: PATCH: Fix packaging problems
Message-ID: <200311240059.hAO0xQw8013723@doubledemon.codesourcery.com>


This patch fixes some packaging issues:

(1) The printed manual was being installed in two locations

(2) The "classes" directory was not installed in lib, and therefore
    optimized versions of the files were not generated.

(3) The "classes" directory had no "__init__.py" file and therefore
    modules from "classes" could not easily be imported.

(4) The "sdist" and "bdist_rpm" commands for Distutils were no longer
    working correctly.

I hope to get Windows packages working tonight, at which point we will
generate a test release of QMTest 2.1.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-11-23  Mark Mitchell  <mark at codesourcery.com>

	* .cvsignore: Add build, dist, and MANIFEST.
	* MANIFEST.in: Update for recent changes.
	* setup.py: Put qm/test/classes in lib, not share.  Add more
	metadata.  Correct documentation handling.
	* qm/__init__.py: Import lib_dir from qm.config.
	* common.py (get_lib_directory): New function.
	* qm/test/base.py (get_extension_directories): Use
	get_lib_directory, not get_share_directory.
	* qm/test/clases/__init__.py: New file.
	* qmdist/.cvsignore: Likewise.
	* qmdist/command/.cvsignore: Likeiwse.
	* qmdist/command/__init__.py (get_relative_path): Robustify.
	* qmdist/command/build.py: New file.
	* qmdist/command/build_doc.py (build_doc.call_jade): Put generated
	files in the source directory.
	(build_doc.run): Update accordingly.
	* qmdist/command/install_data.py (install_data.run): Set
	lib_dir in config.py.
	* qmdist/command/install_lib.py: New file.
	* qmdist/command/install_scripts.py: Generalize prefix handling.

Index: .cvsignore
===================================================================
RCS file: /home/sc/Repository/qm/.cvsignore,v
retrieving revision 1.2
diff -c -5 -p -r1.2 .cvsignore
*** .cvsignore	2 Jan 2002 22:27:11 -0000	1.2
--- .cvsignore	24 Nov 2003 00:46:53 -0000
***************
*** 1,5 ****
--- 1,8 ----
  GNUmakefile
  config.log
  config.cache
  config.status
  qm.spec
+ build
+ dist
+ MANIFEST
Index: MANIFEST.in
===================================================================
RCS file: /home/sc/Repository/qm/MANIFEST.in,v
retrieving revision 1.1
diff -c -5 -p -r1.1 MANIFEST.in
*** MANIFEST.in	9 Sep 2003 13:48:21 -0000	1.1
--- MANIFEST.in	24 Nov 2003 00:46:53 -0000
***************
*** 11,32 ****
  #
  # For license terms see the file COPYING.
  #
  ########################################################################
  
! include ChangeLog COPYING README TODO
  include MANIFEST.in setup.py
  
  # These are the modules included in the 'qm' package.
  recursive-include   qm *.py
- include             qm/config.py
  # This is the main executable.
! include             qm/test/qmtest.py
  # These are all docs, in (docbook) xml, html, tex, and pdf format.
  include             qm/test/doc/*.xml
  include             qm/test/doc/html/*.html
- include             qm/test/doc/print/manual.tex
  include             qm/test/doc/print/manual.pdf
  recursive-include   doc *
  # These are data files used by various parts of QMTest.
  include             qm/test/classes/classes.qmc
  recursive-include   qm/test/share *
--- 11,30 ----
  #
  # For license terms see the file COPYING.
  #
  ########################################################################
  
! include ChangeLog COPYING README
  include MANIFEST.in setup.py
  
  # These are the modules included in the 'qm' package.
  recursive-include   qm *.py
  # This is the main executable.
! include             qm/test/qmtest
  # These are all docs, in (docbook) xml, html, tex, and pdf format.
  include             qm/test/doc/*.xml
  include             qm/test/doc/html/*.html
  include             qm/test/doc/print/manual.pdf
  recursive-include   doc *
  # These are data files used by various parts of QMTest.
  include             qm/test/classes/classes.qmc
  recursive-include   qm/test/share *
Index: setup.py
===================================================================
RCS file: /home/sc/Repository/qm/setup.py,v
retrieving revision 1.6
diff -c -5 -p -r1.6 setup.py
*** setup.py	14 Oct 2003 21:56:06 -0000	1.6
--- setup.py	24 Nov 2003 00:46:53 -0000
*************** from   distutils.core import setup
*** 21,32 ****
--- 21,34 ----
  import sys
  import os
  import os.path
  import string
  import glob
+ from   qmdist.command.build import build
  from   qmdist.command.build_doc import build_doc
  from   qmdist.command.install_data import install_data
+ from   qmdist.command.install_lib import install_lib
  from   qmdist.command.install_scripts import install_scripts
  from   qmdist.command.check import check
  
  ########################################################################
  # Functions
*************** def select_share_files(share_files, dir,
*** 73,130 ****
  
  packages=['qm',
            'qm/external',
            'qm/external/DocumentTemplate',
            'qm/test',
            'qm/test/web']
  
! classes= filter(lambda f: f[-3:] == '.py',
!                 os.listdir(os.path.join('qm','test','classes')))
! classes.append('classes.qmc')
  
  diagnostics=['common.txt','common-help.txt']
  
  messages=['help.txt', 'diagnostics.txt']
  
  html_docs = []
- print_docs = []
  
  if not os.path.isdir(os.path.normpath('qm/test/doc/html')):
      print """Warning: to include documentation run the
               \'build_doc\' command first."""
  
  else:
      html_docs = filter(lambda f: f.endswith(".html"),
                         os.listdir(os.path.normpath('qm/test/doc/html')))
-     print_docs = [ 'manual.pdf']
  
  tutorial_files = files_with_ext("qm/test/share/tutorial/tdb", ".qmt")
  test_dtml_files = files_with_ext("qm/test/share/dtml", ".dtml")
  
  share_files = {}
  os.path.walk("share", select_share_files, share_files)
  
! setup(cmdclass={'build_doc': build_doc,
                  'install_data': install_data,
                  'install_scripts' : install_scripts,
                  'check': check},
!       name="qm", 
!       version="2.1",
        packages=packages,
        scripts=['qm/test/qmtest'],
!       data_files=[('qm/test/classes',
!                    prefix(classes, 'qm/test/classes')),
!                   ('qm/messages/test',
                     prefix(messages, 'qm/test/share/messages')),
                    # DTML files for the GUI.
                    ("qm/dtml/test", test_dtml_files),
                    # The documentation.
                    ('qm/doc', ('README', 'COPYING')),
                    ('qm/doc/test/html',
                     prefix(html_docs, 'qm/test/doc/html')),
                    ('qm/doc/test/print',
!                    prefix(print_docs, 'qm/test/doc/print')),
                    # The tutorial.
                    ("qm/tutorial/test/tdb", tutorial_files),
                    ("qm/tutorial/test/tdb/QMTest",
                     ("qm/test/share/tutorial/tdb/QMTest/configuration",))]
                   # The files from the top-level "share" directory.
--- 75,137 ----
  
  packages=['qm',
            'qm/external',
            'qm/external/DocumentTemplate',
            'qm/test',
+           'qm/test/classes',
            'qm/test/web']
  
! classes = ["classes.qmc"]
  
  diagnostics=['common.txt','common-help.txt']
  
  messages=['help.txt', 'diagnostics.txt']
  
  html_docs = []
  
  if not os.path.isdir(os.path.normpath('qm/test/doc/html')):
      print """Warning: to include documentation run the
               \'build_doc\' command first."""
  
  else:
      html_docs = filter(lambda f: f.endswith(".html"),
                         os.listdir(os.path.normpath('qm/test/doc/html')))
  
  tutorial_files = files_with_ext("qm/test/share/tutorial/tdb", ".qmt")
  test_dtml_files = files_with_ext("qm/test/share/dtml", ".dtml")
  
  share_files = {}
  os.path.walk("share", select_share_files, share_files)
  
! setup(name="qm", 
!       version="2.1",
!       author="CodeSourcery, LLC",
!       author_email="info at codesourcery.com",
!       maintainer="Mark Mitchell",
!       maintainer_email="mark at codesourcery.com",
!       url="http://www.codesourcery.com/qm/test",
!       description="QMTest is a automated software test execution tool.",
!       
!       cmdclass={'build': build,
!                 'build_doc': build_doc,
                  'install_data': install_data,
+                 'install_lib': install_lib,
                  'install_scripts' : install_scripts,
                  'check': check},
! 
        packages=packages,
        scripts=['qm/test/qmtest'],
!       data_files=[('qm/messages/test',
                     prefix(messages, 'qm/test/share/messages')),
                    # DTML files for the GUI.
                    ("qm/dtml/test", test_dtml_files),
                    # The documentation.
                    ('qm/doc', ('README', 'COPYING')),
                    ('qm/doc/test/html',
                     prefix(html_docs, 'qm/test/doc/html')),
                    ('qm/doc/test/print',
!                    ["qm/test/doc/print/manual.pdf"]),
                    # The tutorial.
                    ("qm/tutorial/test/tdb", tutorial_files),
                    ("qm/tutorial/test/tdb/QMTest",
                     ("qm/test/share/tutorial/tdb/QMTest/configuration",))]
                   # The files from the top-level "share" directory.
Index: qm/__init__.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/__init__.py,v
retrieving revision 1.10
diff -c -5 -p -r1.10 __init__.py
*** qm/__init__.py	14 Oct 2003 21:56:06 -0000	1.10
--- qm/__init__.py	24 Nov 2003 00:46:53 -0000
*************** import string
*** 21,31 ****
  from qm.common import *
  from qm.diagnostic import error, warning, message
  
  try:
      # The config file is created during "make install" by setup.py.
!     from qm.config import version, data_dir
      version_info = tuple(string.split(version, '.'))
      """The version of QM as a tuple of '(major, minor, release)'."""
  except:
      # If qm.config was not available, we are running out of the source tree.
      common.is_installed = 0
--- 21,31 ----
  from qm.common import *
  from qm.diagnostic import error, warning, message
  
  try:
      # The config file is created during "make install" by setup.py.
!     from qm.config import version, data_dir, lib_dir
      version_info = tuple(string.split(version, '.'))
      """The version of QM as a tuple of '(major, minor, release)'."""
  except:
      # If qm.config was not available, we are running out of the source tree.
      common.is_installed = 0
Index: qm/common.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/common.py,v
retrieving revision 1.77
diff -c -5 -p -r1.77 common.py
*** qm/common.py	13 Nov 2003 03:08:01 -0000	1.77
--- qm/common.py	24 Nov 2003 00:46:53 -0000
*************** class RcConfiguration(ConfigParser.Confi
*** 215,226 ****
                  options.remove("__name__")
              return options
  
      
  ########################################################################
! # functions
  ########################################################################
  
  def get_share_directory(*components):
      """Return the path to a file in the QM data file directory."""
  
      return os.path.join(qm.prefix, qm.data_dir, *components)
--- 215,232 ----
                  options.remove("__name__")
              return options
  
      
  ########################################################################
! # Functions
  ########################################################################
+ 
+ def get_lib_directory(*components):
+     """Return the path to a file in the QM library directory."""
+ 
+     return os.path.join(qm.prefix, qm.lib_dir, *components)
+ 
  
  def get_share_directory(*components):
      """Return the path to a file in the QM data file directory."""
  
      return os.path.join(qm.prefix, qm.data_dir, *components)
Index: qm/test/base.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/base.py,v
retrieving revision 1.94
diff -c -5 -p -r1.94 base.py
*** qm/test/base.py	14 Oct 2003 21:56:07 -0000	1.94
--- qm/test/base.py	24 Nov 2003 00:46:53 -0000
*************** def get_extension_directories(kind, data
*** 112,122 ****
                      (database_path))
  
      if qm.common.is_installed:
          # In an installed version of QMTest, the config object tells us
          # where to look.
!         dirs.append(qm.common.get_share_directory('test', 'classes'))
      else:
          # When running from the source tree, we look for path relative
          # to this file.
          dirs.append(os.path.join(os.path.dirname(__file__), "classes"))
  
--- 112,122 ----
                      (database_path))
  
      if qm.common.is_installed:
          # In an installed version of QMTest, the config object tells us
          # where to look.
!         dirs.append(qm.common.get_lib_directory('test', 'classes'))
      else:
          # When running from the source tree, we look for path relative
          # to this file.
          dirs.append(os.path.join(os.path.dirname(__file__), "classes"))
  
Index: qm/test/classes/__init__.py
===================================================================
RCS file: qm/test/classes/__init__.py
diff -N qm/test/classes/__init__.py
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- qm/test/classes/__init__.py	24 Nov 2003 00:46:53 -0000
***************
*** 0 ****
--- 1,21 ----
+ ########################################################################
+ #
+ # File:   __init__.py
+ # Author: Mark Mitchell
+ # Date:   2003-11-23
+ #
+ # Contents:
+ #   Module initialization.
+ #
+ # Copyright (c) 2001 by CodeSourcery, LLC.  All rights reserved. 
+ #
+ # For license terms see the file COPYING.
+ #
+ ########################################################################
+ 
+ ########################################################################
+ # Local Variables:
+ # mode: python
+ # indent-tabs-mode: nil
+ # fill-column: 72
+ # End:
Index: qmdist/.cvsignore
===================================================================
RCS file: qmdist/.cvsignore
diff -N qmdist/.cvsignore
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- qmdist/.cvsignore	24 Nov 2003 00:46:53 -0000
***************
*** 0 ****
--- 1,2 ----
+ *.pyc
+ *.pyo
Index: qmdist/command/.cvsignore
===================================================================
RCS file: qmdist/command/.cvsignore
diff -N qmdist/command/.cvsignore
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- qmdist/command/.cvsignore	24 Nov 2003 00:46:53 -0000
***************
*** 0 ****
--- 1,2 ----
+ *.pyc
+ *.pyo
Index: qmdist/command/__init__.py
===================================================================
RCS file: /home/sc/Repository/qm/qmdist/command/__init__.py,v
retrieving revision 1.2
diff -c -5 -p -r1.2 __init__.py
*** qmdist/command/__init__.py	14 Oct 2003 21:56:07 -0000	1.2
--- qmdist/command/__init__.py	24 Nov 2003 00:46:53 -0000
*************** def get_relative_path(dir1, dir2):
*** 30,40 ****
  
      'dir2' -- The path to a directory.
      
      returns -- The relative path from 'dir1' to 'dir2'."""
  
      rel_path = ""
      while not dir2.startswith(dir1):
          rel_path = os.path.join(os.pardir, rel_path)
          dir1 = os.path.dirname(dir1)
! 
      return os.path.join(rel_path, dir2[len(dir1) + 1:])
--- 30,44 ----
  
      'dir2' -- The path to a directory.
      
      returns -- The relative path from 'dir1' to 'dir2'."""
  
+     dir1 = os.path.abspath(dir1)
+     dir2 = os.path.abspath(dir2)
      rel_path = ""
      while not dir2.startswith(dir1):
          rel_path = os.path.join(os.pardir, rel_path)
          dir1 = os.path.dirname(dir1)
!         if dir1 == os.sep:
!             dir1 = ""
!             break
      return os.path.join(rel_path, dir2[len(dir1) + 1:])
Index: qmdist/command/build.py
===================================================================
RCS file: qmdist/command/build.py
diff -N qmdist/command/build.py
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- qmdist/command/build.py	24 Nov 2003 00:46:53 -0000
***************
*** 0 ****
--- 1,38 ----
+ ########################################################################
+ #
+ # File:   build.py
+ # Author: Mark Mitchell
+ # Date:   2003-11-23
+ #
+ # Contents:
+ #   Command to create the build files.
+ #
+ # Copyright (c) 2003 by CodeSourcery, LLC.  All rights reserved. 
+ #
+ # For license terms see the file COPYING.
+ #
+ ########################################################################
+ 
+ ########################################################################
+ # Imports
+ ########################################################################
+ 
+ from distutils.command.build import build as base
+ from os.path import join, normpath
+ 
+ ########################################################################
+ # Classes
+ ########################################################################
+ 
+ class build(base):
+     """Build files required for installation."""
+ 
+     def run(self):
+ 
+         # Do the default actions.
+         base.run(self)
+         # Copy the classes.qmc file.
+         self.copy_file(join ("qm", "test", "classes", "classes.qmc"),
+                        join(self.build_lib, "qm", "test", "classes",
+                             "classes.qmc"))
+                                 
Index: qmdist/command/build_doc.py
===================================================================
RCS file: /home/sc/Repository/qm/qmdist/command/build_doc.py,v
retrieving revision 1.1
diff -c -5 -p -r1.1 build_doc.py
*** qmdist/command/build_doc.py	9 Sep 2003 13:48:21 -0000	1.1
--- qmdist/command/build_doc.py	24 Nov 2003 00:46:54 -0000
*************** from distutils.spawn import spawn, find_
*** 18,27 ****
--- 18,28 ----
  from distutils.dep_util import newer, newer_group
  from distutils.dir_util import copy_tree, remove_tree
  from distutils.file_util import copy_file
  import os
  import os.path
+ from   os.path import normpath
  import string
  import glob
  
  def find_file(paths, predicate):
      """Return a file satisfying 'predicate' from 'paths'.
*************** class build_doc(build.build):
*** 60,82 ****
          'type' -- The output type to be generated.
  
          'src' -- The xml (master) source file to be processed.
  
          'builddir' -- The directory from which to call jade."""
!         cwd = os.getcwd()
          # Use an absolute path so that calls to chdir do not invalidate
          # the name.
          src = os.path.abspath(src)
!         builddir = os.path.join(self.build_temp, builddir)
          if (type == 'sgml'):
              # The stylesheet used for html output sets
              # 'html' to be the output directory. Jade
              # expects that to exist.
              self.mkpath(builddir + '/html')
          else:
              self.mkpath(builddir)
!             
          os.chdir(builddir)            
          cmd = [jade] + args + ['-t', type]
          cmd += ['-d', os.path.join(cwd, 'doc', 'qm-%s.dsl'%type)]
          cmd += [dcl]
          cmd += [src]
--- 61,84 ----
          'type' -- The output type to be generated.
  
          'src' -- The xml (master) source file to be processed.
  
          'builddir' -- The directory from which to call jade."""
! 
          # Use an absolute path so that calls to chdir do not invalidate
          # the name.
          src = os.path.abspath(src)
!         builddir = os.path.dirname(src)
          if (type == 'sgml'):
              # The stylesheet used for html output sets
              # 'html' to be the output directory. Jade
              # expects that to exist.
              self.mkpath(builddir + '/html')
          else:
              self.mkpath(builddir)
! 
!         cwd = os.getcwd()
          os.chdir(builddir)            
          cmd = [jade] + args + ['-t', type]
          cmd += ['-d', os.path.join(cwd, 'doc', 'qm-%s.dsl'%type)]
          cmd += [dcl]
          cmd += [src]
*************** class build_doc(build.build):
*** 89,210 ****
          """Run this command, i.e. do the actual document generation.
  
          As this command requires 'jade', it will do nothing if
          that couldn't be found in the default path."""
  
!         source_files = map(os.path.normpath,
                             ['qm/test/doc/manual.xml',
                              'qm/test/doc/introduction.xml',
                              'qm/test/doc/tour.xml',
                              'qm/test/doc/reference.xml'])
  
          jade = find_executable('jade')
!         dcl = find_file(map(os.path.normpath,
                              ['/usr/share/doc/jade*/pubtext/xml.dcl',
                               '/usr/share/doc/openjade*/pubtext/xml.dcl',
                               '/usr/doc/jade*/pubtext/xml.dcl',
                               '/usr/share/sgml/declaration/xml.dcl']),
                          os.path.isfile)
  
!         stylesheets = find_file(map(os.path.normpath,
                                      ['/usr/lib/sgml/stylesheets/docbook',
                                       '/usr/lib/sgml/stylesheets/dsssl/docbook',
                                       '/usr/share/sgml/docbook/dsssl-stylesheets']),
                                  os.path.isdir)
  
!         dtd = find_file(map(os.path.normpath,
                              ['/usr/lib/sgml',
                               '/usr/share/sgml/docbook']),
                          os.path.isdir)
  
          if not jade or not dcl or not stylesheets or not dtd:
              self.warn("can't build documentation")
              return
  
          #
          # Build html output.
          #
!         target = os.path.normpath(self.build_lib + '/qm/test/doc/html')
          if newer_group(source_files, target):
              self.announce("building html manual")
              # Remove the target first such that its new mtime reflects
              # this build.
              if os.path.isdir(target): remove_tree(target)
              self.call_jade(jade, ['-D%s'%dtd, '-D%s'%stylesheets],
                             dcl, 'sgml',
!                            os.path.normpath('qm/test/doc/manual.xml'),
!                            os.path.normpath('qm/test/doc'))
              tidy = find_executable('tidy')
              if tidy:
!                 for f in glob.glob(map(os.path.normpath,
!                                        self.build_temp + '/qm/test/doc/html/*.html')):
                      spawn([tidy,
                             '-wrap', '72', '-i',
                             '--indent-spaces', '1',
                             '-f', '/dev/null',
                             '-asxml', '-modify', f])
-             if self.build_temp != self.build_lib:
-                 src = os.path.normpath(self.build_temp + '/qm/test/doc/html')
-                 dst = target
-                 self.mkpath(dst)
-                 copy_tree(src, dst, 1, 1, 0, 1,
-                           self.verbose, self.dry_run)
  
!         #
!         # Build tex output.
!         #
!         target = os.path.normpath(self.build_lib + '/qm/test/doc/print/manual.tex')
          if newer_group(source_files, target):
              self.announce("building tex manual")
              # Remove the target first such that its new mtime reflects
              # this build.
              if os.path.isfile(target): os.remove(target)
              self.call_jade(jade,
!                            ['-D%s'%dtd, '-D%s'%stylesheets, '-o', 'manual.tex'],
                             dcl, 'tex',
!                            os.path.normpath('qm/test/doc/manual.xml'),
!                            os.path.normpath('qm/test/doc'))
  
!             # Jade places the output TeX source file in the current directory,
!             # so move it where we want it afterwards.
!             # We have to change -- into -{-} so that TeX does not generate long 
              # dashes.  This is a bug in Jade.
!             cwd = os.getcwd()
!             self.mkpath(self.build_temp + '/qm/test/doc/print')
!             os.chdir(os.path.normpath(self.build_temp + '/qm/test/doc'))
              self.spawn(['sh', '-c',
!                         'sed -e "s|--|-{-}|g" < manual.tex > print/manual.tex'])
!             os.remove('manual.tex')
!             os.chdir(cwd)
!             if self.build_temp != self.build_lib:
!                 src = os.path.normpath(self.build_temp + '/qm/test/doc/print/manual.tex')
!                 dst = target
!                 self.mkpath(os.path.dirname(dst))
!                 copy_file(src, target,
!                           1, 1, 1, None, self.verbose, self.dry_run)
  
          #
          # Build pdf output.
          #
!         target = os.path.normpath(self.build_lib + '/qm/test/doc/print/manual.pdf')
          if newer_group(source_files, target):
              self.announce("building pdf manual")
              # Remove the target first such that its new mtime reflects
              # this build.
              if os.path.isfile(target): os.remove(target)
              cwd = os.getcwd()
!             os.chdir(os.path.normpath(self.build_temp + '/qm/test/doc/print/'))
!             self.spawn(['pdfjadetex', 'manual.tex'])
!             self.spawn(['pdfjadetex', 'manual.tex'])
!             self.spawn(['pdfjadetex', 'manual.tex'])
              os.chdir(cwd)
-             if self.build_temp != self.build_lib:
-                 src = os.path.normpath(self.build_temp + '/qm/test/doc/print/manual.pdf')
-                 dst = target
-                 self.mkpath(os.path.dirname(dst))
-                 copy_file(src, target,
-                           1, 1, 1, None, self.verbose, self.dry_run)
  
          #
          # Build reference manual via 'happydoc'.
          #
          happydoc = find_executable('happydoc')
--- 91,195 ----
          """Run this command, i.e. do the actual document generation.
  
          As this command requires 'jade', it will do nothing if
          that couldn't be found in the default path."""
  
!         source_files = map(normpath,
                             ['qm/test/doc/manual.xml',
                              'qm/test/doc/introduction.xml',
                              'qm/test/doc/tour.xml',
                              'qm/test/doc/reference.xml'])
  
          jade = find_executable('jade')
!         dcl = find_file(map(normpath,
                              ['/usr/share/doc/jade*/pubtext/xml.dcl',
                               '/usr/share/doc/openjade*/pubtext/xml.dcl',
                               '/usr/doc/jade*/pubtext/xml.dcl',
                               '/usr/share/sgml/declaration/xml.dcl']),
                          os.path.isfile)
  
!         stylesheets = find_file(map(normpath,
                                      ['/usr/lib/sgml/stylesheets/docbook',
                                       '/usr/lib/sgml/stylesheets/dsssl/docbook',
                                       '/usr/share/sgml/docbook/dsssl-stylesheets']),
                                  os.path.isdir)
  
!         dtd = find_file(map(normpath,
                              ['/usr/lib/sgml',
                               '/usr/share/sgml/docbook']),
                          os.path.isdir)
  
          if not jade or not dcl or not stylesheets or not dtd:
              self.warn("can't build documentation")
              return
  
+         # All files that are generated below are generated in the
+         # source tree.  That is the only way that Distutils will
+         # install the documentation as data files (in "share") rather
+         # than as program files (in "lib").
+         
          #
          # Build html output.
          #
!         target = normpath("qm/test/doc/html")
          if newer_group(source_files, target):
              self.announce("building html manual")
              # Remove the target first such that its new mtime reflects
              # this build.
              if os.path.isdir(target): remove_tree(target)
              self.call_jade(jade, ['-D%s'%dtd, '-D%s'%stylesheets],
                             dcl, 'sgml',
!                            normpath('qm/test/doc/manual.xml'),
!                            normpath('qm/test/doc'))
              tidy = find_executable('tidy')
              if tidy:
!                 for f in glob.glob(normpath('/qm/test/doc/html/*.html')):
                      spawn([tidy,
                             '-wrap', '72', '-i',
                             '--indent-spaces', '1',
                             '-f', '/dev/null',
                             '-asxml', '-modify', f])
  
!         target = normpath("qm/test/doc/print/manual.tex")
          if newer_group(source_files, target):
              self.announce("building tex manual")
              # Remove the target first such that its new mtime reflects
              # this build.
              if os.path.isfile(target): os.remove(target)
              self.call_jade(jade,
!                            ['-D%s'%dtd, '-D%s'%stylesheets, '-o',
!                             'manual.tex'],
                             dcl, 'tex',
!                            normpath('qm/test/doc/manual.xml'),
!                            normpath('qm/test/doc'))
  
!             # Jade places the output TeX source file in the current
!             # directory, so move it where we want it afterwards.  We have
!             # to change -- into -{-} so that TeX does not generate long
              # dashes.  This is a bug in Jade.
!             orig_tex_manual = normpath("qm/test/doc/manual.tex")
!             self.mkpath(normpath("qm/test/doc/print"))
              self.spawn(['sh', '-c',
!                         ('sed -e "s|--|-{-}|g" < %s > %s'
!                          % (orig_tex_manual,
!                             normpath("qm/test/doc/print/manual.tex")))])
!             os.remove(orig_tex_manual)
  
          #
          # Build pdf output.
          #
!         target = normpath("qm/test/doc/print/manual.pdf")
          if newer_group(source_files, target):
              self.announce("building pdf manual")
              # Remove the target first such that its new mtime reflects
              # this build.
              if os.path.isfile(target): os.remove(target)
              cwd = os.getcwd()
!             os.chdir("qm/test/doc/print")
!             for i in xrange(3):
!                 self.spawn(['pdfjadetex', "manual.tex"])
              os.chdir(cwd)
  
          #
          # Build reference manual via 'happydoc'.
          #
          happydoc = find_executable('happydoc')
Index: qmdist/command/install_data.py
===================================================================
RCS file: /home/sc/Repository/qm/qmdist/command/install_data.py,v
retrieving revision 1.4
diff -c -5 -p -r1.4 install_data.py
*** qmdist/command/install_data.py	14 Oct 2003 21:56:07 -0000	1.4
--- qmdist/command/install_data.py	24 Nov 2003 00:46:54 -0000
*************** class install_data(base.install_data):
*** 37,53 ****
          base.install_data.run(self)
          
          i = self.distribution.get_command_obj('install')
          il = self.distribution.get_command_obj('install_lib')
  
!         config = os.path.join(il.install_dir, 'qm/config.py')
          self.announce("generating %s" %(config))
          outf = open(config, "w")
          outf.write("version='%s'\n" % (self.distribution.get_version()))
!         # Compute the path to the data directory.
!         data_dir = os.path.join(self.install_dir, "qm")
!         # Encode the relative path from the installation prefix to the
          # data directory.
          outf.write("data_dir='%s'\n"
!                    % get_relative_path (i.prefix, data_dir))
          outf.write("\n")
          self.outfiles.append(config)
--- 37,58 ----
          base.install_data.run(self)
          
          i = self.distribution.get_command_obj('install')
          il = self.distribution.get_command_obj('install_lib')
  
!         config = os.path.join(il.install_dir, "qm", "config.py")
          self.announce("generating %s" %(config))
          outf = open(config, "w")
          outf.write("version='%s'\n" % (self.distribution.get_version()))
!         prefix = i.root or i.prefix
! 
!         # Record the relative path from the installation prefix to the
          # data directory.
+         data_dir = os.path.join(self.install_dir, "qm")
          outf.write("data_dir='%s'\n"
!                    % get_relative_path (prefix, data_dir))
!         # And do the library directory.
!         lib_dir = os.path.join(il.install_dir, "qm")
!         outf.write("lib_dir='%s'\n"
!                    % get_relative_path (prefix, lib_dir))
          outf.write("\n")
          self.outfiles.append(config)
Index: qmdist/command/install_lib.py
===================================================================
RCS file: qmdist/command/install_lib.py
diff -N qmdist/command/install_lib.py
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- qmdist/command/install_lib.py	24 Nov 2003 00:46:54 -0000
***************
*** 0 ****
--- 1,40 ----
+ ########################################################################
+ #
+ # File:   install_lib.py
+ # Author: Mark Mitchell
+ # Date:   2003-11-23
+ #
+ # Contents:
+ #   Command to install library files.
+ #
+ # Copyright (c) 2003 by CodeSourcery, LLC.  All rights reserved. 
+ #
+ # For license terms see the file COPYING.
+ #
+ ########################################################################
+ 
+ ########################################################################
+ # Imports
+ ########################################################################
+ 
+ from distutils.command.install_lib import install_lib as base
+ from os.path import join, normpath
+ 
+ ########################################################################
+ # Classes
+ ########################################################################
+ 
+ class install_lib(base):
+     """Install library files."""
+ 
+     def get_inputs(self):
+     
+         inputs = base.get_inputs(self)
+         return inputs + [join("qm", "test", "classes", "classes.qmc")]
+ 
+ 
+     def get_outputs(self):
+         
+         outputs = base.get_outputs(self)
+         return outputs + [join(self.install_dir,
+                                "qm", "test", "classes", "classes.qmc")]
Index: qmdist/command/install_scripts.py
===================================================================
RCS file: /home/sc/Repository/qm/qmdist/command/install_scripts.py,v
retrieving revision 1.1
diff -c -5 -p -r1.1 install_scripts.py
*** qmdist/command/install_scripts.py	14 Oct 2003 21:56:07 -0000	1.1
--- qmdist/command/install_scripts.py	24 Nov 2003 00:46:54 -0000
*************** class install_scripts(base.install_scrip
*** 40,57 ****
          qmtest_script = open(qmtest_file).read()
  
          # Encode the relative path from that script to the top of the
          # installation directory.
          i = self.distribution.get_command_obj('install')
!         rel_prefix = get_relative_path(self.install_dir, i.prefix)
          assignment = 'rel_prefix = "%s"' % rel_prefix
          qmtest_script = re.sub("rel_prefix = .*", assignment,
                                 qmtest_script)
          # Encode the relative path from the prefix to the library
          # directory.
          il = self.distribution.get_command_obj('install_lib')
!         rel_libdir = get_relative_path(i.prefix, il.install_dir)
          assignment = 'rel_libdir = "%s"' % rel_libdir
          qmtest_script = re.sub("rel_libdir = .*", assignment,
                                 qmtest_script)
  
          # Write the script back out.
--- 40,58 ----
          qmtest_script = open(qmtest_file).read()
  
          # Encode the relative path from that script to the top of the
          # installation directory.
          i = self.distribution.get_command_obj('install')
!         prefix = i.root or i.prefix
!         rel_prefix = get_relative_path(self.install_dir, prefix)
          assignment = 'rel_prefix = "%s"' % rel_prefix
          qmtest_script = re.sub("rel_prefix = .*", assignment,
                                 qmtest_script)
          # Encode the relative path from the prefix to the library
          # directory.
          il = self.distribution.get_command_obj('install_lib')
!         rel_libdir = get_relative_path(prefix, il.install_dir)
          assignment = 'rel_libdir = "%s"' % rel_libdir
          qmtest_script = re.sub("rel_libdir = .*", assignment,
                                 qmtest_script)
  
          # Write the script back out.


From mark at codesourcery.com  Mon Nov 24 06:30:01 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 23 Nov 2003 22:30:01 -0800
Subject: [qmtest] tests in subdirectories in suite files
References: <p05200f82bbe276b87089@[139.88.38.71]>
Message-ID: <004101c3b254$64180a80$6900a8c0@minax>

> <test_id>subdirectory.testjunk</test_id>

I think that this should be "subdirectory/testjunk", rather than
"subdirectory.testjunk".

> qmtest run subdirectory/testjunk

Does that help?

-- Mark



From mark at codesourcery.com  Mon Nov 24 06:37:02 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Sun, 23 Nov 2003 22:37:02 -0800
Subject: PATCH: Create working Windows distributions
Message-ID: <200311240637.hAO6b2EF027866@sirius.codesourcery.com>


This patch allows "python setup.py bdist_wininst" to generate usable
QMTest distributions.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-11-23  Mark Mitchell  <mark at codesourcery.com>

	* setup.py: Tidy up.  Use "qmtest.py" as the name of the main
	script under Windows.
	* qm/__init__.py: Do not honor qm.config settings under Windows.
	* qm/test/.cvsignore: Add qmtest.py.
	* qm/test/execution_engine.py
	(ExecutionEngine.IsTerminationRequested): Rename to ..
	(ExecutionEngine._IsTerminationRequested): ... this.
	* qm/test/execution_thread.py
	(ExecutionThread.IsTerminationRequested): Rename to ..
	(ExecutionEngine._IsTerminationRequested): ... this.
	* qm/test/qmtest: Do not honor rel_libdir on Windows.
	* qm/test/clasess/pickle_result_stream.py
	(PickleResultStream._is_binary_file): Set it.
	* qm/test/doc/tour.xml: Update for changes in installation
	procedures.
	* qmdist/command/install_scripts.py (install_scripts.run): Process
	both the "qmtest" and the "qmtest.py" script.
	* scripts/qm-release: Remove.

Index: setup.py
===================================================================
RCS file: /home/sc/Repository/qm/setup.py,v
retrieving revision 1.7
diff -c -5 -p -r1.7 setup.py
*** setup.py	24 Nov 2003 00:52:57 -0000	1.7
--- setup.py	24 Nov 2003 06:26:39 -0000
***************
*** 19,44 ****
  
  from   distutils.core import setup
  import sys
  import os
  import os.path
  import string
  import glob
  from   qmdist.command.build import build
  from   qmdist.command.build_doc import build_doc
  from   qmdist.command.install_data import install_data
  from   qmdist.command.install_lib import install_lib
  from   qmdist.command.install_scripts import install_scripts
  from   qmdist.command.check import check
  
  ########################################################################
  # Functions
  ########################################################################
  
  def prefix(list, pref):
  
!     return map(lambda x, p=pref: os.path.join(p, x), list)
  
  
  def files_with_ext(dir, ext):
      """Return all files in 'dir' with a particular extension.
  
--- 19,47 ----
  
  from   distutils.core import setup
  import sys
  import os
  import os.path
+ from   os.path import join
  import string
  import glob
  from   qmdist.command.build import build
  from   qmdist.command.build_doc import build_doc
  from   qmdist.command.install_data import install_data
  from   qmdist.command.install_lib import install_lib
  from   qmdist.command.install_scripts import install_scripts
  from   qmdist.command.check import check
+ from   qm.__version import version
+ import shutil
  
  ########################################################################
  # Functions
  ########################################################################
  
  def prefix(list, pref):
  
!     return map(lambda x, p=pref: join(p, x), list)
  
  
  def files_with_ext(dir, ext):
      """Return all files in 'dir' with a particular extension.
  
*************** def select_share_files(share_files, dir,
*** 68,98 ****
      files = filter(lambda f: \
                       f == "CATALOG" or (os.path.splitext(f)[1] in exts),
                     files)
      if files:
          files = prefix(files, dir)
!         dir = os.path.join("qm", dir[len("share/"):])
          share_files[dir] = files
  
- packages=['qm',
-           'qm/external',
-           'qm/external/DocumentTemplate',
-           'qm/test',
-           'qm/test/classes',
-           'qm/test/web']
- 
- classes = ["classes.qmc"]
- 
  diagnostics=['common.txt','common-help.txt']
  
  messages=['help.txt', 'diagnostics.txt']
  
- html_docs = []
- 
  if not os.path.isdir(os.path.normpath('qm/test/doc/html')):
      print """Warning: to include documentation run the
               \'build_doc\' command first."""
  
  else:
      html_docs = filter(lambda f: f.endswith(".html"),
                         os.listdir(os.path.normpath('qm/test/doc/html')))
  
--- 71,91 ----
      files = filter(lambda f: \
                       f == "CATALOG" or (os.path.splitext(f)[1] in exts),
                     files)
      if files:
          files = prefix(files, dir)
!         dir = join("qm", dir[len("share/"):])
          share_files[dir] = files
  
  diagnostics=['common.txt','common-help.txt']
  
  messages=['help.txt', 'diagnostics.txt']
  
  if not os.path.isdir(os.path.normpath('qm/test/doc/html')):
      print """Warning: to include documentation run the
               \'build_doc\' command first."""
+     html_docs = []
  
  else:
      html_docs = filter(lambda f: f.endswith(".html"),
                         os.listdir(os.path.normpath('qm/test/doc/html')))
  
*************** tutorial_files = files_with_ext("qm/test
*** 100,127 ****
  test_dtml_files = files_with_ext("qm/test/share/dtml", ".dtml")
  
  share_files = {}
  os.path.walk("share", select_share_files, share_files)
  
  setup(name="qm", 
!       version="2.1",
        author="CodeSourcery, LLC",
        author_email="info at codesourcery.com",
        maintainer="Mark Mitchell",
        maintainer_email="mark at codesourcery.com",
        url="http://www.codesourcery.com/qm/test",
!       description="QMTest is a automated software test execution tool.",
        
        cmdclass={'build': build,
                  'build_doc': build_doc,
                  'install_data': install_data,
                  'install_lib': install_lib,
                  'install_scripts' : install_scripts,
                  'check': check},
  
!       packages=packages,
!       scripts=['qm/test/qmtest'],
        data_files=[('qm/messages/test',
                     prefix(messages, 'qm/test/share/messages')),
                    # DTML files for the GUI.
                    ("qm/dtml/test", test_dtml_files),
                    # The documentation.
--- 93,141 ----
  test_dtml_files = files_with_ext("qm/test/share/dtml", ".dtml")
  
  share_files = {}
  os.path.walk("share", select_share_files, share_files)
  
+ # On UNIX, we want the main script to be "qmtest".  On Windows, we need
+ # to use a ".py" extension so that users can invoke the script directly;
+ # if we were to omit the ".py" extension they would have to explicitly
+ # type "python qmtest" to invoke the script.  Searching for
+ # "bdist_wininst" in sys.argv is an (inelegant) way of checking to see
+ # if we are building a Windows binary installer.
+ qmtest_script = join("qm", "test", "qmtest")
+ py_script = qmtest_script + ".py"
+ if "bdist_wininst" in sys.argv:
+     shutil.copyfile(qmtest_script, py_script)
+     qmtest_script = py_script
+ elif os.path.exists(py_script):
+     # Avoid accidentally packaging the ".py" version of the script, if
+     # it exists.
+     os.remove(py_script)
+      
  setup(name="qm", 
!       version=version,
        author="CodeSourcery, LLC",
        author_email="info at codesourcery.com",
        maintainer="Mark Mitchell",
        maintainer_email="mark at codesourcery.com",
        url="http://www.codesourcery.com/qm/test",
!       description="QMTest is an automated software test execution tool.",
        
        cmdclass={'build': build,
                  'build_doc': build_doc,
                  'install_data': install_data,
                  'install_lib': install_lib,
                  'install_scripts' : install_scripts,
                  'check': check},
  
!       packages=('qm',
!                 'qm/external',
!                 'qm/external/DocumentTemplate',
!                 'qm/test',
!                 'qm/test/classes',
!                 'qm/test/web'),
!       scripts=[qmtest_script],
        data_files=[('qm/messages/test',
                     prefix(messages, 'qm/test/share/messages')),
                    # DTML files for the GUI.
                    ("qm/dtml/test", test_dtml_files),
                    # The documentation.
Index: qm/__init__.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/__init__.py,v
retrieving revision 1.11
diff -c -5 -p -r1.11 __init__.py
*** qm/__init__.py	24 Nov 2003 00:52:57 -0000	1.11
--- qm/__init__.py	24 Nov 2003 06:26:39 -0000
***************
*** 12,33 ****
  # For license terms see the file COPYING.
  #
  ########################################################################
  
  ########################################################################
! # imports
  ########################################################################
  
  import string
! from qm.common import *
! from qm.diagnostic import error, warning, message
  
  try:
!     # The config file is created during "make install" by setup.py.
!     from qm.config import version, data_dir, lib_dir
      version_info = tuple(string.split(version, '.'))
      """The version of QM as a tuple of '(major, minor, release)'."""
  except:
      # If qm.config was not available, we are running out of the source tree.
      common.is_installed = 0
      from qm.__version import version, version_info
      data_dir = "share"
--- 12,56 ----
  # For license terms see the file COPYING.
  #
  ########################################################################
  
  ########################################################################
! # Imports
  ########################################################################
  
+ from   qm.common import *
+ from   qm.diagnostic import error, warning, message
  import string
! import sys
! 
! ########################################################################
! # Variables
! ########################################################################
  
  try:
!     # The config file is created during "make install" by Distutils.
!     from qm.config import version
      version_info = tuple(string.split(version, '.'))
      """The version of QM as a tuple of '(major, minor, release)'."""
+ 
+     # Get the relative paths from the prefix where QMTest was
+     # installed to the data directory (where documentation and such
+     # is installed) and the library directory (where the Python
+     # modules making up QMTest are installed).
+     if sys.platform != "win32":
+         # On non-Windows platforms, the values written out at
+         # installation time are accurate.
+         from qm.config import data_dir, lib_dir
+     else:
+         # On Windows, Distutils does a mock installation and then
+         # creates a binary installer.  Unfortunately, at the time
+         # the mock installation is performed there is no way to know
+         # the eventual paths.  Therefore, the values indicated in
+         # config.py are incorrect.  The values given below correspond
+         # to the behavior of the binary installer.
+         data_dir = "qm"
+         lib_dir = os.path.join("Lib", "site-packages", "qm")
  except:
      # If qm.config was not available, we are running out of the source tree.
      common.is_installed = 0
      from qm.__version import version, version_info
      data_dir = "share"
Index: qm/test/.cvsignore
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/.cvsignore,v
retrieving revision 1.6
diff -c -5 -p -r1.6 .cvsignore
*** qm/test/.cvsignore	14 Oct 2003 21:56:07 -0000	1.6
--- qm/test/.cvsignore	24 Nov 2003 06:26:39 -0000
***************
*** 1,2 ****
--- 1,3 ----
  *.pyc
  *.pyo
+ qmtest.py
Index: qm/test/execution_engine.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/execution_engine.py,v
retrieving revision 1.24
diff -c -5 -p -r1.24 execution_engine.py
*** qm/test/execution_engine.py	11 Aug 2003 22:55:14 -0000	1.24
--- qm/test/execution_engine.py	24 Nov 2003 06:26:39 -0000
*************** class ExecutionEngine:
*** 224,246 ****
          # Termination has not yet been requested.
          self.__terminated = 0
          
  
      def RequestTermination(self):
!         """Request termination.
  
!         Request that the execution thread be terminated.  This may
!         take some time; tests that are already running will continue
          to run, for example."""
  
          self.__terminated = 1
!         
!         
!     def IsTerminationRequested(self):
          """Returns true if termination has been requested.
  
!         returns -- True if Terminate has been called."""
  
          return self.__terminated
      
  
      def Run(self):
--- 224,248 ----
          # Termination has not yet been requested.
          self.__terminated = 0
          
  
      def RequestTermination(self):
!         """Request that the execution engine stop executing tests.
  
!         Request that the execution thread be terminated.  Termination
!         may take some time; tests that are already running will continue
          to run, for example."""
  
          self.__terminated = 1
! 
! 
!     def _IsTerminationRequested(self):
          """Returns true if termination has been requested.
  
!         returns -- True if no further tests should be executed.  If the
!         value is -1, the execution engine should simply terminate
!         gracefully."""
  
          return self.__terminated
      
  
      def Run(self):
*************** class ExecutionEngine:
*** 339,350 ****
          self.__patterns = {}
          # A map from target patterns to lists of test descriptors ready
          # to run.
          self.__target_pattern_queues = {}
          
!         while (self.__num_tests_started < num_tests
!                and not self.IsTerminationRequested()):
              # Process any responses and update the count of idle targets.
              while self.__CheckForResponse(wait=0):
                  pass
  
              # Now look for idle targets.
--- 341,354 ----
          self.__patterns = {}
          # A map from target patterns to lists of test descriptors ready
          # to run.
          self.__target_pattern_queues = {}
          
!         while self.__num_tests_started < num_tests:
!             # If the user interrupted QMTest, stop executing tests.
!             if self._IsTerminationRequested():
!                 break
              # Process any responses and update the count of idle targets.
              while self.__CheckForResponse(wait=0):
                  pass
  
              # Now look for idle targets.
Index: qm/test/execution_thread.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/execution_thread.py,v
retrieving revision 1.6
diff -c -5 -p -r1.6 execution_thread.py
*** qm/test/execution_thread.py	13 May 2003 07:10:47 -0000	1.6
--- qm/test/execution_thread.py	24 Nov 2003 06:26:39 -0000
*************** class ExecutionThread(Thread, ExecutionE
*** 108,124 ****
          self.__lock.acquire()
          ExecutionEngine.RequestTermination(self)
          self.__lock.release()
  
  
!     def IsTerminationRequested(self):
          """Returns true if termination has been requested.
  
          return -- True if Terminate has been called."""
  
          self.__lock.acquire()
!         terminated = ExecutionEngine.IsTerminationRequested(self)
          self.__lock.release()
          return terminated
  
      
  ########################################################################
--- 108,124 ----
          self.__lock.acquire()
          ExecutionEngine.RequestTermination(self)
          self.__lock.release()
  
  
!     def _IsTerminationRequested(self):
          """Returns true if termination has been requested.
  
          return -- True if Terminate has been called."""
  
          self.__lock.acquire()
!         terminated = ExecutionEngine._IsTerminationRequested(self)
          self.__lock.release()
          return terminated
  
      
  ########################################################################
Index: qm/test/qmtest
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/qmtest,v
retrieving revision 1.2
diff -c -5 -p -r1.2 qmtest
*** qm/test/qmtest	10 Nov 2003 22:33:42 -0000	1.2
--- qm/test/qmtest	24 Nov 2003 06:26:39 -0000
*************** rel_prefix = os.path.join(os.pardir, os.
*** 40,57 ****
  This string gives the relative path from the directory containing this
  script to the installation directory.  The value above is correct when
  QMTest is being run out of the source tree.  When QMTest is installed,
  this value is updated appropriately."""
  
- rel_libdir = ""
- """The relative path from the prefix to the library directory.
- 
- This path gives the relative path from the prefix to the library
- directory.  The value above is correct when QMTest is being run out of
- the source tree.  When QMTest is installed, this value is updated
- appropriately."""
- 
  # Get the path to this script.
  qm_path = os.path.abspath(sys.argv[0])
  
  # Get the root of the QMTest installation.
  qm_home = os.environ.get("QM_HOME")
--- 40,49 ----
*************** if qm_home is None:
*** 59,71 ****
      # Get the path to the installation directory.
      qm_home = os.path.normpath(os.path.join(os.path.dirname(qm_path),
                                              rel_prefix))
  
  # Update sys.path so that we can find the rest of QMTest.
! libdir = os.path.normpath(os.path.join(qm_home, rel_libdir))
! if libdir not in sys.path:
!     sys.path.insert(0, libdir)
  
  import qm
  
  # Set the prefix variable so that the rest of QMTest can find
  # documentation files, test classes, and so forth.
--- 51,79 ----
      # Get the path to the installation directory.
      qm_home = os.path.normpath(os.path.join(os.path.dirname(qm_path),
                                              rel_prefix))
  
  # Update sys.path so that we can find the rest of QMTest.
! if sys.platform != "win32":
!     rel_libdir = ""
!     """The relative path from the prefix to the library directory.
! 
!     This path gives the relative path from the prefix to the library
!     directory.  The value above is correct when QMTest is being run out of
!     the source tree.  When QMTest is installed, this value is updated
!     appropriately."""
! 
!     libdir = os.path.normpath(os.path.join(qm_home, rel_libdir))
!     if libdir not in sys.path:
!         sys.path.insert(0, libdir)
! else:
!     # On Windows, the value computed for rel_libdir is incorrect because
!     # Distutils does a mock pre-installation using different directory
!     # names than are used by the binary installer.  On Windows, however,
!     # the QM module files are installed into a location that is already in
!     # sys.path.
!     pass
  
  import qm
  
  # Set the prefix variable so that the rest of QMTest can find
  # documentation files, test classes, and so forth.
Index: qm/test/classes/pickle_result_stream.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/classes/pickle_result_stream.py,v
retrieving revision 1.6
diff -c -5 -p -r1.6 pickle_result_stream.py
*** qm/test/classes/pickle_result_stream.py	28 Sep 2003 22:53:21 -0000	1.6
--- qm/test/classes/pickle_result_stream.py	24 Nov 2003 06:26:39 -0000
*************** class PickleResultStream(FileResultStrea
*** 112,121 ****
--- 112,123 ----
              """,
              default_value = 1,
          ),
      ]
  
+     _is_binary_file = 1
+ 
      def __init__(self, arguments):
  
          # Initialize the base class.
          super(PickleResultStream, self).__init__(arguments)
          # Create initial pickler.
Index: qm/test/doc/tour.xml
===================================================================
RCS file: /home/sc/Repository/qm/qm/test/doc/tour.xml,v
retrieving revision 1.8
diff -c -5 -p -r1.8 tour.xml
*** qm/test/doc/tour.xml	26 Sep 2003 22:57:38 -0000	1.8
--- qm/test/doc/tour.xml	24 Nov 2003 06:26:39 -0000
***************
*** 41,63 ****
     copy of it.  Copy the entire test database directory tree to
     another location.  If you've installed &qmtest; in the default
     location you can make a copy of the sample database by running this
     command on a UNIX system:
      <screen>
!      &prompt;<userinput>cp -r /usr/local/share/qm/tutorial/test/tdb tdb</userinput>
      </screen>
     On a Windows system, use this command at a DOS 
       <footnote><para>Under Windows, you must use the standard Windows
       command shell (DOS) to run &qmtest;; alternative shells (such as Cygwin)
       will not work with &qmtest;.</para></footnote>
     prompt:
      <screen>
!      &prompt;<userinput>xcopy c:\progra~1\qm\share\qm\tutorial\test\tdb tdb\ /s</userinput>
!     </screen>
!    If you installed &qmtest; in another directory,
!    substitute that directory for <filename>/usr/local</filename> or
!    <filename>c:\progra~1\qm</filename> in the commands above.</para>
  
     <para>Then, enter the new directory you have created.  On both UNIX
     and Windows systems, you can do this with this command:
      <screen>
       &prompt;<userinput>cd tdb</userinput>
--- 41,65 ----
     copy of it.  Copy the entire test database directory tree to
     another location.  If you've installed &qmtest; in the default
     location you can make a copy of the sample database by running this
     command on a UNIX system:
      <screen>
!      &prompt;<userinput>cp -r /usr/qm/tutorial/test/tdb tdb</userinput>
      </screen>
     On a Windows system, use this command at a DOS 
       <footnote><para>Under Windows, you must use the standard Windows
       command shell (DOS) to run &qmtest;; alternative shells (such as Cygwin)
       will not work with &qmtest;.</para></footnote>
     prompt:
      <screen>
!      &prompt;<userinput>xcopy c:\Python23\qm\tutorial\test\tdb tdb\ /s</userinput>
!     </screen> 
!    The exact paths to use depend on exactly how you have built and
!    installed QMTest.  The paths above are correct for the binary RPM
!    and Windows packages distributed by CodeSourcery.  If you build
!    from the QMTest source distribution, the tutorial may be in another 
!    location, such as <filename>/usr/local/share/qm</filename>.</para>
  
     <para>Then, enter the new directory you have created.  On both UNIX
     and Windows systems, you can do this with this command:
      <screen>
       &prompt;<userinput>cd tdb</userinput>
***************
*** 66,90 ****
  
     <para>Make sure that &qmtest; is in your <envar>PATH</envar> so
     that the operating system can find it.  On UNIX, you can use this
     command:
      <screen>
!      &prompt;<userinput>PATH=/usr/local/bin:${PATH}; export PATH</userinput>
      </screen>
     in the Bourne shell.  In the C shell, use:
      <screen>
!      &prompt;<userinput>setenv PATH /usr/local/bin:${PATH}</userinput>
      </screen>
     On Windows, use:
      <screen>
!      &prompt;<userinput>PATH C:\progra~1\qm\bin;%PATH%</userinput>
      </screen>
!    In order to avoid having to retype these commands every time you
     want to use &qmtest;, you can set up your system so that these
     commands are executed automatically when you log in.  Consult your
     system's manuals to find out how to do this.
     </para>
   
    </section> <!-- sec-testtut-setting-up -->
  
    <section id="sec-testtut-gui">
     <title>Starting the Graphical Interface</title>
--- 68,110 ----
  
     <para>Make sure that &qmtest; is in your <envar>PATH</envar> so
     that the operating system can find it.  On UNIX, you can use this
     command:
      <screen>
!      &prompt;<userinput>PATH=/usr/bin:${PATH}; export PATH</userinput>
      </screen>
     in the Bourne shell.  In the C shell, use:
      <screen>
!      &prompt;<userinput>setenv PATH /usr/bin:${PATH}</userinput>
      </screen>
     On Windows, use:
      <screen>
!      &prompt;<userinput>PATH C:\Python23\Scripts;%PATH%</userinput>
      </screen>
!    If you are not using Python 2.3, replace
!    <filename>C:\Python23</filename> with the directory containing your
!    Python installation.</para>
! 
!    <para>In order to avoid having to retype these commands every time you
     want to use &qmtest;, you can set up your system so that these
     commands are executed automatically when you log in.  Consult your
     system's manuals to find out how to do this.
     </para>
+ 
+    <para>On Windows, every command in this manual that begins with
+    <command>qmtest</command> should be read as if it starts with
+    <command>qmtest.py</command>.  For example, if this tutorial
+    instructs you to type:
+     <screen>
+      &prompt;<userinput>qmtest run</userinput>
+     </screen>
+    you should instead type:
+     <screen>
+      &prompt;<userinput>qmtest.py run</userinput>
+     </screen>
+    on a Windows system.
+    </para>
   
    </section> <!-- sec-testtut-setting-up -->
  
    <section id="sec-testtut-gui">
     <title>Starting the Graphical Interface</title>
*************** QMTest running at http://127.0.0.1:1158/
*** 352,362 ****
      </screen>
     On a Windows system, use these commands instead:
      <screen>
       &prompt;<userinput>cd ..</userinput>
       &prompt;<userinput>rmdir /s tdb</userinput>
!      &prompt;<userinput>xcopy c:\progra~1\qm\share\qm\tutorial\test\tdb tdb\ /s</userinput>
       &prompt;<userinput>cd tdb</userinput>
      </screen>
     </para>
  
     <para>The command for running tests is <command>&qmtest-cmd;
--- 372,382 ----
      </screen>
     On a Windows system, use these commands instead:
      <screen>
       &prompt;<userinput>cd ..</userinput>
       &prompt;<userinput>rmdir /s tdb</userinput>
!      &prompt;<userinput>xcopy c:\Python23\qm\tutorial\test\tdb tdb\ /s</userinput>
       &prompt;<userinput>cd tdb</userinput>
      </screen>
     </para>
  
     <para>The command for running tests is <command>&qmtest-cmd;
Index: qmdist/command/install_scripts.py
===================================================================
RCS file: /home/sc/Repository/qm/qmdist/command/install_scripts.py,v
retrieving revision 1.2
diff -c -5 -p -r1.2 install_scripts.py
*** qmdist/command/install_scripts.py	24 Nov 2003 00:52:58 -0000	1.2
--- qmdist/command/install_scripts.py	24 Nov 2003 06:26:39 -0000
*************** class install_scripts(base.install_scrip
*** 33,59 ****
      def run(self):
  
          # Do the standard installation.
          base.install_scripts.run(self)
  
!         # Postprocess the main QMTest Python script.
!         qmtest_file = os.path.join(self.install_dir, "qmtest")
!         qmtest_script = open(qmtest_file).read()
  
!         # Encode the relative path from that script to the top of the
!         # installation directory.
!         i = self.distribution.get_command_obj('install')
!         prefix = i.root or i.prefix
!         rel_prefix = get_relative_path(self.install_dir, prefix)
!         assignment = 'rel_prefix = "%s"' % rel_prefix
!         qmtest_script = re.sub("rel_prefix = .*", assignment,
!                                qmtest_script)
!         # Encode the relative path from the prefix to the library
!         # directory.
!         il = self.distribution.get_command_obj('install_lib')
!         rel_libdir = get_relative_path(prefix, il.install_dir)
!         assignment = 'rel_libdir = "%s"' % rel_libdir
!         qmtest_script = re.sub("rel_libdir = .*", assignment,
!                                qmtest_script)
! 
!         # Write the script back out.
!         open(qmtest_file, "w").write(qmtest_script)
--- 33,64 ----
      def run(self):
  
          # Do the standard installation.
          base.install_scripts.run(self)
  
!         # Postprocess the main QMTest Python script.  The script will
!         # have ".py" extension on Windows systems, but not on UNIX
!         # systems.
!         for basename in ("qmtest", "qmtest.py"):
!             qmtest_file = os.path.join(self.install_dir, basename)
!             if not os.path.exists(qmtest_file):
!                 continue
!             # Read the contents of the script.
!             qmtest_script = open(qmtest_file).read()
!             # Encode the relative path from that script to the top of the
!             # installation directory.
!             i = self.distribution.get_command_obj('install')
!             prefix = i.root or i.prefix
!             rel_prefix = get_relative_path(self.install_dir, prefix)
!             assignment = 'rel_prefix = "%s"' % rel_prefix
!             qmtest_script = re.sub("rel_prefix = .*", assignment,
!                                    qmtest_script)
!             # Encode the relative path from the prefix to the library
!             # directory.
!             il = self.distribution.get_command_obj('install_lib')
!             rel_libdir = get_relative_path(prefix, il.install_dir)
!             assignment = 'rel_libdir = "%s"' % rel_libdir
!             qmtest_script = re.sub("rel_libdir = .*", assignment,
!                                    qmtest_script)
  
!             # Write the script back out.
!             open(qmtest_file, "w").write(qmtest_script)
Index: scripts/qm-release
===================================================================
RCS file: scripts/qm-release
diff -N scripts/qm-release
*** scripts/qm-release	7 Aug 2003 17:05:20 -0000	1.9
--- /dev/null	1 Jan 1970 00:00:00 -0000
***************
*** 1,416 ****
- #! /bin/sh
- 
- ########################################################################
- #
- # File:   qm-release
- # Author: Mark Mitchell
- # Date:   11/16/2001
- #
- # Contents:
- #   Script to build QM releases.
- #
- # Copyright (C) 2001, 2002 CodeSourcery LLC
- #
- # For license terms see the file COPYING.
- #
- ########################################################################
- 
- ########################################################################
- # Functions
- ########################################################################
- 
- # Issue the error message given by $1 and exit with a non-zero
- # exit code.
- 
- error() {
-     echo "qm-release: error: $1"
-     exit 1
- }
- 
- # Issue a usage message explaining how to use this script.
- 
- usage() {
- cat <<EOF
- qm-release [-v version] [-u] [source] [rpm] [binary] [exec] [tag]
- EOF
-     exit 1
- }
- 
- # Change to the directory given by $1.
- 
- changedir() {
-     cd $1 || \
- 	error "Could not change directory to $1"
- }
- 
- # Determine the current version of QM by checking out the mainline
- # version file.  Set QM_VERSION, QM_MAJOR_VER, QM_MINOR_VER, and
- # QM_RELEASE_VER accordingly.
- 
- get_qm_version() {
-     echo "Determining QM version..."
- 
-     # Remove any old source distribution.
-     rm -rf qm-${DATE}
-     # Check out the source distribution.
-     ${CVS} co -d qm-${DATE} qm/version || \
- 	error "Could not check out version file"
-     . qm-${DATE}/version || \
- 	error "Could not read version file"
-     # Clean up.
-     rm -rf qm-${DATE}
- }
- 
- # Tag the sources.
- 
- tag_qm() {
-     echo "Tagging QM..."
- 
-     # Remove any old source distribution.
-     rm -rf qm-${QM_VERSION}
-     # Check out the source distribution.
-     ${CVS} co -d qm-${QM_VERSION} -r ${BRANCH} qm || \
-       error "Could not check out QM"
-     changedir qm-${QM_VERSION}
-     # Create the version file.
-     if [ $SNAPSHOT -eq 0 ]; then
- 	cat > version <<EOF
- # This file is automatically generated.  Do not edit.
- 
- QM_VERSION=${QM_VERSION}
- QM_MAJOR_VER=${QM_MAJOR_VER}
- QM_MINOR_VER=${QM_MINOR_VER}
- QM_RELEASE_VER=${QM_RELEASE_VER}
- EOF
-         # Commit the version file.
- 	${CVS} commit -m 'Update version numbers.' version
-     fi
-     # Tag the sources.  Using the "-F" option to CVS makes sure that any
-     # existing tag is moved, in case it takes several tries to get a 
-     # release that we are happy with.
-     ${CVS} tag -F ${QM_RELEASE_TAG} || \
-       error "Could not tag QM"
-     # Go back to the directory we started in.
-     changedir ..
- }
- 
- # Build QM itself from the source distribution.
- 
- build_qm() {
-     echo "Building QM..."
- 
-     # Remove any old source distribution.
-     rm -rf qm-${QM_VERSION}
-     # Untar the source distribution.  Under Windows there seem
-     # to be cases where "tar xzf" will crash, but separating the
-     # decompression and untarring steps works reliably.
-     (zcat ${QM_SOURCE_TAR_GZ} | tar xf -) || \
-       error "Could not unpack source distribution"
-     changedir qm-${QM_VERSION}
-     # Create an installation directory.
-     rm -rf ${QM_INSTALL_DIR}
-     mkdir -p ${QM_INSTALL_DIR} || \
-       error "Could not create installation directory"
-     # Configure QM.
-     ./configure --prefix=${QM_INSTALL_DIR} "$@" || \
-       error "Could not configure QM"
-     # Build it.
-     make || error "Could not build QM"
-     # Install it.
-     make install || error "Could not install QM"
-     # Go back to the directory we started in.
-     changedir ..
- }
- 
- # Build the source distribution.
- 
- build_source() {
-     echo "Building source distribution..."
-     # Remove the old version of the source distribution.
-     rm -rf ${QM_SOURCE_TAR_GZ} qm-${QM_VERSION}
-     ${CVS} export -d qm-${QM_VERSION} -r ${QM_RELEASE_TAG} qm || \
-       error "Could not check out QM"
-     # Remove the qm/track directory and packages that only it uses.
-     rm -rf qm-${QM_VERSION}/qm/track qm-${QM_VERSION}/gadfly
-     # The "-P" option is documented, but does not work, with "cvs export"
-     # in CVS 1.10.7.  Therefore, just try to remove all the directories
-     # exported; this will succeed only with empty directories.
-     find qm-${QM_VERSION} -type d -exec rmdir {} \; > /dev/null 2>&1 
-     # Create the tar file.
-     tar czf ${QM_SOURCE_TAR_GZ} ${TAR_OPTS} qm-${QM_VERSION} || \
-       error "Could not create tar file"
-     # Build QM to obtain documentation files.
-     build_qm --enable-maintainer_mode
-     # Recreate the source directory.
-     echo "Copying documentation..."
-     rm -rf qm-${QM_VERSION}
-     tar xzf ${QM_SOURCE_TAR_GZ} || \
-       error "Could not unpack source distribution"
-     cp -r ${QM_INSTALL_DIR}/share/doc/qm/test/html \
-           qm-${QM_VERSION}/qm/test/doc/html || \
-       error "Could not copy HTML manual"
-     (mkdir qm-${QM_VERSION}/qm/test/doc/print && \
-      cp -r ${QM_INSTALL_DIR}/share/doc/qm/test/pdf/manual.pdf \
-           qm-${QM_VERSION}/qm/test/doc/print) || \
-       error "Could not copy PDF manual"
-     tar czf ${QM_SOURCE_TAR_GZ} ${TAR_OPTS} qm-${QM_VERSION} || \
-       error "Could not create tar file"
- }
- 
- # Build the RPM distribution.
- 
- build_rpm() {
-     echo "Building RPM distribution..."
-     cp ${QM_SOURCE_TAR_GZ} ${RPM_BASE}/SOURCES || \
-       error "Could not install source distribution"
-     (tar xzf ${QM_SOURCE_TAR_GZ} -O qm-${QM_VERSION}/qm.spec.in | \
-       sed -e "s|@QM_VERSION@|${QM_VERSION}|g" > qm.spec) || \
-       error "Could not extract spec file"
-     rpmbuild --quiet -ba --rmsource qm.spec || \
-       error "Could not create RPM"
-     cp ${RPM_BASE}/RPMS/i386/qm-${QM_VERSION}-0.i386.rpm ${QM_RPM}
- }
- 
- # Build a binary distribution.
- 
- build_binary() {
-     build_qm
-     echo "Building binary distribution..."
-     changedir ${QM_INSTALL_DIR}/..
-     rm -f ../${QM_BINARY_TAR_GZ}
-     tar czf ../${QM_BINARY_TAR_GZ} ${TAR_OPTS} qm-${QM_VERSION} || \
-       error "Could not create tar file"
-     changedir ..
- }
- 
- # Build a self-extracting executable.
- 
- build_exec() {
-     build_qm --with-python=/cygdrive/c/Python22/Python.exe
-     echo "Building ZIP file..."
-     changedir ${QM_INSTALL_DIR}
-     rm -f ${QM_BINARY_ZIP}
-     zip -q ${QM_BINARY_ZIP} -r . || \
-       error "Could not create zip file"
-     changedir ${QM_RELEASE_DIR}
-     rm -f ${QM_BINARY_EXE}
-     # The makesfx.exe exit code is apparently non-zero even on 
-     # success, so we do not check the result.
-     "c:/Program Files/FreeExtractor/makesfx.exe" \
-       /zip="`cygpath -w ${QM_BINARY_ZIP}`" \
-       /sfx="`cygpath -w ${QM_BINARY_EXE}`" \
-       /title="QM ${QM_VERSION}" \
-       /website="http://www.codesourcery.com" \
-       /intro="Thank you for installing QMTest!" \
-       /defaultpath="\$programfiles\$\\QM"
- }
- 
- # Upload files to the FTP server.
- 
- upload() {
-   # Figure out what platform we are on.
-   tar xzf ${QM_SOURCE_TAR_GZ} qm-${QM_VERSION}/config.guess || \
-     error "Could not obtain config.guess from source distribution."
-   PLATFORM=`qm-${QM_VERSION}/config.guess`
-   if [ $? -ne 0 ]; then
-     error "Could not obtain platform name."
-   fi
-   # We are not building Cygwin binaries, so transform "cygwin" into
-   # "windows".
-   if [ $PLATFORM = i686-pc-cygwin ]; then
-     PLATFORM="windows"
-   fi 
-   PLATFORM_FTP_DIRECTORY="${FTP_DIRECTORY}/${PLATFORM}"
- 
-   # Make sure the FTP directory exists.
-   ssh ${FTP_SERVER} mkdir -p ${FTP_DIRECTORY} ${PLATFORM_FTP_DIRECTORY} || \
-     error "Could not create FTP directory."
- 
-   # Upload the source distribution.
-   if [ ${SOURCE} -ne 0 ]; then
-     scp ${QM_SOURCE_TAR_GZ} "${FTP_SERVER}:${FTP_DIRECTORY}" || \
-       error "Could not upload source distribution."
-     # Upload the manual as well.
-     tar xzf ${QM_SOURCE_TAR_GZ} \
-       qm-${QM_VERSION}/qm/test/doc/print/manual.pdf \
-       qm-${QM_VERSION}/qm/test/doc/html || \
-       error "Could not extract manuals."
-     scp qm-${QM_VERSION}/qm/test/doc/print/manual.pdf \
-       "${FTP_SERVER}:${FTP_DIRECTORY}" ||
-       error "Could not upload PDF manual."
-     scp -r qm-${QM_VERSION}/qm/test/doc/html \
-       "${FTP_SERVER}:${FTP_DIRECTORY}/manual.html" ||
-       error "Could not upload HTML manual."
-   fi
-   
-   # Upload the RPM distribution.
-   if [ ${RPM} -ne 0 ]; then
-     scp ${QM_RPM} "${FTP_SERVER}:${PLATFORM_FTP_DIRECTORY}" || \
-       error "Could not upload RPM distribution."
-   fi
- 
-   # Upload the binary distribution.
-   if [ ${BINARY} -ne 0 ]; then
-     scp ${QM_BINARY_TAR_GZ} "${FTP_SERVER}:${PLATFORM_FTP_DIRECTORY}" || \
-       error "Could not upload binary distribution."
-   fi
- 
-   # Upload the self-extracting executable.
-   if [ ${EXEC} -ne 0 ]; then
-     scp ${QM_BINARY_EXE} "${FTP_SERVER}:${PLATFORM_FTP_DIRECTORY}" || \
-       error "Could not upload Windows distribution."
-   fi
- }
- 
- ########################################################################
- # Initialization
- ########################################################################
- 
- # The CVS server containing the GCC repository.
- CVS_SERVER="cvs.codesourcery.com"
- # The path to the repository on that server.
- CVS_REPOSITORY="/home/sc/Repository"
- # The CVS protocol to use.
- CVS_PROTOCOL="pserver"
- # The username to use when connecting to the server.
- CVS_USERNAME="anoncvs"
- 
- # The major version of QM.
- QM_MAJOR_VER=
- # The minor version of QM.
- QM_MINOR_VER=
- # The version of QM.
- QM_VERSION=
- 
- # The base RPM directory.
- RPM_BASE=/usr/src/redhat
- 
- # The source distribution.
- QM_SOURCE_TAR_GZ=
- # The binary distribution.
- QM_BINARY_TAR_GZ=
- # The ZIP file.
- QM_BINARY_ZIP=
- # The executable file.
- QM_BINARY_EXE=
- # The RPM distribution.
- QM_RPM=
- 
- # True if we are building a development snapshot, rather than a release.
- SNAPSHOT=1
- 
- # Options to use with tar when creating an archive.
- TAR_OPTS="--owner=root --group=root --mode=u+w,go-w,a+rX,a-st"
- 
- # The CVS binary.
- CVS="cvs -f -z9 -Q"
- # The QMTest branch to use.
- BRANCH=HEAD
- 
- # The FTP server.
- FTP_SERVER="ftp.codesourcery.com"
- # The FTP directory.
- FTP_DIRECTORY="~ftp/pub/qmtest"
- 
- # Modes of operation.
- SOURCE=0
- RPM=0
- BINARY=0
- EXEC=0
- TAG=0
- UPLOAD=0
- 
- ########################################################################
- # Main Program
- ########################################################################
- 
- # Set our umask so that everyone can read the files created.
- umask 002
- 
- # Parse options.
- while getopts "uv:" ARG; do
-     case $ARG in
-     u) 
- 	UPLOAD=1
- 	;;
-     v)  
- 	QM_VERSION=$OPTARG
- 	# Compute the components of the version number.
- 	QM_MAJOR_VER=`echo $QM_VERSION | awk --assign FS=. '{ print $1; }'`
- 	QM_MINOR_VER=`echo $QM_VERSION | awk --assign FS=. '{ print $2; }'`
- 	QM_RELEASE_VER=`echo $QM_VERSION | awk --assign FS=. '{ print $3; }'`
- 	if test -z "$QM_RELEASE_VER"; then
- 	    QM_RELEASE_VER=0
- 	fi
- 	# Use the release branch.
- 	BRANCH="release-${QM_MAJOR_VER}-${QM_MINOR_VER}-branch"
- 	# Because a version was explicitly specified, we are not building 
- 	# a snapshot. 
- 	SNAPSHOT=0
- 	;;
-     \?) 
-         usage
- 	;;
-     esac
- done
- shift `expr ${OPTIND} - 1`
- 
- # Set up a snapshot.
- if [ $SNAPSHOT -ne 0 ]; then
-     DATE=`date +%Y%m%d`
-     get_qm_version
-     # Add the date to the version name.
-     QM_VERSION="${QM_VERSION}-${DATE}"
- fi
- 
- QM_RELEASE_DIR=`pwd`
- QM_SOURCE_TAR_GZ=qm-${QM_VERSION}.tar.gz
- QM_BINARY_TAR_GZ=qm-${QM_VERSION}-binary.tar.gz
- QM_BINARY_ZIP=${QM_RELEASE_DIR}/qm-${QM_VERSION}.zip
- QM_BINARY_EXE=${QM_RELEASE_DIR}/qm-${QM_VERSION}.exe
- QM_RPM=${QM_RELEASE_DIR}/qm-${QM_VERSION}-0.i386.rpm
- QM_INSTALL_DIR=${QM_RELEASE_DIR}/install/qm-${QM_VERSION}
- FTP_DIRECTORY=${FTP_DIRECTORY}/qm-${QM_VERSION}
- QM_RELEASE_TAG="release-`echo $QM_VERSION | sed -e 's|\.|-|g'`"
- 
- # Handle the major modes.
- while [ $# -ne 0 ]; do
-     case $1 in
-     source) SOURCE=1;;
-     rpm)    RPM=1;;
-     binary) BINARY=1;;
-     exec)   EXEC=1;;
-     tag)    TAG=1;;
-     *)      usage;;
-     esac
-     shift
- done
- 
- # Set up CVS.
- CVSROOT=":${CVS_PROTOCOL}:${CVS_USERNAME}@"
- CVSROOT="${CVSROOT}${CVS_SERVER}:${CVS_REPOSITORY}"
- export CVSROOT
- 
- if [ ${UPLOAD} -eq 0 ]; then
-     if [ ${TAG} -ne 0 ]; then
-       tag_qm
-     fi
- 
-     if [ ${SOURCE} -ne 0 ]; then
-       build_source
-     fi
- 
-     if [ ${RPM} -ne 0 ]; then
-       build_rpm
-     fi
- 
-     if [ ${BINARY} -ne 0 ]; then
-       build_binary
-     fi
- 
-     if [ ${EXEC} -ne 0 ]; then
-       build_exec
-     fi
- else
-     upload
- fi
--- 0 ----


From mark at codesourcery.com  Mon Nov 24 07:08:16 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 23 Nov 2003 23:08:16 -0800
Subject: QMTest 2.1 Prerelease 1 Available
Message-ID: <1069657696.3863.9.camel@minax.codesourcery.com>

The first prerelease version of QMTest 2.1 is now available from:

http://www.codesourcery.com/qm/qmtest_downloads/qm-2.1.0-20031123

There are distributions in source form, as RPMs for Red Hat 8.x and
above, and as a Windows installer.

This is an alpha release; we believe that this version of QMTest will be
useful, but these releases have certainly not received as much use as
QMTest 2.0.3.

One of the major changes in QMTest 2.1 is the use of Python's
"distutils" packaging system.  Therefore, it's certainly possible that
there are problems with the packaging.  Please post problems with the
packaging -- or other problems you find in using the packages -- to this
mailing list.

Distutils puts "data files" in "/usr/qm" when building an RPM, which is
not what the LSB recommends, if I understand it correctly.  However,
there does not appear to be any easy way tho change that to
"/usr/share/qm" (or "/opt/qm/share").  Does anyone know if that will be
fixed in a future version of distutils?

Thanks in advance,

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From mark at codesourcery.com  Mon Nov 24 07:51:21 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: 23 Nov 2003 23:51:21 -0800
Subject: [qmtest] some little cleanup
In-Reply-To: <5146c91d856c7711a577ae6c171317373f9fdbb0@Orthosoft.ca>
References: <5146c91d856c7711a577ae6c171317373f9fdbb0@Orthosoft.ca>
Message-ID: <1069660281.4275.10.camel@minax.codesourcery.com>

On Wed, 2003-10-29 at 07:39, Stefan Seefeld wrote:
> hi there,
> 
> attached is a patch that removes some obsolete references
> to the 'property' xml element that once was used in xml
> output. Some recent change to the xml format seems to
> have got rid of 'property'...

>  
>  <!-- The result of executing a test or resource.  -->
> -<!ELEMENT result property*>
>  <!ATTLIST result id CDATA #REQUIRED
>                   kind (test | resource) #REQUIRED
>                   outcome (PASS | FAIL | ERROR | UNTESTED) #REQUIRED>

Actually, that "property" should be changed to "annotation".

Would you make that change, and check in your patch?

Thanks,

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From seefeld at sympatico.ca  Mon Nov 24 14:09:18 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Mon, 24 Nov 2003 09:09:18 -0500
Subject: [qmtest] some little cleanup
References: <5146c91d856c7711a577ae6c171317373f9fdbb0@Orthosoft.ca> <1069660281.4275.10.camel@minax.codesourcery.com>
Message-ID: <c96a391b5ee68f747258fc2d827987d53fc20f24@Orthosoft.ca>

Mark Mitchell wrote:

> Actually, that "property" should be changed to "annotation".

oups, you are right.

> Would you make that change, and check in your patch?

Ok, done.

Regards,
		Stefan






From hschilling at nasa.gov  Mon Nov 24 14:10:15 2003
From: hschilling at nasa.gov (Herb Schilling)
Date: Mon, 24 Nov 2003 09:10:15 -0500
Subject: [qmtest] tests in subdirectories in suite files
In-Reply-To: <004101c3b254$64180a80$6900a8c0@minax>
References: <p05200f82bbe276b87089@[139.88.38.71]>
 <004101c3b254$64180a80$6900a8c0@minax>
Message-ID: <p05200f0abbe7c16b586b@[139.88.38.71]>

>  > <test_id>subdirectory.testjunk</test_id>
>
>I think that this should be "subdirectory/testjunk", rather than
>"subdirectory.testjunk".
>
>>  qmtest run subdirectory/testjunk
>
>Does that help?

Hi Mark,

  Thanks for the suggestion. Actually, the slash is wrong. The dot 
does work. The problem I had, as pointed out by Steve Byan, is that 
the subdirectory should be named "subdirectory.qms".
-- 
Herb Schilling
NASA Glenn Research Center
Brook Park, OH 44135
hschilling at nasa.gov

  "Dark is faster than light, otherwise you would see it."


From smb at egenera.com  Mon Nov 24 15:56:14 2003
From: smb at egenera.com (Steve Byan)
Date: Mon, 24 Nov 2003 10:56:14 -0500
Subject: [qmtest] os.system0 use in resource SetUp methods
In-Reply-To: <1069465188.30322.147.camel@doubledemon.codesourcery.com>
References: <385054F4-1C6D-11D8-A233-000A957CD5B0@egenera.com> <1069465188.30322.147.camel@doubledemon.codesourcery.com>
Message-ID: <BB93B528-1E96-11D8-A233-000A957CD5B0@egenera.com>


On Nov 21, 2003, at 8:39 PM, Mark Mitchell wrote:

> On Fri, 2003-11-21 at 13:54, Steve Byan wrote:
>> I've written a couple of test extension classes modeled on
>> ShellCommandTest and ShellScriptTest which use a remote shell to
>> execute the tests on a remote host specified by a "node" resource
>> extension class, which selects one host from those provided in the
>> context by a target extension class.
>>
>> I'd like to check the state of the selected host in the resource SetUp
>> method. I've tried using code like this:
>>
>>          # test that pServer is up and running
>>          if os.system("ping -c 3 " + remote_host + " >/dev/null") != 
>> 0:
>>              cause = "Can't ping " + blade + " at hostname " +
>> remote_host
>>              result.Fail(cause=cause)
>>              return
>
> Does this problem happen with the CVS version of QMTest or only with
> QMTest 2.0.3?  In 2.0.3, there were some bugs involving test/resource
> dependencies that might have caused problems here.

I've only tried 2.0.3; I haven't set up access to the QMTest CVS 
repository. I'll retest when 2.1 is out.

> I can't think of any reason that the GUI should present particular
> problems here; we'll have to have more information to figure out what's
> going wrong.

I suspect the problem is somewhere in the platform thread support. The 
problem turns out to be platform-specific, or at least python-version 
specific. The GUI hangs on MacOS X, 10.3.1  which comes with python 
2.3, but not on RedHat 9.0, which comes with python 2.2.2. In previous 
versions of Mac OS X, the POSIX thread support was reputed to be weak. 
(Of course, so is Linux's :-)

For now, I'll use the "run it on Linux" work-around.

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From mark at codesourcery.com  Mon Nov 24 16:30:27 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 24 Nov 2003 08:30:27 -0800
Subject: [qmtest] os.system0 use in resource SetUp methods
In-Reply-To: <BB93B528-1E96-11D8-A233-000A957CD5B0@egenera.com>
References: <385054F4-1C6D-11D8-A233-000A957CD5B0@egenera.com>
	 <1069465188.30322.147.camel@doubledemon.codesourcery.com>
	 <BB93B528-1E96-11D8-A233-000A957CD5B0@egenera.com>
Message-ID: <1069691427.30320.167.camel@doubledemon.codesourcery.com>

On Mon, 2003-11-24 at 07:56, Steve Byan wrote:
> On Nov 21, 2003, at 8:39 PM, Mark Mitchell wrote:
> 
> > On Fri, 2003-11-21 at 13:54, Steve Byan wrote:
> >> I've written a couple of test extension classes modeled on
> >> ShellCommandTest and ShellScriptTest which use a remote shell to
> >> execute the tests on a remote host specified by a "node" resource
> >> extension class, which selects one host from those provided in the
> >> context by a target extension class.
> >>
> >> I'd like to check the state of the selected host in the resource SetUp
> >> method. I've tried using code like this:
> >>
> >>          # test that pServer is up and running
> >>          if os.system("ping -c 3 " + remote_host + " >/dev/null") != 
> >> 0:
> >>              cause = "Can't ping " + blade + " at hostname " +
> >> remote_host
> >>              result.Fail(cause=cause)
> >>              return
> >
> > Does this problem happen with the CVS version of QMTest or only with
> > QMTest 2.0.3?  In 2.0.3, there were some bugs involving test/resource
> > dependencies that might have caused problems here.
> 
> I've only tried 2.0.3; I haven't set up access to the QMTest CVS 
> repository. I'll retest when 2.1 is out.

You could also try the 2.1 prerelease that was announced last night.

> > I can't think of any reason that the GUI should present particular
> > problems here; we'll have to have more information to figure out what's
> > going wrong.
> 
> I suspect the problem is somewhere in the platform thread support. The 
> problem turns out to be platform-specific, or at least python-version 
> specific. The GUI hangs on MacOS X, 10.3.1  which comes with python 
> 2.3, but not on RedHat 9.0, which comes with python 2.2.2. In previous 
> versions of Mac OS X, the POSIX thread support was reputed to be weak. 
> (Of course, so is Linux's :-)

Yes, that's a plausible hypothesis.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From mark at codesourcery.com  Mon Nov 24 18:36:08 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 24 Nov 2003 10:36:08 -0800
Subject: PATCH: Remove qm.spec.in
Message-ID: <200311241836.hAOIa8qn016057@doubledemon.codesourcery.com>


Since we're now using Distutils to build RPMs, we can remove
qm.spec.in.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

Index: .cvsignore
===================================================================
RCS file: /home/sc/Repository/qm/.cvsignore,v
retrieving revision 1.3
diff -c -5 -p -r1.3 .cvsignore
*** .cvsignore	24 Nov 2003 00:52:57 -0000	1.3
--- .cvsignore	24 Nov 2003 18:28:52 -0000
***************
*** 1,8 ****
  GNUmakefile
  config.log
  config.cache
  config.status
- qm.spec
  build
  dist
  MANIFEST
--- 1,7 ----
Index: GNUmakefile.in
===================================================================
RCS file: /home/sc/Repository/qm/GNUmakefile.in,v
retrieving revision 1.32
diff -c -5 -p -r1.32 GNUmakefile.in
*** GNUmakefile.in	10 Nov 2003 08:11:12 -0000	1.32
--- GNUmakefile.in	24 Nov 2003 18:28:52 -0000
*************** clean::
*** 83,93 ****
  	$(PYTHON) ./setup.py clean -a
  
  distclean: clean
  	rm -f GNUmakefile config.cache config.status config.log
  	rm -f qm/__version.py 
- 	rm -f qm.spec
  
  ########################################################################
  # Installation Rules
  ########################################################################
  
--- 83,92 ----
Index: configure.in
===================================================================
RCS file: /home/sc/Repository/qm/configure.in,v
retrieving revision 1.33
diff -c -5 -p -r1.33 configure.in
*** configure.in	10 Nov 2003 07:52:55 -0000	1.33
--- configure.in	24 Nov 2003 18:28:53 -0000
*************** dnl ####################################
*** 123,130 ****
  dnl Generate results
  dnl ####################################################################
  
  AC_OUTPUT(
    GNUmakefile
-   qm.spec
    qm/__version.py
  )
--- 123,129 ----
Index: qm.spec.in
===================================================================
RCS file: qm.spec.in
diff -N qm.spec.in
*** qm.spec.in	16 Jan 2002 22:41:07 -0000	1.5
--- /dev/null	1 Jan 1970 00:00:00 -0000
***************
*** 1,33 ****
- Summary: The CodeSourcery QM (Quality Management) tools.
- Name: qm
- Version: @QM_VERSION@
- Release: 0
- Copyright: Copyright (C) CodeSourcery LLC.
- Group: Development/Tools
- Source0: qm- at QM_VERSION@.tar.gz
- Url: http://www.codesourcery.com/qm
- Provides: qm
- BuildRoot: /var/tmp/qm- at QM_VERSION@
- Prefix: /usr/local
- 
- %description
- QM is CodeSourcery's Quality Management toolset.
- 
- %prep
- %setup
- 
- %build
- ./configure --prefix=${RPM_BUILD_ROOT}/usr/local
- make
- 
- %install
- make install
- 
- %clean
- rm -rf ${RPM_BUILD_ROOT}
- 
- %files
- /usr/local/lib/qm/*
- /usr/local/share/qm/*
- /usr/local/bin/*
- /usr/local/share/doc/qm/*
--- 0 ----


From mark at codesourcery.com  Mon Nov 24 19:33:15 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 24 Nov 2003 11:33:15 -0800
Subject: PATCH: Remove "version" file
Message-ID: <200311241933.hAOJXF5m017289@doubledemon.codesourcery.com>


Now that we're using Distutils, we don't need the "version" text file.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-11-24  Mark Mitchell  <mark at codesourcery.com>

	* configure.in (QM_MAJOR_VER): Do not AC_SUBST it.
	(QM_MINOR_VER): Likewise.
	(QM_RELEASE_VER): Likewise.
	(QM_VERSION): Likewise.
	* configure: Regenerated.
	* version: Remove.
	* qm/__version.py.in: Likewise.
	* qm/__version.py: New file.

Index: configure.in
===================================================================
RCS file: /home/qm/Repository/qm/configure.in,v
retrieving revision 1.34
diff -c -5 -p -r1.34 configure.in
*** configure.in	24 Nov 2003 18:31:08 -0000	1.34
--- configure.in	24 Nov 2003 19:23:05 -0000
*************** AC_ARG_ENABLE(maintainer-mode, 
*** 28,48 ****
                fi,
                MAINTAINER_MODE=0)
  AC_SUBST(MAINTAINER_MODE)
  	     
  dnl ####################################################################
- dnl Load the version numbers.
- dnl ####################################################################
- 
- . ${srcdir}/version
- 
- AC_SUBST(QM_MAJOR_VER)
- AC_SUBST(QM_MINOR_VER)
- AC_SUBST(QM_RELEASE_VER)
- AC_SUBST(QM_VERSION)
- 
- dnl ####################################################################
  dnl Find the Python interpreter.  If the user specified the 
  dnl --with-python option, use its value, after checking that it exists.
  dnl Otherwise, look in the PATH.
  dnl ####################################################################
  
--- 28,37 ----
*************** dnl ####################################
*** 123,129 ****
  dnl Generate results
  dnl ####################################################################
  
  AC_OUTPUT(
    GNUmakefile
-   qm/__version.py
  )
--- 112,117 ----
Index: version
===================================================================
RCS file: version
diff -N version
*** version	24 Jul 2003 17:26:18 -0000	1.3
--- /dev/null	1 Jan 1970 00:00:00 -0000
***************
*** 1,6 ****
- # This file is automatically generated.  Do not edit.
- 
- QM_VERSION=2.1.0
- QM_MAJOR_VER=2
- QM_MINOR_VER=1
- QM_RELEASE_VER=0
--- 0 ----
Index: qm/__version.py
===================================================================
RCS file: qm/__version.py
diff -N qm/__version.py
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- qm/__version.py	24 Nov 2003 19:23:05 -0000
***************
*** 0 ****
--- 1,34 ----
+ ########################################################################
+ #
+ # File:   __version.py.in
+ # Author: Nathaniel Smith
+ # Date:   2003-08-10
+ #
+ # Contents:
+ #   Variables to query the version of QM in use.
+ #
+ # Copyright (c) 2003 by CodeSourcery, LLC.  All rights reserved. 
+ #
+ # For license terms see the file COPYING.
+ #
+ ########################################################################
+ 
+ ########################################################################
+ # Variables
+ ########################################################################
+ 
+ version_info = (2, 1, 0)
+ """The version of QM as a tuple of (major, minor, release)."""
+ 
+ version = "%d.%d" % version_info[:-1]
+ """The version of QM as a string suitable for printing."""
+ 
+ if version_info[-1]:
+     version += ".%d" % version_info[-1]
+ 
+ ########################################################################
+ # Local Variables:
+ # mode: python
+ # indent-tabs-mode: nil
+ # fill-column: 72
+ # End:
Index: qm/__version.py.in
===================================================================
RCS file: qm/__version.py.in
diff -N qm/__version.py.in
*** qm/__version.py.in	10 Aug 2003 21:32:49 -0000	1.1
--- /dev/null	1 Jan 1970 00:00:00 -0000
***************
*** 1,34 ****
- ########################################################################
- #
- # File:   __version.py.in
- # Author: Nathaniel Smith
- # Date:   2003-08-10
- #
- # Contents:
- #   Variables to query the version of QM in use.
- #
- # Copyright (c) 2003 by CodeSourcery, LLC.  All rights reserved. 
- #
- # For license terms see the file COPYING.
- #
- ########################################################################
- 
- ########################################################################
- # Variables
- ########################################################################
- 
- version_info = (@QM_MAJOR_VER@, @QM_MINOR_VER@, @QM_RELEASE_VER@)
- """The version of QM as a tuple of (major, minor, release)."""
- 
- version = "%d.%d" % version_info[:-1]
- """The version of QM as a string suitable for printing."""
- 
- if version_info[-1]:
-     version += ".%d" % version_info[-1]
- 
- ########################################################################
- # Local Variables:
- # mode: python
- # indent-tabs-mode: nil
- # fill-column: 72
- # End:
--- 0 ----


From mark at codesourcery.com  Mon Nov 24 21:15:09 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 24 Nov 2003 13:15:09 -0800
Subject: PATCH: Additional simplifications to build process
Message-ID: <200311242115.hAOLF98e018995@doubledemon.codesourcery.com>


Now that we're using Distutils, there's no need for config.guess and
install-sh in the source tree.  I also simplified GNUmakefile.in a
little bit, and corrected MANIFEST.in to include some missing files.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-11-24  Mark Mitchell  <mark at codesourcery.com>

	* GNUmakefile.in (QM_TOOLS): Do not set it.
	(clean): Remove generated documentation.
	(distclean): Do not remove qm/__version.py.
	* MANIFEST.in: Include GNUmakefile.in, configure.in, and
	configure.
	* config.guess: Remove.
	* install-sh: Likewise.

Index: GNUmakefile.in
===================================================================
RCS file: /home/qm/Repository/qm/GNUmakefile.in,v
retrieving revision 1.33
diff -c -5 -p -r1.33 GNUmakefile.in
*** GNUmakefile.in	24 Nov 2003 18:31:08 -0000	1.33
--- GNUmakefile.in	24 Nov 2003 21:08:40 -0000
***************
*** 11,24 ****
  #
  # For license terms see the file COPYING.
  #
  ########################################################################
  
- # The QM Tools that are being built in this version of QM.
- QM_TOOLS	:= $(notdir \
-                      $(filter qm/test, $(wildcard qm/*)))
- 
  # This trick is necessary to create a make variable containing a
  # single space.  See the "(make)Flavors" info page.
  NULLSTRING	:=
  SPACE		:= $(NULLSTRING) # This comment needs to be here.
  
--- 11,20 ----
*************** PYTHONDIRS	= $(TOPDIR)
*** 35,45 ****
  DOCUMENTATION = @MAINTAINER_MODE@
  
  # HappyDoc configuration.
  HAPPYDOC	= @HAPPYDOC@
  
! # Places to install things.
  prefix		= @prefix@
  exec_prefix	= @exec_prefix@
  datadir		= @datadir@
  libdir		= @libdir@
  bindir		= @bindir@
--- 31,43 ----
  DOCUMENTATION = @MAINTAINER_MODE@
  
  # HappyDoc configuration.
  HAPPYDOC	= @HAPPYDOC@
  
! # Places to install things.  The values substituted by configure
! # involve $(exec_prefix), so we must define that even though it is not
! # used directly.
  prefix		= @prefix@
  exec_prefix	= @exec_prefix@
  datadir		= @datadir@
  libdir		= @libdir@
  bindir		= @bindir@
*************** endif
*** 79,92 ****
  %: %.in
  	./config.status
  
  clean::
  	$(PYTHON) ./setup.py clean -a
  
  distclean: clean
  	rm -f GNUmakefile config.cache config.status config.log
- 	rm -f qm/__version.py 
  
  ########################################################################
  # Installation Rules
  ########################################################################
  
--- 77,91 ----
  %: %.in
  	./config.status
  
  clean::
  	$(PYTHON) ./setup.py clean -a
+ 	rm -rf qm/test/doc/print
+ 	rm -rf qm/test/doc/html
  
  distclean: clean
  	rm -f GNUmakefile config.cache config.status config.log
  
  ########################################################################
  # Installation Rules
  ########################################################################
  
Index: MANIFEST.in
===================================================================
RCS file: /home/qm/Repository/qm/MANIFEST.in,v
retrieving revision 1.2
diff -c -5 -p -r1.2 MANIFEST.in
*** MANIFEST.in	24 Nov 2003 00:52:57 -0000	1.2
--- MANIFEST.in	24 Nov 2003 21:08:40 -0000
***************
*** 13,22 ****
--- 13,23 ----
  #
  ########################################################################
  
  include ChangeLog COPYING README
  include MANIFEST.in setup.py
+ include GNUmakefile.in configure.in configure
  
  # These are the modules included in the 'qm' package.
  recursive-include   qm *.py
  # This is the main executable.
  include             qm/test/qmtest


From mark at codesourcery.com  Mon Nov 24 23:02:20 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Mon, 24 Nov 2003 15:02:20 -0800
Subject: PATCH: Mark result stream with FD_CLOEXEC
Message-ID: <200311242302.hAON2KZW002090@sirius.codesourcery.com>


This patch makes the file opened for writing to the results stream
have the FD_CLOEXEC flag set.  That prevents child processes from
having an open file descriptor that they (a) do not need, and (b)
should not use.

--
Mark Mitchell
CodeSourcery, LLC
mark at codesourcery.com

2003-11-24  Mark Mitchell  <mark at codesourcery.com>

	* qm/common.py (fnctl): Import it.
	(close_file_on_exec): New method.
	* qm/executable.py (qm.common): Import it.
	(Executable.Run): Use close_file_on_exec.
	(Executable._MakeCloseOnExec): Remove.
	(RedirectedExecutable._CreatePipe): Use close_file_on_exec.
	* qm/test/file_result_stream.py (qm.common): Import it.
	(FileResultStream.__init__): Use close_file_on_exec.

Index: qm/common.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/common.py,v
retrieving revision 1.78
diff -c -5 -p -r1.78 common.py
*** qm/common.py	24 Nov 2003 00:52:57 -0000	1.78
--- qm/common.py	24 Nov 2003 22:59:03 -0000
*************** import string
*** 37,47 ****
  import sys
  import tempfile
  import time
  import traceback
  import types
! 
  ########################################################################
  # program name
  ########################################################################
  
  program_name = None
--- 37,49 ----
  import sys
  import tempfile
  import time
  import traceback
  import types
! if sys.platform != "win32":
!     import fcntl
!     
  ########################################################################
  # program name
  ########################################################################
  
  program_name = None
*************** def open_temporary_file():
*** 536,545 ****
--- 538,567 ----
      Like 'open_temporary_file_fd', except that the second element of the
      return value is a file object."""
  
      file_name, fd = open_temporary_file_fd()
      return (file_name, os.fdopen(fd, "w+b"))
+ 
+ 
+ def close_file_on_exec(fd):
+     """Prevent 'fd' from being inherited across 'exec'.
+     
+     'fd' -- A file descriptor, or object providing a 'fileno()'
+     method.
+ 
+     This function has no effect on Windows."""
+ 
+     if sys.platform != "win32":
+         flags = fcntl.fcntl(fd, fcntl.F_GETFD)
+         try:
+             flags |= fcntl.FD_CLOEXEC
+         except AttributeError:
+             # The Python 2.2 RPM shipped with Red Hat Linux 7.3 does
+             # not define FD_CLOEXEC.  Fortunately, FD_CLOEXEC is 1 on
+             # every UNIX system.
+             flags |= 1
+         fcntl.fcntl(fd, fcntl.F_SETFD, flags)
  
  
  def copy(object):
      """Make a best-effort attempt to copy 'object'.
  
Index: qm/executable.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/executable.py,v
retrieving revision 1.21
diff -c -5 -p -r1.21 executable.py
*** qm/executable.py	26 Sep 2003 19:55:35 -0000	1.21
--- qm/executable.py	24 Nov 2003 22:59:03 -0000
***************
*** 14,23 ****
--- 14,24 ----
  ########################################################################
  # Imports
  #######################################################################
  
  import os
+ import qm.common
  import signal
  import string
  import sys
  import time
  
*************** class Executable(object):
*** 221,231 ****
          # it to the parent.
          if sys.platform != "win32":
              exception_pipe = os.pipe()
              # Mark the write end as close-on-exec so that the file
              # descriptor is not passed on to the child.
!             self._MakeCloseOnExec(exception_pipe[1])
          else:
              exception_pipe = None
  
          # Start the program.
          child = self.Spawn(arguments, environment, dir, path, exception_pipe)
--- 222,232 ----
          # it to the parent.
          if sys.platform != "win32":
              exception_pipe = os.pipe()
              # Mark the write end as close-on-exec so that the file
              # descriptor is not passed on to the child.
!             qm.common.close_file_on_exec(exception_pipe[1])
          else:
              exception_pipe = None
  
          # Start the program.
          child = self.Spawn(arguments, environment, dir, path, exception_pipe)
*************** class Executable(object):
*** 321,351 ****
          the value returned is the process handle.)"""
  
          return self.__child
      
          
-     def _MakeCloseOnExec(self, fd):
-         """Prevent 'fd' from being inherited across 'exec'.
- 
-         'fd' -- A file descriptor, or object providing a 'fileno()'
-         method.
- 
-         UNIX only."""
- 
-         assert sys.platform != "win32"
- 
-         flags = fcntl.fcntl(fd, fcntl.F_GETFD)
-         try:
-             flags |= fcntl.FD_CLOEXEC
-         except AttributeError:
-             # The Python 2.2 RPM shipped with Red Hat Linux 7.3 does
-             # not define FD_CLOEXEC.  Fortunately, FD_CLOEXEC is 1 on
-             # every UNIX system.
-             flags |= 1
-         fcntl.fcntl(fd, fcntl.F_SETFD, flags)
- 
- 
      def __CreateCommandLine(self, arguments):
          """Return a string giving the process command line.
  
          arguments -- A sequence of arguments (including argv[0])
          indicating the command to be run.
--- 322,331 ----
*************** class RedirectedExecutable(TimeoutExecut
*** 886,896 ****
              r, w = win32pipe.CreatePipe(sa, 0)
              return [r, w]
          else:
              pipe = os.pipe()
              for fd in pipe:
!                 self._MakeCloseOnExec(fd)
              return pipe
  
  
      def __CallUntilNone(self, f, attribute):
          """Call 'f' until 'self.attribute' is 'None'.
--- 866,876 ----
              r, w = win32pipe.CreatePipe(sa, 0)
              return [r, w]
          else:
              pipe = os.pipe()
              for fd in pipe:
!                 qm.common.close_file_on_exec(fd)
              return pipe
  
  
      def __CallUntilNone(self, f, attribute):
          """Call 'f' until 'self.attribute' is 'None'.
Index: qm/test/file_result_stream.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/file_result_stream.py,v
retrieving revision 1.4
diff -c -5 -p -r1.4 file_result_stream.py
*** qm/test/file_result_stream.py	15 Aug 2003 09:05:23 -0000	1.4
--- qm/test/file_result_stream.py	24 Nov 2003 22:59:03 -0000
***************
*** 13,22 ****
--- 13,23 ----
  
  ########################################################################
  # Imports
  ########################################################################
  
+ import qm.common
  import qm.fields
  from   qm.test.result_stream import ResultStream
  import sys
  
  ########################################################################
*************** class FileResultStream(ResultStream):
*** 63,72 ****
--- 64,76 ----
                  if self._is_binary_file:
                      mode = "wb"
                  else:
                      mode = "w"
                  self.file = open(self.filename, mode, 0)
+                 # Child processes do not need to write to the results
+                 # file.
+                 qm.common.close_file_on_exec(self.file)
              else:
                  self.file = sys.stdout
              
  
          


From ghost at cs.msu.su  Tue Nov 25 15:23:32 2003
From: ghost at cs.msu.su (Vladimir Prus)
Date: Tue, 25 Nov 2003 18:23:32 +0300
Subject: [repost] "reload extensions" command
Message-ID: <200311251823.32741.ghost@cs.msu.su>


Hello,
some time ago I've posted the attached message, which contained a patch to add 
"reload extensions" functionality to the GUI. I don't think there was any 
response to it, so I assume the message got lost.

Is there any chance that patch will be accepted into mainline? I've just had 
to restart QMTest GUI after changing extension module and that's not nice ;-)

- Volodya





-------------- next part --------------
An embedded message was scrubbed...
From: Vladimir Prus <ghost at cs.msu.su>
Subject: [qmtest] [PATCH/2] "reload extensions" command
Date: Thu, 17 Jul 2003 14:38:51 +0400
Size: 7900
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20031125/736fdbab/attachment.mht>

From smb at egenera.com  Tue Nov 25 14:38:22 2003
From: smb at egenera.com (Steve Byan)
Date: Tue, 25 Nov 2003 09:38:22 -0500
Subject: extraneous resource cleanup in 2.0.3 GUI
Message-ID: <04E14E4F-1F55-11D8-A233-000A957CD5B0@egenera.com>

I'm seeing extraneous resource cleanups in qmtest 2.0.3 when I run 
individual tests in the GUI. Running the same tests from the 
command-line behave as expected.

Here's some debug print output from running the tests from the 
command-line:

[smb at edvac tdb]$ cat error.log
bladeframe Start()
bladeframe RunTest()
cBlade SetUp() 172.28.1.81
bladeframe RunTest()
pServer SetUp() 172.29.193.5
bladeframe Stop()
cBlade CleanUp() 172.28.1.81
pServer CleanUp() 172.29.193.5

and from the GUI:

[smb at edvac tdb]$ ./start_qmtest.sh
QMTest running at http://172.23.2.108:8890/test/dir
bladeframe Start()
bladeframe RunTest()
cBlade SetUp() 172.28.1.81
bladeframe Stop()
cBlade CleanUp() 172.28.1.81
bladeframe Start()
bladeframe RunTest()
pServer SetUp() 172.29.193.5
bladeframe Stop()
cBlade CleanUp() 172.28.1.81
bash: cblade_resource: command not found
pServer CleanUp() 172.29.193.5

Note the extra call of the "cBlade" resource CleanUp method, just 
before the complaint from bash. (The extra CleanUp() results in ssh 
attempting to execute a shell script named "cblade_resource", which has 
been deleted by the previous invocation of CleanUp()).

Is this a known bug in 2.0.3?

Thanks.

Regards,
-Steve
--------
Steve Byan <smb at egenera.com>
Software Architect
Egenera, Inc.
165 Forest Street
Marlboro, MA 01752
(508) 858-3125



From hschilling at nasa.gov  Tue Nov 25 17:15:29 2003
From: hschilling at nasa.gov (Herb Schilling)
Date: Tue, 25 Nov 2003 12:15:29 -0500
Subject: test names and suite files
Message-ID: <p05200f2bbbe939d4922e@[139.88.38.71]>

Hi,

  Thanks to help from Steve Byan, I am off and running with suite 
files.  I still have one problem.

  Let's say I have the following suite files:

=============
~/test_suite.qms ( I know it's dumb to have a single suite in a suite 
but for the purposes of this e-mail.... )
=============

<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE test PUBLIC "-//Software Carpentry//QMTest Test V0.1//EN" 
"http://www.software-carpentry.com/qm/xml/test.dtd">

<suite>
<suite_id>tests.test_suite</suite_id>
</suite>

=====================
~/tests.qms/test_suite.qms
=====================

<?xml version='1.0' encoding='ISO-8859-1'?>
<!DOCTYPE test PUBLIC "-//Software Carpentry//QMTest Test V0.1//EN" 
"http://www.software-carpentry.com/qm/xml/test.dtd">

<suite>
<test_id>tests.test_memory</test_id>
<test_id>tests.test_objects</test_id>
</suite>


I can successfully run  tests from ~ using

	cd ~
	qmtest run test_suite

or
	cd ~
	qmtest run tests/test_suite

but when I go into the tests directory, I can't run the test suite 
because the suite file contains test id paths relative to ~. So this:

	cd ~/tests
	qmtest run test_suite

doesn't work.

I could remove the "tests." from  ~/tests/test_suite.qms so that I 
could run the suite from the ~/tests directory but then running the 
suites from ~ would be broken! Is there any hidden feature of QMtest 
around this?

Thanks!
-- 
Herb Schilling
NASA Glenn Research Center
Brook Park, OH 44135
hschilling at nasa.gov

  "Dark is faster than light, otherwise you would see it."


From mark at codesourcery.com  Tue Nov 25 17:36:58 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 25 Nov 2003 09:36:58 -0800
Subject: [qmtest] test names and suite files
In-Reply-To: <p05200f2bbbe939d4922e@[139.88.38.71]>
References: <p05200f2bbbe939d4922e@[139.88.38.71]>
Message-ID: <1069781817.21509.13.camel@doubledemon.codesourcery.com>

> I can successfully run  tests from ~ using
> 
> 	cd ~
> 	qmtest run test_suite
> 
> or
> 	cd ~
> 	qmtest run tests/test_suite
> 
> but when I go into the tests directory, I can't run the test suite 
> because the suite file contains test id paths relative to ~. So this:
> 
> 	cd ~/tests
> 	qmtest run test_suite
> 
> doesn't work.

You're really not supposed to run QMTest with a database other than the
top-level of your database.  You can set QMTEST_DB_PATH to the database
location ("$HOME" in your example) so that you run "qmtest" from
anywhere -- but you should always run "tests.test_suite" that way -- it
doesn't generally work to go into "tests" and then ry to run
"test_suite".

(There's something called a "MountDatabase" for combining multiple test
databases into something bigger, and it does spport the kind of thing
you're doing -- but I don't think that's what you want here.)

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From mark at codesourcery.com  Wed Nov 26 03:00:39 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Tue, 25 Nov 2003 19:00:39 -0800
Subject: [qmtest] extraneous resource cleanup in 2.0.3 GUI
In-Reply-To: <04E14E4F-1F55-11D8-A233-000A957CD5B0@egenera.com>
References: <04E14E4F-1F55-11D8-A233-000A957CD5B0@egenera.com>
Message-ID: <1069815639.21504.126.camel@doubledemon.codesourcery.com>

On Tue, 2003-11-25 at 06:38, Steve Byan wrote:
> I'm seeing extraneous resource cleanups in qmtest 2.0.3 when I run 
> individual tests in the GUI. Running the same tests from the 
> command-line behave as expected.

I'm pretty sure this is fixed in CVS.

(We're not really fixing bugs in 2.0.3 any more, unless they can be
shown to occur in the CVS version as well.)

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From seefeld at sympatico.ca  Thu Nov 27 19:35:10 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Thu, 27 Nov 2003 14:35:10 -0500
Subject: extending FileDatabase
Message-ID: <9391c935058f28c6ff34305f1f1b1c763fc65077@Orthosoft.ca>

hi there,

I'm trying to define my own test database that is basically
a file database, i.e. which defines an association between tests
and files...with some exceptions.

My first guess was to derive from FileDatabase, but that
doesn't seem to be as straight forward as it sounds:

The method 'GetTest' (which, as it is documented, must not be
overridden), calls 'GetTestPath'. The latter returns a path,
which has to fulfill '_IsTestFile' or 'NoSuchTestError' will
be raised.

Then '_GetTestFromPath' is used to actually instantiate the
test, given the path. However, here the path goes through
'os.path.normpath', which generates different results depending
on the platform.

This is fine as long as I'm going to access real files. But
if I want to deal with 'virtual files', i.e. names that really
just refer to tests without any file association, it's a bit
cumbersome.

What is the suggested way to define a test database that 'mostly'
operates on test files, but also allows other 'mixin' tests ?

Thanks,
		Stefan



From seefeld at sympatico.ca  Fri Nov 28 15:07:06 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 28 Nov 2003 10:07:06 -0500
Subject: [qmtest] extending FileDatabase
References: <9391c935058f28c6ff34305f1f1b1c763fc65077@Orthosoft.ca>
Message-ID: <c28cd084b014820108254dc5172004ba3fc76341@Orthosoft.ca>

Stefan Seefeld wrote:
> hi there,
> 
> I'm trying to define my own test database that is basically
> a file database, i.e. which defines an association between tests
> and files...with some exceptions.
> 
> My first guess was to derive from FileDatabase, but that
> doesn't seem to be as straight forward as it sounds:
> 
> The method 'GetTest' (which, as it is documented, must not be
> overridden), calls 'GetTestPath'. The latter returns a path,
> which has to fulfill '_IsTestFile' or 'NoSuchTestError' will
> be raised.

I'v had a look into the GCCDatabase code for inspiration.
It does what looks very reasonable, albeit not conforming to
the FileDatabase docs: it overrides the GetSuite() method such
that it can determine whether the suite is implicit (i.e. has
no corresponding directory). Only when it does the parent
class (FileDatabase) GetSuite() is called.

The FileDadabase insists that GetSuite() and GetTest() must
not be overridden. It would be helpful if the documentation
was a bit more correct, or, even better, if the tutorial
outlines the design of the Database and Test classes, so
it is easier for developers to develop their own extensions.

Unfortunately my understanding of the design is still a bit
limitted, so all I can suggest at this point is to remove
these 'must not override this method' comments :-)

Is anybody else interested in this kind of documentation ?
I do believe it would be a great help for the acceptance of
qmtest into domains where other testing tools had been used
before, if some guidance would be provided as to how to
integrate qmtest into such environments (for example make it
collaborate with 'make', etc., etc.)

Thanks,
		Stefan




From seefeld at sympatico.ca  Fri Nov 28 20:30:32 2003
From: seefeld at sympatico.ca (Stefan Seefeld)
Date: Fri, 28 Nov 2003 15:30:32 -0500
Subject: bug in file_database.FileDatabase
Message-ID: <14c89b584e950e889421345cfdbad6333fc7af16@Orthosoft.ca>

The _GetRelativeLabelPath() method of the FileDatabase
method is broken. It appears it only works if
_AreLabelsPaths() returns True.

Attached is a fix.

This brings up a question: I'm still confused about the
design of the database classes, specifically about the
terms 'label' and 'path'. Why is 'label' needed at all ?
I would expect the terms 'test' and 'suite' from the qmtest
domain, mapping to 'paths' ('files', 'directories') in the
'file system' domain. Why do we need 'label' as an additional
term ?

Regards,
		Stefan
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: patch
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20031128/b729f739/attachment.ksh>

From mark at codesourcery.com  Fri Nov 28 20:40:01 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 28 Nov 2003 12:40:01 -0800
Subject: [qmtest] extending FileDatabase
In-Reply-To: <c28cd084b014820108254dc5172004ba3fc76341@Orthosoft.ca>
References: <9391c935058f28c6ff34305f1f1b1c763fc65077@Orthosoft.ca>
	 <c28cd084b014820108254dc5172004ba3fc76341@Orthosoft.ca>
Message-ID: <1070052000.23878.78.camel@doubledemon.codesourcery.com>

> Unfortunately my understanding of the design is still a bit
> limitted, so all I can suggest at this point is to remove
> these 'must not override this method' comments :-)

I think that is actually a good idea.

I applied the attached patch.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC
-------------- next part --------------
An embedded and charset-unspecified text was scrubbed...
Name: diffs
URL: <http://sourcerytools.com/pipermail/qmtest/attachments/20031128/de8e2092/attachment.ksh>

From mark at codesourcery.com  Fri Nov 28 20:53:47 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 28 Nov 2003 12:53:47 -0800
Subject: [qmtest] extending FileDatabase
In-Reply-To: <c28cd084b014820108254dc5172004ba3fc76341@Orthosoft.ca>
References: <9391c935058f28c6ff34305f1f1b1c763fc65077@Orthosoft.ca>
	 <c28cd084b014820108254dc5172004ba3fc76341@Orthosoft.ca>
Message-ID: <1070052827.23871.96.camel@doubledemon.codesourcery.com>


> Is anybody else interested in this kind of documentation ?
> I do believe it would be a great help for the acceptance of
> qmtest into domains where other testing tools had been used
> before, if some guidance would be provided as to how to
> integrate qmtest into such environments (for example make it
> collaborate with 'make', etc., etc.)

Yes, more documentation would certainly be desirable.

It's good that QMTest is getting to the point where the lack of
documentation, rather than lack of functionality, seems to be an
oft-mentioned issue.  Writing that documentation just isn't very high on
our internal priority list, at the moment.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



From mark at codesourcery.com  Fri Nov 28 20:55:13 2003
From: mark at codesourcery.com (Mark Mitchell)
Date: Fri, 28 Nov 2003 12:55:13 -0800
Subject: [qmtest] extending FileDatabase
In-Reply-To: <9391c935058f28c6ff34305f1f1b1c763fc65077@Orthosoft.ca>
References: <9391c935058f28c6ff34305f1f1b1c763fc65077@Orthosoft.ca>
Message-ID: <1070052913.23870.98.camel@doubledemon.codesourcery.com>


> This is fine as long as I'm going to access real files. But
> if I want to deal with 'virtual files', i.e. names that really
> just refer to tests without any file association, it's a bit
> cumbersome.

Overriding GetTest is definitely the right thing to do in that case.

-- 
Mark Mitchell <mark at codesourcery.com>
CodeSourcery, LLC



