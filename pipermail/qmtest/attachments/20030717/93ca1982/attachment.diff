Index: qm/test/base.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/base.py,v
retrieving revision 1.87
diff -u -r1.87 base.py
--- qm/test/base.py	3 Jul 2003 19:32:04 -0000	1.87
+++ qm/test/base.py	17 Jul 2003 10:28:33 -0000
@@ -55,6 +55,9 @@
 Keys are DTD types ("resource", "result", etc).  Values are the
 corresponding DTD public identifiers."""
 
+__loaded_extension_modules = []
+"""Lists all loaded extensions modules."""
+
 ########################################################################
 # Exceptions
 ########################################################################
@@ -224,6 +227,7 @@
     
     global __class_caches
     global __extension_bases
+    global __loaded_extension_modules
     
     # If this class is already in the cache, we can just return it.
     cache = __class_caches[kind]
@@ -234,6 +238,8 @@
     try:
         klass = qm.common.load_class(class_name, [directory],
                                      path + sys.path)
+        if klass.__module__ not in __loaded_extension_modules:            
+            __loaded_extension_modules.append(sys.modules.get(klass.__module__))
     except:
         raise CouldNotLoadExtensionError(class_name, sys.exc_info())
 
@@ -298,6 +304,32 @@
     return get_extension_class_from_directory(class_name, kind,
                                               directory, directories)
 
+
+def reload_extension_modules():
+    """Reloads all extension modules."""
+
+    global __loaded_extension_modules
+    for i in __loaded_extension_modules:
+        # We can't simply call reaload. The problem is then when
+        # qm.common loads a module, it temporary changes sys.path
+        # to include the directory of imported module.
+        # Here, that directory is not present in sys.path and reload
+        # will fail. 
+        old_python_path = sys.path[:]
+        sys.path = [os.path.dirname(i.__file__)] + sys.path
+        try:
+            reload(i)
+        finally:
+            sys.path = old_python_path
+
+    # Clear the caches of loaded extensions. If we don't do this
+    # old class definitions stored there will still be used, despite
+    # the fact the modules were reloaded.
+    global __class_caches
+    for kind in extension_kinds:
+        __class_caches[kind].clear()
+
+    
 
 def get_test_class(class_name, database):
     """Return the test class named 'class_name'.
Index: qm/test/share/dtml/navigation-bar.dtml
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/share/dtml/navigation-bar.dtml,v
retrieving revision 1.6
diff -u -r1.6 navigation-bar.dtml
--- qm/test/share/dtml/navigation-bar.dtml	25 Feb 2003 00:21:09 -0000	1.6
+++ qm/test/share/dtml/navigation-bar.dtml	17 Jul 2003 10:28:33 -0000
@@ -136,6 +136,13 @@
                "dependent,height=200,width=640");
 }
 
+function reload_extensions()
+{
+   window.open("reload-extensions", "reloade_extensions",
+                  "dependent,height=200,width=640");
+}		  
+   
+
 <dtml-in expr="['file_menu', 'edit_menu', 'view_menu', 'run_menu', 
                 'help_menu']">
  document.getElementById("<dtml-var sequence-item>").onmouseout = hide_menu;
Index: qm/test/web/web.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/web/web.py,v
retrieving revision 1.73
diff -u -r1.73 web.py
--- qm/test/web/web.py	15 Jul 2003 18:06:52 -0000	1.73
+++ qm/test/web/web.py	17 Jul 2003 10:28:33 -0000
@@ -112,6 +112,7 @@
              qm.test.cmdline.QMTest.expectations_file_name),
             ('Load Context', "javascript:load_context();"),
             ('Save Context', qm.test.cmdline.QMTest.context_file_name),
+            ('Reload extensions', 'javascript:reload_extensions();'),
             ('Exit', 'shutdown')
             ])
         self.edit_menu_items = [
@@ -1561,6 +1562,7 @@
               self.HandleSaveExpectations ),
             ( qm.test.cmdline.QMTest.results_file_name,
               self.HandleSaveResults ),
+            ( "reload-extensions", self.HandleReloadExtensions ),
             ]:
             self.RegisterScript(script_base + name, function)
         self.RegisterPathTranslation(
@@ -2396,6 +2398,18 @@
         # Redirect to a page that displays the newly-edited item.
         raise qm.web.HttpRedirect, \
               qm.web.WebRequest("show-suite", base=request, id=suite_id)
+
+
+
+    def HandleReloadExtensions(self, request):
+        """Handle a request to save results to a file.
+
+        'request' -- The 'WebRequest' that caused the event."""
+        qm.test.base.reload_extension_modules()
+        return qm.web.make_popup_page("<p>All extensions reloaded",
+                                      [('OK', None)],
+                                      "Extensions reloaded")        
+
 
 
     def MakeNewTest(self, test_class_name, test_id):
