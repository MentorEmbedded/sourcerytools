2002-12-20  Mark Mitchell  <mark@codesourcery.com>

	* qm/extension.py (get_class_arguments): Allow derived classe
	arguments to override base class arguments.
	(get_class_arguments_as_dictionary): Reimplement.
	* tests/xmldb/QMTest/test_inheritance.py: New file.
	* tests/xmldb/QMTest/classes.qms: Update.
	* tests/xmldb/api.qms/test.qms/derived.qmt: New test.
	
Index: NEWS
===================================================================
RCS file: /home/sc/Repository/qm/NEWS,v
retrieving revision 1.11.2.3
diff -c -5 -p -r1.11.2.3 NEWS
*** NEWS	19 Dec 2002 07:37:41 -0000	1.11.2.3
--- NEWS	20 Dec 2002 18:16:12 -0000
*************** resources when editing a test.
*** 16,25 ****
--- 16,31 ----
  
  The substitutions field for the FileContentsTest now works correctly
  in the GUI.  This is an incompatible change; tests that use this test
  class will require hand-editing.
  
+ An argument in a derived test or resource class which has the same
+ name as an argument in a base class now overrides the base class
+ argument.  Therefore, every test class will have only one argument
+ with a given name.  (Previously, both the base and derived class
+ arguments were present.)
+ 
  QM 2.0.1
  ========
  
  A bug that prevented the "New Resource" entry on the "File" menu from
  working has been fixed.
Index: qm/extension.py
===================================================================
RCS file: /home/sc/Repository/qm/qm/extension.py,v
retrieving revision 1.4
diff -c -5 -p -r1.4 extension.py
*** qm/extension.py	12 Nov 2002 20:02:37 -0000	1.4
--- qm/extension.py	20 Dec 2002 18:16:12 -0000
*************** def get_class_arguments(extension_class)
*** 112,131 ****
  
      arguments = extension_class._argument_list
      if arguments is None:
          # There are no arguments yet.
          arguments = []
          # Start with the most derived class.
          classes = [extension_class]
          while classes:
              # Pull the first class off the list.
              c = classes.pop(0)
              # Add all of the new base classes to the end of the list.
              classes.extend(c.__bases__)
              # Add the arguments from this class.
!             arguments.extend(c.__dict__.get("arguments", []))
          extension_class._argument_list = arguments
          
      return arguments
          
  
  def get_class_arguments_as_dictionary(extension_class):
--- 112,141 ----
  
      arguments = extension_class._argument_list
      if arguments is None:
          # There are no arguments yet.
          arguments = []
+         dictionary = {}
          # Start with the most derived class.
          classes = [extension_class]
          while classes:
              # Pull the first class off the list.
              c = classes.pop(0)
              # Add all of the new base classes to the end of the list.
              classes.extend(c.__bases__)
              # Add the arguments from this class.
!             new_arguments = c.__dict__.get("arguments", [])
!             for a in new_arguments:
!                 name = a.GetName()
!                 # If we already have an entry for this name, then a
!                 # derived class overrides this argument.
!                 if not dictionary.has_key(name):
!                     arguments.append(a)
!                     dictionary[name] = a
!                     
          extension_class._argument_list = arguments
+         extension_class._argument_dictionary = dictionary
          
      return arguments
          
  
  def get_class_arguments_as_dictionary(extension_class):
*************** def get_class_arguments_as_dictionary(ex
*** 137,155 ****
      objects.  The dictionary contains all of the arguments in the
      class hierarchy."""
  
      assert issubclass(extension_class, Extension)
  
!     dictionary = extension_class._argument_dictionary
!     if dictionary is None:
!         arguments = get_class_arguments(extension_class)
!         dictionary = {}
!         for argument in arguments:
!             dictionary[argument.GetName()] = argument
!         extension_class._argument_dictionary = dictionary
          
!     return dictionary
          
  
  def get_class_description(extension_class, brief=0):
      """Return a brief description of the extension class 'extension_class'.
  
--- 147,160 ----
      objects.  The dictionary contains all of the arguments in the
      class hierarchy."""
  
      assert issubclass(extension_class, Extension)
  
!     if extension_class._argument_dictionary is None:
!         get_class_arguments(extension_class)
          
!     return extension_class._argument_dictionary
          
  
  def get_class_description(extension_class, brief=0):
      """Return a brief description of the extension class 'extension_class'.
  
Index: tests/xmldb/QMTest/classes.qmc
===================================================================
RCS file: /home/sc/Repository/qm/tests/xmldb/QMTest/classes.qmc,v
retrieving revision 1.1
diff -c -5 -p -r1.1 classes.qmc
*** tests/xmldb/QMTest/classes.qmc	17 Oct 2002 20:38:16 -0000	1.1
--- tests/xmldb/QMTest/classes.qmc	20 Dec 2002 18:16:13 -0000
***************
*** 1,2 ****
  <?xml version="1.0" ?>
! <class-directory><class kind="test">test_interface.TestInterface</class></class-directory>
\ No newline at end of file
--- 1,2 ----
  <?xml version="1.0" ?>
! <class-directory><class kind="test">test_interface.TestInterface</class><class kind="test">test_inheritance.Derived</class></class-directory>
\ No newline at end of file
Index: tests/xmldb/QMTest/test_inheritance.py
===================================================================
RCS file: tests/xmldb/QMTest/test_inheritance.py
diff -N tests/xmldb/QMTest/test_inheritance.py
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- tests/xmldb/QMTest/test_inheritance.py	20 Dec 2002 18:16:13 -0000
***************
*** 0 ****
--- 1,55 ----
+ ########################################################################
+ #
+ # File:   test_inheritance.py
+ # Author: Mark Mitchell
+ # Date:   12/20/2002
+ #
+ # Contents:
+ #   TestInheritance test class.
+ #
+ # Copyright (c) 2002 by CodeSourcery, LLC.  All rights reserved. 
+ #
+ ########################################################################
+ 
+ ########################################################################
+ # Imports
+ ########################################################################
+ 
+ import qm.extension
+ import qm.fields
+ from   qm.test.test import Test
+ 
+ ########################################################################
+ # Classes
+ ########################################################################
+ 
+ class Base(Test):
+     """A 'Base' has one test argument."""
+ 
+     arguments = [
+         qm.fields.IntegerField(name = "a")
+         ]
+ 
+ 
+ 
+ class Derived(Base):
+     """A 'Derived' overrides the argument from 'Base'."""
+ 
+     arguments = [
+         qm.fields.IntegerField(name = "a",
+                                computed = "true")
+         ]
+ 
+ 
+     def Run(self, context, result):
+ 
+         args = qm.extension.get_class_arguments(Derived)
+         if args[0] != Derived.arguments[0]:
+             result.Fail("Incorrect argument.")
+         elif not args[0].IsComputed():
+             result.Fail("Argument is not computed.")
+         else:
+             for a in args[1:]:
+                 if a.GetName() == "a":
+                     result.Fail('Two arguments named \"a\".')
+                         
Index: tests/xmldb/api.qms/test.qms/derived.qmt
===================================================================
RCS file: tests/xmldb/api.qms/test.qms/derived.qmt
diff -N tests/xmldb/api.qms/test.qms/derived.qmt
*** /dev/null	1 Jan 1970 00:00:00 -0000
--- tests/xmldb/api.qms/test.qms/derived.qmt	20 Dec 2002 18:16:13 -0000
***************
*** 0 ****
--- 1,2 ----
+ <?xml version="1.0" ?>
+ <extension class="test_inheritance.Derived" kind="test"><argument name="resources"><set/></argument><argument name="target_group"><text>.*</text></argument><argument name="prerequisites"><set/></argument></extension>
\ No newline at end of file
