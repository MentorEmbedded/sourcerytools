Index: qm/test/cmdline.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/cmdline.py,v
retrieving revision 1.116
diff -u -r1.116 cmdline.py
--- qm/test/cmdline.py	24 Oct 2005 07:14:26 -0000	1.116
+++ qm/test/cmdline.py	4 Nov 2005 21:59:28 -0000
@@ -320,6 +320,14 @@
         "Write test report to FILE (- for stdout)."
         )
 
+    report_flat_option_spec = (
+        "f",
+        "flat",
+        None,
+        """Generate a flat listing of test results, instead of reproducing the
+        database directory tree in the report."""
+        )
+
     results_option_spec = (
         "R",
         "results",
@@ -528,9 +536,13 @@
          "[ result [-e expected] ]+",
          """
 Generates a test report. The arguments are result files each optionally
-followed by '-e' and an expectation file.
+followed by '-e' and an expectation file. This command attempts to reproduce
+the test database structure, and thus requires the '--tdb' option. To generate
+a flat test report specify the '--flat' option.
          """,
-         (help_option_spec, report_output_option_spec)
+         (help_option_spec,
+          report_output_option_spec,
+          report_flat_option_spec)
          ),
 
         ("run",
@@ -1557,6 +1569,7 @@
         """Execute a 'report' command."""
 
         output = self.GetCommandOption("output")
+        flat = self.GetCommandOption("flat") != None
 
         # Check that at least one result file is present.
         if not output or len(self.__arguments) < 1:
@@ -1564,11 +1577,14 @@
             return 2
 
         # If the database can be loaded, use it to find all
-        # available tests.
-        database = self.GetDatabaseIfAvailable()
+        # available tests. The default (non-flat) format requires a database.
+        if flat:
+            database = self.GetDatabaseIfAvailable()
+        else:
+            database = self.GetDatabase()
 
         report_generator = ReportGenerator(output, database)
-        report_generator.GenerateReport(self.__arguments)
+        report_generator.GenerateReport(flat, self.__arguments)
         
 
     def __ExecuteRun(self):
Index: qm/test/reader_test_run.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/reader_test_run.py,v
retrieving revision 1.1
diff -u -r1.1 reader_test_run.py
--- qm/test/reader_test_run.py	14 Sep 2005 13:24:46 -0000	1.1
+++ qm/test/reader_test_run.py	4 Nov 2005 21:59:28 -0000
@@ -59,6 +59,11 @@
         return self.__annotations.get(key)
         
 
+    def GetAnnotations(self):
+
+        return self.__annotations
+
+
     def GetAllResults(self, directory = "", kind = Result.TEST):
 
         if directory == "":
Index: qm/test/report.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/report.py,v
retrieving revision 1.3
diff -u -r1.3 report.py
--- qm/test/report.py	24 Oct 2005 07:14:26 -0000	1.3
+++ qm/test/report.py	4 Nov 2005 21:59:28 -0000
@@ -22,6 +22,7 @@
 from qm.common import PythonException
 from qm.test import base
 from qm.test.result import Result
+from qm.test.reader_test_run import ReaderTestRun
 import xml.sax
 
 ########################################################################
@@ -32,14 +33,6 @@
     """A 'ReportGenerator' generates a test report from one or more
     result files."""
 
-    class Expectation:
-        """An internal helper class to facilitate access to expectations."""
-        
-        def __init__(self, outcome, cause):
-
-            self.outcome, self.cause = outcome, cause
-            
-
     def __init__(self, output, database=None):
 
         self.output = open(output, 'w+')
@@ -49,10 +42,13 @@
             document_element_tag="report")
 
 
-    def GenerateReport(self, arguments):
+    def GenerateReport(self, flat, arguments):
         """Generates a report file with results collected from a set of
         result files.
 
+        'flat' -- True to indicate a flat result listing, False if tests should be
+        reported according to the database directory structure.
+
         'arguments' -- command arguments of the form [result [-e expectation]]+
 
         returns -- None."""
@@ -71,124 +67,190 @@
 
         # Write out the prologue.
         self.output.write("<?xml version='1.0' encoding='ISO-8859-1'?>\n")
-        self.output.write('<!DOCTYPE report PUBLIC "%s" "%s">\n'
-                        % (qm.xmlutil.make_public_id("QMTest/Report"),
-                           qm.xmlutil.make_system_id("qmtest/report.dtd")))
         self.output.write("<report>\n")
-        self._WriteTestIds(input)
 
-        results = self._CreateResultStreams(input)
-        for result in results:
-            self._Report(result)
+        test_runs = self._LoadTestRuns(input)
+
+        self.output.write("  <runs>\n")
+        for test_run, expectations in test_runs:
+            self.output.write("  <run>\n")
+        
+            annotations = test_run.GetAnnotations()
+            for key, value in annotations.iteritems():
+
+                element = self.__document.createElement("annotation")
+                element.setAttribute("key", key)
+                text = self.__document.createTextNode(value)
+                element.appendChild(text)
+                element.writexml(self.output, addindent = " ", newl = "\n")
+            self.output.write("  </run>\n")
+        self.output.write("  </runs>\n")
+
+        if flat:
+            self._ReportFlat(test_runs)
+        else:
+            self._Report(test_runs)
+            
         self.output.write("</report>\n")
 
 
-    def _CreateResultStreams(self, input):
-        """Create result streams for all result files.
+    def _LoadTestRuns(self, input):
+        """Load test runs from the provided input.
 
         'input' -- A list of pairs of file names referring to result files /
         expectation files. The expectation file member may be None.
 
-        returns -- A list of pairs of ResultStream / Expectation objects."""
+        returns -- A list of pairs of TestRun objects."""
 
-        results = []
+        runs = []
         for result_file, exp_file in input:
+            results = None
+            expectations = None
+
             try:
-                result = base.load_results(result_file, self.database)
+                file = result_file
+                reader = base.load_results(file, self.database)
+                results = ReaderTestRun(reader)
+                if exp_file:
+                    file = exp_file
+                    reader = base.load_results(file, self.database)
+                    expectations = ReaderTestRun(reader)
             except IOError, e:
-                raise PythonException("Error reading '%s'"%result_file,
-                                      IOError, e)
+                raise PythonException("Error reading '%s'"%file, IOError, e)
             except xml.sax.SAXException, e:
-                raise PythonException("Error loading '%s'"%result_file,
+                raise PythonException("Error loading '%s'"%file,
                                       xml.sax.SAXException, e)
-            exp = {}
-            if exp_file:
-                try:
-                    exp_reader = base.load_results(exp_file,
-                                                   self.database)
-                    for e in exp_reader:
-                        if e.GetKind() == Result.TEST:
-                            outcome = e.GetOutcome()
-                            cause = e.get('qmtest.cause')
-                            exp[e.GetId()] = ReportGenerator.Expectation(outcome,
-                                                                         cause)
-                except IOError, e:
-                    raise PythonException("Error reading '%s'"%exp_file,
-                                          IOError, e)
-                except xml.sax.SAXException, e:
-                    raise PythonException("Error loading '%s'"%exp_file,
-                                          xml.sax.SAXException, e)
-            results.append((result, exp))
-        return results
-    
-
-    def _WriteTestIds(self, input):
-        """Generate an entry in the output containing a list of all
-        available test ids. This list is obtained from the database
-        if it is present, or else by taking the union of all tests
-        reported in the result objects.
+            runs.append((results, expectations))
+        return runs
 
-        'input' -- A list of result / expectation file pairs.
 
-        returns -- None."""
+    def _GetIds(self, test_runs):
+        """Return a list of ids to report results from.
+        This list is obtained from the database if it is present,
+        or else by taking the union of all items reported in the
+        test runs.
+
+        'test_runs' -- A list of result / expectation table pairs.
+
+        returns -- The tuple of resource-setup-ids, test-ids,
+        and resource-cleanup-ids."""
 
-        self.output.write("<suite>\n")
         test_ids = []
-        suite_ids = []
+        resource_setup_ids = []
+        resource_cleanup_ids = []
         if self.database:
-            test_ids, suite_ids = self.database.ExpandIds([''])
+            test_ids = self.database.GetTestIds()
+            resource_setup_ids = self.database.GetResourceIds()
+            resource_cleanup_ids = resource_setup_ids
         else:
-            for r, e in self._CreateResultStreams(input):
-                for exp in e:
-                    if not exp in test_ids:
-                        test_ids.append(exp)
-                for result in r:
+            for results, e in test_runs:
+                for result in results.GetAllResults("", Result.TEST):
                     if not result.GetId() in test_ids:
                         test_ids.append(result.GetId())
-        for t in test_ids:
-            self.output.write("<test id=\"%s\" />\n"%t)
-        self.output.write("</suite>\n")
+                for result in results.GetAllResults("", Result.RESOURCE_SETUP):
+                    if not result.GetId() in resource_setup_ids:
+                        resource_setup_ids.append(result.GetId())
+                for result in results.GetAllResults("", Result.RESOURCE_CLEANUP):
+                    if not result.GetId() in resource_cleanup_ids:
+                        resource_cleanup_ids.append(result.GetId())
+        return test_ids, resource_setup_ids, resource_cleanup_ids
 
 
-    def _Report(self, results):
-        """Write one set of results into the report.
+    def _ReportFlat(self, test_runs):
+        """Generate test report with the given set of test runs.
+        The report will contain a flat list of item ids.
 
-        'results' -- ResultReader the results are to be read from.
+        'test_runs' -- List of pairs of TestRun objects."""
 
-        'expectations' -- ResultReader the expectations are to be read from.
-        This may be None.
+        ids = self._GetIds(test_runs)
+        kinds = [Result.TEST, Result.RESOURCE_SETUP, Result.RESOURCE_CLEANUP]
 
-        returns -- None."""
+        element = self.__document.createElement('results')
+        # Report all items, sorted by their kind.
+        for k in [0, 1, 2]:
+            for id in ids[k]:
+                self._ReportItem(kinds[k], id, id, test_runs, element)
 
-        self.output.write("<results>\n")
-        annotations = results[0].GetAnnotations()
-        for key, value in annotations.iteritems():
-
-            element = self.__document.createElement("annotation")
-            element.setAttribute("key", key)
-            text = self.__document.createTextNode(value)
-            element.appendChild(text)
-            element.writexml(self.output, addindent = " ", newl = "\n")
-            
-        for result in results[0]:
-            # Inject two new annotations containing the expectation values.
-            if results[1]:
-                exp = results[1].get(result.GetId())
-                if exp:
-                    result['qmtest.expected_outcome'] = exp.outcome
-                    if exp.cause:
-                        result['qmtest.expected_cause'] = exp.cause
-            element = result.MakeDomNode(self.__document)
-            element.writexml(self.output, indent = " ", addindent = " ",
-                             newl = "\n")
+        element.writexml(self.output, indent = " ", addindent = " ",
+                         newl = "\n")
 
 
-        self.output.write("</results>\n")
+    def _Report(self, test_runs):
+        """Generate test report with the given set of test runs.
+        The report will contain a tree structure with items appearing in their
+        respective subdirectory.
 
+        'test_runs' -- List of pairs of TestRun objects."""
 
-########################################################################
-# Local Variables:
-# mode: python
-# indent-tabs-mode: nil
-# fill-column: 72
-# End:
+        element = self.__document.createElement('results')
+        root = self._ReportSubdirectory('', test_runs, element)
+        root.writexml(self.output, indent=" ", addindent=" ", newl="\n")
+
+
+    def _ReportSubdirectory(self, directory, test_runs, element=None):
+        """Generate a DOM node for the given directory containing its results.
+
+        'directory' -- The directory for which to generate the report node.
+
+        'test_runs' -- The List of TestRuns.
+
+        'element' -- DOM element to store results into.
+        If this is None, an element will be created.
+        
+        returns -- DOM element node containing the xmlified results."""
+
+        if not element:
+            element = self.__document.createElement('subdirectory')
+            element.setAttribute('name', directory)
+
+        # Start with the subdirectories.
+        for dir in self.database.GetSubdirectories(directory):
+            child = self._ReportSubdirectory(dir, test_runs)
+            element.appendChild(child)
+
+        # Report all items, sorted by kind.
+        for kind in [Result.TEST, Result.RESOURCE_SETUP, Result.RESOURCE_CLEANUP]:
+            for id in self.database.GetIds(kind, directory, False):
+                self._ReportItem(kind, id, self.database.SplitLabel(id)[1],
+                                 test_runs, element)
+        return element
+
+
+    def _ReportItem(self, kind, item_id, name, test_runs, parent):
+        """Report a single item.
+
+        'kind' -- The kind of item to report.
+
+        'item_id' -- The item id to report.
+
+        'name' -- The item's name (usually either the absolute or relative id).
+
+        'test_runs' -- The list of test runs.
+
+        'parent' -- An XML element to insert new nodes into."""
+
+        # Create one item node per id...
+        item = self.__document.createElement('item')
+        item.setAttribute('id', name)
+        item.setAttribute('kind', kind)
+        parent.appendChild(item)
+
+        # ...and fill it with one result per test run.
+        for results, expectations in test_runs:
+            result = results.GetResult(item_id, kind)
+            if not result:
+                result = Result(kind, item_id, Result.UNTESTED)
+            # Inject two new annotations containing the expectation values.
+            if expectations:
+                exp = expectations.GetResult(item_id, kind)
+                if exp:
+                    result['qmtest.expected_outcome'] = exp.GetOutcome()
+                    cause = exp.get('qmtest.cause')
+                    if cause:
+                        result['qmtest.expected_cause'] = cause
+
+            child = result.MakeDomNode(self.__document)
+            # Remove redundant attributes
+            child.removeAttribute('id')
+            child.removeAttribute('kind')
+            item.appendChild(child)
Index: qm/test/test_run.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/test_run.py,v
retrieving revision 1.1
diff -u -r1.1 test_run.py
--- qm/test/test_run.py	14 Sep 2005 13:24:46 -0000	1.1
+++ qm/test/test_run.py	4 Nov 2005 21:59:28 -0000
@@ -58,6 +58,15 @@
         raise NotImplementedError
 
 
+    def GetAnnotations(self):
+        """Return this run's dictionary of annotations.
+
+        returns -- A dictionary mapping annotation names (strings) to values
+        (also strings)."""
+
+        raise NotImplementedError
+
+
     def GetAllResults(self, directory = "", kind = Result.TEST):
         """Return 'Result's from the given directory..
 
Index: qm/test/doc/reference.xml
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/doc/reference.xml,v
retrieving revision 1.46
diff -u -r1.46 reference.xml
--- qm/test/doc/reference.xml	24 Oct 2005 07:14:26 -0000	1.46
+++ qm/test/doc/reference.xml	4 Nov 2005 21:59:30 -0000
@@ -1770,8 +1770,9 @@
    <section>
     <title>Synopsis</title>
     <cmdsynopsis>
-     <command>&qmtest-cmd; report <option>-o</option></command>
-     <arg><replaceable>output</replaceable></arg>
+     <command>&qmtest-cmd; report </command>
+     <arg>-o <replaceable>output</replaceable></arg>
+     <arg choice="opt">-f</arg>
      <arg choice="opt" rep="repeat">
       <arg choice="plain"><replaceable>report-file</replaceable></arg>
       <arg choice="opt">-e <replaceable>expectation-file</replaceable></arg>
@@ -1792,6 +1793,14 @@
 
     <variablelist>
      <varlistentry>
+      <term><option>-f</option></term>
+      <term><option>&dashdash;flat</option></term>
+      <listitem>
+       <para>Generate a flat listing of test results, instead of reproducing the
+        database directory tree in the report.</para>
+      </listitem>
+     </varlistentry>
+     <varlistentry>
       <term><option>-o</option> <replaceable>output file</replaceable></term>
       <term>
        <option>&dashdash;output</option> 
Index: share/xml/report.xslt
===================================================================
RCS file: /home/qm/Repository/qm/share/xml/report.xslt,v
retrieving revision 1.2
diff -u -r1.2 report.xslt
--- share/xml/report.xslt	25 Oct 2005 17:28:04 -0000	1.2
+++ share/xml/report.xslt	4 Nov 2005 21:59:30 -0000
@@ -39,7 +39,7 @@
   <xsl:param name="excluded.annotations" select="''" />
 
   <!-- Generate the main report page -->
-  <xsl:template name="report.page">
+  <xsl:template name="report.main.page">
     <html>
       <head>
         <title><xsl:value-of select="$title" /></title>
@@ -51,16 +51,78 @@
           <p class="heading">Summary</p>
           <xsl:call-template name="summary" />
         </div>
-        <!-- generate result matrix -->
-        <xsl:call-template name="matrix" />
-        <!-- generate detailed pages, one per result set. -->
-        <xsl:call-template name="details" />
+        <xsl:if test="subdirectory">
+          <h2>Subdirectories</h2>
+          <xsl:for-each select="subdirectory">
+            <p><a href="{@name}/report.html">Subdirectory <xsl:value-of select="@name"/></a></p>
+            <xsl:apply-templates select="."/>
+          </xsl:for-each>
+        </xsl:if>
+        <!-- generate test matrix -->
+        <xsl:if test="item[@kind='test']">
+          <h2>Tests</h2>
+          <xsl:call-template name="matrix">
+            <xsl:with-param name="kind" select="'test'"/>
+          </xsl:call-template>
+        </xsl:if>
+        <!-- generate resource matrix -->
+        <xsl:if test="item[@kind='resource_setup']">
+          <h2>Resources</h2>
+          <xsl:call-template name="matrix">
+            <xsl:with-param name="kind" select="'resource_setup'"/>
+          </xsl:call-template>
+        </xsl:if>
       </body>
     </html>
   </xsl:template>
 
+  <!-- Generate a subdir report page -->
+  <xsl:template name="report.page">
+    <common:document href="{@name}/report.html" method="xml" indent="yes" encoding="ISO-8859-1">
+      <xsl:variable name="title">
+        Results for subdirectory <xsl:value-of select="@name"/>
+      </xsl:variable>
+      <html>
+        <head>
+          <title><xsl:value-of select="$title" /></title>
+        <link href="http://www.codesourcery.com/codesourcerystyles.css" rel="stylesheet" type="text/css"/>
+        <link type="text/css" rel="stylesheet" href="test-report.css"/>
+        </head>
+        <body>
+          <h1><xsl:value-of select="$title" /></h1>
+          <h2>Directory <xsl:value-of select="@name"/></h2>
+          <xsl:if test="directory">
+            <h2>Subdirectories</h2>
+            <xsl:for-each select="subdirectory">
+              <p><a href="{@name}/report.html">Subdirectory <xsl:value-of select="@name"/></a></p>
+              <xsl:apply-templates select="."/>
+            </xsl:for-each>
+          </xsl:if>
+          <!-- generate test matrix -->
+          <xsl:if test="item[@kind='test']">
+            <h2>Tests</h2>
+            <xsl:call-template name="matrix">
+              <xsl:with-param name="kind" select="'test'"/>
+            </xsl:call-template>
+          </xsl:if>
+          <!-- generate resource matrix -->
+          <xsl:if test="item[@kind='resource_setup']">
+            <h2>Resources</h2>
+            <xsl:call-template name="matrix">
+              <xsl:with-param name="kind" select="'resource_setup'"/>
+            </xsl:call-template>
+          </xsl:if>
+          <!-- generate detailed pages, one per result set. -->
+          <xsl:call-template name="details" />
+        </body>
+      </html>
+    </common:document>
+  </xsl:template>
+
   <xsl:template name="detail.page">
-    <xsl:param name="id" select="'dummy'"/>
+    <xsl:param name="run" select="1"/>
+    <xsl:param name="directory" select="''"/>
+    <xsl:variable name="id" select="annotation[@key=$key]"/>
     <!-- FIXME: Make sure the 'id' parameter is actually usable as a filename on the target OS. -->
     <xsl:variable name="filename">
       <xsl:call-template name="detail.document.name">
@@ -77,9 +139,9 @@
         </head>
         <body>
           <h1><xsl:value-of select="$title" /></h1>
-          <xsl:call-template name="detail">
-            <xsl:with-param name="id" select="$id"/>
-          </xsl:call-template>
+          <xsl:for-each select="$directory/item/result[$run]">
+            <xsl:call-template name="result.detail"/>
+          </xsl:for-each>
         </body>
       </html>
     </common:document>
@@ -90,78 +152,90 @@
        These templates shouldn't be required to be redefined
    -->
 
-  <xsl:template match="report">
-    <xsl:call-template name="report.page" />
+  <xsl:template match="/">
+    <!-- write meta data about test runs... -->
+    <xsl:apply-templates select="/report/results"/>
+  </xsl:template>
+
+  <xsl:template match="results">
+    <xsl:call-template name="report.main.page"/>
+    <!-- generate detailed pages, one per result set. -->
+    <xsl:call-template name="details"/>
+  </xsl:template>
+
+  <xsl:template match="subdirectory">
+    <xsl:call-template name="report.page"/>
+    <!-- generate detailed pages, one per result set. -->
+    <xsl:call-template name="details"/>
   </xsl:template>
 
   <xsl:template name="summary">
-    <p><xsl:value-of select="count(/report/results/result)"/> tests</p>
-    <p><xsl:value-of select="count(/report/results/result[@outcome='PASS'])"/> passes</p>
-    <p><xsl:value-of select="count(/report/results/result[@outcome='FAIL'])"/> failures</p>
+    <p><xsl:value-of select="count(/report/results//item/result)"/> tests</p>
+    <p><xsl:value-of select="count(/report/results//item/result[@outcome='PASS'])"/> passes</p>
+    <p><xsl:value-of select="count(/report/results//item/result[@outcome='FAIL'])"/> failures</p>
   </xsl:template>
 
   <xsl:template name="matrix">
+    <xsl:param name="kind" select="''"/>
+    <!-- generate a test matrix for the items in the current directory -->
     <table>
       <tbody>
-        <th></th>
-        <xsl:for-each select="/report/results">
-          <th><xsl:value-of select="annotation[@key=$key]"/></th>
-        </xsl:for-each>
-        <xsl:for-each select="/report/suite/test/@id">
-          <xsl:call-template name="matrix.row">
-            <xsl:with-param name="id" select="." />
-          </xsl:call-template>
+        <tr>
+          <th></th>
+          <xsl:for-each select="/report/runs/run">
+            <th><xsl:value-of select="annotation[@key=$key]"/></th>
+          </xsl:for-each>
+        </tr>
+        <xsl:for-each select="item[@kind=$kind]">
+          <xsl:variable name="id" select="@id"/>
+          <tr>
+            <th><xsl:value-of select="$id"/></th>
+            <xsl:for-each select="result">
+              <xsl:call-template name="result">
+                <xsl:with-param name="id" select="$id"/>
+                <xsl:with-param name="run" select="position()"/>
+              </xsl:call-template>
+            </xsl:for-each>
+          </tr>
         </xsl:for-each>
       </tbody>
     </table>
   </xsl:template>
 
   <xsl:template name="details">
-    <xsl:for-each select="/report/results">
+    <xsl:variable name="directory" select="."/>
+    <xsl:for-each select="/report/runs/run">
       <xsl:call-template name="detail.page">
-        <xsl:with-param name="id" select="annotation[@key=$key]" />
+        <xsl:with-param name="run" select="position()"/>
+        <xsl:with-param name="directory" select="$directory"/>
       </xsl:call-template>
     </xsl:for-each>
   </xsl:template>
 
-  <xsl:template name="matrix.row">
-    <xsl:param name="id" select="''" />
-    <tr>
-      <th><xsl:value-of select="$id"/></th>
-      <xsl:for-each select="/report/results">
-        <xsl:variable name="column" select="annotation[@key=$key]" />
-        <xsl:call-template name="result">
-          <xsl:with-param name="id" select="$id" />
-          <xsl:with-param name="column" select="$column" />
-        </xsl:call-template>
-      </xsl:for-each>
-    </tr>
-  </xsl:template>
-    
   <!-- Generate a single cell in the result matrix -->
   <xsl:template name="result">
     <xsl:param name="id" select="''" />
-    <xsl:param name="column" select="''" />
-    <xsl:variable name="result"
-                  select="/report/results[annotation[@key=$key]=$column]/result[@id=$id]" />
+    <xsl:param name="run" select="''" />
+    <!--<xsl:variable name="result"
+                  select="/report/results[annotation[@key=$key]=$column]/result[@id=$id]" />-->
     <xsl:variable name="outcome">
       <xsl:choose>
         <!-- Is there an expectation for this test ? -->
-        <xsl:when test="$result/@outcome and 
-                        $result/annotation/@name='qmtest.expected_outcome'">
+        <xsl:when test="@outcome and 
+                        annotation/@name='qmtest.expected_outcome'">
           
           <xsl:variable name="exp.outcome"
-                        select="normalize-space($result/annotation[@name='qmtest.expected_outcome'])"/>
+                        select="normalize-space(annotation[@name='qmtest.expected_outcome'])"/>
           <xsl:variable name="exp.cause"
-                        select="$result/annotation[@name='qmtest.expected_cause']"/>
+                        select="annotation[@name='qmtest.expected_cause']"/>
           <xsl:choose>
-            <xsl:when test="$result/@outcome='PASS' and 
+            <xsl:when test="@outcome='PASS' and 
                             $exp.outcome='&#34;PASS&#34;'">pass</xsl:when>
-            <xsl:when test="$result/@outcome='PASS' and 
+            <xsl:when test="@outcome='PASS' and 
                             $exp.outcome='&#34;FAIL&#34;'">xpass</xsl:when>
-            <xsl:when test="$result/@outcome='FAIL' and 
+            <xsl:when test="@outcome='FAIL' and 
                             $exp.outcome='&#34;PASS&#34;'">xfail</xsl:when>
-            <xsl:when test="$result/@outcome='FAIL' and 
+            <xsl:when test="@outcome='FAIL' and 
                             $exp.outcome='&#34;FAIL&#34;'">fail</xsl:when>
             <xsl:otherwise>untested</xsl:otherwise>
           </xsl:choose>
@@ -169,8 +243,8 @@
         <xsl:otherwise>
           <!-- No expectation. -->
           <xsl:choose>
-            <xsl:when test="$result/@outcome='PASS'">pass</xsl:when>
-            <xsl:when test="$result/@outcome='FAIL'">fail</xsl:when>
+            <xsl:when test="@outcome='PASS'">pass</xsl:when>
+            <xsl:when test="@outcome='FAIL'">fail</xsl:when>
             <xsl:otherwise>untested</xsl:otherwise>
           </xsl:choose>
         </xsl:otherwise>
@@ -178,10 +252,12 @@
     </xsl:variable>
     <td class="{$outcome}">
       <xsl:choose>
-        <xsl:when test="$result/@outcome">
+        <xsl:when test="@outcome">
           <xsl:variable name="document">
             <xsl:call-template name="detail.document.name">
-              <xsl:with-param name="name" select="$column" />
+              <xsl:with-param name="name">
+                <xsl:value-of select="/report/runs/run[$run]/annotation[@key=$key]"/>
+              </xsl:with-param>
             </xsl:call-template>
           </xsl:variable>
           <a href="{$document}#{$id}">
@@ -195,16 +271,9 @@
     </td>
   </xsl:template>
     
-  <xsl:template name="detail">
-    <xsl:param name="id" select="'dummy'"/>
-    <xsl:for-each select="/report/results[annotation[@key=$key]=$id]/result">
-      <xsl:call-template name="result.detail"/>
-    </xsl:for-each>
-  </xsl:template>
-
   <xsl:template name="result.detail">
     <div class="{@outcome}">
-      <p class="heading"><a name="{@id}" /><xsl:value-of select="@id" /></p>
+      <p class="heading"><a name="{../@id}" /><xsl:value-of select="../@id" /></p>
     <xsl:if test="annotation[not(contains($excluded.annotations, @name))]">
     <table>
       <tbody>
