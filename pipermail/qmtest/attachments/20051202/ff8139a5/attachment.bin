Index: ChangeLog
===================================================================
RCS file: /home/qm/Repository/qm/ChangeLog,v
retrieving revision 1.696
diff -u -r1.696 ChangeLog
--- ChangeLog	17 Nov 2005 23:55:22 -0000	1.696
+++ ChangeLog	3 Dec 2005 02:57:18 -0000
@@ -1,3 +1,16 @@
+2005-12-02  Stefan Seefeld  <stefan@codesourcery.com>
+
+	* qm/__init__.py: Define new extension_path variable.
+	* qm/test/base.py: Use it to lookup QMTest extensions.
+	* qm/dist/__init__.py: Provide build infrastructure to install 
+	qmtest extensions.
+	* qm/dist/distribution.py: Likewise.
+	* qm/dist/command/__init__.py: Likewise.
+	* qm/dist/command/build_extensions.py: Likewise.
+	* qm/dist/command/install_extensions.py: Likewise.
+	* setup.py: Install it.
+	* qmdist/command/install_data.py: Likewise.
+
 2005-11-17  Mark Mitchell  <mark@codesourcery.com>
 
 	* qm/test/classes/dejagnu_stream.py
Index: setup.py
===================================================================
RCS file: /home/qm/Repository/qm/setup.py,v
retrieving revision 1.17
diff -u -r1.17 setup.py
--- setup.py	14 Sep 2005 13:24:45 -0000	1.17
+++ setup.py	3 Dec 2005 02:57:18 -0000
@@ -113,6 +113,8 @@
                 'check': check},
 
       packages=('qm',
+                'qm/dist',
+                'qm/dist/command',
                 'qm/external',
                 'qm/external/DocumentTemplate',
                 'qm/test',
Index: qm/__init__.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/__init__.py,v
retrieving revision 1.14
diff -u -r1.14 __init__.py
--- qm/__init__.py	6 Jun 2005 19:00:49 -0000	1.14
+++ qm/__init__.py	3 Dec 2005 02:57:18 -0000
@@ -41,6 +41,7 @@
         # On non-Windows platforms, the values written out at
         # installation time are accurate.
         from qm.config import data_dir
+        from qm.config import extension_path
     else:
         # On Windows, Distutils does a mock installation and then
         # creates a binary installer.  Unfortunately, at the time
@@ -49,11 +50,13 @@
         # config.py are incorrect.  The value given below corresponds
         # to the behavior of the binary installer.
         data_dir = os.path.join("share", "qm")
+        extension_path = os.path.join("share", "qm", "site-extensions")
 except:
     # If qm.config was not available, we are running out of the source tree.
     common.is_installed = 0
     from qm.__version import version, version_info
     data_dir = "share"
+    extension_path = os.path.join("test", "classes")
     
 ########################################################################
 # Local Variables:
Index: qm/dist/__init__.py
===================================================================
RCS file: qm/dist/__init__.py
diff -N qm/dist/__init__.py
Index: qm/dist/distribution.py
===================================================================
RCS file: qm/dist/distribution.py
diff -N qm/dist/distribution.py
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ qm/dist/distribution.py	3 Dec 2005 02:57:18 -0000
@@ -0,0 +1,43 @@
+########################################################################
+#
+# File:   setup.py
+# Author: Stefan Seefeld
+# Date:   2005-11-16
+#
+# Contents:
+#   Distribution class adding 'install_extensions' command.
+#
+# Copyright (c) 2005 by CodeSourcery, LLC.  All rights reserved. 
+#
+# For license terms see the file COPYING.
+#
+########################################################################
+
+########################################################################
+# Imports
+########################################################################
+
+from distutils import dist
+from qm.dist.command.build_extensions import build_extensions
+from qm.dist.command.install_extensions import install_extensions
+
+class Distribution(dist.Distribution):
+
+
+    def __init__(self, attrs=None):
+
+        # Set up the Distribution class to make it aware of the additional
+        # commands. First we need to add an attribute so setup() can pass
+        # a 'qmtest_extensions' parameter.
+        self.qmtest_extensions = None
+        dist.Distribution.__init__(self, attrs)
+        # Now add our own commands to the list.
+        self.cmdclass['build_extensions'] = build_extensions
+        self.cmdclass['install_extensions'] = install_extensions
+
+        # Register the command as a sub-command of 'install'
+        def has_extensions(cmd): return self.qmtest_extensions 
+        build = self.get_command_class('build')
+        build.sub_commands.append(('build_extensions', has_extensions))
+        install = self.get_command_class('install')
+        install.sub_commands.append(('install_extensions', has_extensions))
Index: qm/dist/command/__init__.py
===================================================================
RCS file: qm/dist/command/__init__.py
diff -N qm/dist/command/__init__.py
Index: qm/dist/command/build_extensions.py
===================================================================
RCS file: qm/dist/command/build_extensions.py
diff -N qm/dist/command/build_extensions.py
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ qm/dist/command/build_extensions.py	3 Dec 2005 02:57:18 -0000
@@ -0,0 +1,66 @@
+########################################################################
+#
+# File:   build_extensions.py
+# Author: Stefan Seefeld
+# Date:   2005-11-16
+#
+# Contents:
+#   Command to build qmtest extensions.
+#
+# Copyright (c) 2005 by CodeSourcery, LLC.  All rights reserved. 
+#
+# For license terms see the file COPYING.
+#
+########################################################################
+
+########################################################################
+# Imports
+########################################################################
+
+import qm.xmlutil
+from distutils.command.build_py import build_py
+from distutils.util import get_platform
+import os, sys, dircache
+
+########################################################################
+# Classes
+########################################################################
+
+class build_extensions(build_py):
+    """build extension files."""
+
+    description = "build qmtest extension classes."
+
+    def finalize_options(self):
+
+        b = self.distribution.get_command_obj('build')
+        b.ensure_finalized()
+        base = b.build_base
+
+        build_py.finalize_options(self)
+
+        self.build_dir = os.path.join(base, 'ext')
+        if self.distribution.ext_modules:
+            plat_specifier = ".%s-%s" % (get_platform(), sys.version[0:3])
+            self.build_dir += plat_specifier
+
+
+        self.extensions = self.distribution.qmtest_extensions
+
+
+    def get_input(self):
+        """Return all files containing extension classes."""
+    
+        files = [os.path.join(self.extensions, f)
+                 for f in dircache.listdir(self.extensions)
+                 if f.endswith('.py') or f == 'classes.qmc']
+        return files
+    
+
+    def run(self):
+
+        self.mkpath(self.build_dir)
+        for f in self.get_input():
+            basename = os.path.basename(f)
+            self.copy_file(f, os.path.join(self.build_dir, basename),
+                           preserve_mode=0)
Index: qm/dist/command/install_extensions.py
===================================================================
RCS file: qm/dist/command/install_extensions.py
diff -N qm/dist/command/install_extensions.py
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ qm/dist/command/install_extensions.py	3 Dec 2005 02:57:18 -0000
@@ -0,0 +1,124 @@
+########################################################################
+#
+# File:   install_extensions.py
+# Author: Stefan Seefeld
+# Date:   2005-11-16
+#
+# Contents:
+#   Command to install qmtest extensions.
+#
+# Copyright (c) 2005 by CodeSourcery, LLC.  All rights reserved. 
+#
+# For license terms see the file COPYING.
+#
+########################################################################
+
+########################################################################
+# Imports
+########################################################################
+
+import qm.xmlutil
+from distutils.command.install_lib import install_lib
+import os, dircache, xml
+
+########################################################################
+# Classes
+########################################################################
+
+def _compare_files(a, b):
+    """Compare the content of two files.
+
+    'a' -- Filename of first file to be compared.
+
+    'b' -- Filename of second file to be compared.
+
+    returns -- True if both files have the same content, False otherwise."""
+
+    file_a, file_b = open(a, 'r'), open(b, 'r')
+    for line in file_a:
+        if line != file_b.readline():
+            return False
+    if file_b.readline():
+        return False
+    return True
+
+
+class install_extensions(install_lib):
+    """Install extension files."""
+
+    description = "install qmtest extension classes."
+
+
+    def finalize_options(self):
+
+        if not self.install_dir:
+            i = self.distribution.get_command_obj('install')
+            i.ensure_finalized()
+            prefix = i.root or i.prefix
+            self.install_dir = os.path.join(prefix, qm.extension_path)
+        install_lib.finalize_options(self)
+
+        b = self.distribution.get_command_obj('build_extensions')
+        b.ensure_finalized()
+        self.build_dir = b.build_dir
+
+
+    def run(self):
+
+        # Make sure we have built everything we need first
+        self.run_command('build_extensions')
+
+        if not os.path.isdir(self.install_dir):
+            self.mkpath(self.install_dir)
+        if not os.path.exists(os.path.join(self.install_dir, 'classes.qmc')):
+            # This is the first time extensions are installed there.
+            self.copy_tree(self.build_dir, self.install_dir)
+        else:
+            # Test that to-be-copied modules don't overwrite existing ones:
+            old_files = [f for f in dircache.listdir(self.install_dir)
+                         if f.endswith('.py')]
+            new_files = [f for f in dircache.listdir(self.build_dir)
+                         if f.endswith('.py') and f != '__init__.py']
+            overlap = []
+            for f in new_files:
+                if f in old_files:
+                    # Don't complain if both files are identical.
+                    if not _compare_files(os.path.join(self.build_dir, f),
+                                          os.path.join(self.install_dir, f)):
+                        overlap.append(f)
+            if overlap:
+                print "Error: The following extension files already exist:"
+                for o in overlap:
+                    print "       %s"%o
+                return
+            # Copy all modules to the install directory.
+            for f in new_files:
+                self.copy_file(os.path.join(self.build_dir, f),
+                               os.path.join(self.install_dir, f),
+                               preserve_mode=0)
+            
+            # Carefully merge the new extensions into an existing repository.
+            old_qmc = qm.xmlutil.load_xml_file(os.path.join(self.install_dir,
+                                                            'classes.qmc'))
+            old_root = old_qmc.documentElement
+
+            new_qmc = qm.xmlutil.load_xml_file(os.path.join(self.build_dir,
+                                                            'classes.qmc'))
+            new_root = new_qmc.documentElement
+
+            for ext in new_root.getElementsByTagName("class"):
+                # If this entry already exists in the repository, skip it.
+                name = ext.getAttribute("name")
+                entries = [c for c in old_root.childNodes
+                           if c.nodeType == xml.dom.Node.ELEMENT_NODE and
+                           c.tagName == "class" and
+                           c.getAttribute("name") == name]
+                if not entries:
+                    old_root.appendChild(ext)
+                    old_root.appendChild(old_qmc.createTextNode('\n'))
+            # Write new repository file.
+            old_qmc.writexml(open(os.path.join(self.install_dir,
+                                               'tmp-classes.qmc'), 'w'))
+            # If that worked, update the original one.
+            os.rename(os.path.join(self.install_dir, 'tmp-classes.qmc'),
+                      os.path.join(self.install_dir, 'classes.qmc'))
Index: qm/test/base.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/base.py,v
retrieving revision 1.103
diff -u -r1.103 base.py
--- qm/test/base.py	24 Oct 2005 07:14:26 -0000	1.103
+++ qm/test/base.py	3 Dec 2005 02:57:19 -0000
@@ -84,7 +84,9 @@
     2. Those directories specified by the 'GetClassPaths' method on the
        test database -- unless 'kind' is 'database'.
 
-    3. The directories containing classes that come with QMTest.
+    3. The directory specified by config.extension_path.
+
+    4. The directories containing classes that come with QMTest.
 
     By placing the 'QMTEST_CLASS_PATH' directories first, users can
     override test classes with standard names."""
@@ -113,6 +115,9 @@
         dirs.append(qm.test.database.get_configuration_directory
                     (database_path))
 
+    # Search qmtest's own site-extensions directory.
+    dirs.append(os.path.join(qm.prefix, qm.extension_path))
+
     dirs.append(qm.common.get_lib_directory('test', 'classes'))
 
     return dirs
Index: qmdist/command/install_data.py
===================================================================
RCS file: /home/qm/Repository/qm/qmdist/command/install_data.py,v
retrieving revision 1.8
diff -u -r1.8 install_data.py
--- qmdist/command/install_data.py	6 Jun 2005 19:00:49 -0000	1.8
+++ qmdist/command/install_data.py	3 Dec 2005 02:57:20 -0000
@@ -19,9 +19,8 @@
 
 from   distutils.command import install_data as base
 import glob
-import os
+import os, sys
 from   qmdist.command import get_relative_path
-from   types import StringType
 
 ########################################################################
 # Classes
@@ -39,7 +38,7 @@
         # Expand glob expressions in 'data_files'.
         new_data_files = []
         for f in self.data_files:
-            if type(f) == StringType:
+            if type(f) == str:
                 f = glob.glob(f)
             else:
                 dir, fs = f
@@ -59,7 +58,6 @@
         
         i = self.distribution.get_command_obj('install')
         il = self.distribution.get_command_obj('install_lib')
-
         config = os.path.join(il.install_dir, "qm", "config.py")
         self.announce("generating %s" %(config))
         outf = open(config, "w")
@@ -71,6 +69,12 @@
         data_dir = os.path.join(self.install_dir, "share", "qm")
         outf.write("data_dir='%s'\n"
                    % get_relative_path (prefix, data_dir))
+        extension_dir = os.path.join(self.install_dir,
+                                     "share",
+                                     "qm",
+                                     "site-extensions-%d.%d"%sys.version_info[:2])
+        outf.write("extension_path='%s'\n"
+                   % get_relative_path (prefix, extension_dir))
 
         outf.close()
         self.outfiles.append(config)
