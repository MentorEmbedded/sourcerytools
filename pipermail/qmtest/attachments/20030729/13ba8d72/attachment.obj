2003-07-29  Mark Mitchell  <mark@codesourcery.com>

	* GNUmakefile.in (RELLIBDIR): Set correctly under Windows.
	(PYTHON_PKG_PREFIX): Likewise.
	(SCRIPTS): Update generation of Windows batch files accordingly.
	(scripts-install): Robustify.
	* install-sh: Update to newer version.
	* install.bat: Remove.
	* qm/setup.py (find_packages_r): Fix typo.
	* qm/fields.py (SetField.FormatValueAsHtml): Do not generate empty
	tables.
	(SetField.ParseFormValue): Update accordingly.
	* qm/web.py (WebRequestHandler.do_GET): Simplify.
	(WebRequestHandler.do_POST): Likewise.
	(make_select): Correct HTML generation.
	* qm/test/.cvsignore: Add qmtest.bat.
	* qm/test/web/web.py (QMTestServer.HandleSubmitItem): Generate
	valid URLs for next submission when redisplaying.

Index: GNUmakefile.in
===================================================================
RCS file: /home/qm/Repository/qm/GNUmakefile.in,v
retrieving revision 1.22
diff -c -5 -p -r1.22 GNUmakefile.in
*** GNUmakefile.in	24 Jul 2003 23:55:22 -0000	1.22
--- GNUmakefile.in	29 Jul 2003 20:12:25 -0000
*************** INSTALLSHAREDIR	= @datadir@/qm
*** 106,124 ****
  INSTALLDOCDIR   = @datadir@/doc/qm
  INSTALLINCDIR   = @includedir@
  
  ifneq ($(PYTHON_PLATFORM),win32)
  NATPREFIX       := $(prefix)
  else
! NATPREFIX       := $(shell cygpath -a -w $(prefix))
  endif
  
- PYTHON_PKG_PREFIX := $(shell $(PYTHON) -c "import distutils.sysconfig; print distutils.sysconfig.get_python_lib(prefix='$(NATPREFIX)')")
- 
  # Distutils requires relative paths on Windows.  For consistency,
  # we use the same technique everywhere.
- RELLIBDIR := $(shell expr "$(PYTHON_PKG_PREFIX)" : '$(NATPREFIX)\(.*\)')
  RELSHAREDIR := $(shell expr "$(INSTALLSHAREDIR)" : '$(prefix)\(.*\)')
  RELINCDIR := $(shell expr "$(INSTALLINCDIR)" : '$(prefix)\(.*\)')
  # Depending on how the user typed their prefix, there may now be slashes
  # left at the beginning of the supposedly relative paths, so we remove
  # those:
--- 106,125 ----
  INSTALLDOCDIR   = @datadir@/doc/qm
  INSTALLINCDIR   = @includedir@
  
  ifneq ($(PYTHON_PLATFORM),win32)
  NATPREFIX       := $(prefix)
+ PYTHON_PKG_PREFIX := $(shell $(PYTHON) -c "import distutils.sysconfig; print distutils.sysconfig.get_python_lib(prefix='$(NATPREFIX)')")
+ RELLIBDIR := $(shell expr "$(PYTHON_PKG_PREFIX)" : '$(NATPREFIX)\(.*\)')
  else
! NATPREFIX       := $(shell cygpath -a -w "$(prefix)")
! PYTHON_PKG_PREFIX := $(NATPREFIX)\lib
! RELLIBDIR       := lib
  endif
  
  # Distutils requires relative paths on Windows.  For consistency,
  # we use the same technique everywhere.
  RELSHAREDIR := $(shell expr "$(INSTALLSHAREDIR)" : '$(prefix)\(.*\)')
  RELINCDIR := $(shell expr "$(INSTALLINCDIR)" : '$(prefix)\(.*\)')
  # Depending on how the user typed their prefix, there may now be slashes
  # left at the beginning of the supposedly relative paths, so we remove
  # those:
*************** all: \
*** 158,181 ****
  $(PYTHON_PACKAGES):
  	cd $@ && $(PYTHON) ./setup.py -q build
  
  # Generate executable scripts.
  ifneq ($(PYTHON_PLATFORM),win32)
! $(SCRIPTS): qm/qm.sh
  	rm -rf $@
  	sed -e "s#@@@RELLIBDIR@@@#$(RELLIBDIR)/qm#" < qm/qm.sh > $@
  	chmod a-w $@
  	chmod a+x $@
  else
  PYTHONEXE = `@PYTHON@ -c "import sys; print sys.prefix"`\\python
! $(SCRIPTS): 
  	rm -rf $@
  	echo -e "@echo off\r" > $@
  	echo -e "set QM_HOME=C:\\progra~1\qm\r" >> $@
  	echo -e "set QM_BUILD=0\r" >> $@
  	echo -n "$(PYTHONEXE)" \
!                  \"%QM_HOME%\\lib\\qm\\$(subst /,\\,$(basename $@)).py\" \
            >> $@
  	echo -e " %1 %2 %3 %4 %5 %6 %7 %8 %9\r" >> $@
  endif
  
  $(DTD_CATALOG): $(DTDS)
--- 159,184 ----
  $(PYTHON_PACKAGES):
  	cd $@ && $(PYTHON) ./setup.py -q build
  
  # Generate executable scripts.
  ifneq ($(PYTHON_PLATFORM),win32)
! $(SCRIPTS): qm/qm.sh GNUmakefile
  	rm -rf $@
  	sed -e "s#@@@RELLIBDIR@@@#$(RELLIBDIR)/qm#" < qm/qm.sh > $@
  	chmod a-w $@
  	chmod a+x $@
  else
  PYTHONEXE = `@PYTHON@ -c "import sys; print sys.prefix"`\\python
! $(SCRIPTS): GNUmakefile
  	rm -rf $@
  	echo -e "@echo off\r" > $@
  	echo -e "set QM_HOME=C:\\progra~1\qm\r" >> $@
  	echo -e "set QM_BUILD=0\r" >> $@
+ 	echo -e "set QM_TRUE_LIBDIR=%QM_HOME%\\$(RELLIBDIR)\\qm\r" >> $@
+ 	echo -e "set PYTHONPATH=%C:\\Program Files\\QM\\$(RELLIBDIR);%PYTHONPATH%\r" >> $@
  	echo -n "$(PYTHONEXE)" \
!                  \"%QM_HOME%\\$(RELLIBDIR)\\$(subst /,\\,$(basename $@)).py\" \
            >> $@
  	echo -e " %1 %2 %3 %4 %5 %6 %7 %8 %9\r" >> $@
  endif
  
  $(DTD_CATALOG): $(DTDS)
*************** endif
*** 377,387 ****
  .PHONY: scripts-install
  
  scripts-install:
  	$(INSTALL_DIR) "$(INSTALLBINDIR)"
  	for script in $(SCRIPTS); do \
! 	  $(INSTALL_SCRIPT) $$script "$(INSTALLBINDIR)"; \
  	done
  
  # Install the lib directory.
  
  .PHONY: lib-install
--- 380,390 ----
  .PHONY: scripts-install
  
  scripts-install:
  	$(INSTALL_DIR) "$(INSTALLBINDIR)"
  	for script in $(SCRIPTS); do \
! 	  $(INSTALL_SCRIPT) "$$script" "$(INSTALLBINDIR)"; \
  	done
  
  # Install the lib directory.
  
  .PHONY: lib-install
Index: install-sh
===================================================================
RCS file: /home/qm/Repository/qm/install-sh,v
retrieving revision 1.4
diff -c -5 -p -r1.4 install-sh
*** install-sh	11 Dec 2001 07:29:22 -0000	1.4
--- install-sh	29 Jul 2003 20:12:25 -0000
***************
*** 1,21 ****
  #!/bin/sh
  #
  # install - install a program, script, or datafile
- # This comes from X11R5 (mit/util/scripts/install.sh).
  #
! # Copyright 1991 by the Massachusetts Institute of Technology
  #
! # Permission to use, copy, modify, distribute, and sell this software and its
! # documentation for any purpose is hereby granted without fee, provided that
! # the above copyright notice appear in all copies and that both that
! # copyright notice and this permission notice appear in supporting
! # documentation, and that the name of M.I.T. not be used in advertising or
! # publicity pertaining to distribution of the software without specific,
! # written prior permission.  M.I.T. makes no representations about the
! # suitability of this software for any purpose.  It is provided "as is"
! # without express or implied warranty.
  #
  # Calling this script install-sh is preferred over install.sh, to prevent
  # `make' implicit rules from creating a file called install from it
  # when there is no Makefile.
  #
--- 1,39 ----
  #!/bin/sh
  #
  # install - install a program, script, or datafile
  #
! # This originates from X11R5 (mit/util/scripts/install.sh), which was
! # later released in X11R6 (xc/config/util/install.sh) with the
! # following copyright and license.
  #
! # Copyright (C) 1994 X Consortium
! #
! # Permission is hereby granted, free of charge, to any person obtaining a copy
! # of this software and associated documentation files (the "Software"), to
! # deal in the Software without restriction, including without limitation the
! # rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
! # sell copies of the Software, and to permit persons to whom the Software is
! # furnished to do so, subject to the following conditions:
! #
! # The above copyright notice and this permission notice shall be included in
! # all copies or substantial portions of the Software.
! #
! # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
! # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
! # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
! # X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
! # AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNEC-
! # TION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
! #
! # Except as contained in this notice, the name of the X Consortium shall not
! # be used in advertising or otherwise to promote the sale, use or other deal-
! # ings in this Software without prior written authorization from the X Consor-
! # tium.
! #
! #
! # FSF changes to this file are in the public domain.
  #
  # Calling this script install-sh is preferred over install.sh, to prevent
  # `make' implicit rules from creating a file called install from it
  # when there is no Makefile.
  #
*************** src=""
*** 54,64 ****
  dst=""
  dir_arg=""
  
  while [ x"$1" != x ]; do
      case $1 in
! 	-c) instcmd="$cpprog"
  	    shift
  	    continue;;
  
  	-d) dir_arg=true
  	    shift
--- 72,82 ----
  dst=""
  dir_arg=""
  
  while [ x"$1" != x ]; do
      case $1 in
! 	-c) instcmd=$cpprog
  	    shift
  	    continue;;
  
  	-d) dir_arg=true
  	    shift
*************** while [ x"$1" != x ]; do
*** 77,87 ****
  	-g) chgrpcmd="$chgrpprog $2"
  	    shift
  	    shift
  	    continue;;
  
! 	-s) stripcmd="$stripprog"
  	    shift
  	    continue;;
  
  	-t=*) transformarg=`echo $1 | sed 's/-t=//'`
  	    shift
--- 95,105 ----
  	-g) chgrpcmd="$chgrpprog $2"
  	    shift
  	    shift
  	    continue;;
  
! 	-s) stripcmd=$stripprog
  	    shift
  	    continue;;
  
  	-t=*) transformarg=`echo $1 | sed 's/-t=//'`
  	    shift
*************** while [ x"$1" != x ]; do
*** 104,251 ****
      esac
  done
  
  if [ x"$src" = x ]
  then
! 	echo "install:	no input file specified"
  	exit 1
  else
! 	true
  fi
  
  if [ x"$dir_arg" != x ]; then
  	dst=$src
  	src=""
! 	
! 	if [ -d $dst ]; then
  		instcmd=:
  		chmodcmd=""
  	else
! 		instcmd=mkdir
  	fi
  else
  
  # Waiting for this to be detected by the "$instcmd $src $dsttmp" command
! # might cause directories to be created, which would be especially bad 
  # if $src (and thus $dsttmp) contains '*'.
  
! 	if [ -f $src -o -d $src ]
  	then
! 		true
  	else
! 		echo "install:  $src does not exist"
  		exit 1
  	fi
! 	
  	if [ x"$dst" = x ]
  	then
! 		echo "install:	no destination specified"
  		exit 1
  	else
! 		true
  	fi
  
  # If destination is a directory, append the input filename; if your system
  # does not like double slashes in filenames, you may need to add some logic
  
! 	if [ -d $dst ]
  	then
! 		dst="$dst"/`basename $src`
  	else
! 		true
  	fi
  fi
  
  ## this sed command emulates the dirname command
! dstdir=`echo $dst | sed -e 's,[^/]*$,,;s,/$,,;s,^$,.,'`
  
  # Make sure that the destination directory exists.
  #  this part is taken from Noah Friedman's mkinstalldirs script
  
  # Skip lots of stat calls in the usual case.
  if [ ! -d "$dstdir" ]; then
! defaultIFS='	
! '
! IFS="${IFS-${defaultIFS}}"
  
! oIFS="${IFS}"
  # Some sh's can't handle IFS=/ for some reason.
  IFS='%'
! set - `echo ${dstdir} | sed -e 's@/@%@g' -e 's@^%@/@'`
! IFS="${oIFS}"
  
  pathcomp=''
  
  while [ $# -ne 0 ] ; do
! 	pathcomp="${pathcomp}${1}"
  	shift
  
! 	if [ ! -d "${pathcomp}" ] ;
          then
! 		$mkdirprog "${pathcomp}"
  	else
! 		true
  	fi
  
! 	pathcomp="${pathcomp}/"
  done
  fi
  
  if [ x"$dir_arg" != x ]
  then
! 	$doit $instcmd $dst &&
  
! 	if [ x"$chowncmd" != x ]; then $doit $chowncmd $dst; else true ; fi &&
! 	if [ x"$chgrpcmd" != x ]; then $doit $chgrpcmd $dst; else true ; fi &&
! 	if [ x"$stripcmd" != x ]; then $doit $stripcmd $dst; else true ; fi &&
! 	if [ x"$chmodcmd" != x ]; then $doit $chmodcmd $dst; else true ; fi
  else
  
  # If we're going to rename the final executable, determine the name now.
  
! 	if [ x"$transformarg" = x ] 
  	then
! 		dstfile=`basename $dst`
  	else
! 		dstfile=`basename $dst $transformbasename | 
  			sed $transformarg`$transformbasename
  	fi
  
  # don't allow the sed command to completely eliminate the filename
  
! 	if [ x"$dstfile" = x ] 
  	then
! 		dstfile=`basename $dst`
  	else
! 		true
  	fi
  
! # Make a temp file name in the proper directory.
  
! 	dsttmp=$dstdir/#inst.$$#
  
! # Move or copy the file name to the temp name
  
! 	$doit $instcmd $src $dsttmp &&
  
! 	trap "rm -f ${dsttmp}" 0 &&
  
  # and set any options; do chmod last to preserve setuid bits
  
  # If any of these fail, we abort the whole thing.  If we want to
  # ignore errors from any of these, just make sure not to ignore
  # errors from the above "$doit $instcmd $src $dsttmp" command.
  
! 	if [ x"$chowncmd" != x ]; then $doit $chowncmd $dsttmp; else true;fi &&
! 	if [ x"$chgrpcmd" != x ]; then $doit $chgrpcmd $dsttmp; else true;fi &&
! 	if [ x"$stripcmd" != x ]; then $doit $stripcmd $dsttmp; else true;fi &&
! 	if [ x"$chmodcmd" != x ]; then $doit $chmodcmd $dsttmp; else true;fi &&
  
  # Now rename the file to the real destination.
  
! 	$doit $rmcmd -f $dstdir/$dstfile &&
! 	$doit $mvcmd $dsttmp $dstdir/$dstfile 
  
  fi &&
  
  
! exit 0
--- 122,294 ----
      esac
  done
  
  if [ x"$src" = x ]
  then
! 	echo "$0: no input file specified" >&2
  	exit 1
  else
! 	:
  fi
  
  if [ x"$dir_arg" != x ]; then
  	dst=$src
  	src=""
! 
! 	if [ -d "$dst" ]; then
  		instcmd=:
  		chmodcmd=""
  	else
! 		instcmd=$mkdirprog
  	fi
  else
  
  # Waiting for this to be detected by the "$instcmd $src $dsttmp" command
! # might cause directories to be created, which would be especially bad
  # if $src (and thus $dsttmp) contains '*'.
  
! 	if [ -f "$src" ] || [ -d "$src" ]
  	then
! 		:
  	else
! 		echo "$0: $src does not exist" >&2
  		exit 1
  	fi
! 
  	if [ x"$dst" = x ]
  	then
! 		echo "$0: no destination specified" >&2
  		exit 1
  	else
! 		:
  	fi
  
  # If destination is a directory, append the input filename; if your system
  # does not like double slashes in filenames, you may need to add some logic
  
! 	if [ -d "$dst" ]
  	then
! 		dst=$dst/`basename "$src"`
  	else
! 		:
  	fi
  fi
  
  ## this sed command emulates the dirname command
! dstdir=`echo "$dst" | sed -e 's,[^/]*$,,;s,/$,,;s,^$,.,'`
  
  # Make sure that the destination directory exists.
  #  this part is taken from Noah Friedman's mkinstalldirs script
  
  # Skip lots of stat calls in the usual case.
  if [ ! -d "$dstdir" ]; then
! defaultIFS='
! 	'
! IFS="${IFS-$defaultIFS}"
  
! oIFS=$IFS
  # Some sh's can't handle IFS=/ for some reason.
  IFS='%'
! set - `echo "$dstdir" | sed -e 's@/@%@g' -e 's@^%@/@'`
! IFS=$oIFS
  
  pathcomp=''
  
  while [ $# -ne 0 ] ; do
! 	pathcomp=$pathcomp$1
  	shift
  
! 	if [ ! -d "$pathcomp" ] ;
          then
! 		$mkdirprog "$pathcomp"
  	else
! 		:
  	fi
  
! 	pathcomp=$pathcomp/
  done
  fi
  
  if [ x"$dir_arg" != x ]
  then
! 	$doit $instcmd "$dst" &&
  
! 	if [ x"$chowncmd" != x ]; then $doit $chowncmd "$dst"; else : ; fi &&
! 	if [ x"$chgrpcmd" != x ]; then $doit $chgrpcmd "$dst"; else : ; fi &&
! 	if [ x"$stripcmd" != x ]; then $doit $stripcmd "$dst"; else : ; fi &&
! 	if [ x"$chmodcmd" != x ]; then $doit $chmodcmd "$dst"; else : ; fi
  else
  
  # If we're going to rename the final executable, determine the name now.
  
! 	if [ x"$transformarg" = x ]
  	then
! 		dstfile=`basename "$dst"`
  	else
! 		dstfile=`basename "$dst" $transformbasename |
  			sed $transformarg`$transformbasename
  	fi
  
  # don't allow the sed command to completely eliminate the filename
  
! 	if [ x"$dstfile" = x ]
  	then
! 		dstfile=`basename "$dst"`
  	else
! 		:
  	fi
  
! # Make a couple of temp file names in the proper directory.
  
! 	dsttmp=$dstdir/_inst.$$_
! 	rmtmp=$dstdir/_rm.$$_
  
! # Trap to clean up temp files at exit.
  
! 	trap 'status=$?; rm -f "$dsttmp" "$rmtmp" && exit $status' 0
! 	trap '(exit $?); exit' 1 2 13 15
! 
! # Move or copy the file name to the temp name
  
! 	$doit $instcmd "$src" "$dsttmp" &&
  
  # and set any options; do chmod last to preserve setuid bits
  
  # If any of these fail, we abort the whole thing.  If we want to
  # ignore errors from any of these, just make sure not to ignore
  # errors from the above "$doit $instcmd $src $dsttmp" command.
  
! 	if [ x"$chowncmd" != x ]; then $doit $chowncmd "$dsttmp"; else :;fi &&
! 	if [ x"$chgrpcmd" != x ]; then $doit $chgrpcmd "$dsttmp"; else :;fi &&
! 	if [ x"$stripcmd" != x ]; then $doit $stripcmd "$dsttmp"; else :;fi &&
! 	if [ x"$chmodcmd" != x ]; then $doit $chmodcmd "$dsttmp"; else :;fi &&
! 
! # Now remove or move aside any old file at destination location.  We try this
! # two ways since rm can't unlink itself on some systems and the destination
! # file might be busy for other reasons.  In this case, the final cleanup
! # might fail but the new file should still install successfully.
! 
! {
! 	if [ -f "$dstdir/$dstfile" ]
! 	then
! 		$doit $rmcmd -f "$dstdir/$dstfile" 2>/dev/null ||
! 		$doit $mvcmd -f "$dstdir/$dstfile" "$rmtmp" 2>/dev/null ||
! 		{
! 		  echo "$0: cannot unlink or rename $dstdir/$dstfile" >&2
! 		  (exit 1); exit
! 		}
! 	else
! 		:
! 	fi
! } &&
  
  # Now rename the file to the real destination.
  
! 	$doit $mvcmd "$dsttmp" "$dstdir/$dstfile"
  
  fi &&
  
+ # The final little trick to "correctly" pass the exit status to the exit trap.
  
! {
! 	(exit 0); exit
! }
Index: install.bat
===================================================================
RCS file: install.bat
diff -N install.bat
*** install.bat	1 May 2001 06:22:16 -0000	1.1
--- /dev/null	1 Jan 1970 00:00:00 -0000
***************
*** 1,15 ****
- rem This batch file takes in two arguments. The first is the path to your
- rem python. The second is the path that you unzipped the windows files for
- rem qm into (essentially, your QM install directory). For example, you 
- rem run this file like so:
- rem C:\> install.bat C:\PROGRA~1\PYTHON C:\QM
- rem It creates the batch files to run qmtrack and qmtest and places them
- rem in the bin directory. These batch files set the QM_INSTALL_PATH that
- rem is used by setup_path.py to find the files associated with the
- rem installation.
- 
- @echo off
- echo set QM_INSTALL_PATH=%2 > BIN\QMTRACK.BAT
- echo %1\PYTHON.EXE %2\BIN\QMTRACK %%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9 >> BIN\QMTRACK.BAT
- echo set QM_INSTALL_PATH=%2 > BIN\QMTEST.BAT
- echo %1\PYTHON.EXE %2\BIN\QMTRACK %%1 %%2 %%3 %%4 %%5 %%6 %%7 %%8 %%9 >> BIN\QMTEST.BAT
--- 0 ----
Index: qm/fields.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/fields.py,v
retrieving revision 1.75
diff -c -5 -p -r1.75 fields.py
*** qm/fields.py	22 Jul 2003 17:25:13 -0000	1.75
--- qm/fields.py	29 Jul 2003 20:12:26 -0000
*************** class SetField(Field):
*** 900,937 ****
                  # In the full style, list elements one per line.
                  separator = "<br>\n"
              return string.join(formatted, separator)
  
          elif style in ["new", "edit", "hidden"]:
!             # Create a table to represent the set.
!             html = '''<table border="0" cellpadding="0" cellspacing="0">
!                         <tbody>\n'''
!             element_number = 0
!             for element in value:
!                 html += "<tr><td>"
!                 element_name = name + "_%d" % element_number
!                 checkbox_name = element_name + "_remove"
!                 if style == "edit":
!                     html += \
!                        ('''<input type="checkbox" name="%s" /></td><td>'''
!                         % checkbox_name)
!                 html += contained_field.FormatValueAsHtml(server,
!                                                           element,
!                                                           style,
!                                                           element_name)
!                 html += "</td></tr>\n"
!                 element_number += 1
!             html += "</tbody></table>\n"
              if style == "edit":
                  # The action field is used to keep track of whether the
                  # "Add" or "Remove" button has been pushed.  It would be
                  # much nice if we could use JavaScript to update the
                  # table, but Netscape 4, and even Mozilla 1.0, do not
                  # permit that.  Therefore, we have to go back to the server.
                  action_field \
!                     = '''<input type="hidden" name="%s" value=""
!                             default_value=""  />''' % name
                  add_button \
                      = '''<input type="button" value="Add Another"
                              onclick="%s.value = 'add'; submit();" />''' \
                        % name
                  remove_button \
--- 900,942 ----
                  # In the full style, list elements one per line.
                  separator = "<br>\n"
              return string.join(formatted, separator)
  
          elif style in ["new", "edit", "hidden"]:
!             html = ""
!             # Create a table to represent the set -- but only if the set is
! 	    # non-empty.  A table with no body is invalid HTML.
! 	    if value:
! 		html += '''<table border="0" cellpadding="0" cellspacing="0">
! 			    <tbody>\n'''
! 		element_number = 0
! 		for element in value:
! 		    html += "<tr><td>"
! 		    element_name = name + "_%d" % element_number
! 		    checkbox_name = element_name + "_remove"
! 		    if style == "edit":
! 			html += \
! 			   ('''<input type="checkbox" name="%s" /></td><td>'''
! 			    % checkbox_name)
! 		    html += contained_field.FormatValueAsHtml(server,
! 							      element,
! 							      style,
! 							      element_name)
! 		    html += "</td></tr>\n"
! 		    element_number += 1
! 		html += "</tbody></table>\n"
              if style == "edit":
                  # The action field is used to keep track of whether the
                  # "Add" or "Remove" button has been pushed.  It would be
                  # much nice if we could use JavaScript to update the
                  # table, but Netscape 4, and even Mozilla 1.0, do not
                  # permit that.  Therefore, we have to go back to the server.
                  action_field \
!                     = '''<input type="hidden" name="%s" value="" />''' % name
!                 count_field \
!                     = ('<input type="hidden" name="%s_count" value="%d" />'
! 	               % (name, len(value)))
                  add_button \
                      = '''<input type="button" value="Add Another"
                              onclick="%s.value = 'add'; submit();" />''' \
                        % name
                  remove_button \
*************** class SetField(Field):
*** 942,952 ****
                      = ('''<table border="0" cellpadding="0" cellspacing="0">
                              <tbody>\n'''
                         + " <tr><td>" + add_button + "</td></tr>\n"
                         + " <tr><td>" + remove_button + "</td></tr>\n"
                         + "</tbody></table>")
!                 html += action_field + button_table
              return html
  
  
      def MakeDomNodeForValue(self, value, document):
  
--- 947,957 ----
                      = ('''<table border="0" cellpadding="0" cellspacing="0">
                              <tbody>\n'''
                         + " <tr><td>" + add_button + "</td></tr>\n"
                         + " <tr><td>" + remove_button + "</td></tr>\n"
                         + "</tbody></table>")
!                 html += action_field + "\n" + count_field + "\n" + button_table
              return html
  
  
      def MakeDomNodeForValue(self, value, document):
  
*************** class SetField(Field):
*** 987,1010 ****
          action = request[name]
  
          # Loop over the entries for each of the elements, adding them to
          # the set.
          element = 0
!         while 1:
              element_name = name + "_%d" % element
-             if not request.has_key(element_name):
-                 break
              if not (action == "remove"
                      and request.get(element_name + "_remove") == "on"):
                  v, r = contained_field.ParseFormValue(request,
                                                        element_name,
                                                        attachment_store)
                  values.append(v)
                  if r:
                      redisplay = 1
              element += 1
! 
          # Remove entries from the request that might cause confusion
          # when the page is redisplayed.
          names = []
          for n, v in request.items():
              if n[:len(name)] == name:
--- 992,1013 ----
          action = request[name]
  
          # Loop over the entries for each of the elements, adding them to
          # the set.
          element = 0
! 	for element in xrange(int(request[name + "_count"])):
              element_name = name + "_%d" % element
              if not (action == "remove"
                      and request.get(element_name + "_remove") == "on"):
                  v, r = contained_field.ParseFormValue(request,
                                                        element_name,
                                                        attachment_store)
                  values.append(v)
                  if r:
                      redisplay = 1
              element += 1
! 	
          # Remove entries from the request that might cause confusion
          # when the page is redisplayed.
          names = []
          for n, v in request.items():
              if n[:len(name)] == name:
Index: qm/setup.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/setup.py,v
retrieving revision 1.3
diff -c -5 -p -r1.3 setup.py
*** qm/setup.py	4 Jan 2002 00:07:53 -0000	1.3
--- qm/setup.py	29 Jul 2003 20:12:26 -0000
*************** def find_packages_r(packages, dirname, n
*** 41,51 ****
          # Replace a leading "." with "qm".
          d = "qm" + dirname[1:]
          # Replace path separators with periods.
          d = string.replace(d, os.sep, ".")
          if os.altsep:
!             d = string.replace(dirname, os.altsep, ".")
          packages.append(d)
      # Exclude directories named "build"; they are created by Distutils.
      if "build" in names:
          names.remove("build")
  
--- 41,51 ----
          # Replace a leading "." with "qm".
          d = "qm" + dirname[1:]
          # Replace path separators with periods.
          d = string.replace(d, os.sep, ".")
          if os.altsep:
!             d = string.replace(d, os.altsep, ".")
          packages.append(d)
      # Exclude directories named "build"; they are created by Distutils.
      if "build" in names:
          names.remove("build")
  
Index: qm/web.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/web.py,v
retrieving revision 1.73
diff -c -5 -p -r1.73 web.py
*** qm/web.py	6 Jun 2003 17:45:40 -0000	1.73
--- qm/web.py	29 Jul 2003 20:12:27 -0000
*************** class WebRequestHandler(SimpleHTTPServer
*** 430,445 ****
          # Build a request object and hand it off.
          request = apply(WebRequest, (script_url, ), fields)
          # Store the client's IP address with the request.
          request.client_address = self.client_address[0]
          self.__HandleRequest(request)
-         self.wfile.flush()
-         try:
-             self.connection.shutdown(1)
-         except:
-             # Probably a network error.
-             pass
  
  
      def do_POST(self):
          """Process HTTP POST requests."""
          
--- 430,439 ----
*************** class WebRequestHandler(SimpleHTTPServer
*** 470,485 ****
              self.__HandleRequest(request)
          else:
              self.send_response(400,
                                 "Unexpected request (POST of %s)."
                                 % content_type)
-         try:
-             self.wfile.flush()
-             self.connection.shutdown(1)
-         except:
-             # Probably a network error.
-             pass
  
  
      def __HandleScriptRequest(self, request):
          try:
              # Execute the script.  The script returns the HTML
--- 464,473 ----
*************** def make_select(field_name,
*** 2286,2296 ****
      # Generate an '<option>' element for each item.
      for item in items:
          # Specify the 'select' attribute if this item represents the
          # default value.
          if item == default_value:
!             is_selected = "selected"
          else:
              is_selected = ""
          result = result + '<option value="%s" %s>%s</option>\n' \
                   % (item_to_value(item), is_selected, item_to_text(item))
      result = result + '</select>\n'
--- 2274,2284 ----
      # Generate an '<option>' element for each item.
      for item in items:
          # Specify the 'select' attribute if this item represents the
          # default value.
          if item == default_value:
!             is_selected = 'selected="selected"'
          else:
              is_selected = ""
          result = result + '<option value="%s" %s>%s</option>\n' \
                   % (item_to_value(item), is_selected, item_to_text(item))
      result = result + '</select>\n'
Index: qm/test/.cvsignore
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/.cvsignore,v
retrieving revision 1.4
diff -c -5 -p -r1.4 .cvsignore
*** qm/test/.cvsignore	4 Jan 2002 00:07:53 -0000	1.4
--- qm/test/.cvsignore	29 Jul 2003 20:12:27 -0000
***************
*** 1,3 ****
--- 1,4 ----
  *.pyc
  qmtest
+ qmtest.bat
  *.pyo
Index: qm/test/web/web.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/test/web/web.py,v
retrieving revision 1.74
diff -c -5 -p -r1.74 web.py
*** qm/test/web/web.py	22 Jul 2003 17:25:13 -0000	1.74
--- qm/test/web/web.py	29 Jul 2003 20:12:28 -0000
*************** from   qm.test.result import *
*** 33,42 ****
--- 33,43 ----
  from   qm.test.result_stream import *
  from   qm.test.suite import *
  import qm.web
  import string
  import StringIO
+ import sys
  import time
  
  ########################################################################
  # classes
  ########################################################################
*************** class QMTestServer(qm.web.WebServer):
*** 2295,2306 ****
              item = ResourceDescriptor(self.GetDatabase(),
                                        item_id, item_class_name, arguments)
  
          # If necessary, redisplay the form.
          if redisplay:
!             request = request.copy(url="edit-" + type)
!             return ShowItemPage(self, item, 1, 0, type, field_errors)(request)
  
          # Store it in the database.
          if type is "test":
              database.WriteTest(item)
          elif type is "resource":
--- 2296,2308 ----
              item = ResourceDescriptor(self.GetDatabase(),
                                        item_id, item_class_name, arguments)
  
          # If necessary, redisplay the form.
          if redisplay:
! 	    request = qm.web.WebRequest("edit-" + type, base=request, 
!                                         id=item_id)
! 	    return ShowItemPage(self, item, 1, 0, type, field_errors)(request)
  
          # Store it in the database.
          if type is "test":
              database.WriteTest(item)
          elif type is "resource":
