2003-09-25  Mark Mitchell  <mark@codesourcery.com>

	* qm/executable.py (Executable.Kill): New method.
	(Executable._GetChildPID): Improve documentation.
	(TimeoutExecutable): Update documentation about timeouts on
	Windows.
	(TimeoutExecutable.__init__): Do not ignore timeouts on Windows.
	(TimeoutExecutable._HandleChild): Create a monitoring thread on
	Windows.
	(TimeoutExecutable.Run): Wiat for the monitoring thread to exit.
	(TimeoutExecutable.__Monitor): New method.

Index: executable.py
===================================================================
RCS file: /home/qm/Repository/qm/qm/executable.py,v
retrieving revision 1.19
diff -c -5 -p -r1.19 executable.py
*** executable.py	15 Sep 2003 05:13:17 -0000	1.19
--- executable.py	25 Sep 2003 18:25:50 -0000
*************** class Executable(object):
*** 265,274 ****
--- 265,288 ----
  
          if sys.platform == "win32":
              return win32process.STARTUPINFO()
  
  
+     def Kill(self):
+         """Kill the child process.
+ 
+         The child process is killed in a way that does not permit an
+         orderly shutdown.  In other words, 'SIGKILL' is used under
+         UNIX, not 'SIGTERM'.  On Windows, 'TerminateProcess' is used,
+         and the exit code from the child process will be '1'."""
+         
+         if sys.platform == "win32":
+             win32process.TerminateProcess(self._GetChildPID(), 1)
+         else:
+             os.kill(signal.SIGKILL)
+ 
+                 
      def _HandleChild(self):
          """Run in the parent process after the child has been created.
  
          The child process has been spawned; its PID is avialable via
          '_GetChildPID'.  Take any actions in the parent that are
*************** class Executable(object):
*** 301,312 ****
      
  
      def _GetChildPID(self):
          """Return the process ID for the child process.
  
!         returns -- The process ID for the child process, in the native
!         operating system format."""
  
          return self.__child
      
          
      def _MakeCloseOnExec(self, fd):
--- 315,326 ----
      
  
      def _GetChildPID(self):
          """Return the process ID for the child process.
  
!         returns -- The process ID for the child process.  (On Windows,
!         the value returned is the process handle.)"""
  
          return self.__child
      
          
      def _MakeCloseOnExec(self, fd):
*************** class Executable(object):
*** 368,387 ****
  
  
  class TimeoutExecutable(Executable):
      """A 'TimeoutExecutable' runs for a limited time.
  
!     If the timer expires, the child process is killed.
! 
!     In order to implement this functionality, the child process is
!     placed into its own process group.  An additional monitoring
!     process is created whose sole job is to kill the primary child's
!     process group if the timeout expires.  Process groups are used
!     so that if the child process spawns additional processes they
!     are killed too.  A separate monitoring process is used so as not
!     to block the parent.
  
      The 'Run' method will automatically start the monitoring process.
      The 'Spawn' method does not start the monitoring process.  User's
      of 'Spawn' should invoke '_DoParent' in order to start the
      monitoring process.  Derived class '_DoParent' functions should
      call the version defined in this class."""
--- 382,410 ----
  
  
  class TimeoutExecutable(Executable):
      """A 'TimeoutExecutable' runs for a limited time.
  
!     If the timer expires, the child process is killed and
!     self.timedout is set to 1.  Otherwise, self.timedout is set to 0.
  
+     In order to implement this functionality under UNIX, the child
+     process is placed into its own process group.  An additional
+     monitoring process is created whose sole job is to kill the
+     primary child's process group if the timeout expires.  Process
+     groups are used so that if the child process spawns additional
+     processes they are killed too.  A separate monitoring process is
+     used so as not to block the parent.
+ 
+     Under Windows, a monitoring thread is created.  When the timer
+     expires, the child process is terminated.  However, the child
+     process is not placed into a separate process group, so
+     granchildren kare not terminated.  In the future, when Python
+     provides access to 'CreateJobObject' and related functions, jobs
+     will be used to provide functionality similar to UNIX process
+     groups.
+     
      The 'Run' method will automatically start the monitoring process.
      The 'Spawn' method does not start the monitoring process.  User's
      of 'Spawn' should invoke '_DoParent' in order to start the
      monitoring process.  Derived class '_DoParent' functions should
      call the version defined in this class."""
*************** class TimeoutExecutable(Executable):
*** 397,418 ****
          the 'SIGKILL' signal.)  If the 'timeout' is -2, the child is
          allowed to run forever, but when it terminates the child's
          process group is killed.
          
          If the 'timeout' is -1, this class behaves exactly like
!         'Executable'.
! 
!         At present, the 'timeout' parameter is ignored under Windows.
!         In the future, it will have the same meaning that it does on
!         UNIX systems."""
  
          super(TimeoutExecutable, self).__init__()
! 
!         if sys.platform == "win32":
!             self.__timeout = 0
!         else:
!             self.__timeout = float(timeout)
          
  
      def _InitializeChild(self):
  
          # Put the child into its own process group.  This step is
--- 420,433 ----
          the 'SIGKILL' signal.)  If the 'timeout' is -2, the child is
          allowed to run forever, but when it terminates the child's
          process group is killed.
          
          If the 'timeout' is -1, this class behaves exactly like
!         'Executable'."""
  
          super(TimeoutExecutable, self).__init__()
!         self.__timeout = float(timeout)
          
  
      def _InitializeChild(self):
  
          # Put the child into its own process group.  This step is
*************** class TimeoutExecutable(Executable):
*** 494,503 ****
--- 509,522 ----
                          select.select ([], [], [])
                  finally:
                      # Exit.  This code is in a finally clause so that
                      # we are guaranteed to get here no matter what.
                      os._exit(0)
+         elif self.__timeout >= 0 and sys.platform == "win32":
+             # Create a monitoring thread.
+             self.__monitor_thread = Thread(target = self.__Monitor)
+             self.__monitor_thread.start()
  
  
      def Run(self, arguments=[], environment = None, dir = None,
              path = None):
  
*************** class TimeoutExecutable(Executable):
*** 506,519 ****
              status = super(TimeoutExecutable, self).Run(arguments,
                                                          environment,
                                                          dir,
                                                          path)
          finally:
-             # Clean up the monitoring program; it is no longer needed.
              if self.__UseSeparateProcessGroupForChild():
                  os.kill(-self._GetChildPID(), signal.SIGKILL)
                  os.waitpid(self.__monitor_pid, 0)
                  
          return status
  
  
      def __UseSeparateProcessGroupForChild(self):
--- 525,541 ----
              status = super(TimeoutExecutable, self).Run(arguments,
                                                          environment,
                                                          dir,
                                                          path)
          finally:
              if self.__UseSeparateProcessGroupForChild():
+                 # Clean up the monitoring program; it is no longer needed.
                  os.kill(-self._GetChildPID(), signal.SIGKILL)
                  os.waitpid(self.__monitor_pid, 0)
+             elif self.__timeout >= 0 and sys.platform == "win32":
+                 # Join the monitoring thread.
+                 self.__monitor_thread.join()
                  
          return status
  
  
      def __UseSeparateProcessGroupForChild(self):
*************** class TimeoutExecutable(Executable):
*** 521,533 ****
--- 543,582 ----
  
          returns -- True if the child will be placed in its own process
          group.  In that case, a separate monitoring process will also
          be created."""
  
+         if sys.platform == "win32":
+             # In Windows 2000 (or later), we should use "jobs" by
+             # analogy with UNIX process groups.  However, that
+             # functionality is not (yet) provided by the Python Win32
+             # extensions.
+             return 0
+         
          return self.__timeout >= 0 or self.__timeout == -2
  
  
+     if sys.platform == "win32":
+ 
+         def __Monitor(self):
+             """Kill the child if the timeout expires.
+ 
+             This function is run in the monitoring thread."""
+         
+             # The timeout may be expressed as a floating-point value
+             # on UNIX, but it must be an integer number of
+             # milliseconds when passed to WaitForSingleObject.
+             timeout = int(self.__timeout * 1000)
+             # Wait for the child process to terminate or for the
+             # timer to expire.
+             result = win32event.WaitForSingleObject(self._GetChildPID(),
+                                                     timeout)
+             # If the timeout occurred, kill the child process.
+             if result == win32con.WAIT_TIMEOUT:
+                 self.Kill()
+             
+ 
  
  class RedirectedExecutable(TimeoutExecutable):
      """A 'RedirectedExecutable' redirects the standard I/O streams."""
  
      def _InitializeParent(self):
*************** class RedirectedExecutable(TimeoutExecut
*** 730,740 ****
      def _ReadStdout(self):
          """Read from the standard output pipe."""
  
          # Read some data.
          data = os.read(self._stdout_pipe[0], 64 * 1024)
! 
          if not data:
              # If there is no new data, end-of-file has been reached.
              os.close(self._stdout_pipe[0])
              self._stdout_pipe = None
          else:
--- 779,789 ----
      def _ReadStdout(self):
          """Read from the standard output pipe."""
  
          # Read some data.
          data = os.read(self._stdout_pipe[0], 64 * 1024)
!         
          if not data:
              # If there is no new data, end-of-file has been reached.
              os.close(self._stdout_pipe[0])
              self._stdout_pipe = None
          else:
