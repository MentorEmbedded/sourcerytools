	.file	"locks.c"
| GNU C (Sourcery CodeBench Lite 2011.03-98) version 4.5.2 (m68k-linux-gnu)
|	compiled by GNU C version 4.3.2, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
| GGC heuristics: --param ggc-min-expand=64 --param ggc-min-heapsize=64446
| options passed:  -fpreprocessed locks.i -mcpu=54418 -msoft-float
| -march=isac -auxbase-strip libkaffe_la-locks.o -O1 -Wall -W -Wextra
| -fno-strict-aliasing -fno-omit-frame-pointer -fverbose-asm
| options enabled:  -falign-loops -fargument-alias -fauto-inc-dec
| -fbranch-count-reg -fcommon -fcprop-registers -fdefer-pop
| -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
| -feliminate-unused-debug-types -fforward-propagate -ffunction-cse
| -fgcse-lm -fguess-branch-probability -fident -fif-conversion
| -fif-conversion2 -finline -finline-functions-called-once -fipa-pure-const
| -fipa-reference -fira-share-save-slots -fira-share-spill-slots -fivopts
| -fkeep-static-consts -fleading-underscore -fmath-errno -fmerge-constants
| -fmerge-debug-strings -fmove-loop-invariants -fpeephole
| -freg-struct-return -fsched-critical-path-heuristic
| -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
| -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
| -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fshow-column
| -fsigned-zeros -fsplit-ivs-in-unroller -fsplit-wide-types
| -fstrict-volatile-bitfields -ftoplevel-reorder -ftrapping-math -ftree-ccp
| -ftree-ch -ftree-copy-prop -ftree-copyrename -ftree-dce
| -ftree-dominator-opts -ftree-dse -ftree-forwprop -ftree-fre
| -ftree-loop-im -ftree-loop-ivcanon -ftree-loop-optimize
| -ftree-parallelize-loops= -ftree-phiprop -ftree-pta -ftree-reassoc
| -ftree-scev-cprop -ftree-sink -ftree-slp-vectorize -ftree-sra -ftree-ter
| -ftree-vect-loop-version -funit-at-a-time -fverbose-asm
| -fzero-initialized-in-bss -mdiv -mglibc

| Compiler executable checksum: f9b7a369ab6a8d2dfaed055da78a109e

	.section	.rodata.str1.1,"aMS",@progbits,1
.LC0:
	.string	"  putHeavyLock(lk=%p, th=%p)\n"
.LC1:
	.string	"locks.c"
.LC2:
	.string	"lk->in_progress == 1"
	.text
	.align	2
	.type	putHeavyLock, @function
putHeavyLock:
	link.w %fp,#0	|,
	move.l %a2,-(%sp)	|,
	move.l 8(%fp),%a2	| lk, lk
	jsr dbgGetMask	|
	btst #0,%d1	|,
	jeq .L2	|
	jsr jthread_current	|
	move.l %a0,-(%sp)	|,
	move.l %a2,-(%sp)	| lk,
	pea .LC0	|
	jsr kaffe_dprintf	|
	lea (12,%sp),%sp	|,,
.L2:
	moveq #1,%d0	|,
	cmp.l (%a2),%d0	| lk_6(D)->in_progress,
	jeq .L3	|
	pea __PRETTY_FUNCTION__.8322	|
	pea 203.w	|
	pea .LC1	|
	pea .LC2	|
	jsr __assert_fail	|
.L3:
	clr.l 100(%a2)	| lk_6(D)->hlockHolder
	moveq #1,%d0	|, __result
	clr.l %d1	| tmp45
#APP
| 206 "locks.c" 1
	1: cas.l %d0,%d1,(%a2);   jbne 1b	| __result, tmp45, lk_6(D)->in_progress
| 0 "" 2
#NO_APP
	tst.l 4(%a2)	| lk_6(D)->num_wait
	jeq .L1	|
	pea 20(%a2)	|
	jsr ksem_put	|
	addq.l #4,%sp	|,
.L1:
	move.l -4(%fp),%a2	|,
	unlk %fp	|
	rts
	.size	putHeavyLock, .-putHeavyLock
	.section	.rodata.str1.1
.LC3:
	.string	"  getHeavyLock(lk=%p, th=%p)\n"
	.text
	.align	2
	.type	getHeavyLock, @function
getHeavyLock:
	link.w %fp,#-24	|,
	movem.l #15372,(%sp)	|,
	move.l 8(%fp),%a3	| lkp, lkp
	move.l 12(%fp),%a5	| heavyLock, heavyLock
	jsr dbgGetMask	|
	btst #0,%d1	|,
	jeq .L19	|
	jsr jthread_current	|
	move.l %a0,-(%sp)	|,
	move.l (%a3),-(%sp)	|* lkp,
	pea .LC3	|
	jsr kaffe_dprintf	|
	lea (12,%sp),%sp	|,,
.L19:
	lea KGC_getMainCollector,%a4	|, tmp107
	move.l #ksem_init,%d3	|, tmp108
.L25:
	move.l (%a3),%d2	|* lkp, lk
	btst #0,%d2	|, lk
	jne .L7	|
	tst.l %a5	| heavyLock
	jeq .L8	|
	clr.l %d0	| __ret
	moveq #1,%d1	|, tmp74
#APP
| 99 "locks.c" 1
	cas.l %d0,%d1,(%a5)	| __ret, tmp74, heavyLock_14(D)->in_progress
| 0 "" 2
#NO_APP
	tst.l %d0	| __ret
	jne .L17	|
	move.l %a5,%d1	| heavyLock, D.10287
	move.b #1,%d0	|,
	or.l %d0,%d1	|, D.10287
	move.l %d2,%d0	| lk, __ret
#APP
| 109 "locks.c" 1
	cas.l %d0,%d1,(%a3)	| __ret, D.10287,* lkp
| 0 "" 2
#NO_APP
	cmp.l %d2,%d0	| lk, __ret
	jeq .L9	|
.L20:
	move.l (%a3),%d2	|* lkp, lk
	move.l %d2,%d0	| lk, __ret
#APP
| 109 "locks.c" 1
	cas.l %d0,%d1,(%a3)	| __ret, D.10287,* lkp
| 0 "" 2
#NO_APP
	cmp.l %d0,%d2	| __ret, lk
	jne .L20	|
.L9:
	jsr jthread_current	|
	move.l %a0,100(%a5)	|, heavyLock_14(D)->hlockHolder
	move.l %d2,8(%a5)	| lk, heavyLock_14(D)->holder
	jeq .L11	|
	moveq #1,%d0	|,
	move.l %d0,96(%a5)	|, heavyLock_14(D)->lockCount
	jra .L11	|
.L8:
	jsr (%a4)	| tmp107
	move.l (%a0),%a0	| D.10304_30->ops, D.10304_30->ops
	move.l 12(%a0),%a2	| D.10305_31->malloc, D.10306
	jsr (%a4)	| tmp107
	pea 34.w	|
	pea 104.w	|
	move.l %a0,-(%sp)	|,
	jsr (%a2)	| D.10306
	move.l %a0,%a2	|, newLock
	pea 20(%a0)	|
	move.l %d3,%a0	| tmp108,
	jsr (%a0)	|
	move.l %d2,8(%a2)	| lk, newLock_35->holder
	lea (16,%sp),%sp	|,,
	jeq .L12	|
	moveq #1,%d0	|,
	move.l %d0,96(%a2)	|, newLock_35->lockCount
.L12:
	move.l %a2,%d1	| newLock, tmp85
	moveq #1,%d0	|,
	or.l %d0,%d1	|, tmp85
	move.l %d2,%d0	| lk, __ret
#APP
| 135 "locks.c" 1
	cas.l %d0,%d1,(%a3)	| __ret, tmp85,* lkp
| 0 "" 2
#NO_APP
	cmp.l %d2,%d0	| lk, __ret
	jeq .L25	|
	clr.l 96(%a2)	| newLock_28->lockCount
	jra .L25	|
.L17:
	move.l %a5,%d2	| heavyLock, lk
.L7:
	moveq #-2,%d0	|,
	and.l %d2,%d0	| lk,
	move.l %d0,%a5	|, lk
#APP
| 156 "locks.c" 1
	add.l #1,4(%a5)	|, lk_47->num_wait
| 0 "" 2
#NO_APP
	clr.l %d0	| __ret
	moveq #1,%d1	|, tmp87
#APP
| 159 "locks.c" 1
	cas.l %d0,%d1,(%a5)	| __ret, tmp87, lk_47->in_progress
| 0 "" 2
#NO_APP
	tst.l %d0	| __ret
	jeq .L15	|
	lea (20,%a5),%a3	|, lk, tmp103
	lea ksem_get,%a2	|, tmp104
	moveq #1,%d2	|, tmp105
	clr.l %d3	| tmp106
.L21:
	clr.l -(%sp)	|
	clr.l -(%sp)	|
	move.l %a3,-(%sp)	| tmp103,
	jsr (%a2)	| tmp104
	move.l %d3,%d0	| tmp106, __ret
#APP
| 159 "locks.c" 1
	cas.l %d0,%d2,(%a5)	| __ret, tmp105, lk_47->in_progress
| 0 "" 2
#NO_APP
	lea (12,%sp),%sp	|,,
	tst.l %d0	| __ret
	jne .L21	|
.L15:
	jsr jthread_current	|
	move.l %a0,100(%a5)	|, lk_47->hlockHolder
#APP
| 165 "locks.c" 1
	add.l #-1,4(%a5)	|, lk_47->num_wait
| 0 "" 2
#NO_APP
.L11:
	move.l %a5,%a0	| heavyLock,
	move.l %a5,%d0	| heavyLock,
	movem.l -24(%fp),#15372	|,
	unlk %fp	|
	rts
	.size	getHeavyLock, .-getHeavyLock
	.section	.rodata.str1.1
.LC4:
	.string	"slowUnlockMutex(lk=%p, th=%p)\n"
.LC5:
	.string	"()V"
.LC6:
	.string	"java.lang.IllegalMonitorStateException"
.LC7:
	.string	"lk->lockCount > 0"
	.text
	.align	2
	.type	slowUnlockMutex, @function
slowUnlockMutex:
	link.w %fp,#0	|,
	move.l %a2,-(%sp)	|,
	move.l %d2,-(%sp)	|,
	move.l 8(%fp),%a2	| lkp, lkp
	jsr jthread_current	|
	move.l %a0,%d2	|, cur
	jsr dbgGetMask	|
	btst #0,%d1	|,
	jeq .L27	|
	jsr jthread_current	|
	move.l %a0,-(%sp)	|,
	move.l (%a2),-(%sp)	|* lkp,
	pea .LC4	|
	jsr kaffe_dprintf	|
	lea (12,%sp),%sp	|,,
.L27:
	jsr jthread_disable_stop	|
	move.l 12(%fp),-(%sp)	| heavyLock,
	move.l %a2,-(%sp)	| lkp,
	jsr getHeavyLock	|
	move.l %a0,%a2	|, lk
	addq.l #8,%sp	|,
	cmp.l 8(%a0),%d2	| lk_10->holder, cur
	jeq .L28	|
	move.l %a0,-(%sp)	| lk,
	jsr putHeavyLock	|
	jsr jthread_enable_stop	|
	pea .LC5	|
	clr.l -(%sp)	|
	clr.l -(%sp)	|
	pea .LC6	|
	jsr execute_java_constructor	|
	move.l %a0,-(%sp)	|,
	jsr throwException	|
	lea (24,%sp),%sp	|,,
.L28:
	move.l 96(%a2),%d0	| lk_10->lockCount, D.10241
	jne .L29	|
	pea __PRETTY_FUNCTION__.8345	|
	pea 298.w	|
	pea .LC1	|
	pea .LC7	|
	jsr __assert_fail	|
.L29:
	subq.l #1,%d0	|, D.10244
	move.l %d0,96(%a2)	| D.10244, lk_10->lockCount
	jeq .L30	|
	move.l %a2,-(%sp)	| lk,
	jsr putHeavyLock	|
	jsr jthread_enable_stop	|
	addq.l #4,%sp	|,
	jra .L26	|
.L30:
	move.l 12(%a2),%d0	| lk_10->mux, D.10247
	jeq .L32	|
	move.l %d0,-(%sp)	| D.10247,
	jsr jthread_get_data	|
	move.l 88(%a0),12(%a2)	| tdata_20->nextlk, lk_10->mux
	clr.l 88(%a0)	| tdata_20->nextlk
	clr.l 8(%a2)	| lk_10->holder
	pea 12(%a0)	|
	jsr ksem_put	|
	move.l %a2,-(%sp)	| lk,
	jsr putHeavyLock	|
	lea (12,%sp),%sp	|,,
	jra .L33	|
.L32:
	clr.l 8(%a2)	| lk_10->holder
	move.l %a2,-(%sp)	| lk,
	jsr putHeavyLock	|
	addq.l #4,%sp	|,
.L33:
	jsr jthread_enable_stop	|
.L26:
	move.l -8(%fp),%d2	|,
	move.l -4(%fp),%a2	|,
	unlk %fp	|
	rts
	.size	slowUnlockMutex, .-slowUnlockMutex
	.section	.rodata.str1.1
.LC8:
	.string	"slowLockMutex(lk=%p, th=%p)\n"
.LC9:
	.string	"lk->lockCount < 0xffffffff"
.LC10:
	.string	"Lockcount should be 0 for %p\n"
	.text
	.align	2
	.type	slowLockMutex, @function
slowLockMutex:
	link.w %fp,#-32	|,
	movem.l #15420,(%sp)	|,
	move.l 8(%fp),%d4	| lkp, lkp
	move.l 12(%fp),%d5	| heavyLock, heavyLock
	jsr jthread_current	|
	move.l %a0,%d2	|, cur
	jsr dbgGetMask	|
	btst #0,%d1	|,
	jeq .L35	|
	jsr jthread_current	|
	move.l %a0,-(%sp)	|,
	move.l %d4,%a0	| lkp,
	move.l (%a0),-(%sp)	|,
	pea .LC8	|
	jsr kaffe_dprintf	|
	lea (12,%sp),%sp	|,,
.L35:
	jsr jthread_disable_stop	|
	move.l %d2,-(%sp)	| cur,
	jsr jthread_get_data	|
	move.l %a0,%a3	|, tdata
	addq.l #4,%sp	|,
	lea getHeavyLock,%a4	|, tmp69
	lea putHeavyLock,%a5	|, tmp70
	move.l %a0,%d3	| tdata, tmp71
	add.l #12,%d3	|, tmp71
	lea ksem_get,%a2	|, tmp72
.L42:
	move.l %d5,-(%sp)	| heavyLock,
	move.l %d4,-(%sp)	| lkp,
	jsr (%a4)	| tmp69
	move.l 8(%a0),%d0	| lk_11->holder, D.10407
	addq.l #8,%sp	|,
	cmp.l %d0,%d2	| D.10407, cur
	jne .L36	|
	move.l 96(%a0),%d0	| lk_19->lockCount, D.10410
	moveq #-1,%d1	|,
	cmp.l %d0,%d1	| D.10410,
	jne .L37	|
	pea __PRETTY_FUNCTION__.8334	|
	pea 236.w	|
	pea .LC1	|
	pea .LC9	|
	jsr __assert_fail	|
.L37:
	addq.l #1,%d0	|, D.10410
	move.l %d0,96(%a0)	| D.10410, lk_19->lockCount
	move.l %a0,-(%sp)	| lk,
	jsr putHeavyLock	|
	jsr jthread_enable_stop	|
	addq.l #4,%sp	|,
	jra .L34	|
.L36:
	tst.l %d0	| D.10407
	jne .L39	|
	tst.l 96(%a0)	| lk_18->lockCount
	jeq .L40	|
	move.l %a0,-(%sp)	| lk,
	pea .LC10	|
	jsr kaffe_dprintf	|
	jsr abort	|
.L40:
	move.l %d2,8(%a0)	| cur, lk_18->holder
	moveq #1,%d0	|,
	move.l %d0,96(%a0)	|, lk_18->lockCount
	move.l %a0,-(%sp)	| lk,
	jsr putHeavyLock	|
	jsr jthread_enable_stop	|
	addq.l #4,%sp	|,
	jra .L34	|
.L39:
	move.l 12(%a0),88(%a3)	| lk_11->mux, tdata_9->nextlk
	move.l %d2,12(%a0)	| cur, lk_11->mux
	move.l %a0,-(%sp)	| lk,
	jsr (%a5)	| tmp70
	addq.l #4,%sp	|,
.L41:
	clr.l -(%sp)	|
	clr.l -(%sp)	|
	move.l %d3,-(%sp)	| tmp71,
	jsr (%a2)	| tmp72
	lea (12,%sp),%sp	|,,
	tst.b %d0	|
	jeq .L41	|
	jra .L42	|
.L34:
	movem.l -32(%fp),#15420	|,
	unlk %fp	|
	rts
	.size	slowLockMutex, .-slowLockMutex
	.align	2
	.globl	initLocking
	.type	initLocking, @function
initLocking:
	link.w %fp,#0	|,
	unlk %fp	|
	rts
	.size	initLocking, .-initLocking
	.align	2
	.globl	initStaticLock
	.type	initStaticLock, @function
initStaticLock:
	link.w %fp,#0	|,
	move.l 8(%fp),%a0	| slock, slock
	clr.l (%a0)	| slock_1(D)->lock
	clr.l 8(%a0)	| slock_1(D)->heavyLock.num_wait
	clr.l 100(%a0)	| slock_1(D)->heavyLock.lockCount
	clr.l 16(%a0)	| slock_1(D)->heavyLock.mux
	clr.l 20(%a0)	| slock_1(D)->heavyLock.cv
	clr.l 4(%a0)	| slock_1(D)->heavyLock.in_progress
	clr.l 12(%a0)	| slock_1(D)->heavyLock.holder
	pea 24(%a0)	|
	jsr ksem_init	|
	addq.l #4,%sp	|,
	unlk %fp	|
	rts
	.size	initStaticLock, .-initStaticLock
	.section	.rodata.str1.1
.LC11:
	.string	"slock->lock == ((void *)0) || ((iLock *)((uintp)(slock->lock) & ~(uintp)1)) == &slock->heavyLock"
.LC12:
	.string	"slock->heavyLock.lockCount == 0"
.LC13:
	.string	"slock->heavyLock.num_wait == 0"
.LC14:
	.string	"slock->heavyLock.in_progress == 0"
	.text
	.align	2
	.globl	destroyStaticLock
	.type	destroyStaticLock, @function
destroyStaticLock:
	link.w %fp,#0	|,
	move.l 8(%fp),%a0	| slock, slock
	move.l (%a0),%d0	| slock_1(D)->lock, D.10579
	jeq .L47	|
	moveq #-2,%d1	|,
	and.l %d1,%d0	|, tmp40
	move.l %a0,%d1	| slock, tmp41
	addq.l #4,%d1	|, tmp41
	cmp.l %d0,%d1	| tmp40, tmp41
	jeq .L47	|
	pea __PRETTY_FUNCTION__.8318	|
	pea 184.w	|
	pea .LC1	|
	pea .LC11	|
	jsr __assert_fail	|
.L47:
	tst.l 100(%a0)	| slock_1(D)->heavyLock.lockCount
	jeq .L48	|
	pea __PRETTY_FUNCTION__.8318	|
	pea 185.w	|
	pea .LC1	|
	pea .LC12	|
	jsr __assert_fail	|
.L48:
	tst.l 8(%a0)	| slock_1(D)->heavyLock.num_wait
	jeq .L49	|
	pea __PRETTY_FUNCTION__.8318	|
	pea 186.w	|
	pea .LC1	|
	pea .LC13	|
	jsr __assert_fail	|
.L49:
	tst.l 4(%a0)	| slock_1(D)->heavyLock.in_progress
	jeq .L50	|
	pea __PRETTY_FUNCTION__.8318	|
	pea 187.w	|
	pea .LC1	|
	pea .LC14	|
	jsr __assert_fail	|
.L50:
	pea 24(%a0)	|
	jsr ksem_destroy	|
	addq.l #4,%sp	|,
	unlk %fp	|
	rts
	.size	destroyStaticLock, .-destroyStaticLock
	.section	.rodata.str1.1
.LC15:
	.string	"slowUnlockMutexIfHeld(lkp=%p, th=%p)\n"
	.text
	.align	2
	.globl	locks_internal_slowUnlockMutexIfHeld
	.type	locks_internal_slowUnlockMutexIfHeld, @function
locks_internal_slowUnlockMutexIfHeld:
	link.w %fp,#-16	|,
	movem.l #1052,(%sp)	|,
	move.l 8(%fp),%a2	| lkp, lkp
	move.l 12(%fp),%d3	| heavyLock, heavyLock
	jsr jthread_current	|
	move.l %a0,%d2	|, cur
	jsr dbgGetMask	|
	btst #0,%d1	|,
	jeq .L52	|
	jsr jthread_current	|
	move.l %a0,-(%sp)	|,
	move.l (%a2),-(%sp)	|* lkp,
	pea .LC15	|
	jsr kaffe_dprintf	|
	lea (12,%sp),%sp	|,,
.L52:
	move.l (%a2),%d0	|* lkp, lk
	jeq .L51	|
	btst #0,%d0	|, lk
	jne .L54	|
	move.l %d2,%d0	| cur, __ret
	clr.l %d1	| tmp52
#APP
| 349 "locks.c" 1
	cas.l %d0,%d1,(%a2)	| __ret, tmp52,* lkp
| 0 "" 2
#NO_APP
	cmp.l %d2,%d0	| cur, __ret
	jne .L51	|
.L54:
	move.l %d3,-(%sp)	| heavyLock,
	move.l %a2,-(%sp)	| lkp,
	jsr getHeavyLock	|
	move.l 8(%a0),%d4	| lk_19->holder, holder
	move.l %a0,-(%sp)	| lk,
	jsr putHeavyLock	|
	lea (12,%sp),%sp	|,,
	cmp.l %d4,%d2	| holder, cur
	jne .L51	|
	move.l %d3,-(%sp)	| heavyLock,
	move.l %a2,-(%sp)	| lkp,
	jsr slowUnlockMutex	|
	addq.l #8,%sp	|,
.L51:
	movem.l -16(%fp),#1052	|,
	unlk %fp	|
	rts
	.size	locks_internal_slowUnlockMutexIfHeld, .-locks_internal_slowUnlockMutexIfHeld
	.section	.rodata.str1.1
.LC16:
	.string	"_waitCond(lk=%p, timeout=%ld, th=%p)\n"
	.text
	.align	2
	.globl	locks_internal_waitCond
	.type	locks_internal_waitCond, @function
locks_internal_waitCond:
	link.w %fp,#-36	|,
	movem.l #15484,(%sp)	|,
	move.l 8(%fp),%a3	| lkp, lkp
	move.l 12(%fp),%d3	| heavyLock, heavyLock
	jsr jthread_current	|
	move.l %a0,%d2	|, cur
	jsr dbgGetMask	|
	btst #0,%d1	|,
	jeq .L56	|
	jsr jthread_current	|
	move.l %a0,-(%sp)	|,
	move.l 20(%fp),%d0	| timeout,
	move.l %d0,-(%sp)	|,
	move.l (%a3),-(%sp)	|* lkp,
	pea .LC16	|
	jsr kaffe_dprintf	|
	lea (16,%sp),%sp	|,,
.L56:
	move.l %d3,-(%sp)	| heavyLock,
	move.l %a3,-(%sp)	| lkp,
	jsr getHeavyLock	|
	move.l %a0,%a2	|, lk
	addq.l #8,%sp	|,
	cmp.l 8(%a0),%d2	| lk_15->holder, cur
	jeq .L57	|
	move.l %a0,-(%sp)	| lk,
	jsr putHeavyLock	|
	pea .LC5	|
	clr.l -(%sp)	|
	clr.l -(%sp)	|
	pea .LC6	|
	jsr execute_java_constructor	|
	move.l %a0,-(%sp)	|,
	jsr throwException	|
	lea (24,%sp),%sp	|,,
.L57:
	move.l %d2,-(%sp)	| cur,
	jsr jthread_get_data	|
	move.l %a0,%a5	|, tdata
	move.l 16(%a2),88(%a0)	| lk_15->cv, tdata_19->nextlk
	move.l %d2,16(%a2)	| cur, lk_15->cv
	move.l 96(%a2),%d6	| lk_15->lockCount, oldLockCount
	moveq #1,%d1	|,
	move.l %d1,96(%a2)	|, lk_15->lockCount
	move.l %a2,-(%sp)	| lk,
	jsr putHeavyLock	|
	move.l %d3,-(%sp)	| heavyLock,
	move.l %a3,-(%sp)	| lkp,
	jsr slowUnlockMutex	|
	move.l %a5,%d5	| tdata, D.10523
	add.l #12,%d5	|, D.10523
	move.l 20(%fp),-(%sp)	| timeout,
	move.l 16(%fp),-(%sp)	| timeout,
	move.l %d5,-(%sp)	| D.10523,
	jsr ksem_get	|
	move.b %d0,%d4	|, r
	lea (28,%sp),%sp	|,,
	jne .L58	|
	move.l %d3,-(%sp)	| heavyLock,
	move.l %a3,-(%sp)	| lkp,
	jsr getHeavyLock	|
	move.l %a0,%a2	|, lk
	lea (16,%a0),%a0	|, lk, ptr
	move.l (%a0),%d0	|* ptr, D.10534
	addq.l #8,%sp	|,
	jeq .L59	|
	move.l (%a0),%d0	|* ptr, D.10527
	lea jthread_get_data,%a4	|, tmp93
	cmp.l %d0,%d2	| D.10527, cur
	jne .L69	|
	jra .L60	|
.L63:
	move.l (%a0),%d0	|* ptr, D.10527
	cmp.l %d0,%d2	| D.10527, cur
	jne .L69	|
.L60:
	move.l 88(%a5),%d0	| tdata_19->nextlk, D.10530
	move.l %d0,(%a0)	| D.10530,* ptr
	jra .L62	|
.L69:
	move.l (%a0),%d0	|* ptr, D.10531
	move.l %d0,-(%sp)	| D.10531,
	jsr (%a4)	| tmp93
	lea (88,%a0),%a0	|,, ptr
	move.l (%a0),%d0	|* ptr, D.10534
	addq.l #4,%sp	|,
	jne .L63	|
.L59:
	lea (12,%a2),%a0	|, lk, ptr
	move.l (%a0),%d0	|* ptr, D.10542
	jeq .L64	|
	move.l (%a0),%d0	|* ptr, D.10536
	lea jthread_get_data,%a4	|, tmp92
	cmp.l %d0,%d2	| D.10536, cur
	jne .L68	|
	jra .L65	|
.L67:
	move.l (%a0),%d0	|* ptr, D.10536
	cmp.l %d0,%d2	| D.10536, cur
	jne .L68	|
.L65:
	move.l 88(%a5),%d0	| tdata_19->nextlk, D.10530
	move.l %d0,(%a0)	| D.10530,* ptr
	jra .L62	|
.L68:
	move.l (%a0),%d0	|* ptr, D.10539
	move.l %d0,-(%sp)	| D.10539,
	jsr (%a4)	| tmp92
	lea (88,%a0),%a0	|,, ptr
	move.l (%a0),%d0	|* ptr, D.10542
	addq.l #4,%sp	|,
	jne .L67	|
.L64:
	clr.l -(%sp)	|
	clr.l -(%sp)	|
	move.l %d5,-(%sp)	| D.10523,
	jsr ksem_get	|
	lea (12,%sp),%sp	|,,
.L62:
	move.l %a2,-(%sp)	| lk,
	jsr putHeavyLock	|
	addq.l #4,%sp	|,
.L58:
	move.l %d3,-(%sp)	| heavyLock,
	move.l %a3,-(%sp)	| lkp,
	jsr slowLockMutex	|
	move.l %d6,96(%a2)	| oldLockCount, lk_1->lockCount
	move.b %d4,%d0	| r,
	movem.l -36(%fp),#15484	|,
	unlk %fp	|
	rts
	.size	locks_internal_waitCond, .-locks_internal_waitCond
	.section	.rodata.str1.1
.LC17:
	.string	"_signalCond(lk=%p, th=%p)\n"
	.text
	.align	2
	.globl	locks_internal_signalCond
	.type	locks_internal_signalCond, @function
locks_internal_signalCond:
	link.w %fp,#0	|,
	move.l %a2,-(%sp)	|,
	move.l %d2,-(%sp)	|,
	move.l 8(%fp),%a2	| lkp, lkp
	jsr dbgGetMask	|
	btst #0,%d1	|,
	jeq .L75	|
	jsr jthread_current	|
	move.l %a0,-(%sp)	|,
	move.l (%a2),-(%sp)	|* lkp,
	pea .LC17	|
	jsr kaffe_dprintf	|
	lea (12,%sp),%sp	|,,
.L75:
	move.l 12(%fp),-(%sp)	| heavyLock,
	move.l %a2,-(%sp)	| lkp,
	jsr getHeavyLock	|
	move.l %a0,%a2	|, lk
	move.l 8(%a0),%d2	| lk_9->holder, D.10499
	jsr jthread_current	|
	addq.l #8,%sp	|,
	cmp.l %d2,%a0	| D.10499,
	jeq .L76	|
	move.l %a2,-(%sp)	| lk,
	jsr putHeavyLock	|
	pea .LC5	|
	clr.l -(%sp)	|
	clr.l -(%sp)	|
	pea .LC6	|
	jsr execute_java_constructor	|
	move.l %a0,-(%sp)	|,
	jsr throwException	|
	lea (24,%sp),%sp	|,,
.L76:
	move.l 16(%a2),%d2	| lk_9->cv, tid
	jeq .L77	|
	move.l %d2,-(%sp)	| tid,
	jsr jthread_get_data	|
	move.l 88(%a0),16(%a2)	| tdata_15->nextlk, lk_9->cv
	move.l 12(%a2),88(%a0)	| lk_9->mux, tdata_15->nextlk
	move.l %d2,12(%a2)	| tid, lk_9->mux
	addq.l #4,%sp	|,
.L77:
	move.l %a2,-(%sp)	| lk,
	jsr putHeavyLock	|
	addq.l #4,%sp	|,
	move.l -8(%fp),%d2	|,
	move.l -4(%fp),%a2	|,
	unlk %fp	|
	rts
	.size	locks_internal_signalCond, .-locks_internal_signalCond
	.section	.rodata.str1.1
.LC18:
	.string	"_broadcastCond(lk=%p, th=%p)\n"
	.text
	.align	2
	.globl	locks_internal_broadcastCond
	.type	locks_internal_broadcastCond, @function
locks_internal_broadcastCond:
	link.w %fp,#-12	|,
	movem.l #3076,(%sp)	|,
	move.l 8(%fp),%a2	| lkp, lkp
	jsr dbgGetMask	|
	btst #0,%d1	|,
	jeq .L79	|
	jsr jthread_current	|
	move.l %a0,-(%sp)	|,
	move.l (%a2),-(%sp)	|* lkp,
	pea .LC18	|
	jsr kaffe_dprintf	|
	lea (12,%sp),%sp	|,,
.L79:
	move.l 12(%fp),-(%sp)	| heavyLock,
	move.l %a2,-(%sp)	| lkp,
	jsr getHeavyLock	|
	move.l %a0,%a2	|, lk
	move.l 8(%a0),%d2	| lk_9->holder, D.10482
	jsr jthread_current	|
	addq.l #8,%sp	|,
	cmp.l %d2,%a0	| D.10482,
	jeq .L80	|
	move.l %a2,-(%sp)	| lk,
	jsr putHeavyLock	|
	pea .LC5	|
	clr.l -(%sp)	|
	clr.l -(%sp)	|
	pea .LC6	|
	jsr execute_java_constructor	|
	move.l %a0,-(%sp)	|,
	jsr throwException	|
	lea (24,%sp),%sp	|,,
.L80:
	move.l 16(%a2),%d2	| lk_9->cv, D.10490
	jeq .L81	|
	lea jthread_get_data,%a3	|, tmp59
.L83:
	move.l %d2,-(%sp)	| D.10490,
	jsr (%a3)	| tmp59
	move.l 88(%a0),16(%a2)	| tdata_16->nextlk, lk_9->cv
	move.l 12(%a2),88(%a0)	| lk_9->mux, tdata_16->nextlk
	move.l %d2,12(%a2)	| D.10490, lk_9->mux
	move.l 16(%a2),%d2	| lk_9->cv, D.10490
	addq.l #4,%sp	|,
	jne .L83	|
.L81:
	move.l %a2,-(%sp)	| lk,
	jsr putHeavyLock	|
	addq.l #4,%sp	|,
	movem.l -12(%fp),#3076	|,
	unlk %fp	|
	rts
	.size	locks_internal_broadcastCond, .-locks_internal_broadcastCond
	.align	2
	.globl	locks_internal_lockMutex
	.type	locks_internal_lockMutex, @function
locks_internal_lockMutex:
	link.w %fp,#0	|,
	move.l %a2,-(%sp)	|,
	move.l 8(%fp),%a2	| lkp, lkp
	jsr jthread_current	|
	clr.l %d0	| __ret
	move.l %a0,%d1	|,
#APP
| 506 "locks.c" 1
	cas.l %d0,%d1,(%a2)	| __ret,,* lkp
| 0 "" 2
#NO_APP
	tst.l %d0	| __ret
	jeq .L85	|
	move.l 12(%fp),-(%sp)	| heavyLock,
	move.l %a2,-(%sp)	| lkp,
	jsr slowLockMutex	|
	addq.l #8,%sp	|,
.L85:
	move.l -4(%fp),%a2	|,
	unlk %fp	|
	rts
	.size	locks_internal_lockMutex, .-locks_internal_lockMutex
	.align	2
	.globl	locks_internal_unlockMutex
	.type	locks_internal_unlockMutex, @function
locks_internal_unlockMutex:
	link.w %fp,#-12	|,
	movem.l #3076,(%sp)	|,
	move.l 8(%fp),%a2	| lkp, lkp
	lea jthread_current,%a3	|, tmp37
	jsr (%a3)	| tmp37
	move.l %a0,%d2	|, __ret
	clr.l %d0	| tmp39
#APP
| 518 "locks.c" 1
	cas.l %d2,%d0,(%a2)	| __ret, tmp39,* lkp
| 0 "" 2
#NO_APP
	jsr (%a3)	| tmp37
	cmp.l %d2,%a0	| __ret,
	jeq .L87	|
	move.l 12(%fp),-(%sp)	| heavyLock,
	move.l %a2,-(%sp)	| lkp,
	jsr slowUnlockMutex	|
	addq.l #8,%sp	|,
.L87:
	movem.l -12(%fp),#3076	|,
	unlk %fp	|
	rts
	.size	locks_internal_unlockMutex, .-locks_internal_unlockMutex
	.align	2
	.globl	lockObject
	.type	lockObject, @function
lockObject:
	link.w %fp,#0	|,
	clr.l -(%sp)	|
	move.l 8(%fp),%d0	| obj,
	addq.l #4,%d0	|,
	move.l %d0,-(%sp)	|,
	jsr locks_internal_lockMutex	|
	addq.l #8,%sp	|,
	unlk %fp	|
	rts
	.size	lockObject, .-lockObject
	.align	2
	.globl	unlockObject
	.type	unlockObject, @function
unlockObject:
	link.w %fp,#0	|,
	clr.l -(%sp)	|
	move.l 8(%fp),%d0	| obj,
	addq.l #4,%d0	|,
	move.l %d0,-(%sp)	|,
	jsr locks_internal_unlockMutex	|
	addq.l #8,%sp	|,
	unlk %fp	|
	rts
	.size	unlockObject, .-unlockObject
	.align	2
	.globl	slowLockObject
	.type	slowLockObject, @function
slowLockObject:
	link.w %fp,#0	|,
	clr.l -(%sp)	|
	move.l 8(%fp),%d0	| obj,
	addq.l #4,%d0	|,
	move.l %d0,-(%sp)	|,
	jsr slowLockMutex	|
	addq.l #8,%sp	|,
	unlk %fp	|
	rts
	.size	slowLockObject, .-slowLockObject
	.align	2
	.globl	slowUnlockObject
	.type	slowUnlockObject, @function
slowUnlockObject:
	link.w %fp,#0	|,
	clr.l -(%sp)	|
	move.l 8(%fp),%d0	| obj,
	addq.l #4,%d0	|,
	move.l %d0,-(%sp)	|,
	jsr slowUnlockMutex	|
	addq.l #8,%sp	|,
	unlk %fp	|
	rts
	.size	slowUnlockObject, .-slowUnlockObject
	.align	2
	.globl	dumpLocks
	.type	dumpLocks, @function
dumpLocks:
	link.w %fp,#0	|,
	unlk %fp	|
	rts
	.size	dumpLocks, .-dumpLocks
	.section	.rodata.str1.1
.LC19:
	.string	"lock->lockCount == 0"
.LC20:
	.string	"lock->num_wait == 0"
.LC21:
	.string	"lock->in_progress == 0"
	.text
	.align	2
	.globl	KaffeLock_destroyLock
	.type	KaffeLock_destroyLock, @function
KaffeLock_destroyLock:
	link.w %fp,#0	|,
	move.l 12(%fp),%a1	| l, l
	tst.l 96(%a1)	| lock_2->lockCount
	jeq .L95	|
	pea __PRETTY_FUNCTION__.8451	|
	pea 606.w	|
	pea .LC1	|
	pea .LC19	|
	jsr __assert_fail	|
.L95:
	tst.l 4(%a1)	| lock_2->num_wait
	jeq .L96	|
	pea __PRETTY_FUNCTION__.8451	|
	pea 607.w	|
	pea .LC1	|
	pea .LC20	|
	jsr __assert_fail	|
.L96:
	tst.l (%a1)	| lock_2->in_progress
	jeq .L97	|
	pea __PRETTY_FUNCTION__.8451	|
	pea 608.w	|
	pea .LC1	|
	pea .LC21	|
	jsr __assert_fail	|
.L97:
	pea 20(%a1)	|
	jsr ksem_destroy	|
	addq.l #4,%sp	|,
	unlk %fp	|
	rts
	.size	KaffeLock_destroyLock, .-KaffeLock_destroyLock
	.section	.rodata
	.type	__PRETTY_FUNCTION__.8451, @object
	.size	__PRETTY_FUNCTION__.8451, 22
__PRETTY_FUNCTION__.8451:
	.string	"KaffeLock_destroyLock"
	.type	__PRETTY_FUNCTION__.8345, @object
	.size	__PRETTY_FUNCTION__.8345, 16
__PRETTY_FUNCTION__.8345:
	.string	"slowUnlockMutex"
	.type	__PRETTY_FUNCTION__.8322, @object
	.size	__PRETTY_FUNCTION__.8322, 13
__PRETTY_FUNCTION__.8322:
	.string	"putHeavyLock"
	.type	__PRETTY_FUNCTION__.8334, @object
	.size	__PRETTY_FUNCTION__.8334, 14
__PRETTY_FUNCTION__.8334:
	.string	"slowLockMutex"
	.type	__PRETTY_FUNCTION__.8318, @object
	.size	__PRETTY_FUNCTION__.8318, 18
__PRETTY_FUNCTION__.8318:
	.string	"destroyStaticLock"
	.ident	"GCC: (Sourcery CodeBench Lite 2011.03-98) 4.5.2"
	.section	.note.GNU-stack,"",@progbits
