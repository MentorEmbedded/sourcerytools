From qxc at gmx.de  Tue Jul  3 15:36:52 2012
From: qxc at gmx.de (qxc at gmx.de)
Date: Tue, 03 Jul 2012 17:36:52 +0200
Subject: [arm-gnu] localtime() crashes
Message-ID: <20120703153652.35930@gmx.net>

Hi,

there is a strange crash when I call localtime((time_t*)&sys_time) - here sys_time is unsigned int. Is localtime function not supported? Or do I need a special linker option?

Thanks!


From qxc at gmx.de  Wed Jul  4 05:10:31 2012
From: qxc at gmx.de (qxc at gmx.de)
Date: Wed, 04 Jul 2012 07:10:31 +0200
Subject: [arm-gnu] localtime() crashes
In-Reply-To: <20120703153652.35930@gmx.net>
References: <20120703153652.35930@gmx.net>
Message-ID: <20120704051031.265520@gmx.net>

OK, I solved that problem: localtime() / gmtime() internally use malloc() which is not available within my environment but using gmtime_r() / localtime_r() everything is fine.

But there is my next problem: when calling strftime() the targete char array stays empty, the time string is not generated. Seems like this function is not implemented?

-------- Original-Nachricht --------
> Datum: Tue, 03 Jul 2012 17:36:52 +0200
> Von: qxc at gmx.de
> An: arm-gnu at codesourcery.com
> Betreff: [arm-gnu] localtime() crashes

> Hi,
> 
> there is a strange crash when I call localtime((time_t*)&sys_time) - here
> sys_time is unsigned int. Is localtime function not supported? Or do I need
> a special linker option?
> 
> Thanks!
> _______________________________________________
> arm-gnu mailing list
> arm-gnu at codesourcery.com
> http://sourcerytools.com/cgi-bin/mailman/listinfo/arm-gnu


From bart.deboeck at fynman.com  Wed Jul 11 15:53:21 2012
From: bart.deboeck at fynman.com (Bart De Boeck)
Date: Wed, 11 Jul 2012 17:53:21 +0200
Subject: [arm-gnu] ARM uclinux
Message-ID: <030401cd5f7d$4c774cd0$e565e670$@deboeck@fynman.com>

Dear all,

 

  Were do I find the ARM uclinux toolchain? If I remember correctly, there
used to be a link on
<http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/e
ditions/lite-edition/>
http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/ed
itions/lite-edition/

 

Thanks!

Bart

 

Fynman BVBA

Vierselbaan 42 bus 3

2240 Zandhoven

 

VAT 0845.913.640

 

mobile +324960747

 

skype de_boeck_bart

 

http://www.fynman.com

 

 

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/arm-gnu/attachments/20120711/47ff7f91/attachment.html>

From wmat at alphatroop.com  Wed Jul 11 17:17:38 2012
From: wmat at alphatroop.com (Bill Traynor)
Date: Wed, 11 Jul 2012 13:17:38 -0400
Subject: [arm-gnu] ARM uclinux
In-Reply-To: <4ffda7c6.8ab8320a.29ca.ffff8cc8SMTPIN_ADDED@mx.google.com>
References: <4ffda7c6.8ab8320a.29ca.ffff8cc8SMTPIN_ADDED@mx.google.com>
Message-ID: <CAGfZjq7oNxB3LEXvaR8ucZ5UxzDCB=93QigPeTDOYXFMZNaepA@mail.gmail.com>

On Wed, Jul 11, 2012 at 11:53 AM, Bart De Boeck <bart.deboeck at fynman.com> wrote:
> Dear all,
>
>
>
>   Were do I find the ARM uclinux toolchain? If I remember correctly, there
> used to be a link on
> http://www.mentor.com/embedded-software/sourcery-tools/sourcery-codebench/editions/lite-edition/
>

There's this one:
http://sourcery.mentor.com/sgpp/lite/arm/portal/package8744/public/arm-uclinuxeabi/arm-2011.03-46-arm-uclinuxeabi-i686-pc-linux-gnu.tar.bz2

>
>
> Thanks!
>
> Bart
>
>
>
> Fynman BVBA
>
> Vierselbaan 42 bus 3
>
> 2240 Zandhoven
>
>
>
> VAT 0845.913.640
>
>
>
> mobile +324960747
>
>
>
> skype de_boeck_bart
>
>
>
> http://www.fynman.com
>
>
>
>
>
>
> _______________________________________________
> arm-gnu mailing list
> arm-gnu at codesourcery.com
> http://sourcerytools.com/cgi-bin/mailman/listinfo/arm-gnu
>


From ricardo_anguiano at mentor.com  Wed Jul 11 17:57:13 2012
From: ricardo_anguiano at mentor.com (Ricardo Anguiano)
Date: Wed, 11 Jul 2012 10:57:13 -0700
Subject: [arm-gnu] ARM uclinux
In-Reply-To: <030401cd5f7d$4c774cd0$e565e670$@deboeck@fynman.com> (Bart De
	Boeck's message of "Wed, 11 Jul 2012 17:53:21 +0200")
References: <030401cd5f7d$4c774cd0$e565e670$@deboeck@fynman.com>
Message-ID: <yxj8vchuji4m.fsf@mentor.com>

Bart De Boeck <bart.deboeck at fynman.com> writes:
>  Were do I find the ARM uclinux toolchain?

Hello Bart,

The Sourcery CodeBench for ARM uClinux Lite Edition toolchain has been
discontinued and no further releases are planned at this time.  The most
recent ARM uClinux release is available here:

     https://sourcery.mentor.com/GNUToolchain/release1804

Thanks,
-- 
Ricardo Anguiano
Mentor Graphics
+1-510-354-6774


From bart.deboeck at fynman.com  Wed Jul 11 18:14:14 2012
From: bart.deboeck at fynman.com (Bart De Boeck)
Date: Wed, 11 Jul 2012 20:14:14 +0200
Subject: [arm-gnu] ARM uclinux
In-Reply-To: <yxj8vchuji4m.fsf@mentor.com>
References: <030401cd5f7d$4c774cd0$e565e670$@deboeck@fynman.com>
	<yxj8vchuji4m.fsf@mentor.com>
Message-ID: <033a01cd5f90$fa5a3e80$ef0ebb80$@deboeck@fynman.com>

Thanks for the info!

Any idea who will take over the uClinux Lite edition for ARM?

Regards,
Bart

Fynman BVBA
Vierselbaan 42 bus 3
2240 Zandhoven

VAT 0845.913.640

mobile +324960747

skype de_boeck_bart

http://www.fynman.com


-----Original Message-----
From: Ricardo Anguiano [mailto:ricardo_anguiano at mentor.com] 
Sent: woensdag 11 juli 2012 19:57
To: Bart De Boeck
Cc: arm-gnu at codesourcery.com
Subject: Re: [arm-gnu] ARM uclinux

Bart De Boeck <bart.deboeck at fynman.com> writes:
>  Were do I find the ARM uclinux toolchain?

Hello Bart,

The Sourcery CodeBench for ARM uClinux Lite Edition toolchain has been
discontinued and no further releases are planned at this time.  The most
recent ARM uClinux release is available here:

     https://sourcery.mentor.com/GNUToolchain/release1804

Thanks,
--
Ricardo Anguiano
Mentor Graphics
+1-510-354-6774



From martin.velek at gmail.com  Thu Jul 19 09:01:54 2012
From: martin.velek at gmail.com (Martin Velek)
Date: Thu, 19 Jul 2012 11:01:54 +0200
Subject: [arm-gnu] NXP LPC1788 checksum
Message-ID: <CAB-o4Cw-K6bxnbGbFRNEH0rpF0C=jgthe0C_Y0udyy0mqTn7oQ@mail.gmail.com>

Hello,

I am using the NXP LPC1788. However the NXP has a checksum feature,
after reset the ROM Bootloader sums  first 7 * 4 bytes and checks if
the sum is equal to zero. If not a special programm is called.

I would like not to rely on a JTAG (segger jlink) which probably does
the checksum or any other external tool. My idea is to add a magic
stuff to startup file or a linker to be generated automatically.

Adding  .long	__cs3_stack + __cs3_reset + ...... +
__cs3_isr_usage_fault@ = __cs3_lpc17xx_checksum led to
../lpc17xx-vector.S:29: Error: invalid operands (*UND* and *UND*
sections) for `+'

So that I have modified the linker script and added
PROVIDE(__cs3_lpc17xx_checksum = (0x0 - (__cs3_stack + __cs3_reset +
__cs3_isr_nmi + __cs3_isr_hard_fault + __cs3_isr_mpu_fault +
__cs3_isr_bus_fault + __cs3_isr_usage_fault)) - 0x6);
The six at the end is due to adding 0x1 as a function pointer (thumb)
while the linker probably counts with 0x0 at the end.

My question is if this solution is clear. It works but maybe there is
more fancy solution.

Thank you for your help

Regards,
Martin

---- From datasheet ----------
The reserved Cortex-M3 exception vector location 7 (offset 0x001C in
the vector table)
should contain the 2?s complement of the check-sum of table entries 0
through 6. This
causes the checksum of the first 8 table entries to be 0. The boot
loader code checksums
the first 8 locations in sector 0 of the flash. If the result is 0,
then execution control is
transferred to the user code.


From carlos_odonell at mentor.com  Thu Jul 19 14:39:27 2012
From: carlos_odonell at mentor.com (Carlos O'Donell)
Date: Thu, 19 Jul 2012 10:39:27 -0400
Subject: [arm-gnu] NXP LPC1788 checksum
In-Reply-To: <CAB-o4Cw-K6bxnbGbFRNEH0rpF0C=jgthe0C_Y0udyy0mqTn7oQ@mail.gmail.com>
References: <CAB-o4Cw-K6bxnbGbFRNEH0rpF0C=jgthe0C_Y0udyy0mqTn7oQ@mail.gmail.com>
Message-ID: <50081C1F.4060007@mentor.com>

On 7/19/2012 5:01 AM, Martin Velek wrote:
> Hello,
> 
> I am using the NXP LPC1788. However the NXP has a checksum feature,
> after reset the ROM Bootloader sums  first 7 * 4 bytes and checks if
> the sum is equal to zero. If not a special programm is called.
> 
> I would like not to rely on a JTAG (segger jlink) which probably does
> the checksum or any other external tool. My idea is to add a magic
> stuff to startup file or a linker to be generated automatically.
> 
> Adding  .long	__cs3_stack + __cs3_reset + ...... +
> __cs3_isr_usage_fault@ = __cs3_lpc17xx_checksum led to
> ../lpc17xx-vector.S:29: Error: invalid operands (*UND* and *UND*
> sections) for `+'
> 
> So that I have modified the linker script and added
> PROVIDE(__cs3_lpc17xx_checksum = (0x0 - (__cs3_stack + __cs3_reset +
> __cs3_isr_nmi + __cs3_isr_hard_fault + __cs3_isr_mpu_fault +
> __cs3_isr_bus_fault + __cs3_isr_usage_fault)) - 0x6);
> The six at the end is due to adding 0x1 as a function pointer (thumb)
> while the linker probably counts with 0x0 at the end.
> 
> My question is if this solution is clear. It works but maybe there is
> more fancy solution.

That is *already* a fancy solution :-)

There is no easy way to do this and in the past I've always post-processed
the ELF file to write in the checksum.

Your method is significantly more elegant than a post-processing step
with special tools.

Cheers,
Carlos.
-- 
Carlos O'Donell
Mentor Graphics / CodeSourcery
carlos_odonell at mentor.com
carlos at codesourcery.com
+1 (613) 963 1026


From martin.velek at gmail.com  Fri Jul 20 06:58:48 2012
From: martin.velek at gmail.com (Martin Velek)
Date: Fri, 20 Jul 2012 08:58:48 +0200
Subject: [arm-gnu] NXP LPC1788 checksum
In-Reply-To: <50081C1F.4060007@mentor.com>
References: <CAB-o4Cw-K6bxnbGbFRNEH0rpF0C=jgthe0C_Y0udyy0mqTn7oQ@mail.gmail.com>
	<50081C1F.4060007@mentor.com>
Message-ID: <CAB-o4CxcvHR8+RMXgK6Bb0_xqnUvo2ShM6--mGtVbp8Rpaknzg@mail.gmail.com>

Hello,

I have re-invented the wheel. I have downloaded a trial version of
Codebench for ARM EABI and exactly this sequence is generated by the
board definition tool :). It's a pitty that the lpc1788 is not
supported by the IDE.

Martin

On Thu, Jul 19, 2012 at 4:39 PM, Carlos O'Donell
<carlos_odonell at mentor.com> wrote:
> On 7/19/2012 5:01 AM, Martin Velek wrote:
>> Hello,
>>
>> I am using the NXP LPC1788. However the NXP has a checksum feature,
>> after reset the ROM Bootloader sums  first 7 * 4 bytes and checks if
>> the sum is equal to zero. If not a special programm is called.
>>
>> I would like not to rely on a JTAG (segger jlink) which probably does
>> the checksum or any other external tool. My idea is to add a magic
>> stuff to startup file or a linker to be generated automatically.
>>
>> Adding  .long __cs3_stack + __cs3_reset + ...... +
>> __cs3_isr_usage_fault@ = __cs3_lpc17xx_checksum led to
>> ../lpc17xx-vector.S:29: Error: invalid operands (*UND* and *UND*
>> sections) for `+'
>>
>> So that I have modified the linker script and added
>> PROVIDE(__cs3_lpc17xx_checksum = (0x0 - (__cs3_stack + __cs3_reset +
>> __cs3_isr_nmi + __cs3_isr_hard_fault + __cs3_isr_mpu_fault +
>> __cs3_isr_bus_fault + __cs3_isr_usage_fault)) - 0x6);
>> The six at the end is due to adding 0x1 as a function pointer (thumb)
>> while the linker probably counts with 0x0 at the end.
>>
>> My question is if this solution is clear. It works but maybe there is
>> more fancy solution.
>
> That is *already* a fancy solution :-)
>
> There is no easy way to do this and in the past I've always post-processed
> the ELF file to write in the checksum.
>
> Your method is significantly more elegant than a post-processing step
> with special tools.
>
> Cheers,
> Carlos.
> --
> Carlos O'Donell
> Mentor Graphics / CodeSourcery
> carlos_odonell at mentor.com
> carlos at codesourcery.com
> +1 (613) 963 1026


From Juergen.Duerrwang at iosb.fraunhofer.de  Mon Jul 23 14:39:04 2012
From: Juergen.Duerrwang at iosb.fraunhofer.de (=?iso-8859-1?Q?D=FCrrwang=2C_J=FCrgen?=)
Date: Mon, 23 Jul 2012 16:39:04 +0200
Subject: [arm-gnu] Didn't get the toolchain to work
Message-ID: <D65199DE86131E4A86400EB9596B961217C334795F@MS3EXCHANGE.ms3.corp>

Hi all,

I have started programming a Pandaboard ES by using your toolchain. At the moment I have installed the ARM GNU/Linux release because of running Ubuntu 12.04 on the Pandaboard. I installed eclipse and the ARM GNU plugin from http://sourceforge.net/projects/gnuarmeclipse/ on a Ubunutu machine.  Then I wrote a simple HelloWorld and got this compiler output:

**** Build of configuration Debug for project HeloWorld ****

make all
Building file: ../helo.c
Invoking: ARM Sourcery Linux GCC C Compiler
arm-none-eabi-gcc -O0 -Wall -Wa,-adhlns="helo.o.lst" -c -fmessage-length=0 -MMD -MP -MF"helo.d" -MT"helo.d" -mcpu=cortex-a9 -mthumb -g3 -gdwarf-2 -o "helo.o" "../helo.c"
Finished building: ../helo.c
Building target: HeloWorld.elf
Invoking: ARM Sourcery Linux GCC C Linker
arm-none-eabi-gcc -nostartfiles -Wl,-Map,HeloWorld.map -mcpu=cortex-a9 -mthumb -g3 -gdwarf-2 -o "HeloWorld.elf"  ./helo.o
/home/duerrw/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_GNU_Linux/bin/../lib/gcc/arm-none-linux-gnueabi/4.6.3/../../../../arm-none-linux-gnueabi/bin/ld: warning: cannot find entry symbol _start; defaulting to 00008120
Finished building target: HeloWorld.elf
Invoking: ARM Sourcery Linux GNU Create Listing
arm-none-eabi-objdump -h -S HeloWorld.elf > "HeloWorld.lst"
Finished building: HeloWorld.lst
Invoking: ARM Sourcery Linux GNU Print Size
arm-none-eabi-size  --format=berkeley HeloWorld.elf
   text       data        bss         dec        hex    filename
     42          116           0           158          9e      HeloWorld.elf
Finished building: HeloWorld.siz

**** Build Finished ****

I copied the elf file to Pandaboard and made it executable. But when try to start with ./HeloWorld.elf I only get
"Not such file or directorty". Can anybody help me?

Greetings,
J?rgen


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <http://sourcerytools.com/pipermail/arm-gnu/attachments/20120723/705f2a4d/attachment.html>

From carlos_odonell at mentor.com  Mon Jul 23 16:51:32 2012
From: carlos_odonell at mentor.com (Carlos O'Donell)
Date: Mon, 23 Jul 2012 12:51:32 -0400
Subject: [arm-gnu] Didn't get the toolchain to work
In-Reply-To: <D65199DE86131E4A86400EB9596B961217C334795F@MS3EXCHANGE.ms3.corp>
References: <D65199DE86131E4A86400EB9596B961217C334795F@MS3EXCHANGE.ms3.corp>
Message-ID: <500D8114.8000206@mentor.com>

On 7/23/2012 10:39 AM, D?rrwang, J?rgen wrote:
> I have started programming a Pandaboard ES by using your toolchain.
> At the moment I have installed the ARM GNU/Linux release because of
> running Ubuntu 12.04 on the Pandaboard. I installed eclipse and the
> ARM GNU plugin from http://sourceforge.net/projects/gnuarmeclipse/ on
> a Ubunutu machine.  Then I wrote a simple HelloWorld and got this
> compiler output:

> arm-none-eabi-gcc -nostartfiles -Wl,-Map,HeloWorld.map
> -mcpu=cortex-a9 -mthumb -g3 -gdwarf-2 -o "HeloWorld.elf"  ./helo.o
> 
> /home/duerrw/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_GNU_Linux/bin/../lib/gcc/arm-none-linux-gnueabi/4.6.3/../../../../arm-none-linux-gnueabi/bin/ld:
> warning: cannot find entry symbol _start; defaulting to 00008120

This is a bare-metal toolchain designed for building firmware or RTOS images.

You need to install Sourcery CodeBench Lite for ARM GNU/Linux and use that for GNU/Linux application development.

Cheers,
Carlos.
-- 
Carlos O'Donell
Mentor Graphics / CodeSourcery
carlos_odonell at mentor.com
carlos at codesourcery.com
+1 (613) 963 1026


