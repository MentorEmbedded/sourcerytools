Index: src/vsip/opt/sal/elementwise.hpp
===================================================================
--- src/vsip/opt/sal/elementwise.hpp	(revision 228380)
+++ src/vsip/opt/sal/elementwise.hpp	(working copy)
@@ -1001,116 +1001,49 @@
 
 
 
-#define VSIP_IMPL_SAL_VSMUL( T, SAL_T, SALFCN, STRIDE_X ) \
-VSIP_IMPL_SAL_INLINE void						\
-vsmul( T *a, int as,                   \
-       T *b,                           \
-       T *c, int cs,                   \
-       int n )                         \
-{                                      \
-  SALFCN( (SAL_T *) a, STRIDE_X * as,  \
-          (SAL_T *) b,                 \
-          (SAL_T *) c, STRIDE_X * cs,  \
-          n, 0 );                      \
+#define VSIP_IMPL_SAL_VSMUL( ScalarT, T, SAL_T, SALFCN, STRIDE_X ) \
+VSIP_IMPL_SAL_INLINE void                                          \
+vsmul( T* a, int as,                                               \
+       ScalarT* scalar,                                            \
+       T* c, int cs,                                               \
+       int n )                                                     \
+{                                                                  \
+  SALFCN( (SAL_T *) a, STRIDE_X * as,                              \
+          (SAL_T *) &scalar,                                       \
+          (SAL_T *) c, STRIDE_X * cs,                              \
+          n, 0 );                                                  \
 }
 
-#define VSIP_IMPL_SAL_VSMUL_SPLIT( T, SAL_T, SALFCN, STRIDE_X ) \
-VSIP_IMPL_SAL_INLINE void						\
-vsmul( std::pair<T *, T *> a, int as,  \
-       std::pair<T *, T *> b,          \
-       std::pair<T *, T *> c, int cs,  \
-       int n )                         \
-{                                      \
-  SALFCN( (SAL_T *) &a, STRIDE_X * as, \
-          (SAL_T *) &b,                \
-          (SAL_T *) &c, STRIDE_X * cs, \
-          n, 0 );                      \
+#define VSIP_IMPL_SAL_VSMUL_SPLIT( ScalarT, T, SAL_T, SALFCN, STRIDE_X ) \
+VSIP_IMPL_SAL_INLINE void                                                \
+vsmul( std::pair<T *, T *> a, int as,                                    \
+       ScalarT* scalar,                                                  \
+       std::pair<T *, T *> c, int cs,                                    \
+       int n )                                                           \
+{                                                                        \
+  T real = scalar->real();                                               \
+  T imag = scalar->imag();                                               \
+  SAL_T p_scalar = { &real, &imag };                                     \
+                                                                         \
+  SALFCN( (SAL_T *) &a, STRIDE_X * as,                                   \
+          &p_scalar,                                                     \
+          (SAL_T *) &c, STRIDE_X * cs,                                   \
+          n, 0 );                                                        \
 }
 
-VSIP_IMPL_SAL_VSMUL( float, float,                       vsmulx,   1 )
-VSIP_IMPL_SAL_VSMUL( double, double,                     vsmuldx,  1 )
-VSIP_IMPL_SAL_VSMUL( complex<float>, COMPLEX,            cvcsmlx,  2 )
-VSIP_IMPL_SAL_VSMUL( complex<double>, DOUBLE_COMPLEX,    cvcsmldx, 2 )
-VSIP_IMPL_SAL_VSMUL_SPLIT( float, COMPLEX_SPLIT,         zvzsmlx,  1 )
-VSIP_IMPL_SAL_VSMUL_SPLIT( double, DOUBLE_COMPLEX_SPLIT, zvzsmldx, 1 )
+VSIP_IMPL_SAL_VSMUL( float, float, float,                              vsmulx,   1 )
+VSIP_IMPL_SAL_VSMUL( double, double, double,                           vsmuldx,  1 )
+VSIP_IMPL_SAL_VSMUL( complex<float>, complex<float>,   COMPLEX,        cvcsmlx,  2 )
+VSIP_IMPL_SAL_VSMUL( complex<double>, complex<double>, DOUBLE_COMPLEX, cvcsmldx, 2 )
+VSIP_IMPL_SAL_VSMUL_SPLIT( complex<float>, float,                        \
+                           COMPLEX_SPLIT, zvzsmlx, 1 )
+VSIP_IMPL_SAL_VSMUL_SPLIT( complex<double>, double,                      \
+                           DOUBLE_COMPLEX_SPLIT, zvzsmldx, 1 )
 
+#undef VSIP_IMPL_SAL_VSMUL
+#undef VSIP_IMPL_SAL_VSMUL_SPLIT
 
 
-#define VSIP_IMPL_SAL_SVMUL(ScalarT, T, SAL_T, SALFCN, STRIDE_X )	\
-VSIP_IMPL_SAL_INLINE void						\
-svmul(ScalarT scalar,		       \
-      T*      a,		       \
-      int     as,		       \
-      T*      c,		       \
-      int     cs,		       \
-      int     n )		       \
-{                                      \
-  SALFCN( (SAL_T *) a, STRIDE_X * as,  \
-          (SAL_T *) &scalar,	       \
-          (SAL_T *) c, STRIDE_X * cs,  \
-          n, 0 );                      \
-}
-
-#define VSIP_IMPL_SAL_SVMUL_SPLIT(ScalarT, T, SAL_T, SALFCN, STRIDE_X ) \
-VSIP_IMPL_SAL_INLINE void						\
-svmul(ScalarT scalar,							\
-      std::pair<T *, T *> a, int as,					\
-      std::pair<T *, T *> c, int cs,					\
-      int n )								\
-{									\
-  T real = scalar.real();						\
-  T imag = scalar.imag();						\
-  SAL_T p_scalar = { &real, &imag };					\
-  									\
-  SALFCN( (SAL_T *) &a, STRIDE_X * as,					\
-          &p_scalar,							\
-          (SAL_T *) &c, STRIDE_X * cs,					\
-          n, 0 );							\
-}
-
-#define VSIP_IMPL_SAL_RSVMUL_SPLIT(ScalarT, T, SAL_T, SALFCN, STRIDE_X ) \
-VSIP_IMPL_SAL_INLINE void						\
-svmul(ScalarT scalar,							\
-      std::pair<T *, T *> a, int as,					\
-      std::pair<T *, T *> c, int cs,					\
-      int n )								\
-{									\
-  SALFCN( (SAL_T *) &a, STRIDE_X * as,					\
-          &scalar,							\
-          (SAL_T *) &c, STRIDE_X * cs,					\
-          n, 0 );							\
-}
-
-VSIP_IMPL_SAL_SVMUL(float, float, float,                       vsmulx,   1 )
-VSIP_IMPL_SAL_SVMUL(double, double, double,                    vsmuldx,  1 )
-VSIP_IMPL_SAL_SVMUL(complex<float>, complex<float>, COMPLEX,       cvcsmlx, 2)
-VSIP_IMPL_SAL_SVMUL(complex<float>, complex<double>,DOUBLE_COMPLEX,cvcsmldx,2)
-VSIP_IMPL_SAL_SVMUL_SPLIT(complex<float> const&, float,                \
-                          COMPLEX_SPLIT, zvzsmlx,  1 )
-VSIP_IMPL_SAL_SVMUL_SPLIT(complex<double> const&, double,              \
-                          DOUBLE_COMPLEX_SPLIT, zvzsmldx, 1 )
-
-#undef VSIP_IMPL_SAL_SVMUL
-#undef VSIP_IMPL_SAL_SVMUL_SPLIT
-
-VSIP_IMPL_SAL_INLINE void						\
-svmul(
-  float           scalar,
-  complex<float>* a,
-  int             a_stride,
-  complex<float>* z,
-  int             z_stride,
-  int             len)
-{
-  if (a_stride == 1 || z_stride == 1)
-    vsmulx((float*)a, a_stride, &scalar, (float*)z, z_stride, 2*len, 0);
-  else
-  {
-    vsmulx((float*)a,   2*a_stride, &scalar, (float*)z,   2*z_stride, len, 0);
-    vsmulx((float*)a+1, 2*a_stride, &scalar, (float*)z+1, 2*z_stride, len, 0);
-  }
-}
-
 /***********************************************************************
   Synthesized functions
 ***********************************************************************/
