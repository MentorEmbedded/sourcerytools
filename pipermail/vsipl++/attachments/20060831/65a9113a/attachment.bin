Index: ChangeLog
===================================================================
--- ChangeLog	(revision 148073)
+++ ChangeLog	(working copy)
@@ -1,3 +1,27 @@
+2006-08-31  Stefan Seefeld  <stefan@codesourcery.com>
+
+	* configure.ac: Add portable build instructions.
+	* GNUmakefile.in: Likewise.
+	* src/vsip/GNUmakefile.inc.in: Likewise.
+	* src/vsip_csl/GNUmakefile.inc.in: Likewise.
+	* src/vsip/domain.hpp: Fix signature of function template specialization.
+	* src/vsip/impl/config.hpp: Define VSIP_IMPL_PI.
+	* src/vsip/impl/fft/dft.hpp: Use it.
+	* src/vsip/signal-window.cpp: Likewise.
+	* src/vsip_csl/ref_dft.hpp: Likewise.
+	* tests/extdata-subviews.cpp: Likewise.
+	* tests/matvec.cpp: Likewise.
+	* tests/fft.cpp: Likewise.
+	* apps/sarsim/fft.hpp: Likewise.
+	* examples/fft.cpp: Likewise.
+	* examples/example1.cpp: Likewise.
+	* src/vsip/impl/coverage.hpp: Use config.hpp, not acconfig.hpp.
+	* src/vsip/impl/expr_serial_dispatch_fwd.hpp: Likewise.
+	* src/vsip/impl/aligned_allocator.hpp: Likewise.
+	* src/vsip/impl/lapack.hpp: Likewise.
+	* examples/GNUmakefile.inc.in: Conditionalize compilation of png.cpp. 
+	* src/vsip/impl/expr_ops_info.hpp: Work around icl preprocessor bug.
+
 2006-08-30  Jules Bergmann  <jules@codesourcery.com>
 
 	Support for using PAS for parallel services.
Index: src/vsip/domain.hpp
===================================================================
--- src/vsip/domain.hpp	(revision 148073)
+++ src/vsip/domain.hpp	(working copy)
@@ -334,7 +334,7 @@
 
 template <>
 inline length_type 
-vec_domain_size<1>(Domain<1> const* d) VSIP_NOTHROW
+vec_domain_size<1>(Domain<1> const* const d) VSIP_NOTHROW
   { return d->size(); }
 
 ////////////////////////////////////////////////////////////////
Index: src/vsip/impl/coverage.hpp
===================================================================
--- src/vsip/impl/coverage.hpp	(revision 148073)
+++ src/vsip/impl/coverage.hpp	(working copy)
@@ -13,7 +13,7 @@
   Included Files
 ***********************************************************************/
 
-#include <vsip/impl/acconfig.hpp>
+#include <vsip/impl/config.hpp>
 
 #ifndef VSIP_IMPL_DO_COVERAGE
 #  define VSIP_IMPL_DO_COVERAGE 0
Index: src/vsip/impl/expr_serial_dispatch_fwd.hpp
===================================================================
--- src/vsip/impl/expr_serial_dispatch_fwd.hpp	(revision 148073)
+++ src/vsip/impl/expr_serial_dispatch_fwd.hpp	(working copy)
@@ -13,7 +13,7 @@
   Included Files
 ***********************************************************************/
 
-#include <vsip/impl/acconfig.hpp>
+#include <vsip/impl/config.hpp>
 #include <vsip/impl/expr_serial_evaluator.hpp>
 
 
Index: src/vsip/impl/config.hpp
===================================================================
--- src/vsip/impl/config.hpp	(revision 148073)
+++ src/vsip/impl/config.hpp	(working copy)
@@ -16,6 +16,19 @@
 
 #include <vsip/impl/acconfig.hpp>
 
+#ifdef  _MSC_VER
+
+// Make sure we see the POSIX definitions from math.h.
+# define _USE_MATH_DEFINES
+
+#endif
+
+#ifdef M_PI
+# define VSIP_IMPL_PI M_PI
+#else
+# define VSIP_IMPL_PI 3.14159265358979323846
+#endif
+
 // autoconf defines them
 #undef PACKAGE_NAME
 #undef PACKAGE_STRING
Index: src/vsip/impl/fft/dft.hpp
===================================================================
--- src/vsip/impl/fft/dft.hpp	(revision 148073)
+++ src/vsip/impl/fft/dft.hpp	(working copy)
@@ -62,7 +62,7 @@
   virtual void in_place(ctype *inout, stride_type s, length_type l)
   {
     aligned_array<std::complex<T> > tmp(l);
-    T const phi = E * 2.0 * M_PI/l;
+    T const phi = E * 2.0 * VSIP_IMPL_PI/l;
 
     for (index_type w = 0; w < l; ++w)
     {
@@ -76,7 +76,7 @@
   virtual void in_place(ztype inout, stride_type s, length_type l)
   {
     aligned_array<std::complex<T> > tmp(l);
-    T const phi = E * 2.0 * M_PI/l;
+    T const phi = E * 2.0 * VSIP_IMPL_PI/l;
 
     for (index_type w = 0; w < l; ++w)
     {
@@ -96,7 +96,7 @@
 			    ctype *out, stride_type out_s,
 			    length_type l)
   {
-    T const phi = E * 2.0 * M_PI/l;
+    T const phi = E * 2.0 * VSIP_IMPL_PI/l;
 
     for (index_type w = 0; w < l; ++w)
     {
@@ -110,7 +110,7 @@
 			    ztype out, stride_type out_s,
 			    length_type l)
   {
-    T const phi = E * 2.0 * M_PI/l;
+    T const phi = E * 2.0 * VSIP_IMPL_PI/l;
 
     for (index_type w = 0; w < l; ++w)
     {
@@ -139,7 +139,7 @@
 			    ctype *out, stride_type out_s,
 			    length_type l)
   {
-    T const phi = - 2.0 * M_PI/l;
+    T const phi = - 2.0 * VSIP_IMPL_PI/l;
 
     for (index_type w = 0; w < l/2 + 1; ++w)
     {
@@ -153,7 +153,7 @@
 			    ztype out, stride_type out_s,
 			    length_type l)
   {
-    T const phi = - 2.0 * M_PI/l;
+    T const phi = - 2.0 * VSIP_IMPL_PI/l;
 
     for (index_type w = 0; w < l/2 + 1; ++w)
     {
@@ -181,7 +181,7 @@
 			    rtype *out, stride_type out_s,
 			    length_type l)
   {
-    T const phi = 2.0 * M_PI/l;
+    T const phi = 2.0 * VSIP_IMPL_PI/l;
 
     for (index_type w = 0; w < l; ++w)
     {
@@ -197,7 +197,7 @@
 			    rtype *out, stride_type out_s,
 			    length_type l)
   {
-    T const phi = 2.0 * M_PI/l;
+    T const phi = 2.0 * VSIP_IMPL_PI/l;
     
     for (index_type w = 0; w < l; ++w)
     {
Index: src/vsip/impl/expr_ops_info.hpp
===================================================================
--- src/vsip/impl/expr_ops_info.hpp	(revision 148073)
+++ src/vsip/impl/expr_ops_info.hpp	(working copy)
@@ -51,7 +51,7 @@
 
 #define VSIP_IMPL_TYPE_NAME(T, VALUE)		\
 template <>					\
-struct Type_name<T> { static char const value = VALUE; };
+struct Type_name<T > { static char const value = VALUE; };
 
 VSIP_IMPL_TYPE_NAME(float,                'S');
 VSIP_IMPL_TYPE_NAME(double,               'D');
@@ -66,7 +66,7 @@
 
 #define VSIP_IMPL_SCALAR_TYPE_NAME(T, VALUE)	\
 template <>					\
-struct Scalar_type_name<T> { static char const value = VALUE; };
+struct Scalar_type_name<T > { static char const value = VALUE; };
 
 VSIP_IMPL_SCALAR_TYPE_NAME(float,                's');
 VSIP_IMPL_SCALAR_TYPE_NAME(double,               'd');
@@ -111,7 +111,7 @@
 
 #define VSIP_IMPL_UNARY_OPS_FUNCTOR(OP, TYPE, VALUE)		\
 template <typename T>					\
-struct Unary_op_count<OP##_functor, TYPE>		\
+struct Unary_op_count<OP##_functor, TYPE >		\
 {							\
   static unsigned const value = VALUE;			\
 }; 
@@ -160,7 +160,7 @@
 #define VSIP_IMPL_BINARY_OPS(OP, TYPE1, TYPE2, VALUE)		\
 template <typename T1,					\
           typename T2>					\
-struct Binary_op_count<OP, TYPE1, TYPE2>		\
+struct Binary_op_count<OP, TYPE1, TYPE2 >		\
 {							\
   static unsigned const value = VALUE;			\
 }; 
@@ -236,7 +236,7 @@
 template <typename T1,						\
           typename T2,						\
           typename T3>						\
-struct Ternary_op_count<OP, TYPE1, TYPE2, TYPE3>		\
+struct Ternary_op_count<OP, TYPE1, TYPE2, TYPE3 >		\
 {								\
   static unsigned const value = VALUE;				\
 }; 
Index: src/vsip/impl/aligned_allocator.hpp
===================================================================
--- src/vsip/impl/aligned_allocator.hpp	(revision 148073)
+++ src/vsip/impl/aligned_allocator.hpp	(working copy)
@@ -18,7 +18,7 @@
 #include <limits>
 #include <cstdlib>
 
-#include <vsip/impl/acconfig.hpp>
+#include <vsip/impl/config.hpp>
 #include <vsip/impl/allocation.hpp>
 
 
Index: src/vsip/impl/lapack.hpp
===================================================================
--- src/vsip/impl/lapack.hpp	(revision 148073)
+++ src/vsip/impl/lapack.hpp	(working copy)
@@ -29,7 +29,7 @@
 #include <complex>
 
 #include <vsip/support.hpp>
-#include <vsip/impl/acconfig.hpp>
+#include <vsip/impl/config.hpp>
 #include <vsip/impl/metaprogramming.hpp>
 
 #define CVT_TRANSPOSE(c) \
Index: src/vsip/signal-window.cpp
===================================================================
--- src/vsip/signal-window.cpp	(revision 148073)
+++ src/vsip/signal-window.cpp	(working copy)
@@ -10,6 +10,7 @@
   Included Files
 ***********************************************************************/
 
+#include <vsip/impl/config.hpp>
 #include <cmath>
 
 #include <vsip/selgen.hpp>
@@ -37,7 +38,7 @@
 
   Vector<scalar_f> v(len);
 
-  scalar_f temp1 = 2 * M_PI / (len - 1);
+  scalar_f temp1 = 2 * VSIP_IMPL_PI / (len - 1);
   scalar_f temp2 = 2 * temp1;
 
   for ( index_type n = 0; n < len; ++n )
@@ -75,15 +76,15 @@
 
   scalar_f dp = pow( 10.0, -ripple / 20.0 );
   scalar_f df = acos( 1.0 / 
-    cosh( impl::acosh( (1.0 + dp) / dp) / (len - 1.0) ) ) / M_PI;
-  scalar_f x0 = (3.0 - cos( 2 * M_PI * df )) / (1.0 + cos( 2 * M_PI * df ));
+    cosh( impl::acosh( (1.0 + dp) / dp) / (len - 1.0) ) ) / VSIP_IMPL_PI;
+  scalar_f x0 = (3.0 - cos( 2 * VSIP_IMPL_PI * df )) / (1.0 + cos( 2 * VSIP_IMPL_PI * df ));
 
   Vector<scalar_f> f = ramp(0.f, 1.f / len, len);
 
   scalar_f alpha = (x0 + 1.0) / 2.0;
   scalar_f beta  = (x0 - 1.0) / 2.0;
   Vector<scalar_f> x(len);
-  x = alpha * cos( 2.0 * M_PI * f ) + beta;
+  x = alpha * cos( 2.0 * VSIP_IMPL_PI * f ) + beta;
 
   // tmp = (mag(x) > 1);
   Vector<scalar_f> tmp(len);
@@ -113,7 +114,7 @@
   {
     /*wf = real(wf).*exp(-j*pi*f);*/ 
     { 
-      wf = wfR * euler( static_cast<scalar_f>(-1 * M_PI) * f );
+      wf = wfR * euler( static_cast<scalar_f>(-1 * VSIP_IMPL_PI) * f );
     }
 
     /* wf(n2+1:len) = -wf(n2+1:len); */
@@ -158,7 +159,7 @@
 
   Vector<scalar_f> v(len);
 
-  scalar_f temp = 2 * M_PI / (len + 1);
+  scalar_f temp = 2 * VSIP_IMPL_PI / (len + 1);
 
   for ( unsigned int n = 0; n < len; ++n )
     v.put( n, 0.5 * (1 - static_cast<scalar_f>(cos(temp * (n + 1)))) );
Index: src/vsip/GNUmakefile.inc.in
===================================================================
--- src/vsip/GNUmakefile.inc.in	(revision 148073)
+++ src/vsip/GNUmakefile.inc.in	(working copy)
@@ -39,26 +39,27 @@
 src_vsip_cxx_objects := $(patsubst $(srcdir)/%.cpp, %.$(OBJEXT), $(src_vsip_cxx_sources))
 cxx_sources += $(src_vsip_cxx_sources)
 
-libs += lib/lib$(SVPP_LIBRARY).a
+libs += lib/lib$(SVPP_LIBRARY).$(LIBEXT)
 ########################################################################
 # Rules
 ########################################################################
 
-all:: lib/lib$(SVPP_LIBRARY).a
+all:: lib/lib$(SVPP_LIBRARY).$(LIBEXT)
 
 clean::
-	rm -f lib/lib$(SVPP_LIBRARY).a
+	rm -f lib/lib$(SVPP_LIBRARY).$(LIBEXT)
 
-lib/lib$(SVPP_LIBRARY).a: $(src_vsip_cxx_objects)
-	$(AR) rc $@ $^ || rm -f $@
+lib/lib$(SVPP_LIBRARY).$(LIBEXT): $(src_vsip_cxx_objects)
+	$(archive)
 
 # Install the library and its header files.  When building with
 # separate $objdir, acconfig.hpp will be generated in the $objdir, so it
 # must be copied explicitly.  By copying it last, we override any
 # stale copy in the $srcdir.
-install:: lib/lib$(SVPP_LIBRARY).a
+install:: lib/lib$(SVPP_LIBRARY).$(LIBEXT)
 	$(INSTALL) -d $(DESTDIR)$(libdir)
-	$(INSTALL_DATA) lib/lib$(SVPP_LIBRARY).a $(DESTDIR)$(libdir)/lib$(SVPP_LIBRARY)$(suffix).a
+	$(INSTALL_DATA) lib/lib$(SVPP_LIBRARY).$(LIBEXT) \
+          $(DESTDIR)$(libdir)/lib$(SVPP_LIBRARY)$(suffix).$(LIBEXT)
 	$(INSTALL) -d $(DESTDIR)$(includedir)/vsip/impl
 	$(INSTALL) -d $(DESTDIR)$(includedir)/vsip/impl/simd
 	$(INSTALL) -d $(DESTDIR)$(includedir)/vsip/impl/fft
Index: src/vsip_csl/ref_dft.hpp
===================================================================
--- src/vsip_csl/ref_dft.hpp	(revision 148073)
+++ src/vsip_csl/ref_dft.hpp	(working copy)
@@ -14,6 +14,7 @@
   Included Files
 ***********************************************************************/
 
+#include <vsip/impl/config.hpp>
 #include <cassert>
 
 #include <vsip/complex.hpp>
@@ -69,7 +70,7 @@
 	 sizeof(T1) == sizeof(T2) && in.size() == out.size());
   typedef double AccT;
 
-  AccT const phi = idir * 2.0 * M_PI/size;
+  AccT const phi = idir * 2.0 * VSIP_IMPL_PI/size;
 
   for (index_type w=0; w<out.size(); ++w)
   {
Index: src/vsip_csl/GNUmakefile.inc.in
===================================================================
--- src/vsip_csl/GNUmakefile.inc.in	(revision 148073)
+++ src/vsip_csl/GNUmakefile.inc.in	(working copy)
@@ -17,8 +17,12 @@
 src_vsip_csl_CXXINCLUDES := -I$(srcdir)/src
 src_vsip_csl_CXXFLAGS := $(src_vsip_csl_CXXINCLUDES)
 
-src_vsip_csl_cxx_sources = $(srcdir)/src/vsip_csl/matlab_file.cpp
+src_vsip_csl_cxx_sources :=
 
+ifndef INTEL_WIN
+src_vsip_csl_cxx_sources += $(srcdir)/src/vsip_csl/matlab_file.cpp
+endif
+
 ifdef VSIP_CSL_HAVE_PNG
 src_vsip_csl_cxx_sources += $(srcdir)/src/vsip_csl/png.cpp
 endif
@@ -26,24 +30,25 @@
                               $(src_vsip_csl_cxx_sources))
 cxx_sources += $(src_vsip_csl_cxx_sources)
 
-libs += lib/libvsip_csl.a
+libs += lib/libvsip_csl.$(LIBEXT)
 
 ########################################################################
 # Rules
 ########################################################################
 
-all:: lib/libvsip_csl.a
+all:: lib/libvsip_csl.$(LIBEXT)
 
 clean::
-	rm -f lib/libvsip_csl.a
+	rm -f lib/libvsip_csl.$(LIBEXT)
 
-lib/libvsip_csl.a: $(src_vsip_csl_cxx_objects)
-	$(AR) rc $@ $^ || rm -f $@
+lib/libvsip_csl.$(LIBEXT): $(src_vsip_csl_cxx_objects)
+	$(archive)
 
 # Install the extensions library and its header files.
-install:: lib/libvsip_csl.a
+install:: lib/libvsip_csl.$(LIBEXT)
 	$(INSTALL) -d $(DESTDIR)$(libdir)
-	$(INSTALL_DATA) lib/libvsip_csl.a $(DESTDIR)$(libdir)/libvsip_csl$(suffix).a
+	$(INSTALL_DATA) lib/libvsip_csl.$(LIBEXT) \
+          $(DESTDIR)$(libdir)/libvsip_csl$(suffix).$(LIBEXT)
 	$(INSTALL) -d $(DESTDIR)$(includedir)/vsip_csl
 	for header in $(wildcard $(srcdir)/src/vsip_csl/*.hpp); do \
           $(INSTALL_DATA) $$header $(DESTDIR)$(includedir)/vsip_csl; \
Index: GNUmakefile.in
===================================================================
--- GNUmakefile.in	(revision 148073)
+++ GNUmakefile.in	(working copy)
@@ -74,6 +74,8 @@
 
 ### Compilation ###
 
+# Are we using the intel-win toolchain ?
+INTEL_WIN := @INTEL_WIN@
 # The path to the archiver. 
 AR := @AR@
 # The path to the C++ compiler.
@@ -96,6 +98,8 @@
 LIBS := @LIBS@
 # The extension for object files.
 OBJEXT := @OBJEXT@
+# The extension for archives.
+LIBEXT := @LIBEXT@
 
 ### Parallelization ###
 
@@ -140,6 +144,75 @@
 endif
 
 ########################################################################
+# Build instructions
+########################################################################
+
+# For the intel-win toolchain use special build instructions.
+ifdef INTEL_WIN
+
+define make_dep
+@echo generating dependencies for $(@D)/$(<F)
+# Using icl /QM generates invalid makefile dependencies since ':' and ' '
+# are unquoted in file paths.
+#$(SHELL) -ec '$(CXX) /QM /nologo $(CXXFLAGS) \
+#	      $(call dir_var,$(dir $<),CXXFLAGS) $< \
+#	      | sed "s|$(*F)\\.$(OBJEXT)[ :]*|$*\\.d $*\\.$(OBJEXT) : |g" > $@'
+touch $@
+endef
+
+define compile
+@echo compiling $(@D)/$(@F)
+$(CXX) /nologo /c $(CXXFLAGS) $(call dir_var,$(dir $<),CXXFLAGS) /Fo$@ $<
+endef
+
+define archive
+@echo archiving $@
+xilib /nologo /out:$@ $^ || rm -f $@
+endef
+
+define link_dso
+@echo linking $@
+$(CXX) /nologo /LD -o $@ $^ $(LIBS)
+endef
+
+define link_app
+@echo linking $@
+xilink /nologo /out:$@ $< /libpath:lib lib$(SVPP_LIBRARY).lib \
+  $(patsubst -l%,lib%.lib, $(subst -L,/libpath:, $(LIBS)))
+endef
+
+else # not intel-win
+
+define make_dep
+@echo generating dependencies for $(@D)/$(<F)
+$(SHELL) -ec '$(CXXDEP) $(CXXFLAGS) \
+	      $(call dir_var,$(dir $<),CXXFLAGS) $< \
+	      | sed "s|$(*F)\\.$(OBJEXT)[ :]*|$*\\.d $*\\.$(OBJEXT) : |g" > $@'
+endef
+
+define compile
+@echo compiling $(@D)/$(@F)
+$(CXX) -c $(CXXFLAGS) $(call dir_var,$(dir $<),CXXFLAGS) -o $@ $<
+endef
+
+define archive
+@echo archiving $@
+$(AR) rc $@ $^ || rm -f $@
+endef
+
+define link_dso
+@echo linking $@
+$(LDSHARED) $(LDFLAGS) -o $@ $^ $(LIBS)
+endef
+
+define link_app
+@echo linking $@
+$(CXX) $(LDFLAGS) -o $@ $< -Llib -l$(SVPP_LIBRARY) $(LIBS)
+endef
+
+endif
+
+########################################################################
 # Subdirectory Variables
 ########################################################################
 
@@ -260,15 +333,12 @@
 # subdirectory containing the input source file, with slashes replaced
 # by underscores.
 %.$(OBJEXT): %.cpp
-	$(CXX) -c $(CXXFLAGS) $(call dir_var,$(dir $<),CXXFLAGS) \
-		-o $@ $<
+	$(compile)
 
 # Generate a dependency Makefile fragment for a C++ source file.
 # (This recipe is taken from the GNU Make manual.)
 %.d: %.cpp
-	$(SHELL) -ec '$(CXXDEP) $(CXXFLAGS) \
-		      $(call dir_var,$(dir $<),CXXFLAGS) $< \
-		      | sed "s|$(*F)\\.o[ :]*|$*\\.d $*\\.$(OBJEXT) : |g" > $@'
+	$(make_dep)
 
 ########################################################################
 # Standard Targets
@@ -378,6 +448,7 @@
           --exclude CVS \
           --exclude _darcs \
           --exclude .cvsignore \
+          --exclude .svn \
           --exclude autom4te.cache \
           --exclude '*~' \
           --exclude '.#*' \
Index: tests/extdata-subviews.cpp
===================================================================
--- tests/extdata-subviews.cpp	(revision 148073)
+++ tests/extdata-subviews.cpp	(working copy)
@@ -531,7 +531,7 @@
         else
           test_assert(equal(storage_type::get(ptr, i*str), T(i * cols + i - (d * cols)) ) );
 
-        storage_type::put(ptr, i*str, T(M_PI + i));
+        storage_type::put(ptr, i*str, T(VSIP_IMPL_PI + i));
       }
     } 
 
@@ -539,9 +539,9 @@
     for ( index_type i = 0; i < size; i++ )
     {
       if ( d >= 0 )
-        test_assert( equal( mat(i, i + d), T(M_PI + i) ) );
+        test_assert( equal( mat(i, i + d), T(VSIP_IMPL_PI + i) ) );
       else
-        test_assert( equal( mat(i - d, i), T(M_PI + i) ) );
+        test_assert( equal( mat(i - d, i), T(VSIP_IMPL_PI + i) ) );
     }
   }
 }
Index: tests/matvec.cpp
===================================================================
--- tests/matvec.cpp	(revision 148073)
+++ tests/matvec.cpp	(working copy)
@@ -405,7 +405,7 @@
   Matrix<complex<T3> > w(rows, m, complex<float>());
   Matrix<complex<T3> > r(rows, m);
 
-  T3 nu = M_PI / 2;
+  T3 nu = VSIP_IMPL_PI / 2;
   T3 phi = 0.123;
   T3 phase = phi;
 
@@ -491,9 +491,9 @@
   // Test generalized matrix operations
 
   // params: alpha, beta
-  Test_gem_types<float>( M_E, M_PI );
+  Test_gem_types<float>( M_E, VSIP_IMPL_PI );
 
-  Test_gem_types<double>( -M_E, -M_PI );
+  Test_gem_types<double>( -M_E, -VSIP_IMPL_PI );
 
   Test_gem_types<complex<float> >
     ( complex<float>(M_LN2, -M_SQRT2), complex<float>(M_LOG2E, M_LN10) );
@@ -512,18 +512,18 @@
   modulate_cases<long double>(16);
 #endif
 
-  Test_outer<float>( static_cast<float>(M_PI), 3, 3 );
-  Test_outer<float>( static_cast<float>(M_PI), 5, 7 );
-  Test_outer<float>( static_cast<float>(M_PI), 7, 5 );
-  Test_outer<double>( static_cast<double>(M_PI), 3, 3 );
-  Test_outer<double>( static_cast<double>(M_PI), 5, 7 );
-  Test_outer<double>( static_cast<double>(M_PI), 7, 5 );
-  Test_outer<complex<float> >( complex<float>(M_PI, M_E), 3, 3 );
-  Test_outer<complex<float> >( complex<float>(M_PI, M_E), 5, 7 );
-  Test_outer<complex<float> >( complex<float>(M_PI, M_E), 7, 5 );
-  Test_outer<complex<double> >( complex<double>(M_PI, M_E), 3, 3 );
-  Test_outer<complex<double> >( complex<double>(M_PI, M_E), 5, 7 );
-  Test_outer<complex<double> >( complex<double>(M_PI, M_E), 7, 5 );
+  Test_outer<float>( static_cast<float>(VSIP_IMPL_PI), 3, 3 );
+  Test_outer<float>( static_cast<float>(VSIP_IMPL_PI), 5, 7 );
+  Test_outer<float>( static_cast<float>(VSIP_IMPL_PI), 7, 5 );
+  Test_outer<double>( static_cast<double>(VSIP_IMPL_PI), 3, 3 );
+  Test_outer<double>( static_cast<double>(VSIP_IMPL_PI), 5, 7 );
+  Test_outer<double>( static_cast<double>(VSIP_IMPL_PI), 7, 5 );
+  Test_outer<complex<float> >( complex<float>(VSIP_IMPL_PI, M_E), 3, 3 );
+  Test_outer<complex<float> >( complex<float>(VSIP_IMPL_PI, M_E), 5, 7 );
+  Test_outer<complex<float> >( complex<float>(VSIP_IMPL_PI, M_E), 7, 5 );
+  Test_outer<complex<double> >( complex<double>(VSIP_IMPL_PI, M_E), 3, 3 );
+  Test_outer<complex<double> >( complex<double>(VSIP_IMPL_PI, M_E), 5, 7 );
+  Test_outer<complex<double> >( complex<double>(VSIP_IMPL_PI, M_E), 7, 5 );
 
   return 0;
 }
Index: tests/fft.cpp
===================================================================
--- tests/fft.cpp	(revision 148073)
+++ tests/fft.cpp	(working copy)
@@ -10,6 +10,7 @@
   Included Files
 ***********************************************************************/
 
+#include <vsip/impl/config.hpp>
 #include <iostream>
 #include <cmath>
 
Index: apps/sarsim/fft.hpp
===================================================================
--- apps/sarsim/fft.hpp	(revision 148073)
+++ apps/sarsim/fft.hpp	(working copy)
@@ -112,7 +112,7 @@
     int mh = m/2;
     // printf("ldm: %d (m=%d  mh=%d)\n", ldm, m, mh);
 
-    double phi = isign * (2*M_PI) / m;
+    double phi = isign * (2*VSIP_IMPL_PI) / m;
 
     double s1 = 0.0;
     double c1 = 1.0;
@@ -123,7 +123,7 @@
     for (int j=0; j<mh; j++)
     {
       // printf("  j: %d\n", j);
-      // e = exp(isign*2*M_PI*I*j/m);
+      // e = exp(isign*2*VSIP_IMPL_PI*I*j/m);
 
       // e = SinCos<float>(phi * j);
 
Index: configure.ac
===================================================================
--- configure.ac	(revision 148073)
+++ configure.ac	(working copy)
@@ -361,12 +361,28 @@
   ac_exeext="$exe_ext"
   ac_cv_exeext="$exe_ext"
 fi
+INTEL_WIN=
 if test "$CXX" == "cxppc"; then
   CXXDEP="$CXX -Make"
+elif test "$CXX" == "icl"; then
+  CXXDEP="$CXX /QM"
+  INTEL_WIN=1
 else
   CXXDEP="$CXX -M"
 fi
 AC_SUBST(CXXDEP)
+AC_SUBST(INTEL_WIN, $INTEL_WIN)
+
+case $target in
+  *-mingw32)
+    LIBEXT="lib"
+    ;;
+  *)
+    LIBEXT="a"
+    ;;
+esac
+AC_SUBST(LIBEXT)
+
 AC_LANG(C++)
 
 # assign cflags to CLAPACK_CFLAGS if the user didn't use --with-clapack-cflags
Index: examples/fft.cpp
===================================================================
--- examples/fft.cpp	(revision 148073)
+++ examples/fft.cpp	(working copy)
@@ -53,7 +53,7 @@
 
   // Create input test data
   for ( index_type i = 0; i < N; ++i )
-    in(i) = sin(2 * M_PI * i / N);
+    in(i) = sin(2 * VSIP_IMPL_PI * i / N);
 
   // Compute discrete transform (for reference)
   ref::dft(in, ref, -1);
Index: examples/GNUmakefile.inc.in
===================================================================
--- examples/GNUmakefile.inc.in	(revision 148073)
+++ examples/GNUmakefile.inc.in	(working copy)
@@ -16,6 +16,10 @@
 examples_CXXFLAGS := $(examples_CXXINCLUDES)
 
 examples_cxx_sources := $(wildcard $(srcdir)/examples/*.cpp)
+ifndef VSIP_CSL_HAVE_PNG
+examples_cxx_sources := $(filter-out $(srcdir)/examples/png.cpp, \
+                          $(examples_cxx_sources))
+endif
 examples_cxx_objects := \
 	$(patsubst $(srcdir)/%.cpp, %.$(OBJEXT), $(examples_cxx_sources))
 cxx_sources += $(examples_cxx_sources)
@@ -45,5 +49,5 @@
 	  $(DESTDIR)$(pkgdatadir)/Makefile
 
 $(examples_cxx_exes): %$(EXEEXT): %.$(OBJEXT) $(libs)
-	$(CXX) $(LDFLAGS) -o $@ $< -Llib -l$(SVPP_LIBRARY) $(LIBS)
+	$(link_app)
 
Index: examples/example1.cpp
===================================================================
--- examples/example1.cpp	(revision 148073)
+++ examples/example1.cpp	(working copy)
@@ -10,6 +10,7 @@
   Included Files
 ***********************************************************************/
 
+#include <vsip/impl/config.hpp>
 #include <cmath>
 #include <iostream>
 #include <vsip/initfin.hpp>
@@ -31,7 +32,7 @@
 
   vector_type v1(10);
   // Initialize all values to PI.
-  v1 = M_PI;
+  v1 = VSIP_IMPL_PI;
   // Multiple all values by two.
   v1 *= 2;
   
