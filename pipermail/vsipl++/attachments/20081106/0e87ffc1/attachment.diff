Index: src/vsip/core/cvsip/matvec.hpp
===================================================================
--- src/vsip/core/cvsip/matvec.hpp	(revision 225932)
+++ src/vsip/core/cvsip/matvec.hpp	(working copy)
@@ -158,67 +158,69 @@
 
 } // namespace vsip::impl::cvsip
 
+namespace dispatcher
+{
+
 template <typename T,
-          typename Block1,
-          typename Block2>
-struct Evaluator<Op_prod_vv_dot, Return_scalar<T>, Op_list_2<Block1, Block2>,
-                 Cvsip_tag>
+          typename Block0,
+          typename Block1>
+struct Evaluator<Op_prod_vv_dot, Cvsip_tag,
+                 Return_scalar<T>(Block0 const&, Block1 const&)>
 {
   typedef cvsip::Op_traits<T> traits;
 
   static bool const ct_valid = 
     traits::valid &&
+    Type_equal<T, typename Block0::value_type>::value &&
     Type_equal<T, typename Block1::value_type>::value &&
-    Type_equal<T, typename Block2::value_type>::value &&
     // check that direct access is supported
-    Ext_data_cost<Block1>::value == 0 &&
-    Ext_data_cost<Block2>::value == 0;
+    Ext_data_cost<Block0>::value == 0 &&
+    Ext_data_cost<Block1>::value == 0;
 
-  static bool rt_valid(Block1 const&, Block2 const&) { return true;}
+  static bool rt_valid(Block0 const&, Block1 const&) { return true;}
 
-  static T exec(Block1 const& a, Block2 const& b)
+  static T exec(Block0 const& a, Block1 const& b)
   {
     VSIP_IMPL_COVER_FCN("Op_prod_vv_dot/cvsip", exec);
     assert(a.size(1, 0) == b.size(1, 0));
 
-    Ext_data<Block1> ext_a(const_cast<Block1&>(a));
-    Ext_data<Block2> ext_b(const_cast<Block2&>(b));
+    Ext_data<Block0> ext_a(const_cast<Block0&>(a));
+    Ext_data<Block1> ext_b(const_cast<Block1&>(b));
     cvsip::View<1, T> aview(ext_a.data(), 0, ext_a.stride(0), a.size(1, 0));
     cvsip::View<1, T> bview(ext_b.data(), 0, ext_b.stride(0), b.size(1, 0));
     return traits::dot(aview.ptr(), bview.ptr());
   }
 };
 
+
 template <typename T,
-          typename Block1,
-          typename Block2>
-struct Evaluator<Op_prod_vv_dot, Return_scalar<std::complex<T> >,
-                 Op_list_2<Block1, 
-                           Unary_expr_block<1, conj_functor,
-                                            Block2, std::complex<T> > const>,
-                 Cvsip_tag>
+          typename Block0,
+          typename Block1>
+struct Evaluator<Op_prod_vv_dot, Cvsip_tag,
+                 Return_scalar<std::complex<T> >(Block0 const&, 
+                   Unary_expr_block<1, conj_functor, Block1, std::complex<T> > const&)>
 {
   typedef cvsip::Op_traits<std::complex<T> > traits;
-  typedef Unary_expr_block<1, conj_functor, Block2, complex<T> > block2_type;
+  typedef Unary_expr_block<1, conj_functor, Block1, std::complex<T> > block1_type;
 
   static bool const ct_valid = 
     traits::valid &&
+    Type_equal<complex<T>, typename Block0::value_type>::value &&
     Type_equal<complex<T>, typename Block1::value_type>::value &&
-    Type_equal<complex<T>, typename Block2::value_type>::value &&
     // check that direct access is supported
-    Ext_data_cost<Block1>::value == 0 &&
-    Ext_data_cost<Block2>::value == 0;
+    Ext_data_cost<Block0>::value == 0 &&
+    Ext_data_cost<Block1>::value == 0;
 
-  static bool rt_valid(Block1 const&, block2_type const&)
+  static bool rt_valid(Block0 const&, block1_type const&)
   { return true; }
 
-  static complex<T> exec(Block1 const& a, block2_type const& b)
+  static complex<T> exec(Block0 const& a, block1_type const& b)
   {
     VSIP_IMPL_COVER_FCN("Op_prod_vv_dot(conj)/cvsip", exec);
     assert(a.size(1, 0) == b.size(1, 0));
 
-    Ext_data<Block1> ext_a(const_cast<Block1&>(a));
-    Ext_data<Block2> ext_b(const_cast<Block2&>(b.op()));
+    Ext_data<Block0> ext_a(const_cast<Block0&>(a));
+    Ext_data<Block1> ext_b(const_cast<Block1&>(b.op()));
     cvsip::View<1, std::complex<T> >
       aview(ext_a.data(), 0, ext_a.stride(0), a.size(1, 0));
     cvsip::View<1, std::complex<T> >
@@ -227,13 +229,13 @@
   }
 };
 
+
 template <typename T,
           typename Block0,
           typename Block1,
           typename Block2>
-struct Evaluator<Op_prod_vv_outer, Block0,
-		 Op_list_3<T, Block1 const&, Block2 const&>,
-                 Cvsip_tag>
+struct Evaluator<Op_prod_vv_outer, Cvsip_tag,
+                 void(Block0&, T, Block1 const&, Block2 const&)>
 {
   typedef cvsip::Op_traits<T> traits;
 
@@ -275,7 +277,8 @@
 template <typename Block0,
           typename Block1,
           typename Block2>
-struct Evaluator<Op_prod_vm, Block0, Op_list_2<Block1, Block2>, Cvsip_tag>
+struct Evaluator<Op_prod_vm, Cvsip_tag,
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
   typedef typename Block0::value_type T;
   typedef cvsip::Op_traits<T> traits;
@@ -315,7 +318,8 @@
 template <typename Block0,
           typename Block1,
           typename Block2>
-struct Evaluator<Op_prod_mv, Block0, Op_list_2<Block1, Block2>, Cvsip_tag>
+struct Evaluator<Op_prod_mv, Cvsip_tag, 
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
   typedef typename Block0::value_type T;
   typedef typename Block_layout<Block1>::order_type order1_type;
@@ -356,7 +360,8 @@
 template <typename Block0,
           typename Block1,
           typename Block2>
-struct Evaluator<Op_prod_mm, Block0, Op_list_2<Block1, Block2>, Cvsip_tag>
+struct Evaluator<Op_prod_mm, Cvsip_tag,
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
   typedef typename Block0::value_type T;
   typedef cvsip::Op_traits<T> traits;
@@ -397,8 +402,8 @@
           typename Block0,
           typename Block1,
           typename Block2>
-struct Evaluator<Op_prod_gemp, Block0, Op_list_4<T, Block1, Block2, T>,
-                 Cvsip_tag>
+struct Evaluator<Op_prod_gemp, Cvsip_tag,
+                 void(Block0&, T, Block1 const&, Block2 const&, T)>
 {
   typedef cvsip::Op_traits<T> traits;
 
@@ -435,6 +440,8 @@
   }
 };
 
+} // namespace vsip::impl::dispatcher
+
 } // namespace vsip::impl
 } // namespace vsip
 
Index: src/vsip/core/general_evaluator.hpp
===================================================================
--- src/vsip/core/general_evaluator.hpp	(revision 225932)
+++ src/vsip/core/general_evaluator.hpp	(working copy)
@@ -61,6 +61,40 @@
   static bool const ct_valid = false;
 };
 
+
+namespace dispatcher
+{
+
+#ifdef VSIP_IMPL_REF_IMPL  // from opt/dispatch.hpp.  move to general_evaluator
+                           // or create core/evaluator.hpp
+//. Define the operation-specific Evaluator signature.
+template <typename O, typename R = void> 
+struct Signature
+{
+  // The default signature is useful for a compile-time check only,
+  // as there are no arguments to inspect at runtime.
+  typedef R(type)();
+};
+
+
+//. An Evaluator determines whether an Operation can be performed
+//. with a particular backend.
+//.
+//.   O: Operation tag
+//.   B: Backend tag
+//.   S: Signature
+template <typename O,
+          typename B,
+          typename S = typename Signature<O>::type>
+struct Evaluator
+{
+  static bool const ct_valid = false;
+};
+#endif
+
+} // namespace vsip::impl::dispatcher
+
+
 } // namespace vsip::impl
 } // namespace vsip
 
Index: src/vsip/core/matvec_prod.hpp
===================================================================
--- src/vsip/core/matvec_prod.hpp	(revision 225932)
+++ src/vsip/core/matvec_prod.hpp	(working copy)
@@ -44,13 +44,24 @@
 namespace impl
 {
 
-// Generic evaluator for matrix-matrix products.
+namespace dispatcher
+{
 
+#ifndef VSIP_IMPL_REF_IMPL
+template<>
+struct List<Op_prod_mm>
+{
+  typedef Make_type_list<Cml_tag, Blas_tag, Mercury_sal_tag, 
+    Cvsip_tag, Generic_tag>::type type;
+};
+#endif
+
+/// Generic evaluator for matrix-matrix products.
 template <typename Block0,
 	  typename Block1,
 	  typename Block2>
-struct Evaluator<Op_prod_mm, Block0, Op_list_2<Block1, Block2>,
-		 Generic_tag>
+struct Evaluator<Op_prod_mm, Generic_tag, 
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
   static bool const ct_valid = true;
   static bool rt_valid(Block0&, Block1 const&, Block2 const&)
@@ -74,46 +85,21 @@
 };
 
 
-
-/// Matrix-matrix product.
-
-template <typename T0,
-	  typename T1,
-	  typename T2,
-	  typename Block0,
-	  typename Block1,
-	  typename Block2>
-void
-generic_prod(
-  const_Matrix<T0, Block0> a,
-  const_Matrix<T1, Block1> b,
-  Matrix<T2, Block2>       r)
+#ifndef VSIP_IMPL_REF_IMPL
+template<>
+struct List<Op_prod_mm_conj>
 {
-  typedef Op_list_2<Block0, Block1> signature_type;
-
-  assert(r.size(0) == a.size(0));
-  assert(r.size(1) == b.size(1));
-  assert(a.size(1) == b.size(0));
-
-#ifdef VSIP_IMPL_REF_IMPL
-  Evaluator<Op_prod_mm, Block2, signature_type, Cvsip_tag>
-    ::exec(r.block(), a.block(), b.block());
-#else
-  General_dispatch<Op_prod_mm, Block2, signature_type>
-    ::exec(r.block(), a.block(), b.block());
+  typedef Make_type_list<Cml_tag, Blas_tag, Mercury_sal_tag, 
+    Cvsip_tag, Generic_tag>::type type;
+};
 #endif
-}
 
-
-
-
-// Generic evaluator for matrix-matrix conjugate products.
-
+/// Generic evaluator for matrix-matrix conjugate products.
 template <typename Block0,
 	  typename Block1,
 	  typename Block2>
-struct Evaluator<Op_prod_mm_conj, Block0, Op_list_2<Block1, Block2>,
-		 Generic_tag>
+struct Evaluator<Op_prod_mm_conj, Generic_tag,
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
   static bool const ct_valid = true;
   static bool rt_valid(Block0&, Block1 const&, Block2 const&)
@@ -137,44 +123,58 @@
 };
 
 
+#ifndef VSIP_IMPL_REF_IMPL
+template<>
+struct List<Op_prod_mv>
+{
+  typedef Make_type_list<Cml_tag, Blas_tag, Mercury_sal_tag, 
+    Cvsip_tag, Generic_tag>::type type;
+};
+#endif
 
-/// Matrix-matrix conjugate product.
-
-template <typename T0,
-	  typename T1,
-	  typename T2,
-	  typename Block0,
+/// Generic evaluator for matrix-vector products.
+template <typename Block0,
 	  typename Block1,
 	  typename Block2>
-void
-generic_prodj(
-  const_Matrix<T0, Block0> a,
-  const_Matrix<T1, Block1> b,
-  Matrix<T2, Block2>       r)
+struct Evaluator<Op_prod_mv, Generic_tag,
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
-  typedef Op_list_2<Block0, Block1> signature_type;
+  static bool const ct_valid = true;
+  static bool rt_valid(Block0&, Block1 const&, Block2 const&)
+  { return true; }
 
-  assert(r.size(0) == a.size(0));
-  assert(r.size(1) == b.size(1));
-  assert(a.size(1) == b.size(0));
+  static void exec(Block0& r, Block1 const& a, Block2 const& b)
+  {
+    typedef typename Block0::value_type RT;
 
-#ifdef VSIP_IMPL_REF_IMPL
-  impl::generic_prod(a, conj(b), r);
-#else
-  General_dispatch<Op_prod_mm_conj, Block2, signature_type>
-    ::exec(r.block(), a.block(), b.block());
-#endif
-}
+    for (index_type i=0; i<r.size(1, 0); ++i)
+    {
+      RT sum = RT();
+      for (index_type k=0; k<a.size(2, 1); ++k)
+      {
+        sum += a.get(i, k) * b.get(k);
+      }
+      r.put(i, sum);
+    }
+  }
+};
 
 
+#ifndef VSIP_IMPL_REF_IMPL
+template<>
+struct List<Op_prod_vm>
+{
+  typedef Make_type_list<Cml_tag, Blas_tag, Mercury_sal_tag, 
+    Cvsip_tag, Generic_tag>::type type;
+};
+#endif
 
-// Generic evaluator for matrix-vector products.
-
+/// Generic evaluator for vector-matrix products.
 template <typename Block0,
 	  typename Block1,
 	  typename Block2>
-struct Evaluator<Op_prod_mv, Block0, Op_list_2<Block1, Block2>,
-		 Generic_tag>
+struct Evaluator<Op_prod_vm, Generic_tag,
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
   static bool const ct_valid = true;
   static bool rt_valid(Block0&, Block1 const&, Block2 const&)
@@ -184,21 +184,22 @@
   {
     typedef typename Block0::value_type RT;
 
-    for (index_type i=0; i<r.size(1, 0); ++i)
+    for (index_type i=0; i<r.size(); ++i)
     {
       RT sum = RT();
-      for (index_type k=0; k<a.size(2, 1); ++k)
+      for (index_type k=0; k<b.size(2, 0); ++k)
       {
-        sum += a.get(i, k) * b.get(k);
+        sum += a.get(k) * b.get(k, i);
       }
       r.put(i, sum);
     }
   }
 };
 
+} // namespace vsip::impl::dispatcher
 
-/// Matrix-vector product.
 
+/// Matrix-matrix product.
 template <typename T0,
 	  typename T1,
 	  typename T2,
@@ -208,57 +209,87 @@
 void
 generic_prod(
   const_Matrix<T0, Block0> a,
-  const_Vector<T1, Block1> b,
-  Vector<T2, Block2>       r)
+  const_Matrix<T1, Block1> b,
+  Matrix<T2, Block2>       r)
 {
   typedef Op_list_2<Block0, Block1> signature_type;
 
-  assert(r.size() == a.size(0));
-  assert(a.size(1) == b.size());
+  assert(r.size(0) == a.size(0));
+  assert(r.size(1) == b.size(1));
+  assert(a.size(1) == b.size(0));
 
 #ifdef VSIP_IMPL_REF_IMPL
-  Evaluator<Op_prod_mv, Block2, signature_type, Cvsip_tag>
-    ::exec(r.block(), a.block(), b.block());
+  dispatcher::Evaluator<Op_prod_mm, Cvsip_tag,
+    void(Block2&, Block0 const&, Block1 const&)>::exec
+    (r.block(), a.block(), b.block());
 #else
-  General_dispatch<Op_prod_mv, Block2, signature_type>
-    ::exec(r.block(), a.block(), b.block());
+  impl::dispatch<Op_prod_mm, void,
+    Block2&, Block0 const&, Block1 const&>
+    (r.block(), a.block(), b.block());
 #endif
 }
 
 
+/// Matrix-matrix conjugate product.
+template <typename T0,
+	  typename T1,
+	  typename T2,
+	  typename Block0,
+	  typename Block1,
+	  typename Block2>
+void
+generic_prodj(
+  const_Matrix<T0, Block0> a,
+  const_Matrix<T1, Block1> b,
+  Matrix<T2, Block2>       r)
+{
+  typedef Op_list_2<Block0, Block1> signature_type;
 
+  assert(r.size(0) == a.size(0));
+  assert(r.size(1) == b.size(1));
+  assert(a.size(1) == b.size(0));
 
-// Generic evaluator for vector-matrix products.
+#ifdef VSIP_IMPL_REF_IMPL
+  impl::generic_prod(a, conj(b), r);
+#else
+  impl::dispatch<Op_prod_mm_conj, void,
+    Block2&, Block0 const&, Block1 const&>
+    (r.block(), a.block(), b.block());
+#endif
+}
 
-template <typename Block0,
+
+/// Matrix-vector product.
+template <typename T0,
+	  typename T1,
+	  typename T2,
+	  typename Block0,
 	  typename Block1,
 	  typename Block2>
-struct Evaluator<Op_prod_vm, Block0, Op_list_2<Block1, Block2>,
-		 Generic_tag>
+void
+generic_prod(
+  const_Matrix<T0, Block0> a,
+  const_Vector<T1, Block1> b,
+  Vector<T2, Block2>       r)
 {
-  static bool const ct_valid = true;
-  static bool rt_valid(Block0&, Block1 const&, Block2 const&)
-  { return true; }
+  typedef Op_list_2<Block0, Block1> signature_type;
 
-  static void exec(Block0& r, Block1 const& a, Block2 const& b)
-  {
-    typedef typename Block0::value_type RT;
+  assert(r.size() == a.size(0));
+  assert(a.size(1) == b.size());
 
-    for (index_type i=0; i<r.size(); ++i)
-    {
-      RT sum = RT();
-      for (index_type k=0; k<b.size(2, 0); ++k)
-      {
-        sum += a.get(k) * b.get(k, i);
-      }
-      r.put(i, sum);
-    }
-  }
-};
+#ifdef VSIP_IMPL_REF_IMPL
+  dispatcher::Evaluator<Op_prod_mv, Cvsip_tag,
+    void(Block2&, Block0 const&, Block1 const&)>::exec
+    (r.block(), a.block(), b.block());
+#else
+  impl::dispatch<Op_prod_mv, void,
+    Block2&, Block0 const&, Block1 const&>
+    (r.block(), a.block(), b.block());
+#endif
+}
 
 
 /// Vector-matrix product.
-
 template <typename T0,
 	  typename T1,
 	  typename T2,
@@ -277,11 +308,13 @@
   assert(a.size() == b.size(0));
 
 #ifdef VSIP_IMPL_REF_IMPL
-  Evaluator<Op_prod_vm, Block2, signature_type, Cvsip_tag>
-    ::exec(r.block(), a.block(), b.block());
+  dispatcher::Evaluator<Op_prod_vm, Cvsip_tag,
+    void(Block2&, Block0 const&, Block1 const&)>::exec
+    (r.block(), a.block(), b.block());
 #else
-  General_dispatch<Op_prod_vm, Block2, signature_type>
-    ::exec(r.block(), a.block(), b.block());
+  impl::dispatch<Op_prod_vm, void,
+    Block2&, Block0 const&, Block1 const&>
+    (r.block(), a.block(), b.block());
 #endif
 }
 
@@ -290,7 +323,6 @@
 
 
 /// Matrix-matrix product dispatch.
-
 template <typename T0,
 	  typename T1,
 	  typename Block0,
@@ -310,9 +342,7 @@
 }
 
 
-
 /// Matrix-vector product dispatch.
-
 template <typename T0,
 	  typename T1,
 	  typename Block0,
@@ -332,9 +362,7 @@
 }
 
 
-
 /// Vector-Matrix product dispatch.
-
 template <typename T0,
 	  typename T1,
 	  typename Block0,
@@ -354,9 +382,7 @@
 }
 
 
-
 /// [3x3] Matrix-matrix product dispatch.
-
 template <typename T0,
 	  typename T1,
 	  typename Block0,
@@ -379,7 +405,6 @@
 
 
 /// [3x3] Matrix-vector product dispatch.
-
 template <typename T0,
 	  typename T1,
 	  typename Block0,
@@ -401,9 +426,7 @@
 }
 
 
-
 /// [4x4] Matrix-matrix product dispatch.
-
 template <typename T0,
 	  typename T1,
 	  typename Block0,
@@ -425,9 +448,7 @@
 }
 
 
-
 /// [4x4] Matrix-vector product dispatch.
-
 template <typename T0,
 	  typename T1,
 	  typename Block0,
@@ -449,9 +470,7 @@
 }
 
 
-
 /// Matrix-Matrix (with hermitian) product dispatch.
-
 template <typename T0,
           typename T1,
           typename Block0,
@@ -473,7 +492,6 @@
 
 
 /// Matrix-Matrix (with complex conjugate) product dispatch.
-
 template <typename T0,
           typename T1,
           typename Block0,
@@ -495,7 +513,6 @@
 
 
 /// Matrix-Matrix (with transpose) product dispatch.
-
 template <typename T0,
           typename T1,
           typename Block0,
Index: src/vsip/core/matvec.hpp
===================================================================
--- src/vsip/core/matvec.hpp	(revision 225932)
+++ src/vsip/core/matvec.hpp	(working copy)
@@ -19,8 +19,10 @@
 #include <vsip/matrix.hpp>
 #include <vsip/core/promote.hpp>
 #include <vsip/core/fns_elementwise.hpp>
+#include <vsip/core/general_evaluator.hpp>
+#include <vsip/core/impl_tags.hpp>
 #ifndef VSIP_IMPL_REF_IMPL
-# include <vsip/opt/general_dispatch.hpp>
+# include <vsip/opt/dispatch.hpp>
 # ifdef VSIP_IMPL_CBE_SDK
 #  include <vsip/opt/cbe/cml/matvec.hpp>
 # endif
@@ -43,17 +45,26 @@
 namespace impl
 {
 
+namespace dispatcher
+{
 
-
 // Generic evaluator for outer product
 
+#ifndef VSIP_IMPL_REF_IMPL
+template<>
+struct List<Op_prod_vv_outer>
+{
+  typedef Make_type_list<Cml_tag, Blas_tag, Mercury_sal_tag, 
+    Cvsip_tag, Generic_tag>::type type;
+};
+#endif
+
 template <typename T1,
 	  typename Block0,
 	  typename Block1,
 	  typename Block2>
-struct Evaluator<Op_prod_vv_outer, Block0,
-		 Op_list_3<T1, Block1 const&, Block2 const&>,
-		 Generic_tag>
+struct Evaluator<Op_prod_vv_outer, Generic_tag,
+                 void(Block0&, T1, Block1 const&, Block2 const&)>
 {
   static bool const ct_valid = true;
   static bool rt_valid(Block0&, T1, Block1 const&, Block2 const&) 
@@ -76,9 +87,8 @@
 	  typename Block0,
 	  typename Block1,
 	  typename Block2>
-struct Evaluator<Op_prod_vv_outer, Block0,
-		 Op_list_3<std::complex<T1>, Block1 const&, Block2 const&>,
-		 Generic_tag>
+struct Evaluator<Op_prod_vv_outer, Generic_tag,
+                 void(Block0&, std::complex<T1>, Block1 const&, Block2 const&)>
 {
   static bool const ct_valid = true;
   static bool rt_valid(Block0&, std::complex<T1>, Block1 const&, Block2 const&) 
@@ -97,6 +107,87 @@
 };
 
 
+// Generic evaluator for vector-vector dot-product.
+
+#ifndef VSIP_IMPL_REF_IMPL
+template<>
+struct List<Op_prod_vv_dot>
+{
+  typedef Make_type_list<Cml_tag, Blas_tag, Mercury_sal_tag, 
+    Cvsip_tag, Generic_tag>::type type;
+};
+#endif
+
+template <typename T,
+	  typename Block0,
+	  typename Block1>
+struct Evaluator<Op_prod_vv_dot, Generic_tag,
+                 T(Block0 const&, Block1 const&)>
+{
+  static bool const ct_valid = true;
+  static bool rt_valid(Block0 const&, Block1 const&) { return true; }
+
+  static T exec(Block0 const& a, Block1 const& b)
+  {
+    assert(a.size(1, 0) == b.size(1, 0));
+
+    T r = T();
+    for ( index_type i = 0; i < a.size(); ++i )
+      r += a.get(i) * b.get(i);
+    return r;
+  }
+};
+
+
+// Generic evaluator for general product
+
+#ifndef VSIP_IMPL_REF_IMPL
+template<>
+struct List<Op_prod_gemp>
+{
+  typedef Make_type_list<Cml_tag, Blas_tag, Mercury_sal_tag, 
+    Cvsip_tag, Generic_tag>::type type;
+};
+#endif
+
+template <typename T1,
+	  typename T2,
+	  typename Block0,
+	  typename Block1,
+	  typename Block2>
+struct Evaluator<Op_prod_gemp, Generic_tag,
+                 void(Block0&, T1, Block1 const&, Block2 const&, T2)>
+{
+  static bool const ct_valid = true;
+  static bool rt_valid(Block0&, T1, Block1 const&, Block2 const&, T2) 
+    { return true; }
+
+  static void exec(Block0& c, T1 alpha, Block1 const& a, 
+    Block2 const& b, T2 beta)
+  {
+    assert( a.size(2, 0) == c.size(2, 0) );
+    assert( b.size(2, 1) == c.size(2, 1) );
+    assert( a.size(2, 1) == b.size(2, 0) );  
+    
+    // c(i,j) = alpha * a(i) * b(j) + beta * c(i,j)
+    for ( index_type i = a.size(2, 0); i-- > 0; )
+    {
+      for ( index_type j = b.size(2, 1); j-- > 0; )
+      {
+        T1 dot = T1();
+        for ( index_type k = 0; k < a.size(2, 1); ++k )
+          dot += a.get(i, k) * b.get(k, j);
+
+        c.put(i, j, alpha * dot + beta * c.get(i, j));
+      }
+    }
+  }
+};
+
+} // namespace dispatcher
+
+
+
 // Outer product dispatch
 
 template <typename T0,
@@ -114,40 +205,18 @@
 {
   assert(r.size(0) == a.size());
   assert(r.size(1) == b.size());
-  typedef Op_list_3<T0, Block0 const&, Block1 const&> signature_type;
 #ifdef VSIP_IMPL_REF_IMPL
-  Evaluator<Op_prod_vv_outer, Block2, signature_type, Cvsip_tag>
-    ::exec(r.block(), alpha, a.block(), b.block());
+  dispatcher::Evaluator<Op_prod_vv_outer, Cvsip_tag, 
+    void(Block2&, T0, Block0 const&, Block1 const&)>::exec
+    (r.block(), alpha, a.block(), b.block());
 #else
-  General_dispatch<Op_prod_vv_outer, Block2, signature_type>
-    ::exec(r.block(), alpha, a.block(), b.block());
+  impl::dispatch<Op_prod_vv_outer, void,
+    Block2&, T0, Block0 const&, Block1 const&>
+    (r.block(), alpha, a.block(), b.block());
 #endif
 }
 
 
-// Generic evaluator for vector-vector dot-product.
-
-template <typename T,
-	  typename Block1,
-	  typename Block2>
-struct Evaluator<Op_prod_vv_dot, Return_scalar<T>, Op_list_2<Block1, Block2>,
-		 Generic_tag>
-{
-  static bool const ct_valid = true;
-  static bool rt_valid(Block1 const&, Block2 const&) { return true; }
-
-  static T exec(Block1 const& a, Block2 const& b)
-  {
-    assert(a.size(1, 0) == b.size(1, 0));
-
-    T r = T();
-    for ( index_type i = 0; i < a.size(); ++i )
-      r += a.get(i) * b.get(i);
-    return r;
-  }
-};
-
-
 // Dot product dispatch.  This is intentionally not named 'dot' to avoid
 // conflicting with vsip::dot, which shares the same signature, forcing
 // the user to resolve the call themselves.
@@ -159,23 +228,21 @@
   const_Vector<T1, Block1> w) VSIP_NOTHROW
 {
   typedef typename Promotion<T0, T1>::type return_type;
-  typedef Op_list_2<Block0, Block1> signature_type;
-
   return_type r(0);
 
 #ifdef VSIP_IMPL_REF_IMPL
-  r = Evaluator<Op_prod_vv_dot, Return_scalar<return_type>, signature_type, Cvsip_tag>
-    ::exec(v.block(), w.block());
+  r = dispatcher::Evaluator<Op_prod_vv_dot, Cvsip_tag,
+    Return_scalar<return_type>(Block0 const&, Block1 const&) >::exec
+    (v.block(), w.block());
 #else
-  r = General_dispatch<Op_prod_vv_dot, 
-                       Return_scalar<return_type>, signature_type>
-    ::exec(v.block(), w.block());
+  r = impl::dispatch<Op_prod_vv_dot, return_type,
+    Block0 const&, Block1 const&>
+    (v.block(), w.block());
 #endif
   return r;
 };
 
 
-
 // vector-vector kron
 template <typename T0,
           typename T1,
@@ -226,42 +293,6 @@
 }
 
 
-// Generic evaluator for general product
-
-template <typename T1,
-	  typename T2,
-	  typename Block0,
-	  typename Block1,
-	  typename Block2>
-struct Evaluator<Op_prod_gemp, Block0, Op_list_4<T1, Block1, Block2, T2>,
-		 Generic_tag>
-{
-  static bool const ct_valid = true;
-  static bool rt_valid(Block0&, T1, Block1 const&, Block2 const&, T2) 
-    { return true; }
-
-  static void exec(Block0& c, T1 alpha, Block1 const& a, 
-    Block2 const& b, T2 beta)
-  {
-    assert( a.size(2, 0) == c.size(2, 0) );
-    assert( b.size(2, 1) == c.size(2, 1) );
-    assert( a.size(2, 1) == b.size(2, 0) );  
-    
-    // c(i,j) = alpha * a(i) * b(j) + beta * c(i,j)
-    for ( index_type i = a.size(2, 0); i-- > 0; )
-    {
-      for ( index_type j = b.size(2, 1); j-- > 0; )
-      {
-        T1 dot = T1();
-        for ( index_type k = 0; k < a.size(2, 1); ++k )
-          dot += a.get(i, k) * b.get(k, j);
-
-        c.put(i, j, alpha * dot + beta * c.get(i, j));
-      }
-    }
-  }
-};
-
 /// General matrix product
 
 template <typename T0,
@@ -276,22 +307,21 @@
   T0 alpha, const_Matrix<T1, Block1> a,
   const_Matrix<T2, Block2> b, T0 beta, Matrix<T4, Block4> c) 
 {
-  typedef Op_list_4<T0, Block1, Block2, T0> signature_type;
-
   assert(c.size(0) == a.size(0));
   assert(c.size(1) == b.size(1));
 
 #ifdef VSIP_IMPL_REF_IMPL
-  Evaluator<Op_prod_gemp, Block4, signature_type, Cvsip_tag>
-    ::exec(c.block(), alpha, a.block(), b.block(), beta);
+  dispatcher::Evaluator<Op_prod_gemp, Cvsip_tag,
+    void(Block4&, T0, Block1 const&, Block2 const&, T0)>::exec
+    (c.block(), alpha, a.block(), b.block(), beta);
 #else
-  General_dispatch<Op_prod_gemp, Block4, signature_type>
-    ::exec(c.block(), alpha, a.block(), b.block(), beta);
+  impl::dispatch<Op_prod_gemp, void,
+    Block4&, T0, Block1 const&, Block2 const&, T0> 
+    (c.block(), alpha, a.block(), b.block(), beta);
 #endif
 }
 
 
-
 template <typename T0, typename T1, typename T3, typename T4,
   typename Block1, typename Block4>
 void 
@@ -304,8 +334,6 @@
 
 
 
-
-
 /// Class to perform transpose or hermetian (conjugate-transpose),
 /// depending on value type.
 
@@ -456,7 +484,6 @@
 }
 
 
-
 template <dimension_type d,
           typename T0,
           typename T1,
@@ -570,8 +597,6 @@
   return v.size() * nu + phi;
 }
 
-
-
 } // namespace impl
 
 
@@ -580,6 +605,7 @@
   Functions
 ***********************************************************************/
 
+
 // dot products  [math.matvec.dot]
 
 /// dot
@@ -599,7 +625,6 @@
 }
 
 
-
 /// cvjdot
 template <typename T0, typename T1, typename Block0, typename Block1>
 typename Promotion<complex<T0>, complex<T1> >::type
@@ -617,7 +642,6 @@
 }
 
  
- 
 // Transpositions  [math.matvec.transpose]
 
 /// transpose
@@ -739,6 +763,7 @@
 #endif
 
   // equivalent to C = alpha * OpA(A) * OpB(B) + beta * C
+
   impl::gemp( alpha, 
               impl::apply_mat_op<OpA>(A), 
               impl::apply_mat_op<OpB>(B),
