/**************************************************************/
/*  This file is licensed from, and is a trade secret of:     */
/*                                                            */
/*    Mercury Computer Systems, Incorporated                  */
/*    199 Riverneck Road                                      */
/*    Chelmsford, Massachusetts 01824-2820                    */
/*    United States of America                                */
/*    Telephone + 1 978 256-1300                              */
/*    Telecopy/FAX + 1 978 256-3599                           */
/*    US Customer Support ( 800 ) 872-0040                    */
/*                                                            */
/*  Refer to your Software License Agreement for provisions   */
/*  on use, duplication, or disclosure.                       */
/*  US. Government users and prime contractors are also       */
/*  governed by the following Data Rights Notice:             */
/*  Use, duplication or disclosure by the US. Government is   */
/*  subject to the provisions set forth in DFARS 252.227-7202 */
/*  or other agency data rights provisions  on commercial     */
/*  software and documentation, as applicable.                */
/*                                                            */
/*  This file: ( a ) was developed at private expense, and no */
/*  part was developed with government funds, ( b ) is a      */
/*  trade secret of Mercury Computer Systems, Inc. for the    */
/*  purposes of the Freedom of Information Act, ( c ) is      */
/*  "commercial computer software" subject to limited         */
/*  utilization as provided in the above noted Software       */
/*  License Agreement and ( d ) is in all respects            */
/*  data belonging exclusively to Mercury Computer Systems.   */
/*                                                            */
/**************************************************************/

/******************************************************************/
/* Copyright 1984-2000, Mercury Computer Systems, Inc.,           */
/* Chelmsford MA.,and all third party embedded software sources.  */
/* All rights reserved under the Copyright laws of US. and        */
/* international treaties.                                        */
/******************************************************************/

#ifndef SAL_H
#define SAL_H

/**************************************************************
**  Scientific Algorithms Library ( SAL )                    **
***************************************************************
*                                                             *
*   File Name:     SAL.H                                      *
*   Description:   C include file for Standard & Enhanced SAL *
*                                                             *
*   Note that all SAL and ESAL symbols begin with "SAL_"      *
*                                                             *
*            Mercury Computer Systems, Inc.                   *
*            Copyright ( c ) 1990  All rights reserved        *
*                                                             *
*   Revision      Date      Engineer; Reason                  *
*   --------      ----      ----------------                  *
*        0.0      900310    jg;  Created                      *
*        0.1      900814    jg;  Changed name to SAL_DEFS.H   *
*                                Changed SAL$_ to SAL_        *
*                                Added typedef COMPLEX        *
*                                Added #ifndef construct      *
*        0.2      900913    jg;  Corrected comment            *
*        0.3      911103    jg;  Renamed to SAL.H and added   *
*                                algorithm declarations       *
*        0.4      911118    jg;  Made last chge more readable *
*        0.5      920108    jg;  Added missing names from     *
*                                master list                  *
*        0.6      920108    jg;  Added vfltu[d][x]            *
*        0.7      920120    jg;  Added bprojimg[d][x] and     *
*                                bprojrow[d][x]               *
*        0.8      920212    jg;  Added vfixr[d][x],           *
*                                vfixr32[d][x],               *
*                                vfltu32[d][x]                *
*        0.9      920522    jg;  Added medf[d][x],            *
*                                medf3x3[d][x],               *
*                                medf5x5[d][x]                *
*        1.0      920526    jg;  Added fft[d]_table structure *
*                                declarations                 *
*        1.1      920729    jg;  Added global variable        *
*                                extern declarations          *
*        1.2      921017    jg;  Added mtrans2[d][x]          *
*        1.3      921030    jg;  Removed salcache declaration *
*        1.4      921103    jg;  Added cidotpr[d][x]          *
*        1.5      930202    jg;  Added crdotpr[d][x]          *
*        1.6      930713    jg;  Corrected fftwts_tab declar. *
*        1.7      930823    jg;  Added SAL_CACHE_SIZE         *
*        1.8      930907    jg;  Added cache image routines   *
*        1.9      931027  Gogo;  Removed function prototypes  *
*        2.0      931118    jg;  Corrected function prototypes*
*        2.1      940207    jg;  Corrected fftwts[d] prototype*
*        2.2      940207    jg;  Added cconv, cmatfbs,        *
*                                cmatinv_lu, cmatlud, ihist   *
*        2.3      940208  Gogo;  Added print_[C]sal_version   *
*        2.4      940330  Gogo;  Fixed vscatr and vscatrx     *
*        2.5      940427  Gogo;  Fixed vintb prototype        *
*        2.6      940608  Gogo;  Fixed matfbs prototype       *
*        2.7      941013  Gogo;  Added cfftb3[5] fftwts3[5]   *
*        2.8      941018  Gogo;  Added fir2[3], ihist32       *
*        2.9      941228  Gogo;  Fixed fir2[3], ihist32       *
*        3.0      950404  Gogo;  Added vsort, vsorti          *
*        3.1      950614   jfk;  changed vsort[i] for OFLAG   *
*        3.2      950621   jfk;  Added vfixu                  *
*        3.3      950728    jg;  Added fft_xxx API            *
*        3.4      961022   jfk;  Added rest of esal entries   *
*        3.5      970131   jfk;  Added matfbsd and matludd    *
*        3.6      970212   jfk;  Merged with Jon's window API *
*        3.7      970712   jfk;  Added cmatludd cmatfbsd      *
*        3.8      970717   jfk;  Added double precision ffts  *
*        3.9      970729   jfk;  Added 5-vector ESAL flags    *
*        4.0      980406   jfk;  Added __cplusplus support    *
*        4.1      980618   jfk;  Added PPC750 Cache macros    *
*        5.0      010204   jg;   Added vconvert_xxx ( ) API   *
*        5.1      011114   jg;   Added multiple dot prod API  *
*        5.2      011215   jg;   Added big_radix3 to FFT setup*
*        5.3      020119   jg;   Added conv2d, dotprm and log *
*        5.4      020322   jg;   Amended FFT_setup structure  *
*        5.5      020819   jg;   Added SAL-6.5.0 prototypes   *
*        5.6      040107   jg;   Added resamp API             *
*        5.7      060710 eatabay;  Added SAL-7.5.0 FFT mods.  *
*        5.8      070615 eatabay;  CR07060625613 fix          *
***************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

#if defined( xint32 )
	#undef xint32
#endif
#if defined ( __PPC64__ )
	#define	xint32	int
#else
	#define	xint32	long
#endif

/** ----- Return status symbols --------------------------------------- **/

#define SAL_SUCCESS             0
#define SAL_FAILURE            -1    /* On unknown/uncategorized error. */
#define SAL_INVALID_ARGUMENT   -2
#define SAL_NOT_ENOUGH_MEMORY  -3
#define SAL_INVALID_SIZE       -4    /* On invalid element count. */
#define SAL_INVALID_FLAG       -5    /* On invalid flag. */
#define SAL_INVALID_FUNCTION   -6    /* On invalid function enum value. */
#define SAL_FFT_NOT_SUPPORTED  -7    /* On unsupported FFT function. */
#define SAL_INVALID_HANDLE     -8    /* On invalid/null setup handle. */

#define SAL_SORT_EIG            1

/** ----- Type structure definitions ---------------------------------- **/

/** Interleaved Complex **/

typedef struct {
   signed char      real;
   signed char      imag;
} COMPLEX_S8;

typedef struct {
   unsigned char  real;
   unsigned char  imag;
} COMPLEX_U8;

typedef struct {
   short     real;
   short     imag;
} COMPLEX_S16;

typedef struct {
   unsigned short  real;
   unsigned short  imag;
} COMPLEX_U16;

typedef struct {
   xint32      real;
   xint32      imag;
} COMPLEX_S32;

typedef struct {
   unsigned xint32  real;
   unsigned xint32  imag;
} COMPLEX_U32;

typedef struct {
   float     real;
   float     imag;
} COMPLEX;

typedef COMPLEX  COMPLEX_F32;

typedef struct {
   double    real;
   double    imag;
} DOUBLE_COMPLEX;

typedef DOUBLE_COMPLEX  COMPLEX_F64;

/** Split Complex **/

typedef struct {
   float     *realp;
   float     *imagp;
} COMPLEX_SPLIT;

typedef COMPLEX_SPLIT  COMPLEX_SPLIT_F32;

typedef struct {
   double     *realp;
   double     *imagp;
} DOUBLE_COMPLEX_SPLIT;

typedef DOUBLE_COMPLEX_SPLIT  COMPLEX_SPLIT_F64;

/** ----- Flags ------------------------------------------------------- **/

/**  Flag definitions for cache management API **/

#define SAL_CACHE_SYNCHRONOUS   ( 0 )       /* default */
#define SAL_CACHE_ASYNCHRONOUS  ( 1 )

/**  Flag definitions for complex 2D convolution routines **/

#define  SAL_CONJUGATE  ( 2 )     /* conjugate input matrix */

/**  Flag definitions for multiple complex dot product routines **/

#define  SAL_ACCUMULATE       ( 1 )  /* accumulate to output matrix */

#define  SAL_CONJUGATE_LEFT   ( 2 )  /* conjugate left input */
#define  SAL_CONJUGATE_RIGHT  ( 4 )  /* conjugate right input */

#define  SAL_TRANSPOSE_LEFT   ( 8 )  /* transpose left input */
#define  SAL_TRANSPOSE_RIGHT  ( 16 )  /* transpose right input */

/*
 *  Flag definitions for the vconvert_xxx ( ) API
 *  ( OR one SAL_ROUND_xxx flag with one SAL_FIELD_xxx flag )
 */
#define  SAL_ROUND_ZERO       ( 0 ) /* round toward zero */
#define  SAL_ROUND_NEAREST    ( 1 ) /* round to the nearest integer */
                                    /* ( tie goes to nearest even integer ) */
#define  SAL_ROUND_UP         ( 2 ) /* round toward positive infinity */
#define  SAL_ROUND_DOWN       ( 3 ) /* round toward negative infinity */

#define  SAL_FIELD_SATURATE   ( 4 ) /* saturate the conversion to the */
                                    /* target data type */
#define  SAL_FIELD_NOSATURATE ( 0 ) /* do not saturate ( if the conversion */
                                    /* doesn't fit into the target data */
                                    /* type, the result is undefined ) */

/** ----- Mixer defines ----------------------------------------------- **/

#define SAL_CONJUGATE_SIGNAL      ( 1 << 29 )
#define SAL_CONJUGATE_OSCILLATOR  ( 1 << 30 )

/** ----- Unwrap phase state structure & defines ---------------------- **/

typedef struct sal_unwrap_phase_state {
  double reserved[4];
} SAL_unwrap_phase_state;

#define SAL_UNWRAP_PHASE_START      ( 0 )
#define SAL_UNWRAP_PHASE_CONTINUE   ( 1 << 30 )

/** ----- FFT flags definitions and structure and enum typedefs ----- **/

/**  Flag definitions for the FFT API **/

#define  FFT_FORWARD                  ( 1 )
#define  FFT_INVERSE                  ( -1 )
#define  FFT_RADIX3                   ( 1 )
#define  FFT_RADIX5                   ( 2 )
#define  FFT_COMPLEX_ONLY             ( 4 )
#define  FFT_REAL_ONLY                ( 8 )
#define  FFT_DRAM_TWIDDLES            ( 16 )
#define  FFT_OPTIMAL_INPUTS           ( 32 )
#define  FFT_FAST_CONVOLUTION         ( 64 )
#define  FFT_RADIX9                   ( 128 )
#define  FFT_COMPLEX_SPLIT_ONLY       ( 256 )
#define  FFT_COMPLEX_INTERLEAVED_ONLY ( 512 )
#define  SAL_HALF_WINDOW              ( 1 )
#define  SAL_HANN_DENORM              ( 0 )
#define  SAL_HANN_NORM                ( 2 )

/**  Flag definitions for the fft1d_setup[d]() and fft2d_setup[d]() API **/
/**  One flag from each pair may be OR'ed together **/

#define  SAL_FFT_OPTIMIZE_FOR_TIME    ( 0L )  /* optimize for minimal time */
#define  SAL_FFT_OPTIMIZE_FOR_SPACE   ( 1L )  /* optimize for minimal space */

/**  For out-of-place FFT functions only **/

#define  SAL_FFT_DESTROY_INPUT        ( 0L )  /* input may be destroyed */
#define  SAL_FFT_PRESERVE_INPUT       ( 2L )  /* input is preserved */

/**  The following flag may be input to either fft1d_setup[d]() or     **/
/**  fft2d_setup[d]() to indicate that, if a temp buffer is required,  **/
/**  it will be allocated by the user and supplied to the setup object **/
/**  via a subsequent call to fft_setup[d]_set_temp_buffer().          **/
/**  The size of the temp buffer (could be zero) may be obtained with  **/
/**  a call to fft_setup_get_temp_buffer_size().                       **/

#define  SAL_FFT_WILL_SUPPLY_TEMP_BUFFER  ( 32768L )

/** FFT_setup handle **/

typedef struct sal__fft_setup  *FFT_setup;
typedef struct sal__fft_setupd *FFT_setupd;

/** ------ FFT Enumerations for fft1d_setup[d]() and fft2d_setup[d]() ----- **/

typedef enum SAL_fft1d_func_t {
  SAL_FFT1D_FUNC_LB = 0,
  SAL_FFT3_CIPX,
  SAL_FFT3_COPX,
  SAL_FFT3_RIPX,
  SAL_FFT3_ROPX,
  SAL_FFT3_ZIPX,
  SAL_FFT3_ZOPX,
  SAL_FFT3_ZRIPX,
  SAL_FFT3_ZROPX,
  SAL_FFT3M_ROWS_CIPX,
  SAL_FFT3M_COLS_CIPX,
  SAL_FFT3M_ROWS_COPX,
  SAL_FFT3M_COLS_COPX,
  SAL_FFT3M_ROWS_RIPX,
  SAL_FFT3M_COLS_RIPX,
  SAL_FFT3M_ROWS_ROPX,
  SAL_FFT3M_COLS_ROPX,
  SAL_FFT3M_ROWS_ZIPX,
  SAL_FFT3M_COLS_ZIPX,
  SAL_FFT3M_ROWS_ZOPX,
  SAL_FFT3M_COLS_ZOPX,
  SAL_FFT3M_ROWS_ZRIPX,
  SAL_FFT3M_COLS_ZRIPX,
  SAL_FFT3M_ROWS_ZROPX,
  SAL_FFT3M_COLS_ZROPX,
  SAL_FFT5_CIPX,
  SAL_FFT5_COPX,
  SAL_FFT5_RIPX,
  SAL_FFT5_ROPX,
  SAL_FFT5_ZIPX,
  SAL_FFT5_ZOPX,
  SAL_FFT5_ZRIPX,
  SAL_FFT5_ZROPX,
  SAL_FFT5M_ROWS_CIPX,
  SAL_FFT5M_COLS_CIPX,
  SAL_FFT5M_ROWS_COPX,
  SAL_FFT5M_COLS_COPX,
  SAL_FFT5M_ROWS_RIPX,
  SAL_FFT5M_COLS_RIPX,
  SAL_FFT5M_ROWS_ROPX,
  SAL_FFT5M_COLS_ROPX,
  SAL_FFT5M_ROWS_ZIPX,
  SAL_FFT5M_COLS_ZIPX,
  SAL_FFT5M_ROWS_ZOPX,
  SAL_FFT5M_COLS_ZOPX,
  SAL_FFT5M_ROWS_ZRIPX,
  SAL_FFT5M_COLS_ZRIPX,
  SAL_FFT5M_ROWS_ZROPX,
  SAL_FFT5M_COLS_ZROPX,
  SAL_FFT9_COPX,
  SAL_FFT9_ZOPX,
  SAL_FFT_CIPX,
  SAL_FFT_COPX,
  SAL_FFT_RIPX,
  SAL_FFT_ROPX,
  SAL_FFT_ZIPX,
  SAL_FFT_ZOPX,
  SAL_FFT_ZRIPX,
  SAL_FFT_ZROPX,
  SAL_FFTM_ROWS_CIPX,
  SAL_FFTM_COLS_CIPX,
  SAL_FFTM_ROWS_COPX,
  SAL_FFTM_COLS_COPX,
  SAL_FFTM_ROWS_RIPX,
  SAL_FFTM_COLS_RIPX,
  SAL_FFTM_ROWS_ROPX,
  SAL_FFTM_COLS_ROPX,
  SAL_FFTM_ROWS_ZIPX,
  SAL_FFTM_COLS_ZIPX,
  SAL_FFTM_ROWS_ZOPX,
  SAL_FFTM_COLS_ZOPX,
  SAL_FFTM_ROWS_ZRIPX,
  SAL_FFTM_COLS_ZRIPX,
  SAL_FFTM_ROWS_ZROPX,
  SAL_FFTM_COLS_ZROPX,
  SAL_FFT1D_FUNC_UB
} SAL_fft1d_func;

typedef enum SAL_fft1d_funcd_t {
  SAL_FFT1D_FUNCD_LB = 100,
  SAL_FFT3_COPDX,
  SAL_FFT3_ROPDX,
  SAL_FFT3_ZOPDX,
  SAL_FFT3_ZROPDX,
  SAL_FFT5_COPDX,
  SAL_FFT5_ROPDX,
  SAL_FFT5_ZOPDX,
  SAL_FFT5_ZROPDX,
  SAL_FFT_CIPDX,
  SAL_FFT_COPDX,
  SAL_FFT_RIPDX,
  SAL_FFT_ROPDX,
  SAL_FFT_ZIPDX,
  SAL_FFT_ZOPDX,
  SAL_FFT_ZRIPDX,
  SAL_FFT_ZROPDX,
  SAL_FFTM_ROWS_CIPDX,
  SAL_FFTM_COLS_CIPDX,
  SAL_FFTM_ROWS_COPDX,
  SAL_FFTM_COLS_COPDX,
  SAL_FFTM_ROWS_RIPDX,
  SAL_FFTM_COLS_RIPDX,
  SAL_FFTM_ROWS_ROPDX,
  SAL_FFTM_COLS_ROPDX,
  SAL_FFTM_ROWS_ZIPDX,
  SAL_FFTM_COLS_ZIPDX,
  SAL_FFTM_ROWS_ZOPDX,
  SAL_FFTM_COLS_ZOPDX,
  SAL_FFTM_ROWS_ZRIPDX,
  SAL_FFTM_COLS_ZRIPDX,
  SAL_FFTM_ROWS_ZROPDX,
  SAL_FFTM_COLS_ZROPDX,
  SAL_FFT1D_FUNCD_UB
} SAL_fft1d_funcd;

typedef enum SAL_fft2d_func_t {
  SAL_FFT2D_FUNC_LB = 200,
  SAL_FFT2D_CIPX,
  SAL_FFT2D_COPX,
  SAL_FFT2D_RIPX,
  SAL_FFT2D_ROPX,
  SAL_FFT2D_ZIPX,
  SAL_FFT2D_ZOPX,
  SAL_FFT2D_ZRIPX,
  SAL_FFT2D_ZROPX,
  SAL_FFT2D_FUNC_UB
} SAL_fft2d_func;

typedef enum SAL_fft2d_funcd_t {
  SAL_FFT2D_FUNCD_LB = 300,
  SAL_FFT2D_CIPDX,
  SAL_FFT2D_COPDX,
  SAL_FFT2D_RIPDX,
  SAL_FFT2D_ROPDX,
  SAL_FFT2D_ZIPDX,
  SAL_FFT2D_ZOPDX,
  SAL_FFT2D_ZRIPDX,
  SAL_FFT2D_ZROPDX,
  SAL_FFT2D_FUNCD_UB
} SAL_fft2d_funcd;

/** ----- Eigenvalue/vector and SVD structures and defintions---------- **/

/** eigenvalue/vector convergence control structure **/

typedef struct {
  int max_iterations;
  float epsilon;
} SAL_eig_tune;

/** SVD convergence control structure **/

typedef struct {
  int max_iterations;
  float epsilon;
} SAL_svd_tune;

/*
 *  Flag definitions for SVD APIs ( sal_svd_flag argument )
 *  ( OR one FULL/THIN/TRUNCATE_TO_RANK option with one V/NO_V option )
 */
/** 3 flags to control size of U and V matrices **/
#define  SAL_SVD_FULL           ( 0 )  /* U is mxm, V is nxn */
#define  SAL_SVD_THIN           ( 1 )  /* U is nxm, V is nxn */
#define  SAL_SVD_TRUNC_TO_RANK  ( 2 )  /* U is rxm, V is rxn  where */
                                         /* r = numerical rank of A */
/** 2 flags to control whether V matrix is computed **/
#define  SAL_SVD_NO_V           ( 0 )  /* don't compute right */
                                       /* singular vectors */
#define  SAL_SVD_V              ( 4 )  /* compute right singular vectors */

/*
 *  Flag definitions for condition number estimation (flag argument in
 *  matrix decompositions)
 */
#define SAL_COND_EST_NONE      0  /* don't compute condition estimate (def) */
#define SAL_COND_EST_1_NORM    1  /* estimate 1-norm condition number */
#define SAL_COND_EST_INF_NORM  2  /* estimate infinity-norm condition number */
#define SAL_COND_EST_COMPONENT 3  /* estimate componentwise condition number */

/*
 *  Flag definitions for matrix solvers
 */
#define SAL_NORMAL_SOLVER         0  /* solve A*x = b */
#define SAL_TRANSPOSE_SOLVER      1  /* solve A'*x = b, where A' is the */
                                     /* conjugate transpose of A */

/** ----- resamp structures and defintions----------------------------- **/

/** resamp opaque handles **/

typedef struct sal__resamp_filter  *SAL_resamp_filter;
typedef struct sal__resamp_map     *SAL_resamp_map;

/** resamp enum for function names **/

typedef enum {
  SAL_RESAMP_ROCX, SAL_RESAMP_COCX, SAL_RESAMP_ZOCX,
  SAL_RESAMP_MR_ROCX, SAL_RESAMP_MR_COCX, SAL_RESAMP_MR_ZOCX,
  SAL_RESAMP_MC_ROCX, SAL_RESAMP_MC_COCX, SAL_RESAMP_MC_ZOCX,
  SAL_RESAMP_RICX, SAL_RESAMP_CICX, SAL_RESAMP_ZICX,
  SAL_RESAMP_MR_RICX, SAL_RESAMP_MR_CICX, SAL_RESAMP_MR_ZICX,
  SAL_RESAMP_MC_RICX, SAL_RESAMP_MC_CICX, SAL_RESAMP_MC_ZICX
} SAL_resamp_name;

/** resamp flag symbols **/

#define SAL_RESAMP_ZERO_OUT_OF_BOUNDS  1
#define SAL_RESAMP_TAPER_OUT_OF_BOUNDS  2

#define SAL_RESAMP_ACCUMULATE  1

/** ----- E-SAL Flags ------------------------------------------------- **/

/*
 *  Define memory vector non-cache ( N ) / cache ( C ) FLAG values for
 *  Enhanced SAL calls ( final argument ) . The letters in the symbol
 *  correspond to the vectors in the call, moving from left to right
 *  so, for example:
 *
 *  for VMULX, there are the following 8 possibilities:
 *
 *     VMULX ( A, I, B, J, C, K, N, SAL_NNN )    A, B, C all not in cache
 *     VMULX ( A, I, B, J, C, K, N, SAL_NNC )    A, B not in cache, C in cache
 *     VMULX ( A, I, B, J, C, K, N, SAL_NCN )    A, C not in cache, B in cache
 *     VMULX ( A, I, B, J, C, K, N, SAL_NCC )    A not in cache, B, C in cache
 *     VMULX ( A, I, B, J, C, K, N, SAL_CNN )    B, C not in cache, A in cache
 *     VMULX ( A, I, B, J, C, K, N, SAL_CNC )    B not in cache, A, C in cache
 *     VMULX ( A, I, B, J, C, K, N, SAL_CCN )    C not in cache, A, B in cache
 *     VMULX ( A, I, B, J, C, K, N, SAL_CCC )    A, B, C all in cache
 */

/**  1 vector algorithms **/
#define  SAL_N  0
#define  SAL_C  1

/**  2 vector algorithms **/
#define  SAL_NN  0
#define  SAL_NC  1
#define  SAL_CN  2
#define  SAL_CC  3

/**  3 vector algorithms **/
#define  SAL_NNN  0
#define  SAL_NNC  1
#define  SAL_NCN  2
#define  SAL_NCC  3
#define  SAL_CNN  4
#define  SAL_CNC  5
#define  SAL_CCN  6
#define  SAL_CCC  7

/**  4 vector algorithms **/
#define  SAL_NNNN  0
#define  SAL_NNNC  1
#define  SAL_NNCN  2
#define  SAL_NNCC  3
#define  SAL_NCNN  4
#define  SAL_NCNC  5
#define  SAL_NCCN  6
#define  SAL_NCCC  7
#define  SAL_CNNN  8
#define  SAL_CNNC  9
#define  SAL_CNCN  10
#define  SAL_CNCC  11
#define  SAL_CCNN  12
#define  SAL_CCNC  13
#define  SAL_CCCN  14
#define  SAL_CCCC  15

/**  5 vector algorithms **/
#define  SAL_NNNNN  0
#define  SAL_NNNNC  1
#define  SAL_NNNCN  2
#define  SAL_NNNCC  3
#define  SAL_NNCNN  4
#define  SAL_NNCNC  5
#define  SAL_NNCCN  6
#define  SAL_NNCCC  7
#define  SAL_NCNNN  8
#define  SAL_NCNNC  9
#define  SAL_NCNCN  10
#define  SAL_NCNCC  11
#define  SAL_NCCNN  12
#define  SAL_NCCNC  13
#define  SAL_NCCCN  14
#define  SAL_NCCCC  15
#define  SAL_CNNNN  16
#define  SAL_CNNNC  17
#define  SAL_CNNCN  18
#define  SAL_CNNCC  19
#define  SAL_CNCNN  20
#define  SAL_CNCNC  21
#define  SAL_CNCCN  22
#define  SAL_CNCCC  23
#define  SAL_CCNNN  24
#define  SAL_CCNNC  25
#define  SAL_CCNCN  26
#define  SAL_CCNCC  27
#define  SAL_CCCNN  28
#define  SAL_CCCNC  29
#define  SAL_CCCCN  30
#define  SAL_CCCCC  31


/** ----- Define total cache size for different data types ----------- **/

#define  SAL_PPC603E_LOG2_CACHE_SIZE ( 14 ) /* Log ( base 2 ) of data cache */

#define  SAL_PPC603E_LOG2_CACHE_BSIZE ( SAL_PPC603E_LOG2_CACHE_SIZE )
#define  SAL_PPC603E_LOG2_CACHE_HSIZE ( SAL_PPC603E_LOG2_CACHE_SIZE - 1 )
#define  SAL_PPC603E_LOG2_CACHE_LSIZE ( SAL_PPC603E_LOG2_CACHE_SIZE - 2 )
#define  SAL_PPC603E_LOG2_CACHE_FSIZE ( SAL_PPC603E_LOG2_CACHE_SIZE - 2 )
#define  SAL_PPC603E_LOG2_CACHE_DSIZE ( SAL_PPC603E_LOG2_CACHE_SIZE - 3 )
#define  SAL_PPC603E_LOG2_CACHE_CSIZE ( SAL_PPC603E_LOG2_CACHE_SIZE - 3 )
#define  SAL_PPC603E_LOG2_CACHE_ZSIZE ( SAL_PPC603E_LOG2_CACHE_SIZE - 4 )

#define  SAL_PPC603E_CACHE_SIZE ( 1 << SAL_PPC603E_LOG2_CACHE_SIZE )

#define  SAL_PPC603E_CACHE_BSIZE ( SAL_PPC603E_CACHE_SIZE )      /* Bytes */
#define  SAL_PPC603E_CACHE_HSIZE ( SAL_PPC603E_CACHE_SIZE >> 1 ) /* Shorts */
#define  SAL_PPC603E_CACHE_LSIZE ( SAL_PPC603E_CACHE_SIZE >> 2 ) /* Longs */
#define  SAL_PPC603E_CACHE_FSIZE ( SAL_PPC603E_CACHE_SIZE >> 2 ) /* Floats */
#define  SAL_PPC603E_CACHE_DSIZE ( SAL_PPC603E_CACHE_SIZE >> 3 ) /* Doubles */
#define  SAL_PPC603E_CACHE_CSIZE ( SAL_PPC603E_CACHE_SIZE >> 3 ) /*Complex Floats*/
#define  SAL_PPC603E_CACHE_ZSIZE ( SAL_PPC603E_CACHE_SIZE >> 4 ) /*Complex Doubles*/

#define  SAL_PPC750_LOG2_CACHE_SIZE ( 15 )  /* Log ( base 2 ) of data cache */

#define  SAL_PPC750_LOG2_CACHE_BSIZE ( SAL_PPC750_LOG2_CACHE_SIZE )
#define  SAL_PPC750_LOG2_CACHE_HSIZE ( SAL_PPC750_LOG2_CACHE_SIZE - 1 )
#define  SAL_PPC750_LOG2_CACHE_LSIZE ( SAL_PPC750_LOG2_CACHE_SIZE - 2 )
#define  SAL_PPC750_LOG2_CACHE_FSIZE ( SAL_PPC750_LOG2_CACHE_SIZE - 2 )
#define  SAL_PPC750_LOG2_CACHE_DSIZE ( SAL_PPC750_LOG2_CACHE_SIZE - 3 )
#define  SAL_PPC750_LOG2_CACHE_CSIZE ( SAL_PPC750_LOG2_CACHE_SIZE - 3 )
#define  SAL_PPC750_LOG2_CACHE_ZSIZE ( SAL_PPC750_LOG2_CACHE_SIZE - 4 )

#define  SAL_PPC750_CACHE_SIZE ( 1 << SAL_PPC750_LOG2_CACHE_SIZE )

#define  SAL_PPC750_CACHE_BSIZE ( SAL_PPC750_CACHE_SIZE )      /* Bytes */
#define  SAL_PPC750_CACHE_HSIZE ( SAL_PPC750_CACHE_SIZE >> 1 ) /* Shorts */
#define  SAL_PPC750_CACHE_LSIZE ( SAL_PPC750_CACHE_SIZE >> 2 ) /* Longs */
#define  SAL_PPC750_CACHE_FSIZE ( SAL_PPC750_CACHE_SIZE >> 2 ) /* Floats */
#define  SAL_PPC750_CACHE_DSIZE ( SAL_PPC750_CACHE_SIZE >> 3 ) /* Doubles */
#define  SAL_PPC750_CACHE_CSIZE ( SAL_PPC750_CACHE_SIZE >> 3 ) /* Complex Floats */
#define  SAL_PPC750_CACHE_ZSIZE ( SAL_PPC750_CACHE_SIZE >> 4 ) /* Complex Doubles */

#define  SAL_PPC7400_LOG2_CACHE_SIZE ( 15 ) /* Log ( base 2 ) of data cache */

#define  SAL_PPC7400_LOG2_CACHE_BSIZE ( SAL_PPC7400_LOG2_CACHE_SIZE )
#define  SAL_PPC7400_LOG2_CACHE_HSIZE ( SAL_PPC7400_LOG2_CACHE_SIZE - 1 )
#define  SAL_PPC7400_LOG2_CACHE_LSIZE ( SAL_PPC7400_LOG2_CACHE_SIZE - 2 )
#define  SAL_PPC7400_LOG2_CACHE_FSIZE ( SAL_PPC7400_LOG2_CACHE_SIZE - 2 )
#define  SAL_PPC7400_LOG2_CACHE_DSIZE ( SAL_PPC7400_LOG2_CACHE_SIZE - 3 )
#define  SAL_PPC7400_LOG2_CACHE_CSIZE ( SAL_PPC7400_LOG2_CACHE_SIZE - 3 )
#define  SAL_PPC7400_LOG2_CACHE_ZSIZE ( SAL_PPC7400_LOG2_CACHE_SIZE - 4 )

#define  SAL_PPC7400_CACHE_SIZE ( 1 << SAL_PPC7400_LOG2_CACHE_SIZE )

#define  SAL_PPC7400_CACHE_BSIZE ( SAL_PPC7400_CACHE_SIZE )      /* Bytes */
#define  SAL_PPC7400_CACHE_HSIZE ( SAL_PPC7400_CACHE_SIZE >> 1 ) /* Shorts */
#define  SAL_PPC7400_CACHE_LSIZE ( SAL_PPC7400_CACHE_SIZE >> 2 ) /* Longs */
#define  SAL_PPC7400_CACHE_FSIZE ( SAL_PPC7400_CACHE_SIZE >> 2 ) /* Floats */
#define  SAL_PPC7400_CACHE_DSIZE ( SAL_PPC7400_CACHE_SIZE >> 3 ) /* Doubles */
#define  SAL_PPC7400_CACHE_CSIZE ( SAL_PPC7400_CACHE_SIZE >> 3 ) /* Complex Floats */
#define  SAL_PPC7400_CACHE_ZSIZE ( SAL_PPC7400_CACHE_SIZE >> 4 ) /* Complex Double */

/** ----- MACROs ------------------------------------------------------ **/

#define PASS_COMPLEX_SPLIT( splitp, rp, ip )            \
           ( ( ( unsigned long ) ( ( splitp ) ->realp = ( rp ) ) && \
               ( unsigned long ) ( ( splitp ) ->imagp = ( ip ) ) )  \
                        ? ( splitp ) : ( splitp ) )

#define PASS_DOUBLE_COMPLEX_SPLIT( splitp, rp, ip ) \
                  ( ( ( unsigned long ) ( ( splitp ) ->realp = ( rp ) ) && \
                      ( unsigned long ) ( ( splitp ) ->imagp = ( ip ) ) )  \
                               ? ( splitp ) : ( splitp ) )

/** ----- Defines for sal_get_path ( ) -------------------------------- **/

/**  Defines for sal_get_path ( ) */

/* No SAL functions invoked */
#define  SAL_PATH_NOTHING              ( 0 )

/* Executed routine in csal library */
#define  SAL_PATH_CSAL                 ( 1 )

/* Executed C code path in the sal library  */
#define  SAL_PATH_C                    ( 2 )

/* Executed version used on all PPC types */
/* Most likely set in a setup function    */
#define  SAL_PATH_PPC                  ( 3 )

/* Executed routine optimized for PPC603 */
#define  SAL_PATH_PPC603               ( 4 )

/* Executed routine optimized for PPC750 */
#define  SAL_PATH_PPC750               ( 5 )

/* Executed routine optimized for PPC7400 */
#define  SAL_PATH_PPC7400              ( 6 )
#define  SAL_PATH_PPC7400_VECTOR       SAL_PATH_PPC7400

/* Executed PPC7400 scalar altivec loop */
#define  SAL_PATH_PPC7400_SCALAR       ( 7 )

/* Executed PPC7400 non-aligned altivec loop for when */
/* buffers are not 16-byte relatively aligned */
#define  SAL_PATH_PPC7400_NON_ALIGNED  ( 8 )

/* Executed routine optimized for PPC7447 */
#define  SAL_PATH_PPC7447              ( 9 )
#define  SAL_PATH_PPC7447_VECTOR       SAL_PATH_PPC7447

/* Executed PPC7447 scalar altivec loop */
#define  SAL_PATH_PPC7447_SCALAR       ( 10 )

/* Executed PPC7447 non-aligned Altivec loop for when */
/* buffers are not 16-byte relatively aligned */
#define  SAL_PATH_PPC7447_NON_ALIGNED  ( 11 )

/* Executed routine optimized for PPC7447 */
#define  SAL_PATH_IBM970               ( 12 )
#define  SAL_PATH_IBM970_VECTOR       SAL_PATH_IBM970

/* Executed IBM970 scalar Altivec loop */
#define  SAL_PATH_IBM970_SCALAR        ( 13 )

/* Executed IBM970 non-aligned Altivec loop for when */
/* buffers are not 16-byte relatively aligned */
#define  SAL_PATH_IBM970_NON_ALIGNED   ( 14 )

/* bad/unknown path, this value will */
/* change if more paths are added */
#define  SAL_PATH_UNKNOWN              ( 15 )

/** ----- Prototypes -------------------------------------------------- **/

#if defined ( __STDC__ ) || defined ( __cplusplus )

extern void acor ( float *A, float *C, int N, int M );
extern void acorf ( float *A, float *C, int N, int M );
extern void acorfx ( float *A, float *C, int N, int M, int X );
extern void acort ( float *A, float *C, int N, int M );
extern void acortx ( float *A, float *C, int N, int M, int X );
extern void acorx ( float *A, float *C, int N, int M, int X );
extern void aspec ( COMPLEX *A, float *C, int N );
extern void aspecx ( COMPLEX *A, float *C, int N, int X );
extern void blkman ( float *A, int I, float *C, int K, int N );
extern void blkmand ( double *A, int I, double *C, int K, int N );
extern void blkmandx ( double *A, int I, double *C, int K, int N, int X );
extern void blkman_window ( float *C, int N, int FLAG );
extern void blkman_windowd ( double *C, int N, int FLAG );
extern void blkman_windowdx ( double *C, int N, int FLAG, int X );
extern void blkman_windowx ( float *C, int N, int FLAG, int X );
extern void blkmanx ( float *A, int I, float *C, int K, int N, int X );
extern void bprojimg ( float *A, float *C, int M, int N, int *P, int *Q, float *F, float *G );
extern void bprojimgd ( double *A, double *C, int M, int N, int *P, int *Q, double *F, double *G );
extern void bprojimgdx ( double *A, double *C, int M, int N, int *P, int *Q, double *F, double *G, int X );
extern void bprojimgx ( float *A, float *C, int M, int N, int *P, int *Q, float *F, float *G, int X );
extern void bprojrow ( float *C, float *A, int M, int N, int Q, float *F, float *G );
extern void bprojrowd ( double *C, double *A, int M, int N, int Q, double *F, double *G );
extern void bprojrowdx ( double *C, double *A, int M, int N, int Q, double *F, double *G, int X );
extern void bprojrowx ( float *C, float *A, int M, int N, int Q, float *F, float *G, int X );
extern void cache_flush_1d ( char *Ap, int Nbytes, int chan, int flag );
extern void cache_flush_2d ( char *Ap, int Atcols, int Nrows, int Ncols, int chan, int flag );
extern void cache_load_1d ( char *Ap, int Nbytes, int chan, int flag );
extern void cache_load_2d ( char *Ap, int Atcols, int Nrows, int Ncols, int chan, int flag );
extern void cache_zero_1d ( char *Ap, int Nbytes, int chan, int flag );
extern void cache_zero_2d ( char *Ap, int Atcols, int Nrows, int Ncols, int chan, int flag );
extern void cconv ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N, int M );
extern void cconv2d ( COMPLEX *A, int tcols_A, COMPLEX *B, COMPLEX *C, int tcols_C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG );
extern void cconv2d_ia ( COMPLEX **A, COMPLEX **B, COMPLEX **C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG );
extern void cconv2dx ( COMPLEX *A, int tcols_A, COMPLEX *B, COMPLEX *C, int tcols_C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG, int X );
extern void cconv2d_iax ( COMPLEX **A, COMPLEX **B, COMPLEX **C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG, int X );
extern void cconvx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N, int M, int X );
extern void ccor ( float *A, float *B, float *C, int N, int M );
extern void ccorf ( float *A, float *B, float *C, int N, int M );
extern void ccorfx ( float *A, float *B, float *C, int N, int M, int X );
extern void ccort ( float *A, float *B, float *C, int N, int M );
extern void ccortx ( float *A, float *B, float *C, int N, int M, int X );
extern void ccorx ( float *A, float *B, float *C, int N, int M, int X );
extern void cdotpr ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int N );
extern void cdotprd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int N );
extern void cdotprdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int N, int X );
extern void cdotprm ( COMPLEX *A, int tcols_A, COMPLEX *B, int tcols_B, COMPLEX *C, int tcols_C, int NRA, int NRB, int N, int FLAG );
extern void cdotprmx ( COMPLEX *A, int tcols_A, COMPLEX *B, int tcols_B, COMPLEX *C, int tcols_C, int NRA, int NRB, int N, int FLAG, int X );
extern void cdotprx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int N, int X );
extern void cexpmul ( float *A, int I, float *F, float *P, COMPLEX *C, int K, COMPLEX *CEXPTAB, int LOG2M, int N );
extern void cexpmulx ( float *A, int I, float *F, float *P, COMPLEX *C, int K, COMPLEX *CEXPTAB, int LOG2M, int N, int X );
extern void cexptab ( COMPLEX *C, int LOG2M, int FLAG );
extern void cexptabx ( COMPLEX *C, int LOG2M, int FLAG, int X );
extern void cfft ( COMPLEX *C, int N, int F );
extern void cfft2d ( COMPLEX *C, int NC, int NR, int F );
extern void cfft2dd ( DOUBLE_COMPLEX *C, int NC, int NR, int F );
extern void cfft2ddx ( DOUBLE_COMPLEX *C, int NC, int NR, int F, int X );
extern void cfft2dx ( COMPLEX *C, int NC, int NR, int F, int X );
extern void cfftb ( COMPLEX *A, COMPLEX *C, int N, int F );
extern void cfftb3 ( COMPLEX *A, COMPLEX *C, COMPLEX *W3, int N, int F );
extern void cfftb3x ( COMPLEX *A, COMPLEX *C, COMPLEX *W3, int N, int F, int X );
extern void cfftb5 ( COMPLEX *A, COMPLEX *C, COMPLEX *W5, int N, int F );
extern void cfftb5x ( COMPLEX *A, COMPLEX *C, COMPLEX *W5, int N, int F, int X );
extern void cfftbd ( DOUBLE_COMPLEX *A, DOUBLE_COMPLEX *C, int N, int F );
extern void cfftbdx ( DOUBLE_COMPLEX *A, DOUBLE_COMPLEX *C, int N, int F, int X );
extern void cfftbx ( COMPLEX *A, COMPLEX *C, int N, int F, int X );
extern void cfftd ( DOUBLE_COMPLEX *C, int N, int F );
extern void cfftdx ( DOUBLE_COMPLEX *C, int N, int F, int X );
extern void cffto ( COMPLEX *C, COMPLEX *T, COMPLEX *D, int N, int F );
extern void cfftod ( DOUBLE_COMPLEX *C, DOUBLE_COMPLEX *T, DOUBLE_COMPLEX *D, int N, int F );
extern void cfftodx ( DOUBLE_COMPLEX *C, DOUBLE_COMPLEX *T, DOUBLE_COMPLEX *D, int N, int F, int X );
extern void cfftox ( COMPLEX *C, COMPLEX *T, COMPLEX *D, int N, int F, int X );
extern void cfftsc ( COMPLEX *C, int N );
extern void cfftscd ( DOUBLE_COMPLEX *C, int N );
extern void cfftscdx ( DOUBLE_COMPLEX *C, int N, int X );
extern void cfftscx ( COMPLEX *C, int N, int X );
extern void cfftx ( COMPLEX *C, int N, int F, int X );
extern void cidotpr ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int N );
extern void cidotprd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int N );
extern void cidotprdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int N, int X );
extern void cidotprx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int N, int X );
extern void cimul ( COMPLEX *A, COMPLEX *B, COMPLEX *C, int NR, int NC, int F );
extern void cimuld ( DOUBLE_COMPLEX *A, DOUBLE_COMPLEX *B, DOUBLE_COMPLEX *C, int NR, int NC, int F );
extern void cimuldx ( DOUBLE_COMPLEX *A, DOUBLE_COMPLEX *B, DOUBLE_COMPLEX *C, int NR, int NC, int F, int X );
extern void cimulx ( COMPLEX *A, COMPLEX *B, COMPLEX *C, int NR, int NC, int F, int X );
extern int cmat_auto_mul ( COMPLEX *pA, int Atcols, COMPLEX *pC, int Ctcols, int n_c, int N, int flag );
extern int cmat_auto_muld ( DOUBLE_COMPLEX *pA, int Atcols, DOUBLE_COMPLEX *pC, int Ctcols, int n_c, int N, int flag );
extern int cmat_auto_muldx ( DOUBLE_COMPLEX *pA, int Atcols, DOUBLE_COMPLEX *pC, int Ctcols, int n_c, int N, int flag, int xflag );
extern int cmat_auto_mulx ( COMPLEX *pA, int Atcols, COMPLEX *pC, int Ctcols, int n_c, int N, int flag, int xflag );
extern void cmatchold ( COMPLEX *A, int A_tcols, COMPLEX  *LU, int LU_tcols, float *Diag, int N );
extern int cmat_chol_dec ( COMPLEX *A, int Atcols, COMPLEX  *LDU, int LDUtcols, int n, float *rcond_est, COMPLEX *v, int flag );
extern int cmat_chol_decx ( COMPLEX *A, int Atcols, COMPLEX  *LDU, int LDUtcols, int n, float *rcond_est, COMPLEX *v, int flag, int xflag );
extern void cmatcholdx ( COMPLEX *A, int A_tcols, COMPLEX  *LU, int LU_tcols, float *Diag, int N, int X );
extern void cmatchols ( COMPLEX *LU, int LU_tcols, float *Diag, COMPLEX *B, COMPLEX *XV, int N );
extern int cmat_chol_sol ( COMPLEX *LDU, int LDUtcols, COMPLEX *b, COMPLEX *w, int n, int flag );
extern int cmat_chol_solx ( COMPLEX *LDU, int LDUtcols, COMPLEX *b, COMPLEX *w, int n, int flag, int xflag );
extern void cmatcholsx ( COMPLEX *LU, int LU_tcols, float *Diag, COMPLEX *B, COMPLEX *XV, int N, int X );
extern void cmatfbs ( COMPLEX *A, COMPLEX *IA, int *IP, COMPLEX *B, COMPLEX *C, int K, int N );
extern void cmatfbsd ( DOUBLE_COMPLEX *A, DOUBLE_COMPLEX *IA, int *IP, DOUBLE_COMPLEX *B, DOUBLE_COMPLEX *C, int K, int N );
extern void cmatfbsdx ( DOUBLE_COMPLEX *A, DOUBLE_COMPLEX *IA, int *IP, DOUBLE_COMPLEX *B, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cmatfbsx ( COMPLEX *A, COMPLEX *IA, int *IP, COMPLEX *B, COMPLEX *C, int K, int N, int X );
extern void cmatinv_lu ( COMPLEX *C, COMPLEX *D, int *IP, int N );
extern void cmatinv_lux ( COMPLEX *C, COMPLEX *D, int *IP, int N, int X );
extern void cmatlud ( COMPLEX *C, int *IC, int N );
extern void cmatludd ( DOUBLE_COMPLEX *C, int *IC, int N );
extern int cmat_lud_dec( COMPLEX *C, int Ctcols, int *D, int n, float *rcond_est, COMPLEX *v, int flag );
extern int cmat_lud_decx( COMPLEX *C, int Ctcols, int *D, int n, float *rcond_est, COMPLEX *v, int flag, int xflag );
extern void cmatluddx ( DOUBLE_COMPLEX *C, int *IC, int N, int X );
extern int cmat_lud_sol( COMPLEX *A, int Atcols, int *D, COMPLEX *b, COMPLEX *w, int n, int flag);
extern int cmat_lud_solx( COMPLEX *A, int Atcols, int *D, COMPLEX *b, COMPLEX *w, int n, int flag, int X);
extern void cmatludx ( COMPLEX *C, int *IC, int N, int X );
extern int cmat_mgs_dec ( COMPLEX *AT, int ATtcols, COMPLEX *R, int Rtcols, int M, int N, float *rcond_est, COMPLEX *v, int flag );
extern int cmat_mgs_decx ( COMPLEX *AT, int ATtcols, COMPLEX *R, int Rtcols, int M, int N, float *rcond_est, COMPLEX *v, int flag, int X );
extern void cmatmgs_dker ( COMPLEX *Q, int tcols_Q, COMPLEX *P, COMPLEX *R, int M, int N );
extern void cmatmgs_dkerx ( COMPLEX *Q, int tcols_Q, COMPLEX *P, COMPLEX *R, int M, int N, int X );
extern void cmatmgs_dqr ( COMPLEX *A, int tcols_A, COMPLEX *R, int tcols_R, int M, int N );
extern void cmatmgs_dqrx ( COMPLEX *A, int tcols_A, COMPLEX *R, int tcols_R, int M, int N, int X );
extern int cmat_mgs_solr ( COMPLEX *R, int Rtcols, COMPLEX *b, COMPLEX *x, int N, int flag );
extern int cmat_mgs_solrhr ( COMPLEX *R, int Rtcols, COMPLEX *b, COMPLEX *x, int N, int flag );
extern int cmat_mgs_solrhrx ( COMPLEX *R, int Rtcols, COMPLEX *b, COMPLEX *x, int N, int flag, int X );
extern int cmat_mgs_solrx ( COMPLEX *R, int Rtcols, COMPLEX *b, COMPLEX *x, int N, int flag, int X );
extern void cmatmgs_sr ( COMPLEX *R, int tcols_R, COMPLEX *B, COMPLEX *XVEC, int N );
extern void cmatmgs_srhr ( COMPLEX *R, int tcols_R, COMPLEX *B, COMPLEX *XVEC, int N );
extern void cmatmgs_srhrx ( COMPLEX *R, int tcols_R, COMPLEX *B, COMPLEX *XVEC, int N, int X );
extern void cmatmgs_srx ( COMPLEX *R, int tcols_R, COMPLEX *B, COMPLEX *XVEC, int N, int X );
extern void cmatmgs_tr ( COMPLEX *A, int tcols_A, int N );
extern void cmatmgs_trx ( COMPLEX *A, int tcols_A, int N, int X );
extern int cmat_mul ( COMPLEX *pA, int Atcols, COMPLEX *pB, int Btcols, COMPLEX *pC, int Ctcols, int nr_c, int nc_c, int N, int flag );
extern int cmat_muld ( DOUBLE_COMPLEX *pA, int Atcols, DOUBLE_COMPLEX *pB, int Btcols, DOUBLE_COMPLEX *pC, int Ctcols, int nr_c, int nc_c, int N, int flag );
extern int cmat_muldx ( DOUBLE_COMPLEX *pA, int Atcols, DOUBLE_COMPLEX *pB, int Btcols, DOUBLE_COMPLEX *pC, int Ctcols, int nr_c, int nc_c, int N, int flag, int xflag );
extern int cmat_mulx ( COMPLEX *pA, int Atcols, COMPLEX *pB, int Btcols, COMPLEX *pC, int Ctcols, int nr_c, int nc_c, int N, int flag, int xflag );
extern void cmixer ( COMPLEX *A, int sA, double *F, double *P, COMPLEX *C, int sC, int N, int flag );
extern void cmixerx ( COMPLEX *A, int sA, double *F, double *P, COMPLEX *C, int sC, int N, int flag, int eflag );
extern void cmma ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, COMPLEX *D, int L, int MC, int NC, int NA );
extern void cmmax ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, COMPLEX *D, int L, int MC, int NC, int NA, int X );
extern void cmmov ( COMPLEX *pSrc,int stride_x_src,int stride_y_src,COMPLEX *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len );
extern void cmmovd ( DOUBLE_COMPLEX *pSrc,int stride_x_src,int stride_y_src,DOUBLE_COMPLEX *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len );
extern void cmmovdx ( DOUBLE_COMPLEX *pSrc,int stride_x_src,int stride_y_src,DOUBLE_COMPLEX *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len,int xflag );
extern void cmmovx ( COMPLEX *pSrc,int stride_x_src,int stride_y_src,COMPLEX *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len,int xflag );
extern void cmms ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, COMPLEX *D, int L, int MC, int NC, int NA );
extern void cmmsx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, COMPLEX *D, int L, int MC, int NC, int NA, int X );
extern void cmmul ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int MC, int NC, int NA );
extern void cmmuld ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int MC, int NC, int NA );
extern void cmmuldx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int MC, int NC, int NA, int X );
extern void cmmulx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int MC, int NC, int NA, int X );
extern void cmsm ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, COMPLEX *D, int L, int MC, int NC, int NA );
extern void cmsmx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, COMPLEX *D, int L, int MC, int NC, int NA, int X );
extern void cmtrans ( COMPLEX *A, int I, COMPLEX *C, int K, int MC, int NC );
extern void cmtrans2 ( COMPLEX *A, COMPLEX *C, int NC, int NR, int tcols_A, int tcols_C );
extern void cmtrans2d ( DOUBLE_COMPLEX *A, DOUBLE_COMPLEX *C, int NC, int NR, int tcols_A, int tcols_C );
extern void cmtrans2dx ( DOUBLE_COMPLEX *A, DOUBLE_COMPLEX *C, int NC, int NR, int tcols_A, int tcols_C, int X );
extern void cmtrans2x ( COMPLEX *A, COMPLEX *C, int NC, int NR, int tcols_A, int tcols_C, int X );
extern void cmtransd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int MC, int NC );
extern void cmtransdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int MC, int NC, int X );
extern void cmtransx ( COMPLEX *A, int I, COMPLEX *C, int K, int MC, int NC, int X );
extern void coher ( float *A, float *B, COMPLEX *C, float *D, int N );
extern void coherx ( float *A, float *B, COMPLEX *C, float *D, int N, int X );
extern void conv ( float *A, int I, float *B, int J, float *C, int K, int N, int M );
extern void conv2d ( float *A, int tcols_A, float *B, float *C, int tcols_C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG );
extern void conv2d_ia ( float **A, float **B, float **C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG );
extern void conv2d_iax ( float **A, float **B, float **C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG, int X );
extern void conv2dx ( float *A, int tcols_A, float *B, float *C, int tcols_C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG, int X );
extern void convm_cols ( float **A, float *B, float **C, int Nc, int Nr, int Nb, int F );
extern void convm_colsx ( float **A, float *B, float **C, int Nc, int Nr, int Nb, int F, int X );
extern void convm_rows ( float **A, float *B, float **C, int Nc, int Nr, int Nb, int F );
extern void convm_rowsx ( float **A, float *B, float **C, int Nc, int Nr, int Nb, int F, int X );
extern void convx ( float *A, int I, float *B, int J, float *C, int K, int N, int M, int X );
extern void crdesamp ( COMPLEX *A, int I, float *B, COMPLEX *C, int N, int M );
extern void crdesampx ( COMPLEX *A, int I, float *B, COMPLEX *C, int N, int M, int X );
extern void crdotpr ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int N );
extern void crdotprd ( DOUBLE_COMPLEX *A, int I, double *B, int J, DOUBLE_COMPLEX *C, int N );
extern void crdotprdx ( DOUBLE_COMPLEX *A, int I, double *B, int J, DOUBLE_COMPLEX *C, int N, int X );
extern void crdotprx ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int N, int X );
extern void crmixer ( float *A, int sA, double *F, double *P, COMPLEX *C, int sC, int N, int flag );
extern void crmixerx ( float *A, int sA, double *F, double *P, COMPLEX *C, int sC, int N, int flag, int eflag );
extern void crvadd ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int K, int N );
extern void crvaddx ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int K, int N, int X );
extern void crvdiv ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int K, int N );
extern void crvdivx ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int K, int N, int X );
extern void crvmul ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int K, int N );
extern void crvmulx ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int K, int N, int X );
extern void crvsub ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int K, int N );
extern void crvsubx ( COMPLEX *A, int I, float *B, int J, COMPLEX *C, int K, int N, int X );
extern void cspec ( COMPLEX *A, COMPLEX *B, COMPLEX *C, int N );
extern void cspecx ( COMPLEX *A, COMPLEX *B, COMPLEX *C, int N, int X );
extern void ctoz ( COMPLEX *A, int I, COMPLEX_SPLIT *C, int K, int N );
extern void ctozd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void ctozdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void ctozx ( COMPLEX *A, int I, COMPLEX_SPLIT *C, int K, int N, int X );
extern void cvabs ( COMPLEX *A, int I, float *C, int K, int N );
extern void cvabsx ( COMPLEX *A, int I, float *C, int K, int N, int X );
extern void cvadd ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N );
extern void cvaddd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int N );
extern void cvadddx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvaddx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N, int X );
extern void cvcma ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, COMPLEX *D, int L, int N );
extern void cvcmax ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, COMPLEX *D, int L, int N, int X );
extern void cvcmul ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N );
extern void cvcmulx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N, int X );
extern void cvcomb ( float *A, int I, float *B, int J, COMPLEX *C, int K, int N );
extern void cvcombd ( double *A, int I, double *B, int J, DOUBLE_COMPLEX *C, int K, int N );
extern void cvcombdx ( double *A, int I, double *B, int J, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvcombx ( float *A, int I, float *B, int J, COMPLEX *C, int K, int N, int X );
extern void cvconj ( COMPLEX *A, int I, COMPLEX *C, int K, int N );
extern void cvconjd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int N );
extern void cvconjdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvconjx ( COMPLEX *A, int I, COMPLEX *C, int K, int N, int X );
extern void cvcsml ( COMPLEX *A, int I, COMPLEX *B, COMPLEX *C, int K, int N );
extern void cvcsmld ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, DOUBLE_COMPLEX *C, int K, int N );
extern void cvcsmldx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvcsmlx ( COMPLEX *A, int I, COMPLEX *B, COMPLEX *C, int K, int N, int X );
extern void cvdbcon ( COMPLEX *A, int I, float *S, float *C, int K, int N, int F );
extern void cvdbconx ( COMPLEX *A, int I, float *S, float *C, int K, int N, int F, int X );
extern void cvdiv ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N );
extern void cvdivd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int N );
extern void cvdivdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvdivx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N, int X );
extern void cvexp ( float *A, int I, COMPLEX *C, int K, int N );
extern void cvexpd ( double *A, int I, DOUBLE_COMPLEX *C, int K, int N );
extern void cvexpdx ( double *A, int I, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvexpm ( float *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N );
extern void cvexpmx ( float *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N, int X );
extern void cvexpx ( float *A, int I, COMPLEX *C, int K, int N, int X );
extern void cvfill ( COMPLEX *A, COMPLEX *C, int K, int N );
extern void cvfillx ( COMPLEX *A, COMPLEX *C, int K, int N, int X );
extern void cvmags ( COMPLEX *A, int I, float *C, int K, int N );
extern void cvmagsd ( DOUBLE_COMPLEX *A, int I, double *C, int K, int N );
extern void cvmagsdx ( DOUBLE_COMPLEX *A, int I, double *C, int K, int N, int X );
extern void cvmagsx ( COMPLEX *A, int I, float *C, int K, int N, int X );
extern void cvmgsa ( COMPLEX *A, int I, float *B, int J, float *C, int K, int N );
extern void cvmgsax ( COMPLEX *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void cvmov ( COMPLEX *A, int I, COMPLEX *C, int K, int N );
extern void cvmovd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int N );
extern void cvmovdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvmovx ( COMPLEX *A, int I, COMPLEX *C, int K, int N, int X );
extern void cvmul ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N, int F );
extern void cvmuld ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int N, int F );
extern void cvmuldx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int N, int F, int X );
extern void cvmulx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N, int F, int X );
extern void cvneg ( COMPLEX *A, int I, COMPLEX *C, int K, int N );
extern void cvnegd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int N );
extern void cvnegdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvnegx ( COMPLEX *A, int I, COMPLEX *C, int K, int N, int X );
extern void cvphas ( COMPLEX *A, int I, float *C, int K, int N );
extern void cvphasx ( COMPLEX *A, int I, float *C, int K, int N, int X );
extern void cvrcip ( COMPLEX *A, int I, COMPLEX *C, int K, int N );
extern void cvrcipd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int N );
extern void cvrcipdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvrcipx ( COMPLEX *A, int I, COMPLEX *C, int K, int N, int X );
extern void cvsma ( COMPLEX *A, int I, COMPLEX *B, COMPLEX *C, int K, COMPLEX *D, int L, int N );
extern void cvsmad ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, DOUBLE_COMPLEX *C, int K, DOUBLE_COMPLEX *D, int L, int N );
extern void cvsmadx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, DOUBLE_COMPLEX *C, int K, DOUBLE_COMPLEX *D, int L, int N, int X );
extern void cvsmax ( COMPLEX *A, int I, COMPLEX *B, COMPLEX *C, int K, COMPLEX *D, int L, int N, int X );
extern void cvsplit ( COMPLEX *A, int I, float *B, int J, float *C, int K, int N );
extern void cvsplitd ( DOUBLE_COMPLEX *A, int I, double *B, int J, double *C, int K, int N );
extern void cvsplitdx ( DOUBLE_COMPLEX *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void cvsplitx ( COMPLEX *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void cvsqrt ( COMPLEX *A, int I, COMPLEX *C, int K, int N );
extern void cvsqrtx ( COMPLEX *A, int I, COMPLEX *C, int K, int N, int X );
extern void cvsub ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N );
extern void cvsubd ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int N );
extern void cvsubdx ( DOUBLE_COMPLEX *A, int I, DOUBLE_COMPLEX *B, int J, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void cvsubx ( COMPLEX *A, int I, COMPLEX *B, int J, COMPLEX *C, int K, int N, int X );
extern void deq22 ( float *A, int I, float *B, float *C, int K, int N );
extern void deq22x ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void desamp ( float *A, int I, float *B, float *C, int N, int M );
extern void desampx ( float *A, int I, float *B, float *C, int N, int M, int X );
extern void dotpr ( float *A, int I, float *B, int J, float *C, int N );
extern void dotprd ( double *A, int I, double *B, int J, double *C, int N );
extern void dotprdx ( double *A, int I, double *B, int J, double *C, int N, int X );
extern void dotprm ( float *A, int tcols_A, float *B, int tcols_B, float *C, int tcols_C, int NRA, int NRB, int N, int FLAG );
extern void dotprmx ( float *A, int tcols_A, float *B, int tcols_B, float *C, int tcols_C, int NRA, int NRB, int N, int FLAG, int X );
extern void dotprx ( float *A, int I, float *B, int J, float *C, int N, int X );
extern void f3x3 ( float *A, int NR, int NC, float *B, float *C );
extern void f3x3d ( double *A, int NR, int NC, double *B, double *C );
extern void f3x3dx ( double *A, int NR, int NC, double *B, double *C, int X );
extern void f3x3x ( float *A, int NR, int NC, float *B, float *C, int X );
extern void f5x5 ( float *A, int NR, int NC, float *B, float *C );
extern void f5x5d ( double *A, int NR, int NC, double *B, double *C );
extern void f5x5dx ( double *A, int NR, int NC, double *B, double *C, int X );
extern void f5x5x ( float *A, int NR, int NC, float *B, float *C, int X );
extern void fcf_cipt ( FFT_setup *SETUPP, COMPLEX *C, COMPLEX *T, float *S, unsigned xint32 LOG2N, xint32 FLAG );
extern void fcf_ciptx ( FFT_setup *SETUPP, COMPLEX *C, COMPLEX *T, float *S, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fcf_ript ( FFT_setup *SETUPP, float *C, float *T, float *S, unsigned xint32 LOG2N, xint32 FLAG );
extern void fcf_riptx ( FFT_setup *SETUPP, float *C, float *T, float *S, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fcf_zipt ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, COMPLEX_SPLIT *T, float *S, unsigned xint32 LOG2N, xint32 FLAG );
extern void fcf_ziptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, COMPLEX_SPLIT *T, float *S, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fcf_zript ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, COMPLEX_SPLIT *T, float *S, unsigned xint32 LOG2N, xint32 FLAG );
extern void fcf_zriptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, COMPLEX_SPLIT *T, float *S, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fcs_cipt ( FFT_setup *SETUPP, COMPLEX *A, COMPLEX *C, xint32 K, COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fcs_ciptx ( FFT_setup *SETUPP, COMPLEX *A, COMPLEX *C, xint32 K, COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fcsm_cipt ( FFT_setup *SETUPP, COMPLEX *A, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fcsm_ciptx ( FFT_setup *SETUPP, COMPLEX *A, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fcsm_ript ( FFT_setup *SETUPP, float *A, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fcsm_riptx ( FFT_setup *SETUPP, float *A, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fcsm_zipt ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fcsm_ziptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fcsm_zript ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fcsm_zriptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fcs_ript ( FFT_setup *SETUPP, float *A, float *C, xint32 K, float *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fcs_riptx ( FFT_setup *SETUPP, float *A, float *C, xint32 K, float *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fcs_zipt ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fcs_ziptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fcs_zript ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fcs_zriptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern int fft1d_setup ( SAL_fft1d_func FFT, int LOG2N, int FLAG, FFT_setup *SETUP, int *NBYTES );
extern int fft1d_setup_user_alloc ( SAL_fft1d_func FFT, int LOG2N, int FLAG, FFT_setup *SETUP, void *BUFFER );
extern int fft1d_setupd ( SAL_fft1d_funcd FFT, int LOG2N, int FLAG, FFT_setupd *SETUP, int *NBYTES );
extern int fft1d_setup_user_allocd ( SAL_fft1d_funcd FFT, int LOG2N, int FLAG, FFT_setupd *SETUP, void *BUFFER );
extern void fft2d_cip ( FFT_setup *SETUPP, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_cipd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_cipdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_cipt ( FFT_setup *SETUPP, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_ciptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_ciptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_ciptx ( FFT_setup *SETUPP, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_cipx ( FFT_setup *SETUPP, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_cop ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_copd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_copdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_copt ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_coptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_coptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_coptx ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_copx ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_rip ( FFT_setup *SETUPP, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_ripd ( FFT_setupd *SETUPP, double *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_ripdx ( FFT_setupd *SETUPP, double *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_ript ( FFT_setup *SETUPP, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_riptd ( FFT_setupd *SETUPP, double *C, xint32 KR, xint32 KC, double *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_riptdx ( FFT_setupd *SETUPP, double *C, xint32 KR, xint32 KC, double *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_riptx ( FFT_setup *SETUPP, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_ripx ( FFT_setup *SETUPP, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_rop ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_ropd ( FFT_setupd *SETUPP, double *A, xint32 IR, xint32 IC, double *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_ropdx ( FFT_setupd *SETUPP, double *A, xint32 IR, xint32 IC, double *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_ropt ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_roptd ( FFT_setupd *SETUPP, double *A, xint32 IR, xint32 IC, double *C, xint32 KR, xint32 KC, double *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_roptdx ( FFT_setupd *SETUPP, double *A, xint32 IR, xint32 IC, double *C, xint32 KR, xint32 KC, double *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_roptx ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_ropx ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern int fft2d_setup ( SAL_fft2d_func FFT, int LOG2NC, int LOG2NR, int FLAG, FFT_setup *SETUP, int *NBYTES );
extern int fft2d_setup_user_alloc ( SAL_fft2d_func FFT, int LOG2NC, int LOG2NR, int FLAG, FFT_setup *SETUP, void *BUFFER );
extern int fft2d_setupd ( SAL_fft2d_funcd FFT, int LOG2NC, int LOG2NR, int FLAG, FFT_setupd *SETUP, int *NBYTES );
extern int fft2d_setup_user_allocd ( SAL_fft2d_funcd FFT, int LOG2NC, int LOG2NR, int FLAG, FFT_setupd *SETUP, void *BUFFER );
extern void fft2d_zip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zipd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zipdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zipt ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_ziptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_ziptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_ziptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zipx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zopd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zopdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zopt ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zoptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zoptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zoptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zopx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zrip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zripd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zripdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zript ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zriptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zriptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zriptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zripx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zrop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zropd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zropdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zropt ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zroptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG );
extern void fft2d_zroptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zroptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft2d_zropx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2NC, unsigned xint32 LOG2NR, xint32 FLAG, xint32 X );
extern void fft3m_cols_cop ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_cols_copx ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_cols_rop ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_cols_ropx ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_cols_zip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_cols_zipx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_cols_zop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_cols_zopx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_cols_zrip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_cols_zripx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_cols_zrop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_cols_zropx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_cop ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fft3m_copx ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fft3m_rop ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fft3m_ropx ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fft3m_rows_cop ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_rows_copx ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_rows_rop ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_rows_ropx ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_rows_zip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_rows_zipx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_rows_zop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_rows_zopx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_rows_zrip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_rows_zripx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_rows_zrop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft3m_rows_zropx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft3m_zop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fft3m_zopx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fft3m_zrop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fft3m_zropx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fft3_cop ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_copd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 I, DOUBLE_COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_copdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 I, DOUBLE_COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_copx ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_rop ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_ropd ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_ropdx ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_ropx ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_zip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_zipd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_zipdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_zipx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_zop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_zopd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_zopdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_zopx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_zrip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_zripd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_zripdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_zripx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_zrop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_zropd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft3_zropdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft3_zropx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5m_cols_cop ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_cols_copx ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_cols_rop ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_cols_ropx ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_cols_zip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_cols_zipx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_cols_zop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_cols_zopx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_cols_zrip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_cols_zripx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_cols_zrop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_cols_zropx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_cop ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fft5m_copx ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fft5m_rop ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fft5m_ropx ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fft5m_rows_cop ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_rows_copx ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_rows_rop ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_rows_ropx ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_rows_zip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_rows_zipx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_rows_zop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_rows_zopx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_rows_zrip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_rows_zripx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_rows_zrop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fft5m_rows_zropx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fft5m_zop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fft5m_zopx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fft5m_zrop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fft5m_zropx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fft5_cop ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_copd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 I, DOUBLE_COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_copdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 I, DOUBLE_COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_copx ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_rop ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_ropd ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_ropdx ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_ropx ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_zip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_zipd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_zipdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_zipx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_zop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_zopd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_zopdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_zopx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_zrip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_zripd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_zripdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_zripx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_zrop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_zropd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft5_zropdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft5_zropx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft9_cop ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft9_copx ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft9_zop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft9_zopx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_acor ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, unsigned xint32 M );
extern void fft_acord ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, unsigned xint32 LOG2N, unsigned xint32 M );
extern void fft_acordx ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, unsigned xint32 LOG2N, unsigned xint32 M, xint32 X );
extern void fft_acorx ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, unsigned xint32 M, xint32 X );
extern void fft_ccor ( FFT_setup *SETUPP, float *A, xint32 I, float *B, xint32 J, float *C, xint32 K, unsigned xint32 LOG2N, unsigned xint32 M );
extern void fft_ccord ( FFT_setupd *SETUPP, double *A, xint32 I, double *B, xint32 J, double *C, xint32 K, unsigned xint32 LOG2N, unsigned xint32 M );
extern void fft_ccordx ( FFT_setupd *SETUPP, double *A, xint32 I, double *B, xint32 J, double *C, xint32 K, unsigned xint32 LOG2N, unsigned xint32 M, xint32 X );
extern void fft_ccorx ( FFT_setup *SETUPP, float *A, xint32 I, float *B, xint32 J, float *C, xint32 K, unsigned xint32 LOG2N, unsigned xint32 M, xint32 X );
extern void fft_cip ( FFT_setup *SETUPP, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_cipd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_cipdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_cipt ( FFT_setup *SETUPP, COMPLEX *C, xint32 K, COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_ciptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 K, DOUBLE_COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_ciptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 K, DOUBLE_COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_ciptx ( FFT_setup *SETUPP, COMPLEX *C, xint32 K, COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_cipx ( FFT_setup *SETUPP, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_cop ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_copd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 I, DOUBLE_COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_copdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 I, DOUBLE_COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_copt ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_coptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 I, DOUBLE_COMPLEX *C, xint32 K, DOUBLE_COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_coptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 I, DOUBLE_COMPLEX *C, xint32 K, DOUBLE_COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_coptx ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, COMPLEX *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_copx ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, COMPLEX *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_cvmags ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_cvmagsx ( FFT_setup *SETUPP, COMPLEX *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_free ( FFT_setup *SETUPP );
extern void fft_freed ( FFT_setupd *SETUPP );
extern void fftm_cip ( FFT_setup *SETUPP, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_cipd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_cipdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_cipt ( FFT_setup *SETUPP, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_ciptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_ciptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *C, xint32 KR,xint32 KC, DOUBLE_COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_ciptx ( FFT_setup *SETUPP, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_cipx ( FFT_setup *SETUPP, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_cols_cip ( FFT_setup *SETUP, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_cipd ( FFT_setupd *SETUP, DOUBLE_COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_cipdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_cipx ( FFT_setup *SETUP, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_cop ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_copd ( FFT_setupd *SETUP, DOUBLE_COMPLEX *A, int ATCOLS, DOUBLE_COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_copdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX *A, int ATCOLS, DOUBLE_COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_copx ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_rip ( FFT_setup *SETUP, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_ripd ( FFT_setupd *SETUP, double *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_ripdx ( FFT_setupd *SETUP, double *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_ripx ( FFT_setup *SETUP, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_rop ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_ropd ( FFT_setupd *SETUP, double *A, int ATCOLS, double *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_ropdx ( FFT_setupd *SETUP, double *A, int ATCOLS, double *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_ropx ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_zip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_zipd ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_zipdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_zipx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_zop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_zopd ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *A, int ATCOLS, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_zopdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *A, int ATCOLS, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_zopx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_zrip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_zripd ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_zripdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_zripx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_zrop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_zropd ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *A, int ATCOLS, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_cols_zropdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *A, int ATCOLS, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cols_zropx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_cop ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_copd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_copdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_copt ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_coptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_coptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX *A, xint32 IR,xint32 IC, DOUBLE_COMPLEX *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_coptx ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, COMPLEX *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_copx ( FFT_setup *SETUPP, COMPLEX *A, xint32 IR, xint32 IC, COMPLEX *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_rip ( FFT_setup *SETUPP, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_ripd ( FFT_setupd *SETUPP, double *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_ripdx ( FFT_setupd *SETUPP, double *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_ript ( FFT_setup *SETUPP, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_riptd ( FFT_setupd *SETUPP, double *C, xint32 KR, xint32 KC, double *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_riptdx ( FFT_setupd *SETUPP, double *C, xint32 KR, xint32 KC, double *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_riptx ( FFT_setup *SETUPP, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_ripx ( FFT_setup *SETUPP, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_rop ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_ropd ( FFT_setupd *SETUPP, double *A, xint32 IR, xint32 IC, double *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_ropdx ( FFT_setupd *SETUPP, double *A, xint32 IR, xint32 IC, double *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_ropt ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_roptd ( FFT_setupd *SETUPP, double *A, xint32 IR, xint32 IC, double *C, xint32 KR, xint32 KC, double *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_roptdx ( FFT_setupd *SETUPP, double *A, xint32 IR, xint32 IC, double *C, xint32 KR, xint32 KC, double *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_roptx ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, float *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_ropx ( FFT_setup *SETUPP, float *A, xint32 IR, xint32 IC, float *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_rows_cip ( FFT_setup *SETUP, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_cipd ( FFT_setupd *SETUP, DOUBLE_COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_cipdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_cipx ( FFT_setup *SETUP, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_cop ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_copd ( FFT_setupd *SETUP, DOUBLE_COMPLEX *A, int ATCOLS, DOUBLE_COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_copdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX *A, int ATCOLS, DOUBLE_COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_copx ( FFT_setup *SETUP, COMPLEX *A, int ATCOLS, COMPLEX *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_rip ( FFT_setup *SETUP, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_ripd ( FFT_setupd *SETUP, double *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_ripdx ( FFT_setupd *SETUP, double *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_ripx ( FFT_setup *SETUP, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_rop ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_ropd ( FFT_setupd *SETUP, double *A, int ATCOLS, double *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_ropdx ( FFT_setupd *SETUP, double *A, int ATCOLS, double *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_ropx ( FFT_setup *SETUP, float *A, int ATCOLS, float *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_zip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_zipd ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_zipdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_zipx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_zop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_zopd ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *A, int ATCOLS, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_zopdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *A, int ATCOLS, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_zopx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_zrip ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_zripd ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_zripdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_zripx ( FFT_setup *SETUP, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_zrop ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_zropd ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *A, int ATCOLS, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG );
extern void fftm_rows_zropdx ( FFT_setupd *SETUP, DOUBLE_COMPLEX_SPLIT *A, int ATCOLS, DOUBLE_COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_rows_zropx ( FFT_setup *SETUP, COMPLEX_SPLIT *A, int ATCOLS, COMPLEX_SPLIT *C, int CTCOLS, int LOG2N, int NFFTS, int FI_FLAG, int FLAG );
extern void fftm_small ( COMPLEX_SPLIT *in_matrix, xint32 in_stride, COMPLEX_SPLIT *out_matrix, xint32 out_stride, unsigned xint32 fft_size, unsigned xint32 nffts, xint32 fi_flag, xint32 X );
extern void fftm_zip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zipd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zipdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zipt ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_ziptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_ziptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_ziptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zipx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zopd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zopdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zopt ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zoptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zoptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zoptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zopx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zrip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zripd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zripdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zript ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zriptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zriptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zriptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zripx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zrop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zropd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zropdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zropt ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zroptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG );
extern void fftm_zroptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 IR, xint32 IC, DOUBLE_COMPLEX_SPLIT *C, xint32 KR, xint32 KC, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zroptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fftm_zropx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 IR, xint32 IC, COMPLEX_SPLIT *C, xint32 KR, xint32 KC, unsigned xint32 LOG2N, unsigned xint32 M, xint32 FLAG, xint32 X );
extern void fft_rip ( FFT_setup *SETUPP, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_ripd ( FFT_setupd *SETUPP, double *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_ripdx ( FFT_setupd *SETUPP, double *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_ript ( FFT_setup *SETUPP, float *C, xint32 K, float *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_riptd ( FFT_setupd *SETUPP, double *C, xint32 K, double *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_riptdx ( FFT_setupd *SETUPP, double *C, xint32 K, double *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_riptx ( FFT_setup *SETUPP, float *C, xint32 K, float *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_ripx ( FFT_setup *SETUPP, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_rop ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_ropd ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_ropdx ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_ropt ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, float *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_roptd ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, double *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_roptdx ( FFT_setupd *SETUPP, double *A, xint32 I, double *C, xint32 K, double *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_roptx ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, float *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_ropx ( FFT_setup *SETUPP, float *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_setup ( unsigned xint32 LOG2M, xint32 FLAG, FFT_setup *SETUPP, unsigned xint32 *NBYTESP );
extern void fft_setupd ( unsigned xint32 LOG2M, xint32 FLAG, FFT_setupd *SETUPP, unsigned xint32 *NBYTESP );
extern int fft_setup_fixup ( FFT_setup *SETUPP );
extern int fft_setup_fixupd ( FFT_setupd *SETUPP );
extern int fft_setup_get_temp_buffer_size ( FFT_setup *SETUPP, int *nbytes );
extern int fft_setup_get_temp_buffer_sized ( FFT_setupd *SETUPP, int *nbytes );
extern int fft_setup_set_temp_buffer ( FFT_setup *SETUPP, void *buffer );
extern int fft_setup_set_temp_bufferd ( FFT_setupd *SETUPP, void *buffer );
extern void fft_setup_user_alloc ( unsigned xint32 LOG2M, xint32 FLAG, FFT_setup *SETUPP, void *BUFFER );
extern void fft_setup_user_allocd ( unsigned xint32 LOG2M, xint32 FLAG, FFT_setupd *SETUPP, void *BUFFER );
extern void fftwts ( COMPLEX *C, int M, int N );
extern void fftwts3 ( COMPLEX *C, int M );
extern void fftwts3x ( COMPLEX *C, int M, int X );
extern void fftwts5 ( COMPLEX *C, int M );
extern void fftwts5x ( COMPLEX *C, int M, int X );
extern void fftwtsd ( DOUBLE_COMPLEX *C, int M, int N );
extern void fftwtsdx ( DOUBLE_COMPLEX *C, int M, int N, int X );
extern void fftwtsx ( COMPLEX *C, int M, int N, int X );
extern void fft_zip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zipd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zipdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zipt ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_ziptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_ziptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_ziptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zipx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zopd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zopdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zopt ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zoptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zoptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zoptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zopx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zrip ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zripd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zripdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zript ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zriptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zriptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *C, xint32 K, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zriptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zripx ( FFT_setup *SETUPP, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zrop ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zropd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zropdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zropt ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zroptd ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zroptdx ( FFT_setupd *SETUPP, DOUBLE_COMPLEX_SPLIT *A, xint32 I, DOUBLE_COMPLEX_SPLIT *C, xint32 K, DOUBLE_COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zroptx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, COMPLEX_SPLIT *T, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zropx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, COMPLEX_SPLIT *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fft_zvmags ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG );
extern void fft_zvmagsx ( FFT_setup *SETUPP, COMPLEX_SPLIT *A, xint32 I, float *C, xint32 K, unsigned xint32 LOG2N, xint32 FLAG, xint32 X );
extern void fir2 ( float *A, float *W, float *PSUM, float *C, int K, int N, int SFLAG );
extern void fir2x ( float *A, float *W, float *PSUM, float *C, int K, int N, int SFLAG, int X );
extern void fir3 ( float *A, float *W, float *PSUM, float *C, int K, int N, int SFLAG );
extern void fir3x ( float *A, float *W, float *PSUM, float *C, int K, int N, int SFLAG, int X );
extern void fixpixa ( float *A, int I, unsigned char *C, int N );
extern void fixpixad ( double *A, int I, unsigned char *C, int N );
extern void fixpixadx ( double *A, int I, unsigned char *C, int N, int X );
extern void fixpixax ( float *A, int I, unsigned char *C, int N, int X );
extern void fixpixb ( float *A, int I, unsigned char *C, int N );
extern void fixpixbd ( double *A, int I, unsigned char *C, int N );
extern void fixpixbdx ( double *A, int I, unsigned char *C, int N, int X );
extern void fixpixbx ( float *A, int I, unsigned char *C, int N, int X );
extern void flnz ( float *A, int I, int *B, int *C, int N );
extern void flnzx ( float *A, int I, int *B, int *C, int N, int X );
extern void fltpixa ( unsigned char *A, float *C, int K, int N );
extern void fltpixad ( unsigned char *A, double *C, int K, int N );
extern void fltpixadx ( unsigned char *A, double *C, int K, int N, int X );
extern void fltpixax ( unsigned char *A, float *C, int K, int N, int X );
extern void fltpixb ( unsigned char *A, float *C, int K, int N );
extern void fltpixbd ( unsigned char *A, double *C, int K, int N );
extern void fltpixbdx ( unsigned char *A, double *C, int K, int N, int X );
extern void fltpixbx ( unsigned char *A, float *C, int K, int N, int X );
extern void *get_salcache ( void );
extern void hamm ( float *A, int I, float *C, int K, int N );
extern void hammd ( double *A, int I, double *C, int K, int N );
extern void hammdx ( double *A, int I, double *C, int K, int N, int X );
extern void hamm_window ( float *C, int N, int FLAG );
extern void hamm_windowd ( double *C, int N, int FLAG );
extern void hamm_windowdx ( double *C, int N, int FLAG, int X );
extern void hamm_windowx ( float *C, int N, int FLAG, int X );
extern void hammx ( float *A, int I, float *C, int K, int N, int X );
extern void hann ( float *A, int I, float *C, int K, int N, int F );
extern void hannd ( double *A, int I, double *C, int K, int N, int F );
extern void hanndx ( double *A, int I, double *C, int K, int N, int F, int X );
extern void hann_window ( float *C, int N, int FLAG );
extern void hann_windowd ( double *C, int N, int FLAG );
extern void hann_windowdx ( double *C, int N, int FLAG, int X );
extern void hann_windowx ( float *C, int N, int FLAG, int X );
extern void hannx ( float *A, int I, float *C, int K, int N, int F, int X );
extern void hist ( float *A, int I, float *C, int N, int NB, float *MAX, float *MIN );
extern void histd ( double *A, int I, double *C, int N, int NB, double *MAX, double *MIN );
extern void histdx ( double *A, int I, double *C, int N, int NB, double *MAX, double *MIN, int X );
extern void histx ( float *A, int I, float *C, int N, int NB, float *MAX, float *MIN, int X );
extern void ihist ( unsigned short *A, int I, signed char *C, int N );
extern void ihist32 ( unsigned short *A, int I, int *C, int N );
extern void ihist32x ( unsigned short *A, int I, int *C, int N, int X );
extern void ihistx ( unsigned short *A, int I, signed char *C, int N, int X );
extern void imgfir ( float *A, int NR, int NC, float *B, float *C, int M, int N );
extern void imgfird ( double *A, int NR, int NC, double *B, double *C, int M, int N );
extern void imgfirdx ( double *A, int NR, int NC, double *B, double *C, int M, int N, int X );
extern void imgfirx ( float *A, int NR, int NC, float *B, float *C, int M, int N, int X );
extern void lveq ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void lveqd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void lveqdx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void lveqi ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void lveqix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void lveqx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void lvge ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void lvged ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void lvgedx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void lvgei ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void lvgeix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void lvgex ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void lvgt ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void lvgtd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void lvgtdx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void lvgti ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void lvgtix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void lvgtx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void lvle ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void lvled ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void lvledx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void lvlei ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void lvleix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void lvlex ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void lvlt ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void lvltd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void lvltdx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void lvlti ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void lvltix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void lvltx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void lvne ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void lvned ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void lvnedx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void lvnei ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void lvneix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void lvnex ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void lvnot ( float *A, int I, float *C, int K, int N );
extern void lvnotd ( double *A, int I, double *C, int K, int N );
extern void lvnotdx ( double *A, int I, double *C, int K, int N, int X );
extern void lvnoti ( int *A, int I, int *C, int K, int N );
extern void lvnotix ( int *A, int I, int *C, int K, int N, int X );
extern void lvnotx ( float *A, int I, float *C, int K, int N, int X );
extern int mat_auto_mul ( float *pA, int Atcols, float *pC, int Ctcols, int n_c, int N, int flag );
extern int mat_auto_muld ( double *pA, int Atcols, double *pC, int Ctcols, int n_c, int N, int flag );
extern int mat_auto_muldx ( double *pA, int Atcols, double *pC, int Ctcols, int n_c, int N, int flag, int xflag );
extern int mat_auto_mulx ( float *pA, int Atcols, float *pC, int Ctcols, int n_c, int N, int flag, int xflag );
extern void matchold ( float *A, int A_tcols, float  *LU, int LU_tcols, float *Diag, int N );
extern int mat_chol_dec ( float *A, int Atcols, float  *LDU, int LDUtcols, int n, float *rcond_est, float *v, int flag );
extern int mat_chol_decx ( float *A, int Atcols, float  *LDU, int LDUtcols, int n, float *rcond_est, float *v, int flag, int xflag );
extern void matcholdx ( float *A, int A_tcols, float  *LU, int LU_tcols, float *Diag, int N, int X );
extern void matchols ( float *LU, int LU_tcols, float *Diag, float *B, float *XV, int N );
extern int mat_chol_sol ( float *LDU, int LDUtcols, float *b, float *w, int n, int flag );
extern int mat_chol_solx ( float *LDU, int LDUtcols, float *b, float *w, int n, int flag, int xflag );
extern void matcholsx ( float *LU, int LU_tcols, float *Diag, float *B, float *XV, int N, int X );
extern void matfbs ( float *A, float *IA, int *IP, float *B, float *C, int N );
extern void matfbsd ( double *A, double *IA, int *IP, double *B, double *C, int N );
extern void matfbsdx ( double *A, double *IA, int *IP, double *B, double *C, int N, int X );
extern void matfbsx ( float *A, float *IA, int *IP, float *B, float *C, int N, int X );
extern void matinv ( float *A, float *C, int N );
extern void matinvd ( double *A, double *C, int N );
extern void matinvdx ( double *A, double *C, int N, int X );
extern void matinv_lu ( float *C, float *D, int *IP, int N );
extern void matinv_lux ( float *C, float *D, int *IP, int N, int X );
extern void matinvx ( float *A, float *C, int N, int X );
extern void matlud ( float *C, int *IC, int N );
extern void matludd ( double *C, int *IC, int N );
extern int mat_lud_dec( float *C, int Ctcols, int *D, int n, float *rcond_est, float *v, int flag );
extern int mat_lud_decx( float *C, int Ctcols, int *D, int n, float *rcond_est, float *v, int flag, int xflag );
extern void matluddx ( double *C, int *IC, int N, int X );
extern int mat_lud_sol( float *A, int Atcols, int *D, float *b, float *w, int n, int flag);
extern int mat_lud_solx( float *A, int Atcols, int *D, float *b, float *w, int n, int flag, int X);
extern void matludx ( float *C, int *IC, int N, int X );
extern int mat_mgs_dec ( float *AT, int ATtcols, float *R, int Rtcols, int M, int N, float *rcond_est, float *v, int flag );
extern int mat_mgs_decx ( float *AT, int ATtcols, float *R, int Rtcols, int M, int N, float *rcond_est, float *v, int flag, int X );
extern void matmgs_dker ( float *Q, int tcols_Q, float *P, float *R, int M, int N );
extern void matmgs_dkerx ( float *Q, int tcols_Q, float *P, float *R, int M, int N, int X );
extern void matmgs_dqr ( float *A, int tcols_A, float *R, int tcols_R, int M, int N );
extern void matmgs_dqrx ( float *A, int tcols_A, float *R, int tcols_R, int M, int N, int X );
extern int mat_mgs_solr ( float *R, int Rtcols, float *b, float *x, int N, int flag );
extern int mat_mgs_solrhr ( float *R, int Rtcols, float *b, float *x, int N, int flag );
extern int mat_mgs_solrhrx ( float *R, int Rtcols, float *b, float *x, int N, int flag, int X );
extern int mat_mgs_solrx ( float *R, int Rtcols, float *b, float *x, int N, int flag, int X );
extern void matmgs_sr ( float *R, int tcols_R, float *B, float *XVEC, int N );
extern void matmgs_srhr ( float *R, int tcols_R, float *B, float *XVEC, int N );
extern void matmgs_srhrx ( float *R, int tcols_R, float *B, float *XVEC, int N, int X );
extern void matmgs_srx ( float *R, int tcols_R, float *B, float *XVEC, int N, int X );
extern void matmgs_tr ( float *A, int tcols_A, int N );
extern void matmgs_trx ( float *A, int tcols_A, int N, int X );
extern int mat_mul ( float *pA, int Atcols, float *pB, int Btcols, float *pC, int Ctcols, int nr_c, int nc_c, int N, int flag );
extern int mat_muld ( double *pA, int Atcols, double *pB, int Btcols, double *pC, int Ctcols, int nr_c, int nc_c, int N, int flag );
extern int mat_muldx ( double *pA, int Atcols, double *pB, int Btcols, double *pC, int Ctcols, int nr_c, int nc_c, int N, int flag, int xflag );
extern int mat_mulx ( float *pA, int Atcols, float *pB, int Btcols, float *pC, int Ctcols, int nr_c, int nc_c, int N, int flag, int xflag );
extern void maxmgv ( float *A, int I, float *C, int N );
extern void maxmgvd ( double *A, int I, double *C, int N );
extern void maxmgvdx ( double *A, int I, double *C, int N, int X );
extern void maxmgvi ( float *A, int I, float *C, int *IC, int N );
extern void maxmgvix ( float *A, int I, float *C, int *IC, int N, int X );
extern void maxmgvx ( float *A, int I, float *C, int N, int X );
extern void maxv ( float *A, int I, float *C, int N );
extern void maxvd ( double *A, int I, double *C, int N );
extern void maxvdx ( double *A, int I, double *C, int N, int X );
extern void maxvi ( float *A, int I, float *C, int *IC, int N );
extern void maxvid ( double *A, int I, double *C, int *IC, int N );
extern void maxvidx ( double *A, int I, double *C, int *IC, int N, int X );
extern void maxvix ( float *A, int I, float *C, int *IC, int N, int X );
extern void maxvx ( float *A, int I, float *C, int N, int X );
extern void meamgv ( float *A, int I, float *C, int N );
extern void meamgvd ( double *A, int I, double *C, int N );
extern void meamgvdx ( double *A, int I, double *C, int N, int X );
extern void meamgvx ( float *A, int I, float *C, int N, int X );
extern void meanv ( float *A, int I, float *C, int N );
extern void meanvd ( double *A, int I, double *C, int N );
extern void meanvdx ( double *A, int I, double *C, int N, int X );
extern void meanvx ( float *A, int I, float *C, int N, int X );
extern void measqv ( float *A, int I, float *C, int N );
extern void measqvd ( double *A, int I, double *C, int N );
extern void measqvdx ( double *A, int I, double *C, int N, int X );
extern void measqvx ( float *A, int I, float *C, int N, int X );
extern void medf ( float *A, int I, float *C, int N, int P );
extern void medf3x3 ( float *A, int NR, int NC, float *C );
extern void medf3x3d ( double *A, int NR, int NC, double *C );
extern void medf3x3dx ( double *A, int NR, int NC, double *C, int X );
extern void medf3x3x ( float *A, int NR, int NC, float *C, int X );
extern void medf5x5 ( float *A, int NR, int NC, float *C );
extern void medf5x5d ( double *A, int NR, int NC, double *C );
extern void medf5x5dx ( double *A, int NR, int NC, double *C, int X );
extern void medf5x5x ( float *A, int NR, int NC, float *C, int X );
extern void medfd ( double *A, int I, double *C, int N, int P );
extern void medfdx ( double *A, int I, double *C, int N, int P, int X );
extern void medfx ( float *A, int I, float *C, int N, int P, int X );
extern void minmgv ( float *A, int I, float *C, int N );
extern void minmgvd ( double *A, int I, double *C, int N );
extern void minmgvdx ( double *A, int I, double *C, int N, int X );
extern void minmgvi ( float *A, int I, float *C, int *IC, int N );
extern void minmgvix ( float *A, int I, float *C, int *IC, int N, int X );
extern void minmgvx ( float *A, int I, float *C, int N, int X );
extern void minv ( float *A, int I, float *C, int N );
extern void minvd ( double *A, int I, double *C, int N );
extern void minvdx ( double *A, int I, double *C, int N, int X );
extern void minvi ( float *A, int I, float *C, int *IC, int N );
extern void minvid ( double *A, int I, double *C, int *IC, int N );
extern void minvidx ( double *A, int I, double *C, int *IC, int N, int X );
extern void minvix ( float *A, int I, float *C, int *IC, int N, int X );
extern void minvx ( float *A, int I, float *C, int N, int X );
extern void mmov ( float *pSrc,int stride_x_src,int stride_y_src,float *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len );
extern void mmovd ( double *pSrc,int stride_x_src,int stride_y_src,double *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len );
extern void mmovdx ( double *pSrc,int stride_x_src,int stride_y_src,double *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len,int xflag );
extern void mmovx ( float *pSrc,int stride_x_src,int stride_y_src,float *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len,int xflag );
extern void mmul ( float *A, int I, float *B, int J, float *C, int K, int MC, int NC, int NA );
extern void mmuld ( double *A, int I, double *B, int J, double *C, int K, int MC, int NC, int NA );
extern void mmuldx ( double *A, int I, double *B, int J, double *C, int K, int MC, int NC, int NA, int X );
extern void mmulf ( float *A, float *B, float *C, int MC, int NC, int NA );
extern void mmulfd ( double *A, double *B, double *C, int MC, int NC, int NA );
extern void mmulfdx ( double *A, double *B, double *C, int MC, int NC, int NA, int X );
extern void mmulfx ( float *A, float *B, float *C, int MC, int NC, int NA, int X );
extern void mmulx ( float *A, int I, float *B, int J, float *C, int K, int MC, int NC, int NA, int X );
extern void mtrans ( float *A, int I, float *C, int K, int MC, int NC );
extern void mtrans2 ( float *A, float *C, int NC, int NR, int tcols_A, int tcols_C );
extern void mtrans2d ( double *A, double *C, int NC, int NR, int tcols_A, int tcols_C );
extern void mtrans2dx ( double *A, double *C, int NC, int NR, int tcols_A, int tcols_C, int X );
extern void mtrans2x ( float *A, float *C, int NC, int NR, int tcols_A, int tcols_C, int X );
extern void mtransd ( double *A, int I, double *C, int K, int MC, int NC );
extern void mtransdx ( double *A, int I, double *C, int K, int MC, int NC, int X );
extern void mtransx ( float *A, int I, float *C, int K, int MC, int NC, int X );
extern void mvessq ( float *A, int I, float *C, int N );
extern void mvessqx ( float *A, int I, float *C, int N, int X );
extern void nzcros ( float *A, int I, int B, int *C, int *D, int N );
extern void nzcrosx ( float *A, int I, int B, int *C, int *D, int N, int X );
extern void polar ( float *A, int I, float *C, int K, int N );
extern void polard ( double *A, int I, double *C, int K, int N );
extern void polardx ( double *A, int I, double *C, int K, int N, int X );
extern void polarx ( float *A, int I, float *C, int K, int N, int X );
extern void print_csal_version ( int x );
extern void print_sal_version ( int x );
extern void rect ( float *A, int I, float *C, int K, int N );
extern void rectd ( double *A, int I, double *C, int K, int N );
extern void rectdx ( double *A, int I, double *C, int K, int N, int X );
extern void rectx ( float *A, int I, float *C, int K, int N, int X );
extern int resamp_cicx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX *input, COMPLEX *output, int input_len, int flag_word, int xflag );
extern int resamp_cocx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX *input, COMPLEX *output, int output_len, int flag_word, int xflag );
extern int resamp_filter_close ( SAL_resamp_filter filter_handle, int flag_word );
extern int resamp_filter_create ( float *filter_setp, int filter_len, int num_filters, SAL_resamp_name resamp_name, int flag_word, SAL_resamp_filter *filter_handlep, int *num_bytesp );
extern int resamp_filter_create_user_alloc ( float *filter_setp, int filter_len, int num_filters, SAL_resamp_name resamp_name, int flag_word, SAL_resamp_filter *filter_handlep, void *bufferp );
extern int resamp_make_filter_set ( double ( *filter_func )  ( double ) , float *filter_setp, int filter_len, int num_filters );
extern int resamp_map_close ( SAL_resamp_map map_handle, int flag_word );
extern int resamp_map_create ( SAL_resamp_filter filter_handle, float *map_setp, int map_len, int num_maps, int signal_len, int flag_word, SAL_resamp_map *map_handlep, int *num_bytesp );
extern int resamp_map_create_user_alloc ( SAL_resamp_filter filter_handle, float *map_setp, int map_len, int num_maps, int signal_len, int flag_word, SAL_resamp_map *map_handlep, void *bufferp );
extern int resamp_mc_cicx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX *input, int input_tcols, COMPLEX *output, int output_tcols, int input_len, int num_columns, int flag_word, int xflag );
extern int resamp_mc_cocx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX *input, int input_tcols, COMPLEX *output, int output_tcols, int output_len, int num_columns, int flag_word, int xflag );
extern int resamp_mc_ricx ( SAL_resamp_map map_handle, int map, int map_start_pos, float *input, int input_tcols, float *output, int output_tcols, int input_len, int num_columns, int flag_word, int xflag );
extern int resamp_mc_rocx ( SAL_resamp_map map_handle, int map, int map_start_pos, float *input, int input_tcols, float *output, int output_tcols, int output_len, int num_columns, int flag_word, int xflag );
extern int resamp_mc_zicx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX_SPLIT *input, int input_tcols, COMPLEX_SPLIT *output, int output_tcols, int input_len, int num_columns, int flag_word, int xflag );
extern int resamp_mc_zocx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX_SPLIT *input, int input_tcols, COMPLEX_SPLIT *output, int output_tcols, int output_len, int num_columns, int flag_word, int xflag );
extern int resamp_mr_cicx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX *input, int input_tcols, COMPLEX *output, int output_tcols, int input_len, int num_rows, int flag_word, int xflag );
extern int resamp_mr_cocx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX *input, int input_tcols, COMPLEX *output, int output_tcols, int output_len, int num_rows, int flag_word, int xflag );
extern int resamp_mr_ricx ( SAL_resamp_map map_handle, int map, int map_start_pos, float *input, int input_tcols, float *output, int output_tcols, int input_len, int num_rows, int flag_word, int xflag );
extern int resamp_mr_rocx ( SAL_resamp_map map_handle, int map, int map_start_pos, float *input, int input_tcols, float *output, int output_tcols, int output_len, int num_rows, int flag_word, int xflag );
extern int resamp_mr_zicx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX_SPLIT *input, int input_tcols, COMPLEX_SPLIT *output, int output_tcols, int input_len, int num_rows, int flag_word, int xflag );
extern int resamp_mr_zocx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX_SPLIT *input, int input_tcols, COMPLEX_SPLIT *output, int output_tcols, int output_len, int num_rows, int flag_word, int xflag );
extern int resamp_ricx ( SAL_resamp_map map_handle, int map, int map_start_pos, float *input, float *output, int input_len, int flag_word, int xflag );
extern int resamp_rocx ( SAL_resamp_map map_handle, int map, int map_start_pos, float *input, float *output, int output_len, int flag_word, int xflag );
extern int resamp_zicx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX_SPLIT *input, COMPLEX_SPLIT *output, int input_len, int flag_word, int xflag );
extern int resamp_zocx ( SAL_resamp_map map_handle, int map, int map_start_pos, COMPLEX_SPLIT *input, COMPLEX_SPLIT *output, int output_len, int flag_word, int xflag );
extern void rfft ( float *C, int N, int F );
extern void rfft2d ( float *C, int NC, int NR, int F );
extern void rfft2dd ( double *C, int NC, int NR, int F );
extern void rfft2ddx ( double *C, int NC, int NR, int F, int X );
extern void rfft2dx ( float *C, int NC, int NR, int F, int X );
extern void rfftb ( float *C, float *D, int N, int F );
extern void rfftbd ( double *C, double *D, int N, int F );
extern void rfftbdx ( double *C, double *D, int N, int F, int X );
extern void rfftbx ( float *C, float *D, int N, int F, int X );
extern void rfftd ( double *C, int N, int F );
extern void rfftdx ( double *C, int N, int F, int X );
extern void rffto ( float *C, float *T, float *D, int N, int F );
extern void rfftod ( double *C, double *T, double *D, int N, int F );
extern void rfftodx ( double *C, double *T, double *D, int N, int F, int X );
extern void rfftox ( float *C, float *T, float *D, int N, int F, int X );
extern void rfftsc ( float *C, int N, int F, int G );
extern void rfftscd ( double *C, int N, int F, int G );
extern void rfftscdx ( double *C, int N, int F, int G, int X );
extern void rfftscx ( float *C, int N, int F, int G, int X );
extern void rfftx ( float *C, int N, int F, int X );
extern void rmsqv ( float *A, int I, float *C, int N );
extern void rmsqvd ( double *A, int I, double *C, int N );
extern void rmsqvdx ( double *A, int I, double *C, int N, int X );
extern void rmsqvx ( float *A, int I, float *C, int N, int X );
extern void sal_74xx_set_nonjava ( void );
extern xint32 sal_get_path ( xint32 flag );
extern void sal_java_mode_disable ( void );
extern void sal_java_mode_enable ( void );
extern void set_salcache ( void *A );
extern void spin ( float *A, float *B, float *C, int INC, int INR, int ONC, int ONR, int FLG, float *BKG );
extern void spind ( double *A, double *B, double *C, int INC, int INR, int ONC, int ONR, int FLG, double *BKG );
extern void spindx ( double *A, double *B, double *C, int INC, int INR, int ONC, int ONR, int FLG, double *BKG, int X );
extern void spinx ( float *A, float *B, float *C, int INC, int INR, int ONC, int ONR, int FLG, float *BKG, int X );
extern void svdiv ( float *A, float *B, int J, float *C, int K, int N );
extern void svdivx ( float *A, float *B, int J, float *C, int K, int N, int X );
extern void svdivx_fast ( float *A, float *B, int J, float *C, int K, int N, int X );
extern void sve ( float *A, int I, float *C, int N );
extern void sved ( double *A, int I, double *C, int N );
extern void svedx ( double *A, int I, double *C, int N, int X );
extern void svemg ( float *A, int I, float *C, int N );
extern void svemgd ( double *A, int I, double *C, int N );
extern void svemgdx ( double *A, int I, double *C, int N, int X );
extern void svemgx ( float *A, int I, float *C, int N, int X );
extern void svesq ( float *A, int I, float *C, int N );
extern void svesqd ( double *A, int I, double *C, int N );
extern void svesqdx ( double *A, int I, double *C, int N, int X );
extern void svesqx ( float *A, int I, float *C, int N, int X );
extern void svex ( float *A, int I, float *C, int N, int X );
extern void svs ( float *A, int I, float *C, int N );
extern void svsd ( double *A, int I, double *C, int N );
extern void svsdx ( double *A, int I, double *C, int N, int X );
extern void svsx ( float *A, int I, float *C, int N, int X );
extern void tconvl ( float *A, int I, float *B, int J, float *C, int K, int M, int N, int P, int Q );
extern void tconvlx ( float *A, int I, float *B, int J, float *C, int K, int M, int N, int P, int Q, int X );
extern void trans ( float *A, COMPLEX *B, COMPLEX *C, int N );
extern void transx ( float *A, COMPLEX *B, COMPLEX *C, int N, int X );
extern void unwrap_phase ( float *A, int I, float *C, int K, int N, SAL_unwrap_phase_state *P, int F );
extern void unwrap_phasex ( float *A, int I, float *C, int K, int N, SAL_unwrap_phase_state *P, int F, int X );
extern void vaam ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N );
extern void vaamx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N, int X );
extern void vabmrg ( float *A, float *B, float *C, int F, int N, int P, int Q );
extern void vabmrgx ( float *A, float *B, float *C, int F, int N, int P, int Q, int X );
extern void vabs ( float *A, int I, float *C, int K, int N );
extern void vabsd ( double *A, int I, double *C, int K, int N );
extern void vabsdx ( double *A, int I, double *C, int K, int N, int X );
extern void vabsi ( int *A, int I, int *C, int K, int N );
extern void vabsix ( int *A, int I, int *C, int K, int N, int X );
extern void vabsx ( float *A, int I, float *C, int K, int N, int X );
extern void vadd ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vaddd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vadddx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vaddi ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void vaddix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void vaddx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vaint ( float *A, int I, float *C, int K, int N );
extern void vaintx ( float *A, int I, float *C, int K, int N, int X );
extern void valog ( float *A, int I, float *C, int K, int N );
extern void valogd ( double *A, int I, double *C, int K, int N );
extern void valogdx ( double *A, int I, double *C, int K, int N, int X );
extern void valogx ( float *A, int I, float *C, int K, int N, int X );
extern void vam ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N );
extern void vamd ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N );
extern void vamdx ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N, int X );
extern void vamerg ( float *A, int I, int M, float *B, int J, int N, float *C, int K );
extern void vamergx ( float *A, int I, int M, float *B, int J, int N, float *C, int K, int X );
extern void vamx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N, int X );
extern void vandi ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void vandix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void vasbm ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N );
extern void vasbmx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N, int X );
extern void vasm ( float *A, int I, float *B, int J, float *C, float *D, int L, int N );
extern void vasmx ( float *A, int I, float *B, int J, float *C, float *D, int L, int N, int X );
extern void vatan ( float *A, int I, float *C, int K, int N );
extern void vatan2 ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vatan2d ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vatan2dx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vatan2x ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vatand ( double *A, int I, double *C, int K, int N );
extern void vatandx ( double *A, int I, double *C, int K, int N, int X );
extern void vatanx ( float *A, int I, float *C, int K, int N, int X );
extern void vavexp ( float *A, int I, float *B, float *C, int K, int N );
extern void vavexpx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vavlin ( float *A, int I, float *B, float *C, int K, int N );
extern void vavlinx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vcache ( void );
extern void vclip ( float *A, int I, float *B, float *C, float *D, int L, int N );
extern void vclipc ( float *A, int I, float *B, float *C, float *D, int L, int N, int *NLOW, int *NHI );
extern void vclipcx ( float *A, int I, float *B, float *C, float *D, int L, int N, int *NLOW, int *NHI, int X );
extern void vclipd ( double *A, int I, double *B, double *C, double *D, int L, int N );
extern void vclipdx ( double *A, int I, double *B, double *C, double *D, int L, int N, int X );
extern void vclipx ( float *A, int I, float *B, float *C, float *D, int L, int N, int X );
extern void vclr ( float *C, int K, int N );
extern void vclrd ( double *C, int K, int N );
extern void vclrdx ( double *C, int K, int N, int X );
extern void vclrx ( float *C, int K, int N, int X );
extern void vcmerg ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N );
extern void vcmergx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N, int X );
extern void vcmprs ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vcmprsx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vconvert_cs16_zf32 ( COMPLEX_S16 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_cs16_zf32x ( COMPLEX_S16 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_cs32_zf32 ( COMPLEX_S32 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_cs32_zf32x ( COMPLEX_S32 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_cs8_zf32 ( COMPLEX_S8 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_cs8_zf32x ( COMPLEX_S8 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_cu16_zf32 ( COMPLEX_U16 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_cu16_zf32x ( COMPLEX_U16 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_cu32_zf32 ( COMPLEX_U32 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_cu32_zf32x ( COMPLEX_U32 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_cu8_zf32 ( COMPLEX_U8 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_cu8_zf32x ( COMPLEX_U8 *A, int I, COMPLEX_SPLIT_F32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_endian2 ( unsigned char* p_src, int stride_src, unsigned char* p_dst, int stride_dst, int n_elems );
extern void vconvert_endian2x ( unsigned char* p_src, int stride_src, unsigned char* p_dst, int stride_dst, int n_elems, int xflag );
extern void vconvert_endian4 ( unsigned char* p_src, int stride_src, unsigned char* p_dst, int stride_dst, int n_elems );
extern void vconvert_endian4x ( unsigned char* p_src, int stride_src, unsigned char* p_dst, int stride_dst, int n_elems, int xflag );
extern void vconvert_endian8 ( unsigned char* p_src, int stride_src, unsigned char* p_dst, int stride_dst, int n_elems );
extern void vconvert_endian8x ( unsigned char* p_src, int stride_src, unsigned char* p_dst, int stride_dst, int n_elems, int xflag );
extern void vconvert_f32_s16 ( float *A, int I, short *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_f32_s16x ( float *A, int I, short *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_f32_s32 ( float *A, int I, xint32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_f32_s32x ( float *A, int I, xint32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_f32_s8 ( float *A, int I, signed char *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_f32_s8x ( float *A, int I, signed char *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_f32_u16 ( float *A, int I, unsigned short *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_f32_u16x ( float *A, int I, unsigned short *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_f32_u32 ( float *A, int I, unsigned xint32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_f32_u32x ( float *A, int I, unsigned xint32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_f32_u8 ( float *A, int I, unsigned char *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_f32_u8x ( float *A, int I, unsigned char *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_s16_f32 ( short *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_s16_f32x ( short *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_s32_f32 ( xint32 *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_s32_f32x ( xint32 *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_s8_f32 ( signed char *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_s8_f32x ( signed char *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_u16_f32 ( unsigned short *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_u16_f32x ( unsigned short *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_u32_f32 ( unsigned xint32 *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_u32_f32x ( unsigned xint32 *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_u8_f32 ( unsigned char *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_u8_f32x ( unsigned char *A, int I, float *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_zf32_cs16 ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_S16 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_zf32_cs16x ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_S16 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_zf32_cs32 ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_S32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_zf32_cs32x ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_S32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_zf32_cs8 ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_S8 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_zf32_cs8x ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_S8 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_zf32_cu16 ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_U16 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_zf32_cu16x ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_U16 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_zf32_cu32 ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_U32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_zf32_cu32x ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_U32 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vconvert_zf32_cu8 ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_U8 *C, int K, float *SCALE, float *BIAS, int N, int FLAG );
extern void vconvert_zf32_cu8x ( COMPLEX_SPLIT_F32 *A, int I, COMPLEX_U8 *C, int K, float *SCALE, float *BIAS, int N, int FLAG, int X );
extern void vcos ( float *A, int I, float *C, int K, int N );
extern void vcosd ( double *A, int I, double *C, int K, int N );
extern void vcosdx ( double *A, int I, double *C, int K, int N, int X );
extern void vcosx ( float *A, int I, float *C, int K, int N, int X );
extern void vdbcon ( float *A, int I, float *B, float *C, int K, int N, int F );
extern void vdbconx ( float *A, int I, float *B, float *C, int K, int N, int F, int X );
extern void vdist ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vdistd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vdistdx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vdistx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vdiv ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vdivd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vdivdx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vdivi ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void vdivix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void vdivx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vdivz ( float *A, int I, float *B, int J, float *C, float *D, int L, int N );
extern void vdivzx ( float *A, int I, float *B, int J, float *C, float *D, int L, int N, int X );
extern void vdpsp ( double *A, int I, float *C, int K, int N );
extern void vdpspx ( double *A, int I, float *C, int K, int N, int X );
extern void venvlp ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N );
extern void venvlpd ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N );
extern void venvlpdx ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N, int X );
extern void venvlpx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N, int X );
extern void veqvi ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void veqvix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void vexp ( float *A, int I, float *C, int K, int N );
extern void vexpd ( double *A, int I, double *C, int K, int N );
extern void vexpdx ( double *A, int I, double *C, int K, int N, int X );
extern void vexpx ( float *A, int I, float *C, int K, int N, int X );
extern void vfill ( float *A, float *C, int K, int N );
extern void vfilld ( double *A, double *C, int K, int N );
extern void vfilldx ( double *A, double *C, int K, int N, int X );
extern void vfilli ( int *A, int *C, int K, int N );
extern void vfillix ( int *A, int *C, int K, int N, int X );
extern void vfillx ( float *A, float *C, int K, int N, int X );
extern void vfix ( float *A, int I, short *C, int K, int N );
extern void vfix32 ( float *A, int I, int *C, int K, int N );
extern void vfix32d ( double *A, int I, int *C, int K, int N );
extern void vfix32dx ( double *A, int I, int *C, int K, int N, int X );
extern void vfix32x ( float *A, int I, int *C, int K, int N, int X );
extern void vfixd ( double *A, int I, short *C, int K, int N );
extern void vfixdx ( double *A, int I, short *C, int K, int N, int X );
extern void vfixr ( float *A, int I, short *C, int K, int N );
extern void vfixr32 ( float *A, int I, int *C, int K, int N );
extern void vfixr32d ( double *A, int I, int *C, int K, int N );
extern void vfixr32dx ( double *A, int I, int *C, int K, int N, int X );
extern void vfixr32x ( float *A, int I, int *C, int K, int N, int X );
extern void vfixrd ( double *A, int I, short *C, int K, int N );
extern void vfixrdx ( double *A, int I, short *C, int K, int N, int X );
extern void vfixrx ( float *A, int I, short *C, int K, int N, int X );
extern void vfixu ( float *A, int I, unsigned short *C, int K, int N );
extern void vfixux ( float *A, int I, unsigned short *C, int K, int N, int X );
extern void vfixx ( float *A, int I, short *C, int K, int N, int X );
extern void vflt ( short *A, int I, float *C, int K, int N );
extern void vflt16 ( short *A, int I, float *C, int K, int N );
extern void vflt16x ( short *A, int I, float *C, int K, int N, int X );
extern void vflt32 ( int *A, int I, float *C, int K, int N );
extern void vflt32d ( int *A, int I, double *C, int K, int N );
extern void vflt32dx ( int *A, int I, double *C, int K, int N, int X );
extern void vflt32x ( int *A, int I, float *C, int K, int N, int X );
extern void vflt8 ( signed char *A, int I, float *C, int K, int N );
extern void vflt8x ( signed char *A, int I, float *C, int K, int N, int X );
extern void vfltd ( short *A, int I, double *C, int K, int N );
extern void vfltdx ( short *A, int I, double *C, int K, int N, int X );
extern void vfltu ( unsigned short *A, int I, float *C, int K, int N );
extern void vfltu16 ( unsigned short *A, int I, float *C, int K, int N );
extern void vfltu16x ( unsigned short *A, int I, float *C, int K, int N, int X );
extern void vfltu32 ( unsigned int *A, int I, float *C, int K, int N );
extern void vfltu32d ( unsigned int *A, int I, double *C, int K, int N );
extern void vfltu32dx ( unsigned int *A, int I, double *C, int K, int N, int X );
extern void vfltu32x ( unsigned int *A, int I, float *C, int K, int N, int X );
extern void vfltud ( unsigned short *A, int I, double *C, int K, int N );
extern void vfltudx ( unsigned short *A, int I, double *C, int K, int N, int X );
extern void vfltux ( unsigned short *A, int I, float *C, int K, int N, int X );
extern void vfltx ( short *A, int I, float *C, int K, int N, int X );
extern void vfrac ( float *A, int I, float *C, int K, int N );
extern void vfracd ( double *A, int I, double *C, int K, int N );
extern void vfracdx ( double *A, int I, double *C, int K, int N, int X );
extern void vfracx ( float *A, int I, float *C, int K, int N, int X );
extern void vgathr ( float *A, int *B, int J, float *C, int K, int N );
extern void vgathra ( float **A, int I, float *C, int K, int N );
extern void vgathrad ( double **A, int I, double *C, int K, int N );
extern void vgathradx ( double **A, int I, double *C, int K, int N, int X );
extern void vgathrax ( float **A, int I, float *C, int K, int N, int X );
extern void vgathrd ( double *A, int *B, int J, double *C, int K, int N );
extern void vgathrdx ( double *A, int *B, int J, double *C, int K, int N, int X );
extern void vgathrx ( float *A, int *B, int J, float *C, int K, int N, int X );
extern void vgen ( float *A, float *B, float *C, int K, int N );
extern void vgenp ( float *A, int I, float *B, int J, float *C, int K, int N, int M );
extern void vgenpx ( float *A, int I, float *B, int J, float *C, int K, int N, int M, int X );
extern void vgenx ( float *A, float *B, float *C, int K, int N, int X );
extern void viclip ( float *A, int I, float *B, float *C, float *D, int L, int N );
extern void viclipx ( float *A, int I, float *B, float *C, float *D, int L, int N, int X );
extern void vimag ( COMPLEX *A, int I, float *C, int K, int N );
extern void vimagd ( DOUBLE_COMPLEX *A, int I, double *C, int K, int N );
extern void vimagdx ( DOUBLE_COMPLEX *A, int I, double *C, int K, int N, int X );
extern void vimagx ( COMPLEX *A, int I, float *C, int K, int N, int X );
extern void vindex ( float *A, float *B, int J, float *C, int K, int N );
extern void vindexx ( float *A, float *B, int J, float *C, int K, int N, int X );
extern void vint ( float *A, int I, int *C, int K, int N );
extern void vint2 ( float *A, int I, short *C, int K, int N );
extern void vint2x ( float *A, int I, short *C, int K, int N, int X );
extern void vintb ( float *A, int I, float *B, int J, float *C, float *D, int L, int N );
extern void vintbx ( float *A, int I, float *B, int J, float *C, float *D, int L, int N, int X );
extern void vintx ( float *A, int I, int *C, int K, int N, int X );
extern void vlim ( float *A, int I, float *B, float *C, float *D, int L, int N );
extern void vlimd ( double *A, int I, double *B, double *C, double *D, int L, int N );
extern void vlimdx ( double *A, int I, double *B, double *C, double *D, int L, int N, int X );
extern void vlimx ( float *A, int I, float *B, float *C, float *D, int L, int N, int X );
extern void vlint ( float *A, float *B, int J, float *C, int K, int N, int M );
extern void vlintx ( float *A, float *B, int J, float *C, int K, int N, int M, int X );
extern void vlmerg ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N );
extern void vlmergx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N, int X );
extern void vln ( float *A, int I, float *C, int K, int N );
extern void vlnd ( double *A, int I, double *C, int K, int N );
extern void vlndx ( double *A, int I, double *C, int K, int N, int X );
extern void vlnm ( float *A, int I, float *C, int K, int N );
extern void vlnmx ( float *A, int I, float *C, int K, int N, int X );
extern void vlnmz ( float *A, int I, float *B, float *C, int K, int N );
extern void vlnmzx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vlnx ( float *A, int I, float *C, int K, int N, int X );
extern void vlnz ( float *A, int I, float *B, float *C, int K, int N );
extern void vlnzx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vlog ( float *A, int I, float *C, int K, int N );
extern void vlogd ( double *A, int I, double *C, int K, int N );
extern void vlogdx ( double *A, int I, double *C, int K, int N, int X );
extern void vlogm ( float *A, int I, float *C, int K, int N );
extern void vlogmx ( float *A, int I, float *C, int K, int N, int X );
extern void vlogmz ( float *A, int I, float *B, float *C, int K, int N );
extern void vlogmzx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vlogx ( float *A, int I, float *C, int K, int N, int X );
extern void vlogz ( float *A, int I, float *B, float *C, int K, int N );
extern void vlogzx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vma ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N );
extern void vmad ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N );
extern void vmadx ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N, int X );
extern void vmax ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vma_x ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N, int X );
extern void vmaxd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vmaxdx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vmaxmg ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vmaxmgd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vmaxmgdx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vmaxmgx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vmaxx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vmin ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vmind ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vmindx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vminmg ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vminmgd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vminmgdx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vminmgx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vminx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vmma ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N );
extern void vmmax ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N, int X );
extern void vmmsb ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N );
extern void vmmsbx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N, int X );
extern void vmov ( float *A, int I, float *C, int K, int N );
extern void vmovd ( double *A, int I, double *C, int K, int N );
extern void vmovdx ( double *A, int I, double *C, int K, int N, int X );
extern void vmovi ( int *A, int I, int *C, int K, int N );
extern void vmovix ( int *A, int I, int *C, int K, int N, int X );
extern void vmovx ( float *A, int I, float *C, int K, int N, int X );
extern void vmsa ( float *A, int I, float *B, int J, float *C, float *D, int L, int N );
extern void vmsad ( double *A, int I, double *B, int J, double *C, double *D, int L, int N );
extern void vmsadx ( double *A, int I, double *B, int J, double *C, double *D, int L, int N, int X );
extern void vmsax ( float *A, int I, float *B, int J, float *C, float *D, int L, int N, int X );
extern void vmsb ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N );
extern void vmsbd ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N );
extern void vmsbdx ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N, int X );
extern void vmsbx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N, int X );
extern void vmul ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vmuld ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vmuldx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vmuli ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void vmulix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void vmulx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vnabs ( float *A, int I, float *C, int K, int N );
extern void vnabsx ( float *A, int I, float *C, int K, int N, int X );
extern void vneg ( float *A, int I, float *C, int K, int N );
extern void vnegd ( double *A, int I, double *C, int K, int N );
extern void vnegdx ( double *A, int I, double *C, int K, int N, int X );
extern void vnegi ( int *A, int I, int *C, int K, int N );
extern void vnegix ( int *A, int I, int *C, int K, int N, int X );
extern void vnegx ( float *A, int I, float *C, int K, int N, int X );
extern void vnint ( float *A, int I, int *C, int K, int N );
extern void vnint2 ( float *A, int I, short *C, int K, int N );
extern void vnint2x ( float *A, int I, short *C, int K, int N, int X );
extern void vnintx ( float *A, int I, int *C, int K, int N, int X );
extern void vori ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void vorix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void vpmerg ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N );
extern void vpmergx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N, int X );
extern void vpoly ( float *A, int I, float *B, int J, float *C, int K, int N, int P );
extern void vpolyd ( double *A, int I, double *B, int J, double *C, int K, int N, int P );
extern void vpolydx ( double *A, int I, double *B, int J, double *C, int K, int N, int P, int X );
extern void vpolyx ( float *A, int I, float *B, int J, float *C, int K, int N, int P, int X );
extern void vpythg ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N );
extern void vpythgx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N, int X );
extern void vqint ( float *A, float *B, int J, float *C, int K, int N, int M );
extern void vqintx ( float *A, float *B, int J, float *C, int K, int N, int M, int X );
extern void vramp ( float *A, float *B, float *C, int K, int N );
extern void vrampd ( double *A, double *B, double *C, int K, int N );
extern void vrampdx ( double *A, double *B, double *C, int K, int N, int X );
extern void vrampi ( int *A, int *B, int *C, int K, int N );
extern void vrampix ( int *A, int *B, int *C, int K, int N, int X );
extern void vrampx ( float *A, float *B, float *C, int K, int N, int X );
extern void vreal ( COMPLEX *A, int I, float *C, int K, int N );
extern void vreald ( DOUBLE_COMPLEX *A, int I, double *C, int K, int N );
extern void vrealdx ( DOUBLE_COMPLEX *A, int I, double *C, int K, int N, int X );
extern void vrealx ( COMPLEX *A, int I, float *C, int K, int N, int X );
extern void vrecip ( float *A, int I, float *C, int K, int N );
extern void vrecipx ( float *A, int I, float *C, int K, int N, int X );
extern void vrecipx_fast ( float *A, int I, float *C, int K, int N, int X );
extern void vrsqrt ( float *A, int I, float *C, int J, int N );
extern void vrsqrtd ( double *A, int I, double *C, int J, int N );
extern void vrsqrtdx ( double *A, int I, double *C, int J, int N, int xflag );
extern void vrsqrtx ( float *A, int I, float *C, int J, int N, int xflag );
extern void vrsum ( float *A, int I, float *S, float *C, int K, int N );
extern void vrsumx ( float *A, int I, float *S, float *C, int K, int N, int X );
extern void vrvrs ( float *C, int K, int N );
extern void vrvrsx ( float *C, int K, int N, int X );
extern void vsadd ( float *A, int I, float *B, float *C, int K, int N );
extern void vsaddd ( double *A, int I, double *B, double *C, int K, int N );
extern void vsadddx ( double *A, int I, double *B, double *C, int K, int N, int X );
extern void vsaddi ( int *A, int I, int *B, int *C, int K, int N );
extern void vsaddix ( int *A, int I, int *B, int *C, int K, int N, int X );
extern void vsaddx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vsbm ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N );
extern void vsbmd ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N );
extern void vsbmdx ( double *A, int I, double *B, int J, double *C, int K, double *D, int L, int N, int X );
extern void vsbmx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, int N, int X );
extern void vsbsbm ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N );
extern void vsbsbmx ( float *A, int I, float *B, int J, float *C, int K, float *D, int L, float *E, int M, int N, int X );
extern void vsbsm ( float *A, int I, float *B, int J, float *C, float *D, int L, int N );
extern void vsbsmx ( float *A, int I, float *B, int J, float *C, float *D, int L, int N, int X );
extern void vscal ( float *A, int I, float *B, int *C, int K, int N, int NB );
extern void vscald ( double *A, int I, double *B, int *C, int K, int N, int NB );
extern void vscaldx ( double *A, int I, double *B, int *C, int K, int N, int NB, int X );
extern void vscalx ( float *A, int I, float *B, int *C, int K, int N, int NB, int X );
extern void vscatr ( float *A, int I, int *B, int J, float *C, int N );
extern void vscatra ( float *A, int I, float **B, int J, int N );
extern void vscatrad ( double *A, int I, double **B, int J, int N );
extern void vscatradx ( double *A, int I, double **B, int J, int N, int X );
extern void vscatrax ( float *A, int I, float **B, int J, int N, int X );
extern void vscatrd ( double *A, int I, int *B, int J, double *C, int N );
extern void vscatrdx ( double *A, int I, int *B, int J, double *C, int N, int X );
extern void vscatrx ( float *A, int I, int *B, int J, float *C, int N, int X );
extern void vsdiv ( float *A, int I, float *B, float *C, int K, int N );
extern void vsdivd ( double *A, int I, double *B, double *C, int K, int N );
extern void vsdivdx ( double *A, int I, double *B, double *C, int K, int N, int X );
extern void vsdivi ( int *A, int I, int *B, int *C, int K, int N );
extern void vsdivix ( int *A, int I, int *B, int *C, int K, int N, int X );
extern void vsdivx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vsimps ( float *A, int I, float *B, float *C, int K, int N );
extern void vsimpsx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vsin ( float *A, int I, float *C, int K, int N );
extern void vsind ( double *A, int I, double *C, int K, int N );
extern void vsindx ( double *A, int I, double *C, int K, int N, int X );
extern void vsinx ( float *A, int I, float *C, int K, int N, int X );
extern void vsma ( float *A, int I, float *B, float *C, int K, float *D, int L, int N );
extern void vsmad ( double *A, int I, double *B, double *C, int K, double *D, int L, int N );
extern void vsmadx ( double *A, int I, double *B, double *C, int K, double *D, int L, int N, int X );
extern void vsmax ( float *A, int I, float *B, float *C, int K, float *D, int L, int N, int X );
extern void vsmsa ( float *A, int I, float *B, float *C, float *D, int L, int N );
extern void vsmsad ( double *A, int I, double *B, double *C, double *D, int L, int N );
extern void vsmsadx ( double *A, int I, double *B, double *C, double *D, int L, int N, int X );
extern void vsmsax ( float *A, int I, float *B, float *C, float *D, int L, int N, int X );
extern void vsmsb ( float *A, int I, float *B, float *C, int K, float *D, int L, int N );
extern void vsmsbd ( double *A, int I, double *B, double *C, int K, double *D, int L, int N );
extern void vsmsbdx ( double *A, int I, double *B, double *C, int K, double *D, int L, int N, int X );
extern void vsmsbx ( float *A, int I, float *B, float *C, int K, float *D, int L, int N, int X );
extern void vsmul ( float *A, int I, float *B, float *C, int K, int N );
extern void vsmuld ( double *A, int I, double *B, double *C, int K, int N );
extern void vsmuldx ( double *A, int I, double *B, double *C, int K, int N, int X );
extern void vsmuli ( int *A, int I, int *B, int *C, int K, int N );
extern void vsmulix ( int *A, int I, int *B, int *C, int K, int N, int X );
extern void vsmulx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vsort ( float *C, int N , int OFLAG );
extern void vsorti ( float *C, int *IC, int *List_addr, int N , int OFLAG );
extern void vsortix ( float *C, int *IC, int *List_addr, int N , int OFLAG, int X );
extern void vsortx ( float *C, int N , int OFLAG, int X );
extern void vspdp ( float *A, int I, double *C, int K, int N );
extern void vspdpx ( float *A, int I, double *C, int K, int N, int X );
extern void vsq ( float *A, int I, float *C, int K, int N );
extern void vsqd ( double *A, int I, double *C, int K, int N );
extern void vsqdx ( double *A, int I, double *C, int K, int N, int X );
extern void vsqrt ( float *A, int I, float *C, int K, int N );
extern void vsqrtd ( double *A, int I, double *C, int K, int N );
extern void vsqrtdx ( double *A, int I, double *C, int K, int N, int X );
extern void vsqrtx ( float *A, int I, float *C, int K, int N, int X );
extern void vsqrtz ( float *A, int I, float *B, float *C, int K, int N );
extern void vsqrtzx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vsqx ( float *A, int I, float *C, int K, int N, int X );
extern void vssq ( float *A, int I, float *C, int K, int N );
extern void vssqd ( double *A, int I, double *C, int K, int N );
extern void vssqdx ( double *A, int I, double *C, int K, int N, int X );
extern void vssqx ( float *A, int I, float *C, int K, int N, int X );
extern void vsub ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vsubd ( double *A, int I, double *B, int J, double *C, int K, int N );
extern void vsubdx ( double *A, int I, double *B, int J, double *C, int K, int N, int X );
extern void vsubi ( int *A, int I, int *B, int J, int *C, int K, int N );
extern void vsubix ( int *A, int I, int *B, int J, int *C, int K, int N, int X );
extern void vsubx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vswap ( float *A, int I, float *B, int J, int N );
extern void vswapd ( double *A, int I, double *B, int J, int N );
extern void vswapdx ( double *A, int I, double *B, int J, int N, int X );
extern void vswapx ( float *A, int I, float *B, int J, int N, int X );
extern void vswsum ( float *A, int I, float *C, int K, int N, int P );
extern void vswsumx ( float *A, int I, float *C, int K, int N, int P, int X );
extern void vtabi ( float *A, int I, float *S1, float *S2, float *C, int M, float *D, int L, int N );
extern void vtabid ( double *A, int I, double *S1, double *S2, double *C, int M, double *D, int L, int N );
extern void vtabidx ( double *A, int I, double *S1, double *S2, double *C, int M, double *D, int L, int N, int X );
extern void vtabix ( float *A, int I, float *S1, float *S2, float *C, int M, float *D, int L, int N, int X );
extern void vtan ( float *A, int I, float *C, int K, int N );
extern void vtanx ( float *A, int I, float *C, int K, int N, int X );
extern void vthr ( float *A, int I, float *B, float *C, int K, int N );
extern void vthres ( float *A, int I, float *B, float *C, int K, int N );
extern void vthresd ( double *A, int I, double *B, double *C, int K, int N );
extern void vthresdx ( double *A, int I, double *B, double *C, int K, int N, int X );
extern void vthresx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vthrsc ( float *A, int I, float *B, float *C, float *D, int L, int N );
extern void vthrscx ( float *A, int I, float *B, float *C, float *D, int L, int N, int X );
extern void vthrx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vtmerg ( float *A, int I, float *B, int J, float *C, int K, int N );
extern void vtmergx ( float *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void vtrapz ( float *A, int I, float *B, float *C, int K, int N );
extern void vtrapzx ( float *A, int I, float *B, float *C, int K, int N, int X );
extern void vxcs ( float *A, int I, float *F, float *P, COMPLEX *C, int K, int N );
extern void vxcsx ( float *A, int I, float *F, float *P, COMPLEX *C, int K, int N, int X );
extern void warp ( float *A, float *B, float *C, int INC, int INR, int ONC, int ONR, int FLG, float *BKG );
extern void warpd ( double *A, double *B, double *C, int INC, int INR, int ONC, int ONR, int FLG, double *BKG );
extern void warpdx ( double *A, double *B, double *C, int INC, int INR, int ONC, int ONR, int FLG, double *BKG, int X );
extern void warpx ( float *A, float *B, float *C, int INC, int INR, int ONC, int ONR, int FLG, float *BKG, int X );
extern void wiener ( int L, float *A, float *C, float *F, float *P, int IFLG, int *IERR );
extern void wienerx ( int L, float *A, float *C, float *F, float *P, int IFLG, int *IERR, int X );
extern void zaspec ( COMPLEX_SPLIT *A, float *C, int N );
extern void zaspecx ( COMPLEX_SPLIT *A, float *C, int N, int X );
extern void zcoher ( float *A, float *B, COMPLEX_SPLIT *C, float *D, int N );
extern void zcoherx ( float *A, float *B, COMPLEX_SPLIT *C, float *D, int N, int X );
extern void zconv ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int M );
extern void zconv2d ( COMPLEX_SPLIT *A, int tcols_A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int tcols_C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG );
extern void zconv2d_ia ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG );
extern void zconv2d_iax ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG, int X );
extern void zconv2dx ( COMPLEX_SPLIT *A, int tcols_A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int tcols_C, int DSX, int DSY, int NCB, int NRB, int NCC, int NRC, int FLAG, int X );
extern void zconvx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int M, int X );
extern void zcspec ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int N );
extern void zcspecx ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int N, int X );
extern void zdotpr ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int N );
extern void zdotprd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int N );
extern void zdotprdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int N, int X );
extern void zdotprm ( COMPLEX_SPLIT *A, int tcols_A, COMPLEX_SPLIT *B, int tcols_B, COMPLEX_SPLIT *C, int tcols_C, int NRA, int NRB, int N, int FLAG );
extern void zdotprmx ( COMPLEX_SPLIT *A, int tcols_A, COMPLEX_SPLIT *B, int tcols_B, COMPLEX_SPLIT *C, int tcols_C, int NRA, int NRB, int N, int FLAG, int X );
extern void zdotprx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int N, int X );
extern void zexpmul ( float *A, int I, float *F, float *P, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *ZEXPTAB, int LOG2M, int N );
extern void zexpmulx ( float *A, int I, float *F, float *P, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *ZEXPTAB, int LOG2M, int N, int X );
extern void zexptab ( COMPLEX_SPLIT *C, int LOG2M, int FLAG );
extern void zexptabx ( COMPLEX_SPLIT *C, int LOG2M, int FLAG, int X );
extern void zidotpr ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int N );
extern void zidotprd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int N );
extern void zidotprdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int N, int X );
extern void zidotprx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int N, int X );
extern void zimul ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int NR, int NC, int F );
extern void zimuld ( DOUBLE_COMPLEX_SPLIT *A, DOUBLE_COMPLEX_SPLIT *B, DOUBLE_COMPLEX_SPLIT *C, int NR, int NC, int F );
extern void zimuldx ( DOUBLE_COMPLEX_SPLIT *A, DOUBLE_COMPLEX_SPLIT *B, DOUBLE_COMPLEX_SPLIT *C, int NR, int NC, int F, int X );
extern void zimulx ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int NR, int NC, int F, int X );
extern int zmat_auto_mul ( COMPLEX_SPLIT *pA, int Atcols, COMPLEX_SPLIT *pC, int Ctcols, int n_c, int N, int flag );
extern int zmat_auto_muld ( DOUBLE_COMPLEX_SPLIT *pA, int Atcols, DOUBLE_COMPLEX_SPLIT *pC, int Ctcols, int n_c, int N, int flag );
extern int zmat_auto_muldx ( DOUBLE_COMPLEX_SPLIT *pA, int Atcols, DOUBLE_COMPLEX_SPLIT *pC, int Ctcols, int n_c, int N, int flag, int xflag );
extern int zmat_auto_mulx ( COMPLEX_SPLIT *pA, int Atcols, COMPLEX_SPLIT *pC, int Ctcols, int n_c, int N, int flag, int xflag );
extern void zmatchold ( COMPLEX_SPLIT *A, int A_tcols, COMPLEX_SPLIT  *LU, int LU_tcols, float *Diag, int N );
extern int zmat_chol_dec ( COMPLEX_SPLIT *A, int Atcols, COMPLEX_SPLIT  *LDU, int LDUtcols, int n, float *rcond_est, COMPLEX_SPLIT *v, int flag );
extern int zmat_chol_decx ( COMPLEX_SPLIT *A, int Atcols, COMPLEX_SPLIT  *LDU, int LDUtcols, int n, float *rcond_est, COMPLEX_SPLIT *v, int flag, int xflag );
extern void zmatcholdx ( COMPLEX_SPLIT *A, int A_tcols, COMPLEX_SPLIT  *LU, int LU_tcols, float *Diag, int N, int X );
extern void zmatchols ( COMPLEX_SPLIT *LU, int LU_tcols, float *Diag, COMPLEX_SPLIT *B, COMPLEX_SPLIT *XV, int N );
extern int zmat_chol_sol ( COMPLEX_SPLIT *LDU, int LDUtcols, COMPLEX_SPLIT *b, COMPLEX_SPLIT *w, int n, int flag );
extern int zmat_chol_solx ( COMPLEX_SPLIT *LDU, int LDUtcols, COMPLEX_SPLIT *b, COMPLEX_SPLIT *w, int n, int flag, int xflag );
extern void zmatcholsx ( COMPLEX_SPLIT *LU, int LU_tcols, float *Diag, COMPLEX_SPLIT *B, COMPLEX_SPLIT *XV, int N, int X );
extern void zmatfbs ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *IA, int *IP, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int K, int N );
extern void zmatfbsd ( DOUBLE_COMPLEX_SPLIT *A, DOUBLE_COMPLEX_SPLIT *IA, int *IP, DOUBLE_COMPLEX_SPLIT *B, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zmatfbsdx ( DOUBLE_COMPLEX_SPLIT *A, DOUBLE_COMPLEX_SPLIT *IA, int *IP, DOUBLE_COMPLEX_SPLIT *B, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zmatfbsx ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *IA, int *IP, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int K, int N, int X );
extern int zmatherm_eig ( COMPLEX_SPLIT *A, int Atcols, float *Eval, COMPLEX_SPLIT *Evec, int Etcols, int N, SAL_eig_tune *Tune, float *Condn, int *Ind_v, int Flag );
extern int zmatherm_eigx ( COMPLEX_SPLIT *A, int Atcols, float *Eval, COMPLEX_SPLIT *Evec, int Etcols, int N, SAL_eig_tune *Tune, float *Condn, int *Ind_v, int Flag, int X );
extern void zmatinv_lu ( COMPLEX_SPLIT *C, COMPLEX_SPLIT *D, int *IP, int N );
extern void zmatinv_lux ( COMPLEX_SPLIT *C, COMPLEX_SPLIT *D, int *IP, int N, int X );
extern void zmatlud ( COMPLEX_SPLIT *C, int *IC, int N );
extern void zmatludd ( DOUBLE_COMPLEX_SPLIT *C, int *IC, int N );
extern int zmat_lud_dec( COMPLEX_SPLIT *C, int Ctcols, int *D, int n, float *rcond_est, COMPLEX_SPLIT *v, int flag );
extern int zmat_lud_decx( COMPLEX_SPLIT *C, int Ctcols, int *D, int n, float *rcond_est, COMPLEX_SPLIT *v, int flag, int xflag );
extern void zmatluddx ( DOUBLE_COMPLEX_SPLIT *C, int *IC, int N, int X );
extern int zmat_lud_sol( COMPLEX_SPLIT *A, int Atcols, int *D, COMPLEX_SPLIT *b, COMPLEX_SPLIT *w, int n, int flag);
extern int zmat_lud_solx( COMPLEX_SPLIT *A, int Atcols, int *D, COMPLEX_SPLIT *b, COMPLEX_SPLIT *w, int n, int flag, int X);
extern void zmatludx ( COMPLEX_SPLIT *C, int *IC, int N, int X );
extern int zmat_mgs_dec ( COMPLEX_SPLIT *AT, int ATtcols, COMPLEX_SPLIT *R, int Rtcols, int M, int N, float *rcond_est, COMPLEX_SPLIT *v, int flag );
extern int zmat_mgs_decx ( COMPLEX_SPLIT *AT, int ATtcols, COMPLEX_SPLIT *R, int Rtcols, int M, int N, float *rcond_est, COMPLEX_SPLIT *v, int flag, int X );
extern void zmatmgs_dker ( COMPLEX_SPLIT *Q, int tcols_Q, COMPLEX_SPLIT *P, COMPLEX_SPLIT *R, int M, int N );
extern void zmatmgs_dkerx ( COMPLEX_SPLIT *Q, int tcols_Q, COMPLEX_SPLIT *P, COMPLEX_SPLIT *R, int M, int N, int X );
extern void zmatmgs_dqr ( COMPLEX_SPLIT *A, int tcols_A, COMPLEX_SPLIT *R, int tcols_R, int M, int N );
extern void zmatmgs_dqrx ( COMPLEX_SPLIT *A, int tcols_A, COMPLEX_SPLIT *R, int tcols_R, int M, int N, int X );
extern int zmat_mgs_solr ( COMPLEX_SPLIT *R, int Rtcols, COMPLEX_SPLIT *b, COMPLEX_SPLIT *x, int N, int flag );
extern int zmat_mgs_solrhr ( COMPLEX_SPLIT *R, int Rtcols, COMPLEX_SPLIT *b, COMPLEX_SPLIT *x, int N, int flag );
extern int zmat_mgs_solrhrx ( COMPLEX_SPLIT *R, int Rtcols, COMPLEX_SPLIT *b, COMPLEX_SPLIT *x, int N, int flag, int X );
extern int zmat_mgs_solrx ( COMPLEX_SPLIT *R, int Rtcols, COMPLEX_SPLIT *b, COMPLEX_SPLIT *x, int N, int flag, int X );
extern void zmatmgs_sr ( COMPLEX_SPLIT *R, int tcols_R, COMPLEX_SPLIT *B, COMPLEX_SPLIT *XVEC, int N );
extern void zmatmgs_srhr ( COMPLEX_SPLIT *R, int tcols_R, COMPLEX_SPLIT *B, COMPLEX_SPLIT *XVEC, int N );
extern void zmatmgs_srhrx ( COMPLEX_SPLIT *R, int tcols_R, COMPLEX_SPLIT *B, COMPLEX_SPLIT *XVEC, int N, int X );
extern void zmatmgs_srx ( COMPLEX_SPLIT *R, int tcols_R, COMPLEX_SPLIT *B, COMPLEX_SPLIT *XVEC, int N, int X );
extern void zmatmgs_tr ( COMPLEX_SPLIT *A, int tcols_A, int N );
extern void zmatmgs_trx ( COMPLEX_SPLIT *A, int tcols_A, int N, int X );
extern int zmat_mul ( COMPLEX_SPLIT *pA, int Atcols, COMPLEX_SPLIT *pB, int Btcols, COMPLEX_SPLIT *pC, int Ctcols, int nr_c, int nc_c, int N, int flag );
extern int zmat_muld ( DOUBLE_COMPLEX_SPLIT *pA, int Atcols, DOUBLE_COMPLEX_SPLIT *pB, int Btcols, DOUBLE_COMPLEX_SPLIT *pC, int Ctcols, int nr_c, int nc_c, int N, int flag );
extern int zmat_muldx ( DOUBLE_COMPLEX_SPLIT *pA, int Atcols, DOUBLE_COMPLEX_SPLIT *pB, int Btcols, DOUBLE_COMPLEX_SPLIT *pC, int Ctcols, int nr_c, int nc_c, int N, int flag, int xflag );
extern int zmat_mulx ( COMPLEX_SPLIT *pA, int Atcols, COMPLEX_SPLIT *pB, int Btcols, COMPLEX_SPLIT *pC, int Ctcols, int nr_c, int nc_c, int N, int flag, int xflag );
extern int zmat_svd ( COMPLEX_SPLIT *A, int Atcols, float *D, COMPLEX_SPLIT *U, int Utcols, COMPLEX_SPLIT *V, int Vtcols, int M, int N, SAL_svd_tune *svd_tune, float *cond_num, int *numerical_rank, int sal_svd_flag );
extern int zmat_svdx ( COMPLEX_SPLIT *A, int Atcols, float *D, COMPLEX_SPLIT *U, int Utcols, COMPLEX_SPLIT *V, int Vtcols, int M, int N, SAL_svd_tune *svd_tune, float *cond_num, int *numerical_rank, int sal_svd_flag, int X );
extern void zmixer ( COMPLEX_SPLIT *A, int sA, double *F, double *P, COMPLEX_SPLIT *C, int sC, int N, int flag );
extern void zmixerx ( COMPLEX_SPLIT *A, int sA, double *F, double *P, COMPLEX_SPLIT *C, int sC, int N, int flag, int eflag );
extern void zmma ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int MC, int NC, int NA );
extern void zmmax ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int MC, int NC, int NA, int X );
extern void zmmov ( COMPLEX_SPLIT *pSrc,int stride_x_src,int stride_y_src,COMPLEX_SPLIT *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len );
extern void zmmovd ( DOUBLE_COMPLEX_SPLIT *pSrc,int stride_x_src,int stride_y_src,DOUBLE_COMPLEX_SPLIT *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len );
extern void zmmovdx ( DOUBLE_COMPLEX_SPLIT *pSrc,int stride_x_src,int stride_y_src,DOUBLE_COMPLEX_SPLIT *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len,int xflag );
extern void zmmovx ( COMPLEX_SPLIT *pSrc,int stride_x_src,int stride_y_src,COMPLEX_SPLIT *pDst,int stride_x_dst,int stride_y_dst,int x_len,int y_len,int xflag );
extern void zmms ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int MC, int NC, int NA );
extern void zmmsx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int MC, int NC, int NA, int X );
extern void zmmul ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int MC, int NC, int NA );
extern void zmmuld ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int MC, int NC, int NA );
extern void zmmuldx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int MC, int NC, int NA, int X );
extern void zmmulx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int MC, int NC, int NA, int X );
extern void zmsm ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int MC, int NC, int NA );
extern void zmsmx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int MC, int NC, int NA, int X );
extern void zmtrans ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int MC, int NC );
extern void zmtrans2 ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, int NC, int NR, int tcols_A, int tcols_C );
extern void zmtrans2d ( DOUBLE_COMPLEX_SPLIT *A, DOUBLE_COMPLEX_SPLIT *C, int NC, int NR, int tcols_A, int tcols_C );
extern void zmtrans2dx ( DOUBLE_COMPLEX_SPLIT *A, DOUBLE_COMPLEX_SPLIT *C, int NC, int NR, int tcols_A, int tcols_C, int X );
extern void zmtrans2x ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, int NC, int NR, int tcols_A, int tcols_C, int X );
extern void zmtransd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int MC, int NC );
extern void zmtransdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int MC, int NC, int X );
extern void zmtransx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int MC, int NC, int X );
extern void zrdesamp ( COMPLEX_SPLIT *A, int I, float *B, COMPLEX_SPLIT *C, int N, int M );
extern void zrdesampx ( COMPLEX_SPLIT *A, int I, float *B, COMPLEX_SPLIT *C, int N, int M, int X );
extern void zrdotpr ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int N );
extern void zrdotprd ( DOUBLE_COMPLEX_SPLIT *A, int I, double *B, int J, DOUBLE_COMPLEX_SPLIT *C, int N );
extern void zrdotprdx ( DOUBLE_COMPLEX_SPLIT *A, int I, double *B, int J, DOUBLE_COMPLEX_SPLIT *C, int N, int X );
extern void zrdotprx ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int N, int X );
extern void zrmixer ( float *A, int sA, double *F, double *P, COMPLEX_SPLIT *C, int sC, int N, int flag );
extern void zrmixerx ( float *A, int sA, double *F, double *P, COMPLEX_SPLIT *C, int sC, int N, int flag, int eflag );
extern void zrvadd ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int K, int N );
extern void zrvaddx ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zrvdiv ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int K, int N );
extern void zrvdivx ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zrvmul ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int K, int N );
extern void zrvmulx ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zrvsub ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int K, int N );
extern void zrvsubx ( COMPLEX_SPLIT *A, int I, float *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void ztoc ( COMPLEX_SPLIT *A, int I, COMPLEX *C, int K, int N );
extern void ztocd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX *C, int K, int N );
extern void ztocdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX *C, int K, int N, int X );
extern void ztocx ( COMPLEX_SPLIT *A, int I, COMPLEX *C, int K, int N, int X );
extern void ztrans ( float *A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int N );
extern void ztransx ( float *A, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int N, int X );
extern void zvabs ( COMPLEX_SPLIT *A, int I, float *C, int K, int N );
extern void zvabsx ( COMPLEX_SPLIT *A, int I, float *C, int K, int N, int X );
extern void zvadd ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N );
extern void zvaddd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvadddx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvaddx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvcma ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int N );
extern void zvcmax ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int N, int X );
extern void zvcmul ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N );
extern void zvcmuld ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvcmuldx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvcmulx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvconj ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N );
extern void zvconjd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvconjdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvconjx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvdbcon ( COMPLEX_SPLIT *A, int I, float *S, float *C, int K, int N, int F );
extern void zvdbconx ( COMPLEX_SPLIT *A, int I, float *S, float *C, int K, int N, int F, int X );
extern void zvdiv ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N );
extern void zvdivd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvdivdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvdivx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvdivx_fast ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvexp ( float *A, int I, COMPLEX_SPLIT *C, int K, int N );
extern void zvexpd ( double *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvexpdx ( double *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvexpm ( float *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N );
extern void zvexpmx ( float *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvexpx ( float *A, int I, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvfill ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, int K, int N );
extern void zvfillx ( COMPLEX_SPLIT *A, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvimag ( COMPLEX_SPLIT *A, int I, float *C, int K, int N );
extern void zvimagd ( DOUBLE_COMPLEX_SPLIT *A, int I, double *C, int K, int N );
extern void zvimagdx ( DOUBLE_COMPLEX_SPLIT *A, int I, double *C, int K, int N, int X );
extern void zvimagx ( COMPLEX_SPLIT *A, int I, float *C, int K, int N, int X );
extern void zvmags ( COMPLEX_SPLIT *A, int I, float *C, int K, int N );
extern void zvmagsd ( DOUBLE_COMPLEX_SPLIT *A, int I, double *C, int K, int N );
extern void zvmagsdx ( DOUBLE_COMPLEX_SPLIT *A, int I, double *C, int K, int N, int X );
extern void zvmagsx ( COMPLEX_SPLIT *A, int I, float *C, int K, int N, int X );
extern void zvmgsa ( COMPLEX_SPLIT *A, int I, float *B, int J, float *C, int K, int N );
extern void zvmgsax ( COMPLEX_SPLIT *A, int I, float *B, int J, float *C, int K, int N, int X );
extern void zvmov ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N );
extern void zvmovd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvmovdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvmovx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvmul ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int F );
extern void zvmuld ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int F );
extern void zvmuldx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int F, int X );
extern void zvmulx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int F, int X );
extern void zvneg ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N );
extern void zvnegd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvnegdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvnegx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvphas ( COMPLEX_SPLIT *A, int I, float *C, int K, int N );
extern void zvphasx ( COMPLEX_SPLIT *A, int I, float *C, int K, int N, int X );
extern void zvrcip ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N );
extern void zvrcipd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvrcipdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvrcipx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvrcipx_fast ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvreal ( COMPLEX_SPLIT *A, int I, float *C, int K, int N );
extern void zvreald ( DOUBLE_COMPLEX_SPLIT *A, int I, double *C, int K, int N );
extern void zvrealdx ( DOUBLE_COMPLEX_SPLIT *A, int I, double *C, int K, int N, int X );
extern void zvrealx ( COMPLEX_SPLIT *A, int I, float *C, int K, int N, int X );
extern void zvsma ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int N );
extern void zvsmad ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, DOUBLE_COMPLEX_SPLIT *C, int K, DOUBLE_COMPLEX_SPLIT *D, int L, int N );
extern void zvsmadx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, DOUBLE_COMPLEX_SPLIT *C, int K, DOUBLE_COMPLEX_SPLIT *D, int L, int N, int X );
extern void zvsmax ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int K, COMPLEX_SPLIT *D, int L, int N, int X );
extern void zvsqrt ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N );
extern void zvsqrtx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvsub ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N );
extern void zvsubd ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvsubdx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, int J, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvsubx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, int J, COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvzsml ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int K, int N );
extern void zvzsmld ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, DOUBLE_COMPLEX_SPLIT *C, int K, int N );
extern void zvzsmldx ( DOUBLE_COMPLEX_SPLIT *A, int I, DOUBLE_COMPLEX_SPLIT *B, DOUBLE_COMPLEX_SPLIT *C, int K, int N, int X );
extern void zvzsmlx ( COMPLEX_SPLIT *A, int I, COMPLEX_SPLIT *B, COMPLEX_SPLIT *C, int K, int N, int X );

#else /* !__STDC__ && !__cplusplus */

extern void acor ( );
extern void acorf ( );
extern void acorfx ( );
extern void acort ( );
extern void acortx ( );
extern void acorx ( );
extern void aspec ( );
extern void aspecx ( );
extern void blkman ( );
extern void blkmand ( );
extern void blkmandx ( );
extern void blkman_window ( );
extern void blkman_windowd ( );
extern void blkman_windowdx ( );
extern void blkman_windowx ( );
extern void blkmanx ( );
extern void bprojimg ( );
extern void bprojimgd ( );
extern void bprojimgdx ( );
extern void bprojimgx ( );
extern void bprojrow ( );
extern void bprojrowd ( );
extern void bprojrowdx ( );
extern void bprojrowx ( );
extern void cache_flush_1d ( );
extern void cache_flush_2d ( );
extern void cache_load_1d ( );
extern void cache_load_2d ( );
extern void cache_zero_1d ( );
extern void cache_zero_2d ( );
extern void cconv ( );
extern void cconv2d ( );
extern void cconv2dx ( );
extern void cconvx ( );
extern void ccor ( );
extern void ccorf ( );
extern void ccorfx ( );
extern void ccort ( );
extern void ccortx ( );
extern void ccorx ( );
extern void cdotpr ( );
extern void cdotprd ( );
extern void cdotprdx ( );
extern void cdotprm ( );
extern void cdotprmx ( );
extern void cdotprx ( );
extern void cexpmul ( );
extern void cexpmulx ( );
extern void cexptab ( );
extern void cexptabx ( );
extern void cfft ( );
extern void cfft2d ( );
extern void cfft2dd ( );
extern void cfft2ddx ( );
extern void cfft2dx ( );
extern void cfftb ( );
extern void cfftb3 ( );
extern void cfftb3x ( );
extern void cfftb5 ( );
extern void cfftb5x ( );
extern void cfftbd ( );
extern void cfftbdx ( );
extern void cfftbx ( );
extern void cfftd ( );
extern void cfftdx ( );
extern void cffto ( );
extern void cfftod ( );
extern void cfftodx ( );
extern void cfftox ( );
extern void cfftsc ( );
extern void cfftscd ( );
extern void cfftscdx ( );
extern void cfftscx ( );
extern void cfftx ( );
extern void cidotpr ( );
extern void cidotprd ( );
extern void cidotprdx ( );
extern void cidotprx ( );
extern void cimul ( );
extern void cimuld ( );
extern void cimuldx ( );
extern void cimulx ( );
extern void cmat_auto_mul ( );
extern void cmat_auto_muld ( );
extern void cmat_auto_muldx ( );
extern void cmat_auto_mulx ( );
extern int cmat_chol_dec( );
extern int cmat_chol_decx( );
extern int cmat_chol_sol( );
extern int cmat_chol_solx( );
extern void cmatfbs ( );
extern void cmatfbsd ( );
extern void cmatfbsdx ( );
extern void cmatfbsx ( );
extern void cmatinv_lu ( );
extern void cmatinv_lux ( );
extern void cmatlud ( );
extern void cmatlud ( );
extern void cmatludd ( );
extern int cmat_lud_dec( );
extern int cmat_lud_decx( );
extern int cmat_lud_sol( );
extern int cmat_lud_solx( );
extern void cmatludx ( );
extern int cmat_mgs_dec( );
extern int cmat_mgs_decx( );
extern void cmatmgs_dker ( );
extern void cmatmgs_dkerx ( );
extern void cmatmgs_dqr ( );
extern void cmatmgs_dqrx ( );
extern int cmat_mgs_solr( );
extern int cmat_mgs_solrhr( );
extern int cmat_mgs_solrhrx( );
extern int cmat_mgs_solrx( );
extern void cmatmgs_sr ( );
extern void cmatmgs_srhr ( );
extern void cmatmgs_srhrx ( );
extern void cmatmgs_srx ( );
extern void cmatmgs_tr ( );
extern void cmatmgs_trx ( );
extern void cmat_mul ( );
extern void cmat_muld ( );
extern void cmat_muldx ( );
extern void cmat_mulx ( );
extern void cmixer ( );
extern void cmixerx ( );
extern void cmma ( );
extern void cmmax ( );
extern void cmmov ( );
extern void cmmovd ( );
extern void cmmovdx ( );
extern void cmmovx ( );
extern void cmms ( );
extern void cmmsx ( );
extern void cmmul ( );
extern void cmmuld ( );
extern void cmmuldx ( );
extern void cmmulx ( );
extern void cmsm ( );
extern void cmsmx ( );
extern void cmtrans ( );
extern void cmtrans2 ( );
extern void cmtrans2d ( );
extern void cmtrans2dx ( );
extern void cmtrans2x ( );
extern void cmtransd ( );
extern void cmtransdx ( );
extern void cmtransx ( );
extern void coher ( );
extern void coherx ( );
extern void conv ( );
extern void conv2d ( );
extern void conv2dx ( );
extern void convm_cols ( );
extern void convm_colsx ( );
extern void convm_rows ( );
extern void convm_rowsx ( );
extern void convx ( );
extern void crdesamp ( );
extern void crdesampx ( );
extern void crdotpr ( );
extern void crdotprd ( );
extern void crdotprdx ( );
extern void crdotprx ( );
extern void crmixer ( );
extern void crmixerx ( );
extern void crvadd ( );
extern void crvaddx ( );
extern void crvdiv ( );
extern void crvdivx ( );
extern void crvmul ( );
extern void crvmulx ( );
extern void crvsub ( );
extern void crvsubx ( );
extern void cspec ( );
extern void cspecx ( );
extern void ctoz ( );
extern void ctozd ( );
extern void ctozdx ( );
extern void ctozx ( );
extern void cvabs ( );
extern void cvabsx ( );
extern void cvadd ( );
extern void cvaddd ( );
extern void cvadddx ( );
extern void cvaddx ( );
extern void cvcma ( );
extern void cvcmax ( );
extern void cvcmul ( );
extern void cvcmulx ( );
extern void cvcomb ( );
extern void cvcombd ( );
extern void cvcombdx ( );
extern void cvcombx ( );
extern void cvconj ( );
extern void cvconjd ( );
extern void cvconjdx ( );
extern void cvconjx ( );
extern void cvcsml ( );
extern void cvcsmld ( );
extern void cvcsmldx ( );
extern void cvcsmlx ( );
extern void cvdbcon ( );
extern void cvdbconx ( );
extern void cvdiv ( );
extern void cvdivd ( );
extern void cvdivdx ( );
extern void cvdivx ( );
extern void cvexp ( );
extern void cvexpd ( );
extern void cvexpdx ( );
extern void cvexpm ( );
extern void cvexpmx ( );
extern void cvexpx ( );
extern void cvfill ( );
extern void cvfillx ( );
extern void cvmags ( );
extern void cvmagsd ( );
extern void cvmagsdx ( );
extern void cvmagsx ( );
extern void cvmgsa ( );
extern void cvmgsax ( );
extern void cvmov ( );
extern void cvmovd ( );
extern void cvmovdx ( );
extern void cvmovx ( );
extern void cvmul ( );
extern void cvmuld ( );
extern void cvmuldx ( );
extern void cvmulx ( );
extern void cvneg ( );
extern void cvnegd ( );
extern void cvnegdx ( );
extern void cvnegx ( );
extern void cvphas ( );
extern void cvphasx ( );
extern void cvrcip ( );
extern void cvrcipd ( );
extern void cvrcipdx ( );
extern void cvrcipx ( );
extern void cvsma ( );
extern void cvsmad ( );
extern void cvsmadx ( );
extern void cvsmax ( );
extern void cvsplit ( );
extern void cvsplitd ( );
extern void cvsplitdx ( );
extern void cvsplitx ( );
extern void cvsqrt ( );
extern void cvsqrtx ( );
extern void cvsub ( );
extern void cvsubd ( );
extern void cvsubdx ( );
extern void cvsubx ( );
extern void deq22 ( );
extern void deq22x ( );
extern void desamp ( );
extern void desampx ( );
extern void dotpr ( );
extern void dotprd ( );
extern void dotprdx ( );
extern void dotprm ( );
extern void dotprmx ( );
extern void dotprx ( );
extern void f3x3 ( );
extern void f3x3d ( );
extern void f3x3dx ( );
extern void f3x3x ( );
extern void f5x5 ( );
extern void f5x5d ( );
extern void f5x5dx ( );
extern void f5x5x ( );
extern void fcf_cipt ( );
extern void fcf_ciptx ( );
extern void fcf_ript ( );
extern void fcf_riptx ( );
extern void fcf_zipt ( );
extern void fcf_ziptx ( );
extern void fcf_zript ( );
extern void fcf_zriptx ( );
extern void fcs_cipt ( );
extern void fcs_ciptx ( );
extern void fcsm_cipt ( );
extern void fcsm_ciptx ( );
extern void fcsm_ript ( );
extern void fcsm_riptx ( );
extern void fcsm_zipt ( );
extern void fcsm_ziptx ( );
extern void fcsm_zript ( );
extern void fcsm_zriptx ( );
extern void fcs_ript ( );
extern void fcs_riptx ( );
extern void fcs_zipt ( );
extern void fcs_ziptx ( );
extern void fcs_zript ( );
extern void fcs_zriptx ( );
extern int fft1d_setup ( );
extern int fft1d_setup_user_alloc ( );
extern int fft1d_setupd ( );
extern int fft1d_setup_user_allocd ( );
extern void fft2d_cip ( );
extern void fft2d_cipd ( );
extern void fft2d_cipdx ( );
extern void fft2d_cipt ( );
extern void fft2d_ciptd ( );
extern void fft2d_ciptdx ( );
extern void fft2d_ciptx ( );
extern void fft2d_cipx ( );
extern void fft2d_cop ( );
extern void fft2d_copd ( );
extern void fft2d_copdx ( );
extern void fft2d_copt ( );
extern void fft2d_coptd ( );
extern void fft2d_coptdx ( );
extern void fft2d_coptx ( );
extern void fft2d_copx ( );
extern void fft2d_rip ( );
extern void fft2d_ripd ( );
extern void fft2d_ripdx ( );
extern void fft2d_ript ( );
extern void fft2d_riptd ( );
extern void fft2d_riptdx ( );
extern void fft2d_riptx ( );
extern void fft2d_ripx ( );
extern void fft2d_rop ( );
extern void fft2d_ropd ( );
extern void fft2d_ropdx ( );
extern void fft2d_ropt ( );
extern void fft2d_roptd ( );
extern void fft2d_roptdx ( );
extern void fft2d_roptx ( );
extern void fft2d_ropx ( );
extern int fft2d_setup ( );
extern int fft2d_setup_user_alloc ( );
extern int fft2d_setupd ( );
extern int fft2d_setup_user_allocd ( );
extern void fft2d_zip ( );
extern void fft2d_zipd ( );
extern void fft2d_zipdx ( );
extern void fft2d_zipt ( );
extern void fft2d_ziptd ( );
extern void fft2d_ziptdx ( );
extern void fft2d_ziptx ( );
extern void fft2d_zipx ( );
extern void fft2d_zop ( );
extern void fft2d_zopd ( );
extern void fft2d_zopdx ( );
extern void fft2d_zopt ( );
extern void fft2d_zoptd ( );
extern void fft2d_zoptdx ( );
extern void fft2d_zoptx ( );
extern void fft2d_zopx ( );
extern void fft2d_zrip ( );
extern void fft2d_zripd ( );
extern void fft2d_zripdx ( );
extern void fft2d_zript ( );
extern void fft2d_zriptd ( );
extern void fft2d_zriptdx ( );
extern void fft2d_zriptx ( );
extern void fft2d_zripx ( );
extern void fft2d_zrop ( );
extern void fft2d_zropd ( );
extern void fft2d_zropdx ( );
extern void fft2d_zropt ( );
extern void fft2d_zroptd ( );
extern void fft2d_zroptdx ( );
extern void fft2d_zroptx ( );
extern void fft2d_zropx ( );
extern void fft3m_cols_cop ( );
extern void fft3m_cols_copx ( );
extern void fft3m_cols_rop ( );
extern void fft3m_cols_ropx ( );
extern void fft3m_cols_zip ( );
extern void fft3m_cols_zipx ( );
extern void fft3m_cols_zop ( );
extern void fft3m_cols_zopx ( );
extern void fft3m_cols_zrip ( );
extern void fft3m_cols_zripx ( );
extern void fft3m_cols_zrop ( );
extern void fft3m_cols_zropx ( );
extern void fft3m_cop ( );
extern void fft3m_copx ( );
extern void fft3m_rop ( );
extern void fft3m_ropx ( );
extern void fft3m_rows_cop ( );
extern void fft3m_rows_copx ( );
extern void fft3m_rows_rop ( );
extern void fft3m_rows_ropx ( );
extern void fft3m_rows_zip ( );
extern void fft3m_rows_zipx ( );
extern void fft3m_rows_zop ( );
extern void fft3m_rows_zopx ( );
extern void fft3m_rows_zrip ( );
extern void fft3m_rows_zripx ( );
extern void fft3m_rows_zrop ( );
extern void fft3m_rows_zropx ( );
extern void fft3m_zop ( );
extern void fft3m_zopx ( );
extern void fft3m_zrop ( );
extern void fft3m_zropx ( );
extern void fft3_cop ( );
extern void fft3_copd ( );
extern void fft3_copdx ( );
extern void fft3_copx ( );
extern void fft3_rop ( );
extern void fft3_ropd ( );
extern void fft3_ropdx ( );
extern void fft3_ropx ( );
extern void fft3_zip ( );
extern void fft3_zipd ( );
extern void fft3_zipdx ( );
extern void fft3_zipx ( );
extern void fft3_zop ( );
extern void fft3_zopd ( );
extern void fft3_zopdx ( );
extern void fft3_zopx ( );
extern void fft3_zrip ( );
extern void fft3_zripd ( );
extern void fft3_zripdx ( );
extern void fft3_zripx ( );
extern void fft3_zrop ( );
extern void fft3_zropd ( );
extern void fft3_zropdx ( );
extern void fft3_zropx ( );
extern void fft5m_cols_cop ( );
extern void fft5m_cols_copx ( );
extern void fft5m_cols_rop ( );
extern void fft5m_cols_ropx ( );
extern void fft5m_cols_zip ( );
extern void fft5m_cols_zipx ( );
extern void fft5m_cols_zop ( );
extern void fft5m_cols_zopx ( );
extern void fft5m_cols_zrip ( );
extern void fft5m_cols_zripx ( );
extern void fft5m_cols_zrop ( );
extern void fft5m_cols_zropx ( );
extern void fft5m_cop ( );
extern void fft5m_copx ( );
extern void fft5m_rop ( );
extern void fft5m_ropx ( );
extern void fft5m_rows_cop ( );
extern void fft5m_rows_copx ( );
extern void fft5m_rows_rop ( );
extern void fft5m_rows_ropx ( );
extern void fft5m_rows_zip ( );
extern void fft5m_rows_zipx ( );
extern void fft5m_rows_zop ( );
extern void fft5m_rows_zopx ( );
extern void fft5m_rows_zrip ( );
extern void fft5m_rows_zripx ( );
extern void fft5m_rows_zrop ( );
extern void fft5m_rows_zropx ( );
extern void fft5m_zop ( );
extern void fft5m_zopx ( );
extern void fft5m_zrop ( );
extern void fft5m_zropx ( );
extern void fft5_cop ( );
extern void fft5_copd ( );
extern void fft5_copdx ( );
extern void fft5_copx ( );
extern void fft5_rop ( );
extern void fft5_ropd ( );
extern void fft5_ropdx ( );
extern void fft5_ropx ( );
extern void fft5_zip ( );
extern void fft5_zipd ( );
extern void fft5_zipdx ( );
extern void fft5_zipx ( );
extern void fft5_zop ( );
extern void fft5_zopd ( );
extern void fft5_zopdx ( );
extern void fft5_zopx ( );
extern void fft5_zrip ( );
extern void fft5_zripd ( );
extern void fft5_zripdx ( );
extern void fft5_zripx ( );
extern void fft5_zrop ( );
extern void fft5_zropd ( );
extern void fft5_zropdx ( );
extern void fft5_zropx ( );
extern void fft9_cop ( );
extern void fft9_copx ( );
extern void fft9_zop ( );
extern void fft9_zopx ( );
extern void fft_acor ( );
extern void fft_acordx ( );
extern void fft_acorx ( );
extern void fft_ccor ( );
extern void fft_ccordx ( );
extern void fft_ccorx ( );
extern void fft_cip ( );
extern void fft_cipd ( );
extern void fft_cipdx ( );
extern void fft_cipt ( );
extern void fft_ciptd ( );
extern void fft_ciptdx ( );
extern void fft_ciptx ( );
extern void fft_cipx ( );
extern void fft_cop ( );
extern void fft_copd ( );
extern void fft_copdx ( );
extern void fft_copt ( );
extern void fft_coptd ( );
extern void fft_coptdx ( );
extern void fft_coptx ( );
extern void fft_copx ( );
extern void fft_cvmags ( );
extern void fft_cvmagsx ( );
extern void fft_free ( );
extern void fft_freed ( );
extern void fftm_cip ( );
extern void fftm_cipd ( );
extern void fftm_cipdx ( );
extern void fftm_cipt ( );
extern void fftm_ciptd ( );
extern void fftm_ciptdx ( );
extern void fftm_ciptx ( );
extern void fftm_cipx ( );
extern void fftm_cols_cip ( );
extern void fftm_cols_cipd ( );
extern void fftm_cols_cipdx ( );
extern void fftm_cols_cipx ( );
extern void fftm_cols_cop ( );
extern void fftm_cols_copd ( );
extern void fftm_cols_copdx ( );
extern void fftm_cols_copx ( );
extern void fftm_cols_rip ( );
extern void fftm_cols_ripd ( );
extern void fftm_cols_ripdx ( );
extern void fftm_cols_ripx ( );
extern void fftm_cols_rop ( );
extern void fftm_cols_ropd ( );
extern void fftm_cols_ropdx ( );
extern void fftm_cols_ropx ( );
extern void fftm_cols_zip ( );
extern void fftm_cols_zipd ( );
extern void fftm_cols_zipdx ( );
extern void fftm_cols_zipx ( );
extern void fftm_cols_zop ( );
extern void fftm_cols_zopd ( );
extern void fftm_cols_zopdx ( );
extern void fftm_cols_zopx ( );
extern void fftm_cols_zrip ( );
extern void fftm_cols_zripd ( );
extern void fftm_cols_zripdx ( );
extern void fftm_cols_zripx ( );
extern void fftm_cols_zrop ( );
extern void fftm_cols_zropd ( );
extern void fftm_cols_zropdx ( );
extern void fftm_cols_zropx ( );
extern void fftm_cop ( );
extern void fftm_copd ( );
extern void fftm_copdx ( );
extern void fftm_copt ( );
extern void fftm_coptd ( );
extern void fftm_coptdx ( );
extern void fftm_coptx ( );
extern void fftm_copx ( );
extern void fftm_rip ( );
extern void fftm_ripd ( );
extern void fftm_ripdx ( );
extern void fftm_ript ( );
extern void fftm_riptd ( );
extern void fftm_riptdx ( );
extern void fftm_riptx ( );
extern void fftm_ripx ( );
extern void fftm_rop ( );
extern void fftm_ropd ( );
extern void fftm_ropdx ( );
extern void fftm_ropt ( );
extern void fftm_roptd ( );
extern void fftm_roptdx ( );
extern void fftm_roptx ( );
extern void fftm_ropx ( );
extern void fftm_rows_cip ( );
extern void fftm_rows_cipd ( );
extern void fftm_rows_cipdx ( );
extern void fftm_rows_cipx ( );
extern void fftm_rows_cop ( );
extern void fftm_rows_copd ( );
extern void fftm_rows_copdx ( );
extern void fftm_rows_copx ( );
extern void fftm_rows_rip ( );
extern void fftm_rows_ripd ( );
extern void fftm_rows_ripdx ( );
extern void fftm_rows_ripx ( );
extern void fftm_rows_rop ( );
extern void fftm_rows_ropd ( );
extern void fftm_rows_ropdx ( );
extern void fftm_rows_ropx ( );
extern void fftm_rows_zip ( );
extern void fftm_rows_zipd ( );
extern void fftm_rows_zipdx ( );
extern void fftm_rows_zipx ( );
extern void fftm_rows_zop ( );
extern void fftm_rows_zopd ( );
extern void fftm_rows_zopdx ( );
extern void fftm_rows_zopx ( );
extern void fftm_rows_zrip ( );
extern void fftm_rows_zripd ( );
extern void fftm_rows_zripdx ( );
extern void fftm_rows_zripx ( );
extern void fftm_rows_zrop ( );
extern void fftm_rows_zropd ( );
extern void fftm_rows_zropdx ( );
extern void fftm_rows_zropx ( );
extern void fftm_small ( );
extern void fftm_zip ( );
extern void fftm_zipd ( );
extern void fftm_zipdx ( );
extern void fftm_zipt ( );
extern void fftm_ziptd ( );
extern void fftm_ziptdx ( );
extern void fftm_ziptx ( );
extern void fftm_zipx ( );
extern void fftm_zop ( );
extern void fftm_zopd ( );
extern void fftm_zopdx ( );
extern void fftm_zopt ( );
extern void fftm_zoptd ( );
extern void fftm_zoptdx ( );
extern void fftm_zoptx ( );
extern void fftm_zopx ( );
extern void fftm_zrip ( );
extern void fftm_zripd ( );
extern void fftm_zripdx ( );
extern void fftm_zript ( );
extern void fftm_zriptd ( );
extern void fftm_zriptdx ( );
extern void fftm_zriptx ( );
extern void fftm_zripx ( );
extern void fftm_zrop ( );
extern void fftm_zropd ( );
extern void fftm_zropdx ( );
extern void fftm_zropt ( );
extern void fftm_zroptd ( );
extern void fftm_zroptdx ( );
extern void fftm_zroptx ( );
extern void fftm_zropx ( );
extern void fft_rip ( );
extern void fft_ripd ( );
extern void fft_ripdx ( );
extern void fft_ript ( );
extern void fft_riptd ( );
extern void fft_riptdx ( );
extern void fft_riptx ( );
extern void fft_ripx ( );
extern void fft_rop ( );
extern void fft_ropd ( );
extern void fft_ropdx ( );
extern void fft_ropt ( );
extern void fft_roptd ( );
extern void fft_roptdx ( );
extern void fft_roptx ( );
extern void fft_ropx ( );
extern void fft_setup ( );
extern void fft_setupd ( );
extern int fft_setup_fixup ( );
extern int fft_setup_fixupd ( );
extern int fft_setup_get_temp_buffer_size ( );
extern int fft_setup_get_temp_buffer_sized ( );
extern int fft_setup_set_temp_buffer ( );
extern int fft_setup_set_temp_bufferd ( );
extern void fft_setup_user_alloc ( );
extern void fft_setup_user_allocd ( );
extern void fftwts ( );
extern void fftwts3 ( );
extern void fftwts3x ( );
extern void fftwts5 ( );
extern void fftwts5x ( );
extern void fftwtsd ( );
extern void fftwtsdx ( );
extern void fftwtsx ( );
extern void fft_zip ( );
extern void fft_zipd ( );
extern void fft_zipdx ( );
extern void fft_zipt ( );
extern void fft_ziptd ( );
extern void fft_ziptdx ( );
extern void fft_ziptx ( );
extern void fft_zipx ( );
extern void fft_zop ( );
extern void fft_zopd ( );
extern void fft_zopdx ( );
extern void fft_zopt ( );
extern void fft_zoptd ( );
extern void fft_zoptdx ( );
extern void fft_zoptx ( );
extern void fft_zopx ( );
extern void fft_zrip ( );
extern void fft_zripd ( );
extern void fft_zripdx ( );
extern void fft_zript ( );
extern void fft_zriptd ( );
extern void fft_zriptdx ( );
extern void fft_zriptx ( );
extern void fft_zripx ( );
extern void fft_zrop ( );
extern void fft_zropd ( );
extern void fft_zropdx ( );
extern void fft_zropt ( );
extern void fft_zroptd ( );
extern void fft_zroptdx ( );
extern void fft_zroptx ( );
extern void fft_zropx ( );
extern void fft_zvmags ( );
extern void fft_zvmagsx ( );
extern void fir2 ( );
extern void fir2x ( );
extern void fir3 ( );
extern void fir3x ( );
extern void fixpixa ( );
extern void fixpixad ( );
extern void fixpixadx ( );
extern void fixpixax ( );
extern void fixpixb ( );
extern void fixpixbd ( );
extern void fixpixbdx ( );
extern void fixpixbx ( );
extern void flnz ( );
extern void flnzx ( );
extern void fltpixa ( );
extern void fltpixad ( );
extern void fltpixadx ( );
extern void fltpixax ( );
extern void fltpixb ( );
extern void fltpixbd ( );
extern void fltpixbdx ( );
extern void fltpixbx ( );
extern void *get_salcache ( );
extern void hamm ( );
extern void hammd ( );
extern void hammdx ( );
extern void hamm_window ( );
extern void hamm_windowd ( );
extern void hamm_windowdx ( );
extern void hamm_windowx ( );
extern void hammx ( );
extern void hann ( );
extern void hannd ( );
extern void hanndx ( );
extern void hann_window ( );
extern void hann_windowd ( );
extern void hann_windowdx ( );
extern void hann_windowx ( );
extern void hannx ( );
extern void hist ( );
extern void histd ( );
extern void histdx ( );
extern void histx ( );
extern void ihist ( );
extern void ihist32 ( );
extern void ihist32x ( );
extern void ihistx ( );
extern void imgfir ( );
extern void imgfird ( );
extern void imgfirdx ( );
extern void imgfirx ( );
extern void lveq ( );
extern void lveqd ( );
extern void lveqdx ( );
extern void lveqi ( );
extern void lveqix ( );
extern void lveqx ( );
extern void lvge ( );
extern void lvged ( );
extern void lvgedx ( );
extern void lvgei ( );
extern void lvgeix ( );
extern void lvgex ( );
extern void lvgt ( );
extern void lvgtd ( );
extern void lvgtdx ( );
extern void lvgti ( );
extern void lvgtix ( );
extern void lvgtx ( );
extern void lvle ( );
extern void lvled ( );
extern void lvledx ( );
extern void lvlei ( );
extern void lvleix ( );
extern void lvlex ( );
extern void lvlt ( );
extern void lvltd ( );
extern void lvltdx ( );
extern void lvlti ( );
extern void lvltix ( );
extern void lvltx ( );
extern void lvne ( );
extern void lvned ( );
extern void lvnedx ( );
extern void lvnei ( );
extern void lvneix ( );
extern void lvnex ( );
extern void lvnot ( );
extern void lvnotd ( );
extern void lvnotdx ( );
extern void lvnoti ( );
extern void lvnotix ( );
extern void lvnotx ( );
extern void mat_auto_mul ( );
extern void mat_auto_muld ( );
extern void mat_auto_muldx ( );
extern void mat_auto_mulx ( );
extern int mat_chol_dec( );
extern int mat_chol_decx( );
extern int mat_chol_sol( );
extern int mat_chol_solx( );
extern void matfbs ( );
extern void matfbsd ( );
extern void matfbsdx ( );
extern void matfbsx ( );
extern void matinv ( );
extern void matinvd ( );
extern void matinvdx ( );
extern void matinv_lu ( );
extern void matinv_lux ( );
extern void matinvx ( );
extern void matlud ( );
extern void matludd ( );
extern int mat_lud_dec( );
extern int mat_lud_decx( );
extern void matluddx ( );
extern int mat_lud_sol( );
extern int mat_lud_solx( );
extern void matludx ( );
extern int mat_mgs_dec( );
extern int mat_mgs_decx( );
extern void matmgs_dker ( );
extern void matmgs_dkerx ( );
extern void matmgs_dqr ( );
extern void matmgs_dqrx ( );
extern int mat_mgs_solr( );
extern int mat_mgs_solrhr( );
extern int mat_mgs_solrhrx( );
extern int mat_mgs_solrx( );
extern void matmgs_sr ( );
extern void matmgs_srhr ( );
extern void matmgs_srhrx ( );
extern void matmgs_srx ( );
extern void matmgs_tr ( );
extern void matmgs_trx ( );
extern void mat_mul ( );
extern void mat_muld ( );
extern void mat_muldx ( );
extern void mat_mulx ( );
extern void maxmgv ( );
extern void maxmgvd ( );
extern void maxmgvdx ( );
extern void maxmgvi ( );
extern void maxmgvix ( );
extern void maxmgvx ( );
extern void maxv ( );
extern void maxvd ( );
extern void maxvdx ( );
extern void maxvi ( );
extern void maxvid ( );
extern void maxvidx ( );
extern void maxvix ( );
extern void maxvx ( );
extern void meamgv ( );
extern void meamgvd ( );
extern void meamgvdx ( );
extern void meamgvx ( );
extern void meanv ( );
extern void meanvd ( );
extern void meanvdx ( );
extern void meanvx ( );
extern void measqv ( );
extern void measqvd ( );
extern void measqvdx ( );
extern void measqvx ( );
extern void medf ( );
extern void medf3x3 ( );
extern void medf3x3d ( );
extern void medf3x3dx ( );
extern void medf3x3x ( );
extern void medf5x5 ( );
extern void medf5x5d ( );
extern void medf5x5dx ( );
extern void medf5x5x ( );
extern void medfd ( );
extern void medfdx ( );
extern void medfx ( );
extern void minmgv ( );
extern void minmgvd ( );
extern void minmgvdx ( );
extern void minmgvi ( );
extern void minmgvix ( );
extern void minmgvx ( );
extern void minv ( );
extern void minvd ( );
extern void minvdx ( );
extern void minvi ( );
extern void minvid ( );
extern void minvidx ( );
extern void minvix ( );
extern void minvx ( );
extern void mmov ( );
extern void mmovd ( );
extern void mmovdx ( );
extern void mmovx ( );
extern void mmul ( );
extern void mmuld ( );
extern void mmuldx ( );
extern void mmulf ( );
extern void mmulfd ( );
extern void mmulfdx ( );
extern void mmulfx ( );
extern void mmulx ( );
extern void mtrans ( );
extern void mtrans2 ( );
extern void mtrans2d ( );
extern void mtrans2dx ( );
extern void mtrans2x ( );
extern void mtransd ( );
extern void mtransdx ( );
extern void mtransx ( );
extern void mvessq ( );
extern void mvessqx ( );
extern void nzcros ( );
extern void nzcrosx ( );
extern void polar ( );
extern void polard ( );
extern void polardx ( );
extern void polarx ( );
extern void print_csal_version ( );
extern void print_sal_version ( );
extern void rect ( );
extern void rectd ( );
extern void rectdx ( );
extern void rectx ( );
extern int resamp_cicx ( );
extern int resamp_cocx ( );
extern int resamp_filter_close ( );
extern int resamp_filter_create ( );
extern int resamp_filter_create_user_alloc ( );
extern int resamp_make_filter_set ( );
extern int resamp_map_close ( );
extern int resamp_map_create ( );
extern int resamp_map_create_user_alloc ( );
extern int resamp_mc_cicx ( );
extern int resamp_mc_cocx ( );
extern int resamp_mc_ricx ( );
extern int resamp_mc_rocx ( );
extern int resamp_mc_zicx ( );
extern int resamp_mc_zocx ( );
extern int resamp_mr_cicx ( );
extern int resamp_mr_cocx ( );
extern int resamp_mr_ricx ( );
extern int resamp_mr_rocx ( );
extern int resamp_mr_zicx ( );
extern int resamp_mr_zocx ( );
extern int resamp_ricx ( );
extern int resamp_rocx ( );
extern int resamp_zicx ( );
extern int resamp_zocx ( );
extern void rfft ( );
extern void rfft2d ( );
extern void rfft2dd ( );
extern void rfft2ddx ( );
extern void rfft2dx ( );
extern void rfftb ( );
extern void rfftbd ( );
extern void rfftbdx ( );
extern void rfftbx ( );
extern void rfftd ( );
extern void rfftdx ( );
extern void rffto ( );
extern void rfftod ( );
extern void rfftodx ( );
extern void rfftox ( );
extern void rfftsc ( );
extern void rfftscd ( );
extern void rfftscdx ( );
extern void rfftscx ( );
extern void rfftx ( );
extern void rmsqv ( );
extern void rmsqvd ( );
extern void rmsqvdx ( );
extern void rmsqvx ( );
extern void sal_74xx_set_nonjava ( );
extern xint32 sal_get_path ( );
extern void set_salcache ( );
extern void spin ( );
extern void spind ( );
extern void spindx ( );
extern void spinx ( );
extern void svdiv ( );
extern void svdivx ( );
extern void svdivx_fast ( );
extern void sve ( );
extern void sved ( );
extern void svedx ( );
extern void svemg ( );
extern void svemgd ( );
extern void svemgdx ( );
extern void svemgx ( );
extern void svesq ( );
extern void svesqd ( );
extern void svesqdx ( );
extern void svesqx ( );
extern void svex ( );
extern void svs ( );
extern void svsd ( );
extern void svsdx ( );
extern void svsx ( );
extern void tconvl ( );
extern void tconvlx ( );
extern void trans ( );
extern void transx ( );
extern void unwrap_phase ( );
extern void unwrap_phasex ( );
extern void vaam ( );
extern void vaamx ( );
extern void vabmrg ( );
extern void vabmrgx ( );
extern void vabs ( );
extern void vabsd ( );
extern void vabsdx ( );
extern void vabsi ( );
extern void vabsix ( );
extern void vabsx ( );
extern void vadd ( );
extern void vaddd ( );
extern void vadddx ( );
extern void vaddi ( );
extern void vaddix ( );
extern void vaddx ( );
extern void vaint ( );
extern void vaintx ( );
extern void valog ( );
extern void valogd ( );
extern void valogdx ( );
extern void valogx ( );
extern void vam ( );
extern void vamd ( );
extern void vamdx ( );
extern void vamerg ( );
extern void vamergx ( );
extern void vamx ( );
extern void vandi ( );
extern void vandix ( );
extern void vasbm ( );
extern void vasbmx ( );
extern void vasm ( );
extern void vasmx ( );
extern void vatan ( );
extern void vatan2 ( );
extern void vatan2d ( );
extern void vatan2dx ( );
extern void vatan2x ( );
extern void vatand ( );
extern void vatandx ( );
extern void vatanx ( );
extern void vavexp ( );
extern void vavexpx ( );
extern void vavlin ( );
extern void vavlinx ( );
extern void vcache ( );
extern void vclip ( );
extern void vclipc ( );
extern void vclipcx ( );
extern void vclipd ( );
extern void vclipdx ( );
extern void vclipx ( );
extern void vclr ( );
extern void vclrd ( );
extern void vclrdx ( );
extern void vclrx ( );
extern void vcmerg ( );
extern void vcmergx ( );
extern void vcmprs ( );
extern void vcmprsx ( );
extern void vconvert_cs16_zf32 ( );
extern void vconvert_cs16_zf32x ( );
extern void vconvert_cs32_zf32 ( );
extern void vconvert_cs32_zf32x ( );
extern void vconvert_cs8_zf32 ( );
extern void vconvert_cs8_zf32x ( );
extern void vconvert_cu16_zf32 ( );
extern void vconvert_cu16_zf32x ( );
extern void vconvert_cu32_zf32 ( );
extern void vconvert_cu32_zf32x ( );
extern void vconvert_cu8_zf32 ( );
extern void vconvert_cu8_zf32x ( );
extern void vconvert_endian2 ( );
extern void vconvert_endian2x ( );
extern void vconvert_endian4 ( );
extern void vconvert_endian4x ( );
extern void vconvert_endian8 ( );
extern void vconvert_endian8x ( );
extern void vconvert_f32_s16 ( );
extern void vconvert_f32_s16x ( );
extern void vconvert_f32_s32 ( );
extern void vconvert_f32_s32x ( );
extern void vconvert_f32_s8 ( );
extern void vconvert_f32_s8x ( );
extern void vconvert_f32_u16 ( );
extern void vconvert_f32_u16x ( );
extern void vconvert_f32_u32 ( );
extern void vconvert_f32_u32x ( );
extern void vconvert_f32_u8 ( );
extern void vconvert_f32_u8x ( );
extern void vconvert_s16_f32 ( );
extern void vconvert_s16_f32x ( );
extern void vconvert_s32_f32 ( );
extern void vconvert_s32_f32x ( );
extern void vconvert_s8_f32 ( );
extern void vconvert_s8_f32x ( );
extern void vconvert_u16_f32 ( );
extern void vconvert_u16_f32x ( );
extern void vconvert_u32_f32 ( );
extern void vconvert_u32_f32x ( );
extern void vconvert_u8_f32 ( );
extern void vconvert_u8_f32x ( );
extern void vconvert_zf32_cs16 ( );
extern void vconvert_zf32_cs16x ( );
extern void vconvert_zf32_cs32 ( );
extern void vconvert_zf32_cs32x ( );
extern void vconvert_zf32_cs8 ( );
extern void vconvert_zf32_cs8x ( );
extern void vconvert_zf32_cu16 ( );
extern void vconvert_zf32_cu16x ( );
extern void vconvert_zf32_cu32 ( );
extern void vconvert_zf32_cu32x ( );
extern void vconvert_zf32_cu8 ( );
extern void vconvert_zf32_cu8x ( );
extern void vcos ( );
extern void vcosd ( );
extern void vcosdx ( );
extern void vcosx ( );
extern void vdbcon ( );
extern void vdbconx ( );
extern void vdist ( );
extern void vdistd ( );
extern void vdistdx ( );
extern void vdistx ( );
extern void vdiv ( );
extern void vdivd ( );
extern void vdivdx ( );
extern void vdivi ( );
extern void vdivix ( );
extern void vdivx ( );
extern void vdivz ( );
extern void vdivzx ( );
extern void vdpsp ( );
extern void vdpspx ( );
extern void venvlp ( );
extern void venvlpd ( );
extern void venvlpdx ( );
extern void venvlpx ( );
extern void veqvi ( );
extern void veqvix ( );
extern void vexp ( );
extern void vexpd ( );
extern void vexpdx ( );
extern void vexpx ( );
extern void vfill ( );
extern void vfilld ( );
extern void vfilldx ( );
extern void vfilli ( );
extern void vfillix ( );
extern void vfillx ( );
extern void vfix ( );
extern void vfix32 ( );
extern void vfix32d ( );
extern void vfix32dx ( );
extern void vfix32x ( );
extern void vfixd ( );
extern void vfixdx ( );
extern void vfixr ( );
extern void vfixr32 ( );
extern void vfixr32d ( );
extern void vfixr32dx ( );
extern void vfixr32x ( );
extern void vfixrd ( );
extern void vfixrdx ( );
extern void vfixrx ( );
extern void vfixu ( );
extern void vfixux ( );
extern void vfixx ( );
extern void vflt ( );
extern void vflt16 ( );
extern void vflt16x ( );
extern void vflt32 ( );
extern void vflt32d ( );
extern void vflt32dx ( );
extern void vflt32x ( );
extern void vflt8 ( );
extern void vflt8x ( );
extern void vfltd ( );
extern void vfltdx ( );
extern void vfltu ( );
extern void vfltu16 ( );
extern void vfltu16x ( );
extern void vfltu32 ( );
extern void vfltu32d ( );
extern void vfltu32dx ( );
extern void vfltu32x ( );
extern void vfltud ( );
extern void vfltudx ( );
extern void vfltux ( );
extern void vfltx ( );
extern void vfrac ( );
extern void vfracd ( );
extern void vfracdx ( );
extern void vfracx ( );
extern void vgathr ( );
extern void vgathra ( );
extern void vgathrad ( );
extern void vgathradx ( );
extern void vgathrax ( );
extern void vgathrd ( );
extern void vgathrdx ( );
extern void vgathrx ( );
extern void vgen ( );
extern void vgenp ( );
extern void vgenpx ( );
extern void vgenx ( );
extern void viclip ( );
extern void viclipx ( );
extern void vimag ( );
extern void vimagd ( );
extern void vimagdx ( );
extern void vimagx ( );
extern void vindex ( );
extern void vindexx ( );
extern void vint ( );
extern void vint2 ( );
extern void vint2x ( );
extern void vintb ( );
extern void vintbx ( );
extern void vintx ( );
extern void vlim ( );
extern void vlimd ( );
extern void vlimdx ( );
extern void vlimx ( );
extern void vlint ( );
extern void vlintx ( );
extern void vlmerg ( );
extern void vlmergx ( );
extern void vln ( );
extern void vlnd ( );
extern void vlndx ( );
extern void vlnm ( );
extern void vlnmx ( );
extern void vlnmz ( );
extern void vlnmzx ( );
extern void vlnx ( );
extern void vlnz ( );
extern void vlnzx ( );
extern void vlog ( );
extern void vlogd ( );
extern void vlogdx ( );
extern void vlogm ( );
extern void vlogmx ( );
extern void vlogmz ( );
extern void vlogmzx ( );
extern void vlogx ( );
extern void vlogz ( );
extern void vlogzx ( );
extern void vma ( );
extern void vmad ( );
extern void vmadx ( );
extern void vmax ( );
extern void vma_x ( );
extern void vmaxd ( );
extern void vmaxdx ( );
extern void vmaxmg ( );
extern void vmaxmgd ( );
extern void vmaxmgdx ( );
extern void vmaxmgx ( );
extern void vmaxx ( );
extern void vmin ( );
extern void vmind ( );
extern void vmindx ( );
extern void vminmg ( );
extern void vminmgd ( );
extern void vminmgdx ( );
extern void vminmgx ( );
extern void vminx ( );
extern void vmma ( );
extern void vmmax ( );
extern void vmmsb ( );
extern void vmmsbx ( );
extern void vmov ( );
extern void vmovd ( );
extern void vmovdx ( );
extern void vmovi ( );
extern void vmovix ( );
extern void vmovx ( );
extern void vmsa ( );
extern void vmsad ( );
extern void vmsadx ( );
extern void vmsax ( );
extern void vmsb ( );
extern void vmsbd ( );
extern void vmsbdx ( );
extern void vmsbx ( );
extern void vmul ( );
extern void vmuld ( );
extern void vmuldx ( );
extern void vmuli ( );
extern void vmulix ( );
extern void vmulx ( );
extern void vnabs ( );
extern void vnabsx ( );
extern void vneg ( );
extern void vnegd ( );
extern void vnegdx ( );
extern void vnegi ( );
extern void vnegix ( );
extern void vnegx ( );
extern void vnint ( );
extern void vnint2 ( );
extern void vnint2x ( );
extern void vnintx ( );
extern void vori ( );
extern void vorix ( );
extern void vpmerg ( );
extern void vpmergx ( );
extern void vpoly ( );
extern void vpolyd ( );
extern void vpolydx ( );
extern void vpolyx ( );
extern void vpythg ( );
extern void vpythgx ( );
extern void vqint ( );
extern void vqintx ( );
extern void vramp ( );
extern void vrampd ( );
extern void vrampdx ( );
extern void vrampi ( );
extern void vrampix ( );
extern void vrampx ( );
extern void vreal ( );
extern void vreald ( );
extern void vrealdx ( );
extern void vrealx ( );
extern void vrecip ( );
extern void vrecipx ( );
extern void vrecipx_fast ( );
extern void vrsqrt ( );
extern void vrsqrtd ( );
extern void vrsqrtdx ( );
extern void vrsqrtx ( );
extern void vrsum ( );
extern void vrsumx ( );
extern void vrvrs ( );
extern void vrvrsx ( );
extern void vsadd ( );
extern void vsaddd ( );
extern void vsadddx ( );
extern void vsaddi ( );
extern void vsaddix ( );
extern void vsaddx ( );
extern void vsbm ( );
extern void vsbmd ( );
extern void vsbmdx ( );
extern void vsbmx ( );
extern void vsbsbm ( );
extern void vsbsbmx ( );
extern void vsbsm ( );
extern void vsbsmx ( );
extern void vscal ( );
extern void vscald ( );
extern void vscaldx ( );
extern void vscalx ( );
extern void vscatr ( );
extern void vscatra ( );
extern void vscatrad ( );
extern void vscatradx ( );
extern void vscatrax ( );
extern void vscatrd ( );
extern void vscatrdx ( );
extern void vscatrx ( );
extern void vsdiv ( );
extern void vsdivd ( );
extern void vsdivdx ( );
extern void vsdivi ( );
extern void vsdivix ( );
extern void vsdivx ( );
extern void vsimps ( );
extern void vsimpsx ( );
extern void vsin ( );
extern void vsind ( );
extern void vsindx ( );
extern void vsinx ( );
extern void vsma ( );
extern void vsmad ( );
extern void vsmadx ( );
extern void vsmax ( );
extern void vsmsa ( );
extern void vsmsad ( );
extern void vsmsadx ( );
extern void vsmsax ( );
extern void vsmsb ( );
extern void vsmsbd ( );
extern void vsmsbdx ( );
extern void vsmsbx ( );
extern void vsmul ( );
extern void vsmuld ( );
extern void vsmuldx ( );
extern void vsmuli ( );
extern void vsmulix ( );
extern void vsmulx ( );
extern void vsort ( );
extern void vsorti ( );
extern void vsortix ( );
extern void vsortx ( );
extern void vspdp ( );
extern void vspdpx ( );
extern void vsq ( );
extern void vsqd ( );
extern void vsqdx ( );
extern void vsqrt ( );
extern void vsqrtd ( );
extern void vsqrtdx ( );
extern void vsqrtx ( );
extern void vsqrtz ( );
extern void vsqrtzx ( );
extern void vsqx ( );
extern void vssq ( );
extern void vssqd ( );
extern void vssqdx ( );
extern void vssqx ( );
extern void vsub ( );
extern void vsubd ( );
extern void vsubdx ( );
extern void vsubi ( );
extern void vsubix ( );
extern void vsubx ( );
extern void vswap ( );
extern void vswapd ( );
extern void vswapdx ( );
extern void vswapx ( );
extern void vswsum ( );
extern void vswsumx ( );
extern void vtabi ( );
extern void vtabid ( );
extern void vtabidx ( );
extern void vtabix ( );
extern void vtan ( );
extern void vtanx ( );
extern void vthr ( );
extern void vthres ( );
extern void vthresd ( );
extern void vthresdx ( );
extern void vthresx ( );
extern void vthrsc ( );
extern void vthrscx ( );
extern void vthrx ( );
extern void vtmerg ( );
extern void vtmergx ( );
extern void vtrapz ( );
extern void vtrapzx ( );
extern void vxcs ( );
extern void vxcsx ( );
extern void warp ( );
extern void warpd ( );
extern void warpdx ( );
extern void warpx ( );
extern void wiener ( );
extern void wienerx ( );
extern void zaspec ( );
extern void zaspecd ( );
extern void zaspecdx ( );
extern void zaspecx ( );
extern void zcoher ( );
extern void zcoherd ( );
extern void zcoherdx ( );
extern void zcoherx ( );
extern void zconv ( );
extern void zconv2d ( );
extern void zconv2dx ( );
extern void zconvx ( );
extern void zcspec ( );
extern void zcspecx ( );
extern void zdotpr ( );
extern void zdotprd ( );
extern void zdotprdx ( );
extern void zdotprm ( );
extern void zdotprmx ( );
extern void zdotprx ( );
extern void zexpmul ( );
extern void zexpmuld ( );
extern void zexpmuldx ( );
extern void zexpmulx ( );
extern void zexptab ( );
extern void zexptabd ( );
extern void zexptabdx ( );
extern void zexptabx ( );
extern void zidotpr ( );
extern void zidotprd ( );
extern void zidotprdx ( );
extern void zidotprx ( );
extern void zimul ( );
extern void zimuld ( );
extern void zimuldx ( );
extern void zimulx ( );
extern void zmat_auto_mul ( );
extern void zmat_auto_muld ( );
extern void zmat_auto_muldx ( );
extern void zmat_auto_mulx ( );
extern int zmat_chol_dec( );
extern int zmat_chol_decx( );
extern int zmat_chol_sol( );
extern int zmat_chol_solx( );
extern void zmatfbs ( );
extern void zmatfbsd ( );
extern void zmatfbsdx ( );
extern void zmatfbsx ( );
extern int zmatherm_eig ( );
extern int zmatherm_eigx ( );
extern void zmatinv_lu ( );
extern void zmatinv_lux ( );
extern void zmatlud ( );
extern void zmatludd ( );
extern int zmat_lud_dec( );
extern int zmat_lud_decx( );
extern void zmatluddx ( );
extern int zmat_lud_sol( );
extern int zmat_lud_solx( );
extern void zmatludx ( );
extern int zmat_mgs_dec( );
extern int zmat_mgs_decx( );
extern void zmatmgs_dker ( );
extern void zmatmgs_dkerx ( );
extern void zmatmgs_dqr ( );
extern void zmatmgs_dqrx ( );
extern int zmat_mgs_solr( );
extern int zmat_mgs_solrhr( );
extern int zmat_mgs_solrhrx( );
extern int zmat_mgs_solrx( );
extern void zmatmgs_sr ( );
extern void zmatmgs_srhr ( );
extern void zmatmgs_srhrx ( );
extern void zmatmgs_srx ( );
extern void zmatmgs_tr ( );
extern void zmatmgs_trx ( );
extern void zmat_mul ( );
extern void zmat_muld ( );
extern void zmat_muldx ( );
extern void zmat_mulx ( );
extern int zmat_svd ( );
extern int zmat_svdx ( );
extern void zmixer ( );
extern void zmixerx ( );
extern void zmma ( );
extern void zmmax ( );
extern void zmmov ( );
extern void zmmovd ( );
extern void zmmovdx ( );
extern void zmmovx ( );
extern void zmms ( );
extern void zmmsx ( );
extern void zmmul ( );
extern void zmmuld ( );
extern void zmmuldx ( );
extern void zmmulx ( );
extern void zmsm ( );
extern void zmsmx ( );
extern void zmtrans ( );
extern void zmtrans2 ( );
extern void zmtrans2d ( );
extern void zmtrans2dx ( );
extern void zmtrans2x ( );
extern void zmtransd ( );
extern void zmtransdx ( );
extern void zmtransx ( );
extern void zoher ( );
extern void zoherd ( );
extern void zoherdx ( );
extern void zoherx ( );
extern void zrdesamp ( );
extern void zrdesampx ( );
extern void zrdotpr ( );
extern void zrdotprd ( );
extern void zrdotprdx ( );
extern void zrdotprx ( );
extern void zrmixer ( );
extern void zrmixerx ( );
extern void zrvadd ( );
extern void zrvaddd ( );
extern void zrvadddx ( );
extern void zrvaddx ( );
extern void zrvdiv ( );
extern void zrvdivd ( );
extern void zrvdivdx ( );
extern void zrvdivx ( );
extern void zrvmul ( );
extern void zrvmuld ( );
extern void zrvmuldx ( );
extern void zrvmulx ( );
extern void zrvsub ( );
extern void zrvsubd ( );
extern void zrvsubdx ( );
extern void zrvsubx ( );
extern void zspec ( );
extern void zspecd ( );
extern void zspecdx ( );
extern void zspecx ( );
extern void ztoc ( );
extern void ztocd ( );
extern void ztocdx ( );
extern void ztocx ( );
extern void ztrans ( );
extern void ztransd ( );
extern void ztransdx ( );
extern void ztransx ( );
extern void zvabs ( );
extern void zvabsd ( );
extern void zvabsdx ( );
extern void zvabsx ( );
extern void zvadd ( );
extern void zvaddd ( );
extern void zvadddx ( );
extern void zvaddx ( );
extern void zvcma ( );
extern void zvcmad ( );
extern void zvcmax ( );
extern void zvcmul ( );
extern void zvcmuld ( );
extern void zvcmuldx ( );
extern void zvcmulx ( );
extern void zvcomb ( );
extern void zvcombd ( );
extern void zvcombdx ( );
extern void zvcombx ( );
extern void zvconj ( );
extern void zvconjd ( );
extern void zvconjdx ( );
extern void zvconjx ( );
extern void zvdbcon ( );
extern void zvdbconx ( );
extern void zvdiv ( );
extern void zvdivd ( );
extern void zvdivdx ( );
extern void zvdivx ( );
extern void zvdivx_fast ( );
extern void zvexp ( );
extern void zvexpd ( );
extern void zvexpdx ( );
extern void zvexpm ( );
extern void zvexpmd ( );
extern void zvexpmdx ( );
extern void zvexpmx ( );
extern void zvexpx ( );
extern void zvfill ( );
extern void zvfilld ( );
extern void zvfilldx ( );
extern void zvfillx ( );
extern void zvimag ( );
extern void zvimagd ( );
extern void zvimagdx ( );
extern void zvimagx ( );
extern void zvmags ( );
extern void zvmagsd ( );
extern void zvmagsdx ( );
extern void zvmagsx ( );
extern void zvmgsa ( );
extern void zvmgsad ( );
extern void zvmgsadx ( );
extern void zvmgsax ( );
extern void zvmov ( );
extern void zvmovd ( );
extern void zvmovdx ( );
extern void zvmovx ( );
extern void zvmul ( );
extern void zvmuld ( );
extern void zvmuldx ( );
extern void zvmulx ( );
extern void zvneg ( );
extern void zvnegd ( );
extern void zvnegdx ( );
extern void zvnegx ( );
extern void zvphas ( );
extern void zvphasd ( );
extern void zvphasdx ( );
extern void zvphasx ( );
extern void zvrcip ( );
extern void zvrcipd ( );
extern void zvrcipdx ( );
extern void zvrcipx ( );
extern void zvrcipx_fast ( );
extern void zvreal ( );
extern void zvreald ( );
extern void zvrealdx ( );
extern void zvrealx ( );
extern void zvsma ( );
extern void zvsmad ( );
extern void zvsmadx ( );
extern void zvsmax ( );
extern void zvsqrt ( );
extern void zvsqrtd ( );
extern void zvsqrtdx ( );
extern void zvsqrtx ( );
extern void zvsub ( );
extern void zvsubd ( );
extern void zvsubdx ( );
extern void zvsubx ( );
extern void zvzsml ( );
extern void zvzsmld ( );
extern void zvzsmldx ( );

#endif /* __STDC__ */

#ifdef __cplusplus
}
#endif

#endif /* SAL_H */

