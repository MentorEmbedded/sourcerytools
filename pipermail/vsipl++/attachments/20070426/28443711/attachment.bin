Index: src/vsip/core/expr/map_subset_block.hpp
===================================================================
--- src/vsip/core/expr/map_subset_block.hpp	(revision 0)
+++ src/vsip/core/expr/map_subset_block.hpp	(revision 0)
@@ -0,0 +1,106 @@
+/* Copyright (c) 2007 by CodeSourcery, LLC.  All rights reserved. */
+
+/** @file    vsip/core/expr/map_subset_block.hpp
+    @author  Assem Salama
+    @date    2007-04-26
+    @brief   VSIPL++ Library: Map_subset_block class.
+*/
+
+#ifndef VSIP_CORE_EXPR_MAP_SUBSET_BLOCK_HPP
+#define VSIP_CORE_EXPR_MAP_SUBSET_BLOCK_HPP
+
+
+#include <vsip/support.hpp>
+
+namespace vsip
+{
+namespace impl
+{
+
+template <typename Block,
+          typename MapT>
+class Map_subset_block
+{
+
+public:
+  static dimension_type const dim = Block::dim;
+  typedef typename Block::value_type value_type;
+  typedef Local_or_global_map<dim>   map_type;
+
+  // Constructors.
+public:
+  Map_subset_block(Block& blk, MapT const& map)
+    : blk_(blk),
+      map_(map),
+      sb_(map_.subblock()),
+      dom_(map_.template impl_subblock_domain<dim>(sb_))
+    {}
+
+
+  // Accessors.
+public:
+  length_type size() const VSIP_NOTHROW
+  { return dom_.size(); }
+
+  length_type size(dimension_type block_dim, dimension_type d)
+    const VSIP_NOTHROW
+  { assert(block_dim == dim); return dom_[d].size(); }
+
+  void increment_count() const VSIP_NOTHROW {}
+  void decrement_count() const VSIP_NOTHROW {}
+  map_type const& map() const VSIP_NOTHROW { return *(new map_type());}
+
+
+  value_type get(index_type i)
+  {
+    index_type global_i;
+
+    assert(i < dom_[0].size());
+    global_i = map_.impl_global_from_local_index(0,sb_,i);
+    return blk_.get(global_i);
+  }
+
+  value_type get(index_type i, index_type j)
+  {
+    index_type global_i, global_j;
+
+    assert(i < dom_[0].size());
+    assert(j < dom_[1].size());
+    global_i = map_.impl_global_from_local_index(0,sb_,i);
+    global_j = map_.impl_global_from_local_index(1,sb_,j);
+    return blk_.get(global_i,global_j);
+  }
+
+  value_type get(index_type i, index_type j, index_type k)
+  {
+    index_type global_i, global_j, global_k;
+
+    assert(i < dom_[0].size());
+    assert(j < dom_[1].size());
+    assert(k < dom_[2].size());
+    global_i = map_.impl_global_from_local_index(0,sb_,i);
+    global_j = map_.impl_global_from_local_index(1,sb_,j);
+    global_k = map_.impl_global_from_local_index(2,sb_,k);
+    return blk_.get(global_i,global_j,global_k);
+  }
+
+  // Member data.
+private:
+  Block&       blk_;
+  MapT const&  map_;
+  index_type   sb_;
+  Domain<dim>  dom_;
+
+};
+
+// Store Distributed_generator_block by reference
+template <typename Block, typename MapT>
+struct View_block_storage<Map_subset_block<Block, MapT> >
+  : By_value_block_storage<Map_subset_block<Block, MapT> >
+{};
+
+
+} // namespace vsip::impl
+} // namespace vsip
+
+#endif // VSIP_CORE_EXPR_MAP_SUBSET_BLOCK_HPP
Index: src/vsip/core/parallel/expr.hpp
===================================================================
--- src/vsip/core/parallel/expr.hpp	(revision 168042)
+++ src/vsip/core/parallel/expr.hpp	(working copy)
@@ -20,6 +20,7 @@
 #include <vsip/core/block_traits.hpp>
 #include <vsip/core/parallel/assign.hpp>
 #include <vsip/core/parallel/choose_assign_impl.hpp>
+#include <vsip/core/expr/map_subset_block.hpp>
 
 
 
@@ -195,16 +196,15 @@
   typedef MapT                                  map_type;
 
 
-  typedef Subset_block<BlockT const>            local_block_type;
+  typedef Map_subset_block<BlockT const, MapT>  local_block_type;
   typedef typename View_block_storage<local_block_type>::plain_type
                                                 local_block_ret_type;
 
 public:
   Par_expr_block(MapT const& map, BlockT const& block)
     : map_     (map),
-      dom_     (map_.template impl_global_domain<Dim>(map_.subblock(), 0)),
       blk_     (block),
-      subblock_(dom_,blk_)
+      subblock_(blk_,map_)
   {}
 
   ~Par_expr_block() {}
@@ -231,7 +231,6 @@
   // Member data.
 private:
   MapT const&                                          map_;
-  Domain<Dim>const                                     dom_;
   typename View_block_storage<BlockT const>::expr_type blk_;
   local_block_type                                     subblock_;
 };
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 169648)
+++ ChangeLog	(working copy)
@@ -1,3 +1,31 @@
+2007-04-25  Assem Salama <assem@codesourcery.com>
+	* src/vsip/core/parallel/expr.hpp: Changed the Par_expr_block that
+	  is specialized for Peb_reuse_tag to use Distributed_generator_block
+	  instead of Subset_block.
+	* src/vsip/core/expr/map_subset_block.hpp: New file. Neww class
+	  Map_subset_block. This new class works with either a 
+	  Block_dist or Cyclic_dist. It uses global_from_local_index to
+	  retrieve values.
+
+2007-04-23  Assem Salama <assem@codesourcery.com>
+	* src/vsip/opt/fftw3/fft.cpp: Added an include for create_plan.hpp and
+	  create_plan_defs.hpp. These defines and structs are now used in
+	  fft_impl.cpp.
+	* src/vsip/opt/fftw3/fft_imp.cpp: Added support for split fftw formats
+	  using the guru interface.
+	* src/vsip/opt/fftw3/create_plan.hpp: New file. This file contains
+	  the create_plan struct and a few other helper structs.
+	* src/vsip/opt/fftw3/create_plan_defs.hpp: New file. This file contains
+	  defines for creating plans in fftw3.
+	* src/vsip/GNUmakefile.inc.in: Added line to install header files in
+	  src/vsip/opt/reductions.
+
+2007-04-05  Assem Salama <assem@codesourcery.com>
+	* tests/parallel/vram.cpp: New file. This file tests the ramp
+	  function.
+	* tests/parallel/vramp.hpp: New file. This file contains the
+	  do_test structure which holds the tests to be performed.
+
 2007-04-22  Jules Bergmann  <jules@codesourcery.com>
 
 	* configure.ac: Fix typos with exception option handling.
