Index: tests/fft_be.cpp
===================================================================
--- tests/fft_be.cpp	(revision 165654)
+++ tests/fft_be.cpp	(working copy)
@@ -166,33 +166,24 @@
   static Domain<D> out_dom(Domain<D> const &dom) { return dom;}
 };
 
-template <typename T,
-          typename OrderT>
+template <typename T>
 const_Vector<T, impl::Generator_expr_block<1, impl::Ramp_generator<T> > const>
 ramp(Domain<1> const &dom) 
 { return vsip::ramp(T(0.), T(1.), dom.length() * dom.stride());}
 
-template <typename T,
-          typename OrderT>
-Matrix<T, Dense<2, T, OrderT> >
+template <typename T>
+Matrix<T>
 ramp(Domain<2> const &dom) 
 {
-  typedef OrderT order_type;
-  typedef Dense<2, T, order_type> block_type;
   length_type rows = dom[0].length() * dom[0].stride();
   length_type cols = dom[1].length() * dom[1].stride();
-  Matrix<T, block_type> m(rows, cols);
-  if (impl::Type_equal<row2_type, order_type>::value)
-    for (size_t r = 0; r != rows; ++r)
-      m.row(r) = ramp(T(r), T(1.), m.size(1));
-  else
-    for (size_t c = 0; c != cols; ++c)
-      m.col(c) = ramp(T(c), T(1.), m.size(0));
+  Matrix<T> m(rows, cols);
+  for (size_t r = 0; r != rows; ++r)
+    m.row(r) = ramp(T(r), T(1.), m.size(1));
   return m;
 }
 
-template <typename T,
-          typename OrderT>
+template <typename T>
 Tensor<T>
 ramp(Domain<3> const &dom) 
 {
@@ -230,13 +221,12 @@
   return Tensor<T>(x_length, y_length, z_length, T(0.));
 }
 
-template <typename T, dimension_type D, typename OrderT = row2_type> 
+template <typename T, dimension_type D> 
 struct input_creator
 {
   typedef typename T::I I;
-  typedef OrderT order_type;
-  static typename impl::View_of_dim<D, I, Dense<D, I, order_type> >::type
-  create(Domain<D> const &dom) { return ramp<I, order_type>(dom);}
+  static typename impl::View_of_dim<D, I, Dense<D, I> >::type
+  create(Domain<D> const &dom) { return ramp<I>(dom);}
 };
 
 // Real inverse FFT
@@ -246,7 +236,7 @@
   typedef typename rfft_type<T, F, 1, A>::I I;
   static typename impl::View_of_dim<D, I, Dense<D, I> >::type
   create(Domain<D> const &dom) 
-    { return ramp<I, row1_type>(rfft_type<T, F, 1, A>::in_dom(dom));}
+    { return ramp<I>(rfft_type<T, F, 1, A>::in_dom(dom));}
 };
 
 // Real inverse 2D FFT.
@@ -262,7 +252,7 @@
     length_type rows2 = rows/2+1;
     length_type cols2 = cols/2+1;
 
-    Matrix<I> input = ramp<I, row1_type>(rfft_type<T, F, 1, A>::in_dom(dom));
+    Matrix<I> input = ramp<I>(rfft_type<T, F, 1, A>::in_dom(dom));
     if (rfft_type<T, F, 1, A>::axis == 0)
     {
       // Necessary symmetry:
@@ -292,9 +282,10 @@
 {
   typedef typename T::I I;
   typedef typename T::O O;
-  typedef typename impl::Layout<D, row1_type,
+  typedef typename T::order_type order_type;
+  typedef typename impl::Layout<D, order_type,
     impl::Stride_unit_dense, typename T::i_format> i_layout_type;
-  typedef typename impl::Layout<D, row1_type,
+  typedef typename impl::Layout<D, order_type,
     impl::Stride_unit_dense, typename T::o_format> o_layout_type;
   return_mechanism_type const r = by_reference;
 
@@ -354,8 +345,8 @@
   typedef impl::Fast_block<D, CT, layout_type> block_type;
   typedef typename impl::View_of_dim<D, CT, block_type>::type View;
 
-  View data = ramp<T, row1_type>(dom);
-  View ref = ramp<T, row1_type>(dom);
+  View data = ramp<T>(dom);
+  View ref = ramp<T>(dom);
 
   typename View::subview_type sub_data = data(dom);
 
@@ -396,7 +387,7 @@
   Domain<2> in_dom = T::in_dom(dom);
   Domain<2> out_dom = T::out_dom(dom);
 
-  Iview input = input_creator<T, 2, order_type>::create(dom);
+  Iview input = input_creator<T, 2>::create(dom);
   typename Iview::subview_type sub_input = input(in_dom);
 
   Oview output = empty<O>(out_dom);
@@ -433,8 +424,8 @@
   typedef impl::Fast_block<2, CT, layout_type> block_type;
   typedef Matrix<CT, block_type> View;
 
-  View data = ramp<T, row1_type>(dom);
-  View ref = ramp<T, row1_type>(dom);
+  View data = ramp<T>(dom);
+  View ref = ramp<T>(dom);
 
   typename View::subview_type sub_data = data(dom);
 
