Index: src/vsip/opt/simd/simd.hpp
===================================================================
--- src/vsip/opt/simd/simd.hpp	(revision 171547)
+++ src/vsip/opt/simd/simd.hpp	(working copy)
@@ -143,6 +143,10 @@
   static simd_type load_unaligned(value_type const* addr)
   { return *addr; }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1, 
+                                  value_type const* addr)
+  { return *addr; }
+
   static simd_type load_scalar(value_type value)
   { return value; }
 
@@ -262,6 +266,13 @@
     return vec_perm(x0, x1, sh);
   }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1,
+                                  value_type const* addr)
+  {
+    __vector unsigned char sh = vec_lvsl(0, (value_type*)addr);
+    return vec_perm(x0, x1, sh);
+  }
+
   static simd_type load_scalar(value_type value)
   {
     union
@@ -350,6 +361,13 @@
     return vec_perm(x0, x1, sh);
   }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1,
+                                  value_type const* addr)
+  {
+    __vector unsigned char sh = vec_lvsl(0, (value_type*)addr);
+    return vec_perm(x0, x1, sh);
+  }
+
   static simd_type load_scalar(value_type value)
   {
     union
@@ -441,6 +459,12 @@
     return vec_perm(x0, x1, sh);
   }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1,
+                                  value_type const* addr)
+  {
+    __vector unsigned char sh = vec_lvsl(0, (value_type*)addr);
+    return vec_perm(x0, x1, sh);
+  }
   static simd_type load_scalar(value_type value)
   {
     union
@@ -531,6 +555,12 @@
     return vec_perm(x0, x1, sh);
   }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1,
+                                  value_type const* addr)
+  {
+    __vector unsigned char sh = vec_lvsl(0, (value_type*)addr);
+    return vec_perm(x0, x1, sh);
+  }
   static simd_type load_scalar(value_type value)
   {
 #if __ghs__
@@ -646,6 +676,9 @@
   static simd_type load_unaligned(value_type* addr)
   { return _mm_loadu_si128((simd_type*)addr); }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1, value_type* addr)
+  { return _mm_loadu_si128((simd_type*)addr); }
+
   static simd_type load_scalar(value_type value)
   { return _mm_set_epi8(0, 0, 0, 0, 0, 0, 0, 0,
 			0, 0, 0, 0, 0, 0, 0, value); }
@@ -706,6 +739,10 @@
   static simd_type load_unaligned(value_type const* addr)
   { return _mm_loadu_si128((simd_type*)addr); }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1,
+                                  value_type const* addr)
+  { return _mm_loadu_si128((simd_type*)addr); }
+
   static simd_type load_scalar(value_type value)
   { return _mm_set_epi16(0, 0, 0, 0, 0, 0, 0, value); }
 
@@ -807,6 +844,10 @@
   static simd_type load_unaligned(value_type const* addr)
   { return _mm_loadu_si128((simd_type*)addr); }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1,
+                                  value_type const* addr)
+  { return _mm_loadu_si128((simd_type*)addr); }
+
   static simd_type load_scalar(value_type value)
   { return _mm_set_epi32(0, 0, 0, value); }
 
@@ -894,6 +935,10 @@
   static simd_type load_unaligned(value_type const* addr)
   { return _mm_loadu_ps(addr); }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1,
+                                  value_type const* addr)
+  { return _mm_loadu_ps(addr); }
+
   static simd_type load_scalar(value_type value)
   { return _mm_load_ss(&value); }
 
@@ -992,6 +1037,10 @@
   static simd_type load_unaligned(value_type const* addr)
   { return _mm_loadu_pd(addr); }
 
+  static simd_type load_unaligned(simd_type x0, simd_type x1,
+                                  value_type const* addr)
+  { return _mm_loadu_pd(addr); }
+
   static simd_type load_scalar(value_type value)
   { return _mm_load_sd(&value); }
 
Index: src/vsip/opt/simd/expr_evaluator.hpp
===================================================================
--- src/vsip/opt/simd/expr_evaluator.hpp	(revision 171353)
+++ src/vsip/opt/simd/expr_evaluator.hpp	(working copy)
@@ -43,11 +43,11 @@
 namespace simd
 {
 
-template <typename BlockT>
+template <typename BlockT, bool A>
 struct Proxy_factory
 {
   typedef Direct_access_traits<typename BlockT::value_type> access_traits;
-  typedef Proxy<access_traits> proxy_type;
+  typedef Proxy<access_traits, A> proxy_type;
   typedef typename Adjust_layout_dim<
                      1, typename Block_layout<BlockT>::layout_type>::type
 		layout_type;
@@ -62,7 +62,15 @@
     return dda.stride(0) == 1 && 
       Simd_traits<typename BlockT::value_type>::alignment_of(dda.data()) == 0;
   }
-  static proxy_type 
+  static bool
+  is_aligned(BlockT const& b)
+  {
+    Ext_data<BlockT, layout_type> dda(b, SYNC_IN);
+    return
+      Simd_traits<typename BlockT::value_type>::alignment_of(dda.data()) == 0;
+  }
+
+  static proxy_type
   create(BlockT const &b) 
   {
     Ext_data<BlockT, layout_type> dda(b, SYNC_IN);
@@ -70,39 +78,53 @@
   }
 };
 
-template <typename T>
-struct Proxy_factory<Scalar_block<1, T> >
+template <typename T, bool A>
+struct Proxy_factory<Scalar_block<1, T>, A>
 {
   typedef Scalar_access_traits<T> access_traits;
-  typedef Proxy<access_traits> proxy_type;
+  typedef Proxy<access_traits, A> proxy_type;
   static bool const ct_valid = true;
 
   static bool 
   rt_valid(Scalar_block<1, T> const &) { return true;}
-  static proxy_type 
-  create(Scalar_block<1, T> const &b) { return proxy_type(b.value());}
+  static bool
+  is_aligned(Scalar_block<1,T> const&) { return true;}
+
+  static proxy_type
+  create(Scalar_block<1, T> const &b) 
+  {
+    return proxy_type(b.value());
+  }
 };
 
 template <dimension_type D,
 	  template <typename> class O,
 	  typename B,
-	  typename T>
-struct Proxy_factory<Unary_expr_block<D, O, B, T> const>
+	  typename T,
+	  bool A>
+struct Proxy_factory<Unary_expr_block<D, O, B, T> const, A>
 {
-  typedef Unary_access_traits<typename Proxy_factory<B>::proxy_type, O>
+  typedef 
+    Unary_access_traits<typename Proxy_factory<B,A>::proxy_type, O>
     access_traits;
-  typedef Proxy<access_traits> proxy_type;
+  typedef Proxy<access_traits,A> proxy_type;
   static bool const ct_valid = Unary_operator_map<T, O>::is_supported;
 
   static bool 
   rt_valid(Unary_expr_block<D, O, B, T> const &b)
   {
-    return Proxy_factory<B>::rt_valid(b.op());
+    return Proxy_factory<B, A>::rt_valid(b.op());
   }
+  static bool 
+  is_aligned(Unary_expr_block<D, O, B, T> const &b)
+  {
+    return Proxy_factory<B, A>::is_aligned(b.op());
+  }
+
   static proxy_type
   create(Unary_expr_block<D, O, B, T> const &b)
   {
-    return proxy_type(Proxy_factory<B>::create(b.op()));
+    return proxy_type(Proxy_factory<B, A>::create(b.op()));
   }
 };
 
@@ -111,34 +133,44 @@
 	  typename                      LB,
 	  typename                      LT,
 	  typename                      RB,
-	  typename                      RT>
-struct Proxy_factory<Binary_expr_block<D, O, LB, LT, RB, RT> const>
+	  typename                      RT,
+	  bool A>
+struct Proxy_factory<Binary_expr_block<D, O, LB, LT, RB, RT> const, A>
 {
-  typedef Binary_access_traits<typename Proxy_factory<LB>::proxy_type,
-			       typename Proxy_factory<RB>::proxy_type, O> 
+  typedef
+    Binary_access_traits<typename Proxy_factory<LB, A>::proxy_type,
+			 typename Proxy_factory<RB, A>::proxy_type, O> 
     access_traits;
-  typedef Proxy<access_traits> proxy_type;
+  typedef Proxy<access_traits, A> proxy_type;
   static bool const ct_valid = 
     Type_equal<typename LB::value_type, LT>::value &&
     Type_equal<typename RB::value_type, RT>::value &&
     Type_equal<LT, RT>::value &&
     Binary_operator_map<LT, O>::is_supported &&
-    Proxy_factory<LB>::ct_valid &&
-    Proxy_factory<RB>::ct_valid;
+    Proxy_factory<LB, A>::ct_valid &&
+    Proxy_factory<RB, A>::ct_valid;
 
   static bool 
   rt_valid(Binary_expr_block<D, O, LB, LT, RB, RT> const &b)
   {
-    return Proxy_factory<LB>::rt_valid(b.left()) &&
-      Proxy_factory<RB>::rt_valid(b.right());
+    return Proxy_factory<LB, A>::rt_valid(b.left()) &&
+      Proxy_factory<RB, A>::rt_valid(b.right());
   }
+  static bool 
+  is_aligned(Binary_expr_block<D, O, LB, LT, RB, RT> const &b)
+  {
+    return Proxy_factory<LB, A>::is_aligned(b.left()) &&
+           Proxy_factory<RB, A>::is_aligned(b.right());
+  }
+
   static proxy_type
   create(Binary_expr_block<D, O, LB, LT, RB, RT> const &b)
   {
-    typename Proxy_factory<LB>::proxy_type lp =
-      Proxy_factory<LB>::create(b.left());
-    typename Proxy_factory<RB>::proxy_type rp =
-      Proxy_factory<RB>::create(b.right());
+    typename Proxy_factory<LB, A>::proxy_type lp =
+      Proxy_factory<LB, A>::create(b.left());
+    typename Proxy_factory<LB, A>::proxy_type rp =
+      Proxy_factory<RB, A>::create(b.right());
+
     return proxy_type(lp, rp);
   }
 };
@@ -147,42 +179,51 @@
 	  template <typename, typename,typename> class O,
 	  typename                               Block1, typename Type1,
 	  typename                               Block2, typename Type2,
-	  typename                               Block3, typename Type3>
+	  typename                               Block3, typename Type3,
+	  bool A>
 struct Proxy_factory<Ternary_expr_block<D, O,
-  Block1,Type1,Block2,Type2,Block3,Type3> const>
+  Block1,Type1,Block2,Type2,Block3,Type3> const, A>
 {
-  typedef Ternary_access_traits<typename Proxy_factory<Block1>::proxy_type,
-                                typename Proxy_factory<Block2>::proxy_type,
-                                typename Proxy_factory<Block3>::proxy_type,
+  typedef Ternary_access_traits<typename Proxy_factory<Block1, A>::proxy_type,
+                                typename Proxy_factory<Block2, A>::proxy_type,
+                                typename Proxy_factory<Block3, A>::proxy_type,
 		 	        O> 
     access_traits;
 
   typedef Ternary_expr_block<D, O, Block1,Type1,Block2,Type2,Block3,Type3>
     SrcBlock;
 
-  typedef Proxy<access_traits> proxy_type;
+  typedef Proxy<access_traits, A> proxy_type;
   static bool const ct_valid = 
     Ternary_operator_map<Type1, O>::is_supported &&
-    Proxy_factory<Block1>::ct_valid &&
-    Proxy_factory<Block2>::ct_valid &&
-    Proxy_factory<Block3>::ct_valid;
+    Proxy_factory<Block1, A>::ct_valid &&
+    Proxy_factory<Block2, A>::ct_valid &&
+    Proxy_factory<Block3, A>::ct_valid;
 
   static bool 
   rt_valid(SrcBlock const &b)
   {
-    return Proxy_factory<Block1>::rt_valid(b.first()) &&
-           Proxy_factory<Block2>::rt_valid(b.second()) &&
-           Proxy_factory<Block3>::rt_valid(b.third());
+    return Proxy_factory<Block1, A>::rt_valid(b.first()) &&
+           Proxy_factory<Block2, A>::rt_valid(b.second()) &&
+           Proxy_factory<Block3, A>::rt_valid(b.third());
   }
+  static bool 
+  is_aligned(SrcBlock const &b)
+  {
+    return Proxy_factory<Block1, A>::is_aligned(b.first()) &&
+           Proxy_factory<Block2, A>::is_aligned(b.second()) &&
+           Proxy_factory<Block3, A>::is_aligned(b.third());
+  }
+
   static proxy_type
   create(SrcBlock const &b)
   {
-    typename Proxy_factory<Block1>::proxy_type b1p =
-      Proxy_factory<Block1>::create(b.first());
-    typename Proxy_factory<Block2>::proxy_type b2p =
-      Proxy_factory<Block2>::create(b.second());
-    typename Proxy_factory<Block3>::proxy_type b3p =
-      Proxy_factory<Block3>::create(b.third());
+    typename Proxy_factory<Block1, A>::proxy_type
+      b1p = Proxy_factory<Block1, A>::create(b.first());
+    typename Proxy_factory<Block2, A>::proxy_type
+      b2p = Proxy_factory<Block2, A>::create(b.second());
+    typename Proxy_factory<Block3, A>::proxy_type
+      b3p = Proxy_factory<Block3, A>::create(b.third());
 
     return proxy_type(b1p,b2p,b3p);
   }
@@ -205,7 +246,7 @@
     simd::Simd_traits<typename LB::value_type>::is_accel &&
     // Check that direct access is possible.
     Ext_data_cost<LB>::value == 0 &&
-    simd::Proxy_factory<RB>::ct_valid &&
+    simd::Proxy_factory<RB, true>::ct_valid &&
     // Only allow float, double, complex<float>, and complex<double> at this time.
     (Type_equal<typename Scalar_of<typename LB::value_type>::type, float>::value ||
      Type_equal<typename Scalar_of<typename LB::value_type>::type, double>::value) &&
@@ -221,20 +262,17 @@
     return (dda.stride(0) == 1 &&
 	    simd::Simd_traits<typename LB::value_type>::
 	      alignment_of(dda.data()) == 0 &&
-	    simd::Proxy_factory<RB>::rt_valid(rhs));
+	    simd::Proxy_factory<RB, true>::rt_valid(rhs));
   }
 
   static void exec(LB& lhs, RB const& rhs)
   {
     typedef typename simd::LValue_access_traits<typename LB::value_type> WAT;
-    typedef typename simd::Proxy_factory<RB>::access_traits EAT;
     length_type const vec_size =
       simd::Simd_traits<typename LB::value_type>::vec_size;
     Ext_data<LB, layout_type> dda(lhs, SYNC_OUT);
     length_type const size = dda.size(0);
     length_type n = size;
-    simd::Proxy<WAT> lp(dda.data());
-    simd::Proxy<EAT> rp(simd::Proxy_factory<RB>::create(rhs));
 #if 0
     // simple iterator-based loop. It has the most concise syntax,
     // but generates suboptimal code with gcc 3.4
@@ -271,12 +309,35 @@
     // loop using proxy interface. This generates the best code
     // with gcc 3.4 (with gcc 4.1 the difference to the first case
     // above is negligible).
-    while (n >= vec_size)
-    {
-      lp.store(rp.load());
-      n -= vec_size;
-      lp.increment();
-      rp.increment();
+
+    // If any of the blocks are unaligned, we treat all of the blocks as
+    // unaligned
+    if(simd::Proxy_factory<RB, true>::is_aligned(rhs)) {
+      typedef typename simd::Proxy_factory<RB, true>::access_traits EAT;
+
+      simd::Proxy<WAT,true> lp(dda.data());
+      simd::Proxy<EAT,true> rp(simd::Proxy_factory<RB,true>::create(rhs));
+
+      while (n >= vec_size)
+      {
+        lp.store(rp.load());
+        n -= vec_size;
+        lp.increment();
+        rp.increment();
+      }
+    } else {
+      typedef typename simd::Proxy_factory<RB, false>::access_traits EAT;
+
+      simd::Proxy<WAT,false> lp(dda.data());
+      simd::Proxy<EAT,false> rp(simd::Proxy_factory<RB,false>::create(rhs));
+
+      while (n >= vec_size)
+      {
+        lp.store(rp.load());
+        n -= vec_size;
+        lp.increment();
+        rp.increment();
+      }
     }
 #endif
     // Process the remainder, using simple loop fusion.
Index: src/vsip/opt/simd/expr_iterator.hpp
===================================================================
--- src/vsip/opt/simd/expr_iterator.hpp	(revision 171353)
+++ src/vsip/opt/simd/expr_iterator.hpp	(working copy)
@@ -244,12 +244,12 @@
   typedef typename P1::value_type value_type;
 };
 
-template <typename T> class Proxy;
+template <typename T, bool IsAligned> class Proxy;
 
 // Optimized proxy for direct SIMD access to block data, i.e. the data
 // is contiguous (unit stride) and correctly aligned.
 template <typename T>
-class Proxy<Direct_access_traits<T> >
+class Proxy<Direct_access_traits<T>,true >
 {
 public:
   typedef T value_type;
@@ -265,10 +265,62 @@
   value_type const *ptr_;
 };
 
+template <typename T>
+class Proxy<Direct_access_traits<T>,false >
+{
+public:
+  typedef T value_type;
+  typedef Simd_traits<value_type>                     simd;
+  typedef typename simd::simd_type                    simd_type;
+
+  Proxy(value_type const *ptr) : ptr_unaligned_(ptr)
+  {
+    ptr_aligned_    = (simd_type*)((intptr_t)ptr & ~(simd::alignment-1));
+
+    // We do not need x0 and x1 if we are using sse because sse has
+    // a uload intruction.
+#if !defined(__SSE__) and !defined(_SSE2__)
+    x0_             = simd::load((value_type*)ptr_aligned_);
+    x1_             = simd::load((value_type*)(ptr_aligned_+simd::vec_size));
+#endif
+  }
+
+  simd_type load() const
+  {
+    return simd::load_unaligned(x0_, x1_, ptr_unaligned_);
+  }
+
+  void set_x0(simd_type x0) { x0_ = x0; }
+
+  void increment(length_type n = 1) 
+  {
+    ptr_unaligned_ += n * Simd_traits<value_type>::vec_size;
+    ptr_aligned_   += n;
+  
+    // We do not need x0 and x1 if we are using sse because sse has
+    // a uload intruction.
+#if !defined(__SSE__) and !defined(_SSE2__)
+    // update x0
+    x0_ = (n == 1)? x1_:simd::load((value_type*)ptr_aligned_);
+
+    // update x1
+    x1_ = simd::load((value_type*)(ptr_aligned_+simd::vec_size));
+#endif
+  }
+
+private:
+  simd_type  x0_;
+  simd_type  x1_;
+
+  simd_type  const *ptr_aligned_;
+  value_type const *ptr_unaligned_;
+};
+
+
 // Optimized proxy for direct SIMD access to writable block data, i.e. 
 // the data is contiguous (unit stride) and correctly aligned.
-template <typename T>
-class Proxy<LValue_access_traits<T> >
+template <typename T, bool IsAligned>
+class Proxy<LValue_access_traits<T>,IsAligned >
 {
 public:
   typedef T value_type;
@@ -276,7 +328,7 @@
 
   Proxy(value_type *ptr) : ptr_(ptr) {}
   template <typename T1>
-  Proxy operator = (Proxy<T1> const &o) 
+  Proxy operator = (Proxy<T1,IsAligned> const &o) 
   {
     store(o.load());
     return *this;
@@ -294,8 +346,8 @@
   value_type *ptr_;
 };
 
-template <typename T>
-class Proxy<Scalar_access_traits<T> >
+template <typename T, bool IsAligned>
+class Proxy<Scalar_access_traits<T>, IsAligned>
 {
 public:
   typedef T value_type;
@@ -313,8 +365,8 @@
 };
 
 // Proxy for unary expressions.
-template <typename ProxyT, template <typename> class O>
-class Proxy<Unary_access_traits<ProxyT, O> >
+template <typename ProxyT, template <typename> class O, bool IsAligned>
+class Proxy<Unary_access_traits<ProxyT, O>, IsAligned>
 {
 public:
   typedef Unary_access_traits<ProxyT, O> access_traits;
@@ -337,8 +389,9 @@
 
 // Proxy for binary expressions. The two proxy operands L and R are 
 // combined using binary operator O.
-template <typename L, typename R, template <typename, typename> class O>
-class Proxy<Binary_access_traits<L, R, O> >
+template <typename L, typename R, template <typename, typename> class O,
+          bool IsAligned>
+class Proxy<Binary_access_traits<L, R, O>, IsAligned>
 {
 public:
   typedef Binary_access_traits<L, R, O> access_traits;
@@ -371,12 +424,13 @@
 };
 
 // Proxy for ternary 'multiply-add' expression (a * b + c)
-template <typename A, typename B, typename C>
-class Proxy<Binary_access_traits<Proxy<Binary_access_traits<A, B, op::Mult> >,
-				 C, op::Add> >
+template <typename A, typename B, typename C, bool IsAligned>
+class Proxy<Binary_access_traits<
+               Proxy<Binary_access_traits<A, B, op::Mult>, IsAligned>,
+               C, op::Add>, IsAligned>
 {
 public:
-  typedef Proxy<Binary_access_traits<A, B, op::Mult> > AB;
+  typedef Proxy<Binary_access_traits<A, B, op::Mult>, IsAligned> AB;
   typedef Binary_access_traits<AB, C, op::Add> access_traits;
   typedef typename access_traits::value_type value_type;
   typedef typename Simd_traits<value_type>::simd_type simd_type;
@@ -407,13 +461,13 @@
 };
 
 // Proxy for ternary 'add-multiply' expression (a + b * c)
-template <typename A, typename B, typename C>
+template <typename A, typename B, typename C, bool IsAligned>
 class Proxy<Binary_access_traits<A,
-				 Proxy<Binary_access_traits<B, C, op::Mult> >,
-				 op::Add> >
+		Proxy<Binary_access_traits<B, C, op::Mult>, IsAligned>,
+		op::Add>, IsAligned>
 {
 public:
-  typedef Proxy<Binary_access_traits<B, C, op::Mult> > BC;
+  typedef Proxy<Binary_access_traits<B, C, op::Mult>, IsAligned> BC;
   typedef Binary_access_traits<A, BC, op::Add> access_traits;
   typedef typename access_traits::value_type value_type;
   typedef typename Simd_traits<value_type>::simd_type simd_type;
@@ -445,14 +499,15 @@
 
 // Proxy for quaternary 'add-multiply' expression (a * b + c * d)
 // (needed for disambiguation).
-template <typename A, typename B, typename C, typename D>
-class Proxy<Binary_access_traits<Proxy<Binary_access_traits<A, B, op::Mult> >,
-				 Proxy<Binary_access_traits<C, D, op::Mult> >,
-				 op::Add> >
+template <typename A, typename B, typename C, typename D, bool IsAligned>
+class Proxy<Binary_access_traits<
+	Proxy<Binary_access_traits<A, B, op::Mult>, IsAligned>,
+	Proxy<Binary_access_traits<C, D, op::Mult>, IsAligned>,
+	op::Add>, IsAligned>
 {
 public:
-  typedef Proxy<Binary_access_traits<A, B, op::Mult> > AB;
-  typedef Proxy<Binary_access_traits<C, D, op::Mult> > CD;
+  typedef Proxy<Binary_access_traits<A, B, op::Mult>, IsAligned> AB;
+  typedef Proxy<Binary_access_traits<C, D, op::Mult>, IsAligned> CD;
   typedef Binary_access_traits<AB, CD, op::Add> access_traits;
   typedef typename access_traits::value_type value_type;
   typedef typename Simd_traits<value_type>::simd_type simd_type;
@@ -485,8 +540,9 @@
 
 // Proxy for ternary access traits
 template <typename A, typename B, typename C,
-          template <typename,typename,typename> class O>
-class Proxy<Ternary_access_traits<A,B,C,O> >
+          template <typename,typename,typename> class O,
+	  bool IsAligned>
+class Proxy<Ternary_access_traits<A,B,C,O>, IsAligned>
 {
   typedef typename A::access_traits                   access_traits;
   typedef typename access_traits::value_type          value_type;
@@ -522,7 +578,7 @@
   B b_;
   C c_;
 };
-
+/*
 template <typename T>
 struct Iterator
 {
@@ -548,7 +604,7 @@
   r += n;
   return r;
 }
-
+*/
 } // namespace vsip::impl::simd
 } // namespace vsip::impl
 } // namespace vsip
