
Index: src/vsip/signal-window.cpp
===================================================================
RCS file: /home/cvs/Repository/vpp/src/vsip/signal-window.cpp,v
retrieving revision 1.1
diff -c -p -r1.1 signal-window.cpp
*** src/vsip/signal-window.cpp	20 Sep 2005 12:38:57 -0000	1.1
--- src/vsip/signal-window.cpp	21 Sep 2005 00:10:21 -0000
*************** cheby(length_type len, scalar_f ripple) 
*** 116,125 ****
      }
    }
  
    /* wt = fft(wf); */
    { 
!     typedef scalar_f val_type;
!     typedef Fft<const_Vector, std::complex<val_type>, std::complex<val_type>, 
        fft_fwd, by_value, 1, alg_noise> f_fft_type;
  
      f_fft_type f_fft( Domain<1>(len), 1.0 / len );
--- 116,125 ----
      }
    }
  
+ #if defined(VSIP_IMPL_FFT_USE_FLOAT)
    /* wt = fft(wf); */
    { 
!     typedef Fft<const_Vector, std::complex<scalar_f>, std::complex<scalar_f>, 
        fft_fwd, by_value, 1, alg_noise> f_fft_type;
  
      f_fft_type f_fft( Domain<1>(len), 1.0 / len );
*************** cheby(length_type len, scalar_f ripple) 
*** 129,134 ****
--- 129,135 ----
      scale /= magsq(scale);
      wf = scale * wf;
    }
+ #endif
    
    Vector<scalar_f> ret(wfR);
    impl::frequency_swap( ret );
Index: tests/window.cpp
===================================================================
RCS file: /home/cvs/Repository/vpp/tests/window.cpp,v
retrieving revision 1.1
diff -c -p -r1.1 window.cpp
*** tests/window.cpp	20 Sep 2005 12:38:57 -0000	1.1
--- tests/window.cpp	21 Sep 2005 00:10:22 -0000
*************** main ()
*** 102,107 ****
--- 102,108 ----
        assert( equal( v.get(n), testvec_blackman[n] ) );
    }
  
+ #if defined(VSIP_IMPL_FFT_USE_FLOAT)
    // Chebyshev
    {
      const length_type N = 24;
*************** main ()
*** 122,127 ****
--- 123,129 ----
      for ( unsigned int n = 0; n < N; ++n )
        assert( equal( v.get(n), testvec_cheby_odd[n] ) );
    }
+ #endif
  
    // Hanning
    {
Index: tests/fft_ext/fft_ext.cpp
===================================================================
RCS file: /home/cvs/Repository/vpp/tests/fft_ext/fft_ext.cpp,v
retrieving revision 1.3
diff -c -p -r1.3 fft_ext.cpp
*** tests/fft_ext/fft_ext.cpp	19 Sep 2005 03:39:55 -0000	1.3
--- tests/fft_ext/fft_ext.cpp	21 Sep 2005 00:10:22 -0000
***************
*** 13,18 ****
--- 13,19 ----
  
  #include <iostream>
  #include <fstream>
+ #include <string>
  #include <cmath>
  #include <argp.h>
  
*************** using namespace vsip;
*** 31,37 ****
  ***********************************************************************/
  
  /// Required for --version option
! const char *argp_program_version = "fft_ext 1.0";
       
  /// Program documentation.
  static char doc[] =
--- 32,38 ----
  ***********************************************************************/
  
  /// Required for --version option
! const char *argp_program_version = "fft_ext 1.01";
       
  /// Program documentation.
  static char doc[] =
*************** static char doc[] =
*** 43,51 ****
  static char args_doc[] = "filename";
       
  /// The options we understand.
! static struct argp_option options[] = {
!   {"single",  's', 0,      0,  "Single precision (default)", 0 },
!   {"double",  'd', 0,      0,  "Double precision", 0 },  
    {"cc",      'n', 0,      0,  "Complex to Complex (default)", 0 },
    {"cr",      'c', 0,      0,  "Complex to Real", 0 },
    {"rc",      'r', 0,      0,  "Real to Complex", 0 },
--- 44,53 ----
  static char args_doc[] = "filename";
       
  /// The options we understand.
! static struct argp_option options[] = 
! {
!   {"single",  's', 0,      0,  "Single precision only", 0 },
!   {"double",  'd', 0,      0,  "Double precision only", 0 },  
    {"cc",      'n', 0,      0,  "Complex to Complex (default)", 0 },
    {"cr",      'c', 0,      0,  "Complex to Real", 0 },
    {"rc",      'r', 0,      0,  "Real to Complex", 0 },
*************** static struct argp_option options[] = {
*** 53,68 ****
  };
  
  /// Possible types of FFT
! enum fft_type {
    complex_to_complex = 0,
    complex_to_real,
    real_to_complex
  };
       
  /// Used by main to pass to argp_parse()
  struct arguments
  {
!   bool single_precision;
    fft_type fft; 
    char *filename;
  };
--- 55,79 ----
  };
  
  /// Possible types of FFT
! enum fft_type
! {
    complex_to_complex = 0,
    complex_to_real,
    real_to_complex
  };
+ 
+ /// Possible precision selection
+ enum precision_type
+ {
+   both_precisions = 0,
+   single_precision,
+   double_precision
+ };
       
  /// Used by main to pass to argp_parse()
  struct arguments
  {
!   precision_type precision;
    fft_type fft; 
    char *filename;
  };
*************** struct arguments
*** 71,77 ****
  static error_t parse_opt (int key, char *arg, struct argp_state *state);
  
  /// argp parser
! static struct argp argp = { 
    options,     // ptr to argp_options structure
    parse_opt,   // function that parses options
    args_doc,    // string describing required arguments
--- 82,89 ----
  static error_t parse_opt (int key, char *arg, struct argp_state *state);
  
  /// argp parser
! static struct argp argp = 
! { 
    options,     // ptr to argp_options structure
    parse_opt,   // function that parses options
    args_doc,    // string describing required arguments
*************** parse_opt (int key, char *arg, struct ar
*** 98,107 ****
    switch (key)
    {
    case 's': 
!     arguments->single_precision = true;
      break;
    case 'd': 
!     arguments->single_precision = false;
      break;
    case 'n': 
      arguments->fft = complex_to_complex;
--- 110,119 ----
    switch (key)
    {
    case 's': 
!     arguments->precision = single_precision;
      break;
    case 'd': 
!     arguments->precision = double_precision;
      break;
    case 'n': 
      arguments->fft = complex_to_complex;
*************** template<typename T>
*** 198,204 ****
  void test_fft_cc (char *filename)
  {
    ifstream ifile(filename, ios::in);
!   if (ifile.fail()) {
      cerr << "Failed to open file " << filename << endl;
      return;
    }
--- 210,217 ----
  void test_fft_cc (char *filename)
  {
    ifstream ifile(filename, ios::in);
!   if (ifile.fail()) 
!   {
      cerr << "Failed to open file " << filename << endl;
      return;
    }
*************** template<typename T>
*** 246,252 ****
  void test_fft_cr (char *filename)
  {
    ifstream ifile(filename, ios::in);
!   if (ifile.fail()) {
      cerr << "Failed to open file " << filename << endl;
      return;
    }
--- 259,266 ----
  void test_fft_cr (char *filename)
  {
    ifstream ifile(filename, ios::in);
!   if (ifile.fail()) 
!   {
      cerr << "Failed to open file " << filename << endl;
      return;
    }
*************** template<typename T>
*** 294,300 ****
  void test_fft_rc (char *filename)
  {
    ifstream ifile(filename, ios::in);
!   if (ifile.fail()) {
      cerr << "Failed to open file " << filename << endl;
      return;
    }
--- 308,315 ----
  void test_fft_rc (char *filename)
  {
    ifstream ifile(filename, ios::in);
!   if (ifile.fail()) 
!   {
      cerr << "Failed to open file " << filename << endl;
      return;
    }
*************** void test_fft_rc (char *filename)
*** 337,342 ****
--- 352,388 ----
  }
  
  
+ // macro to make running the tests a little neater
+ 
+ #if defined(VSIP_IMPL_FFT_USE_FLOAT) && defined(VSIP_IMPL_FFT_USE_DOUBLE)
+ #define TEST_RUN_FFT( func, name, prec ) \
+     { \
+       if ( prec != double_precision ) \
+         func<float>(name); \
+       if ( prec != single_precision ) \
+         func<double>(name); \
+     }
+ 
+ #elif defined(VSIP_IMPL_FFT_USE_DOUBLE)
+ #define TEST_RUN_FFT( func, name, prec ) \
+     { \
+       if ( prec != single_precision ) \
+         func<double>(name); \
+     }
+ 
+ #elif defined(VSIP_IMPL_FFT_USE_FLOAT)
+ #define TEST_RUN_FFT( func, name, prec ) \
+     { \
+       if ( prec != double_precision ) \
+         func<float>(name); \
+     }
+ 
+ #else
+ #define TEST_RUN_FFT( func, name, prec )
+ 
+ #endif
+ 
+ 
  
  
  /***********************************************************************
*************** int main (int argc, char **argv)
*** 355,361 ****
    struct arguments arguments;
       
    /* Default values. */
!   arguments.single_precision = true;
    arguments.fft = complex_to_complex;
    arguments.filename = NULL;
       
--- 401,407 ----
    struct arguments arguments;
       
    /* Default values. */
!   arguments.precision = both_precisions;
    arguments.fft = complex_to_complex;
    arguments.filename = NULL;
       
*************** int main (int argc, char **argv)
*** 364,389 ****
    argp_parse(&argp, argc, argv, 0, 0, &arguments);
  
  
!   if ( arguments.fft == complex_to_real ) {
!     if ( arguments.single_precision )
!       test_fft_cr<float>(arguments.filename);
!     else
!       test_fft_cr<double>(arguments.filename);
!   }
!   else
!   if ( arguments.fft == real_to_complex ) {
!     if ( arguments.single_precision )
!       test_fft_rc<float>(arguments.filename);
!     else
!       test_fft_rc<double>(arguments.filename);
    }
!   else {
!     if ( arguments.single_precision )
!       test_fft_cc<float>(arguments.filename);
!     else
!       test_fft_cc<double>(arguments.filename);
    }
  
    exit (0);
  }
- 
--- 410,451 ----
    argp_parse(&argp, argc, argv, 0, 0, &arguments);
  
  
!   // Check the first two letters of the filename to see if they
!   // match a pattern that will allow us to deduce the fft type.  
!   // Currently, these are accepted:
!   //   "cc*" - complex-complex
!   //   "cr*" - complex-real
!   //   "rc*" - real-complex
!   std::string fullpath(arguments.filename);
! 
!   // strip path information
!   int index = fullpath.rfind( '/' );
!   if ( index >= 0 )
!   {
!     std::string filename( fullpath.substr( index + 1, fullpath.length() - index - 1 ) );
!     
!     if ( filename.length() >= 2 )
!     {
!       if ( filename.substr(0, 2) == "cc" )      arguments.fft = complex_to_complex;
!       else if ( filename.substr(0, 2) == "cr" ) arguments.fft = complex_to_real;
!       else if ( filename.substr(0, 2) == "rc" ) arguments.fft = real_to_complex;
!     }
    }
! 
! 
!   switch ( arguments.fft )
!   {
!   case complex_to_real:
!     TEST_RUN_FFT( test_fft_cr, arguments.filename, arguments.precision );
!     break;
!   case real_to_complex:
!     TEST_RUN_FFT( test_fft_rc, arguments.filename, arguments.precision );
!     break;
!   case complex_to_complex:
!     TEST_RUN_FFT( test_fft_cc, arguments.filename, arguments.precision );
!     break;
    }
  
+ 
    exit (0);
  }
