Index: src/vsip/opt/lapack/matvec.hpp
===================================================================
--- src/vsip/opt/lapack/matvec.hpp	(revision 225932)
+++ src/vsip/opt/lapack/matvec.hpp	(working copy)
@@ -22,7 +22,7 @@
   Included Files
 ***********************************************************************/
 
-#include <vsip/opt/general_dispatch.hpp>
+#include <vsip/opt/dispatch.hpp>
 #include <vsip/opt/lapack/bindings.hpp>
 
 
@@ -37,15 +37,16 @@
 namespace impl
 {
 
-// BLAS evaluator for vector-vector outer product
+namespace dispatcher
+{
 
+/// BLAS evaluator for vector-vector outer product
 template <typename T1,
 	  typename Block0,
 	  typename Block1,
 	  typename Block2>
-struct Evaluator<Op_prod_vv_outer, Block0,
-		 Op_list_3<T1, Block1 const&, Block2 const&>,
-		 Blas_tag>
+struct Evaluator<Op_prod_vv_outer, Blas_tag,
+                 void(Block0&, T1, Block1 const&, Block2 const&)>
 {
   static bool const ct_valid = 
     impl::blas::Blas_traits<T1>::valid &&
@@ -109,9 +110,8 @@
 	  typename Block0,
 	  typename Block1,
 	  typename Block2>
-struct Evaluator<Op_prod_vv_outer, Block0, 
-                 Op_list_3<std::complex<T1>, Block1 const&, Block2 const&>,
-		 Blas_tag>
+struct Evaluator<Op_prod_vv_outer, Blas_tag,
+                 void(Block0&, std::complex<T1>, Block1 const&, Block2 const&)>
 {
   static bool const ct_valid = 
     impl::blas::Blas_traits<std::complex<T1> >::valid &&
@@ -187,33 +187,33 @@
 };
 
 
-// BLAS evaluator for vector-vector dot-product (non-conjugated).
-
+/// BLAS evaluator for vector-vector dot-product (non-conjugated).
 template <typename T,
-          typename Block1,
-          typename Block2>
-struct Evaluator<Op_prod_vv_dot, Return_scalar<T>, Op_list_2<Block1, Block2>,
-                 Blas_tag>
+          typename Block0,
+          typename Block1>
+struct Evaluator<Op_prod_vv_dot, Blas_tag,
+                 T(Block0 const&, Block1 const&)>
 {
   static bool const ct_valid = 
     impl::blas::Blas_traits<T>::valid &&
+    Type_equal<T, typename Block0::value_type>::value &&
     Type_equal<T, typename Block1::value_type>::value &&
-    Type_equal<T, typename Block2::value_type>::value &&
     // check that direct access is supported
+    Ext_data_cost<Block0>::value == 0 &&
     Ext_data_cost<Block1>::value == 0 &&
-    Ext_data_cost<Block2>::value == 0 &&
     // check that format is interleaved.
-    !Is_split_block<Block1>::value &&
-    !Is_split_block<Block2>::value;
+    !Is_split_block<Block0>::value &&
+    !Is_split_block<Block1>::value;
 
-  static bool rt_valid(Block1 const&, Block2 const&) { return true; }
+  static bool rt_valid(Block0 const&, Block1 const&) { return true; }
 
-  static T exec(Block1 const& a, Block2 const& b)
+  static T exec(Block0 const& a, Block1 const& b)
   {
+    printf("blas dot\n");
     assert(a.size(1, 0) == b.size(1, 0));
 
-    Ext_data<Block1> ext_a(const_cast<Block1&>(a));
-    Ext_data<Block2> ext_b(const_cast<Block2&>(b));
+    Ext_data<Block0> ext_a(const_cast<Block0&>(a));
+    Ext_data<Block1> ext_b(const_cast<Block1&>(b));
 
     T r = blas::dot(a.size(1, 0),
                     ext_a.data(), ext_a.stride(0),
@@ -224,42 +224,38 @@
 };
 
 
-
-// BLAS evaluator for vector-vector dot-product (conjugated).
-
+/// BLAS evaluator for vector-vector dot-product (conjugated).
 template <typename T,
-          typename Block1,
-          typename Block2>
-struct Evaluator<Op_prod_vv_dot, Return_scalar<complex<T> >,
-                 Op_list_2<Block1, 
-                           Unary_expr_block<1, impl::conj_functor,
-                                            Block2, complex<T> > const>,
-                 Blas_tag>
+          typename Block0,
+          typename Block1>
+struct Evaluator<Op_prod_vv_dot, Blas_tag,
+                 std::complex<T>(Block0 const&, 
+                   Unary_expr_block<1, conj_functor, Block1, std::complex<T> > const&)>
 {
   static bool const ct_valid = 
     impl::blas::Blas_traits<complex<T> >::valid &&
+    Type_equal<complex<T>, typename Block0::value_type>::value &&
     Type_equal<complex<T>, typename Block1::value_type>::value &&
-    Type_equal<complex<T>, typename Block2::value_type>::value &&
     // check that direct access is supported
+    Ext_data_cost<Block0>::value == 0 &&
     Ext_data_cost<Block1>::value == 0 &&
-    Ext_data_cost<Block2>::value == 0 &&
     // check that format is interleaved.
-    !Is_split_block<Block1>::value &&
-    !Is_split_block<Block2>::value;
+    !Is_split_block<Block0>::value &&
+    !Is_split_block<Block1>::value;
 
   static bool rt_valid(
-    Block1 const&, 
-    Unary_expr_block<1, impl::conj_functor, Block2, complex<T> > const&)
+    Block0 const&, 
+    Unary_expr_block<1, impl::conj_functor, Block1, complex<T> > const&)
   { return true; }
 
   static complex<T> exec(
-    Block1 const& a, 
-    Unary_expr_block<1, impl::conj_functor, Block2, complex<T> > const& b)
+    Block0 const& a, 
+    Unary_expr_block<1, impl::conj_functor, Block1, complex<T> > const& b)
   {
     assert(a.size(1, 0) == b.size(1, 0));
 
-    Ext_data<Block1> ext_a(const_cast<Block1&>(a));
-    Ext_data<Block2> ext_b(const_cast<Block2&>(b.op()));
+    Ext_data<Block0> ext_a(const_cast<Block0&>(a));
+    Ext_data<Block1> ext_b(const_cast<Block1&>(b.op()));
 
     return blas::dotc(a.size(1, 0),
                       ext_b.data(), ext_b.stride(0),
@@ -271,13 +267,12 @@
 };
 
 
-
-// BLAS evaluator for matrix-vector product
+/// BLAS evaluator for matrix-vector product
 template <typename Block0,
           typename Block1,
           typename Block2>
-struct Evaluator<Op_prod_mv, Block0, Op_list_2<Block1, Block2>,
-                 Blas_tag>
+struct Evaluator<Op_prod_mv, Blas_tag,
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
   typedef typename Block0::value_type T;
 
@@ -361,12 +356,12 @@
 };
 
 
-// BLAS evaluator for vector-matrix product
+/// BLAS evaluator for vector-matrix product
 template <typename Block0,
           typename Block1,
           typename Block2>
-struct Evaluator<Op_prod_vm, Block0, Op_list_2<Block1, Block2>,
-                 Blas_tag>
+struct Evaluator<Op_prod_vm, Blas_tag,
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
   typedef typename Block0::value_type T;
 
@@ -451,13 +446,12 @@
 };
 
 
-// BLAS evaluator for matrix-matrix products.
-
+/// BLAS evaluator for matrix-matrix products.
 template <typename Block0,
           typename Block1,
           typename Block2>
-struct Evaluator<Op_prod_mm, Block0, Op_list_2<Block1, Block2>,
-                 Blas_tag>
+struct Evaluator<Op_prod_mm, Blas_tag,
+                 void(Block0&, Block1 const&, Block2 const&)>
 {
   typedef typename Block0::value_type T;
 
@@ -561,15 +555,14 @@
 };
 
 
-// BLAS evaluator for generalized matrix-matrix products.
-
+/// BLAS evaluator for generalized matrix-matrix products.
 template <typename T1,
 	  typename T2,
 	  typename Block0,
           typename Block1,
           typename Block2>
-struct Evaluator<Op_prod_gemp, Block0, Op_list_4<T1, Block1, Block2, T2>,
-                 Blas_tag>
+struct Evaluator<Op_prod_gemp, Blas_tag,
+                 void(Block0&, T1, Block1 const&, Block2 const&, T2)>
 {
   typedef typename Block0::value_type T;
 
@@ -663,8 +656,8 @@
 };
 
 
+} // namespace vsip::impl::dispatcher
 
-
 } // namespace vsip::impl
 
 } // namespace vsip
