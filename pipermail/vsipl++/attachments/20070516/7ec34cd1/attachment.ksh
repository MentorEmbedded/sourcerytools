# Using graph.pl

The typical flow for performance characterization and graphing with
char.pl and graph.pl is:

 0. Create new benchmarks and/or benchmark cases that characterize
    the desired operation (if necessary).

 1. Add entries to char.db for the new benchmark/benchmark cases
    (if necessary).

 2. Run char.pl.

 3. Organize the data files generated by char.pl.

 4. Add entries to graph.db to describe graphs to be created from
    the data files (if necessary).

 5. Run graph.pl

The following example illustrates this workflow on the
characterization of FFT performance.


## Example

In this example you will learn how to characterize FFT performance, so
that the following comparisons can be made:

 - in-place versus out-of-place FFT performance,
 - by-reference versus by-value FFT performance,
 - estimate (number of times = 1) versus measure (number of times = X)
   FFT performance,
 - VSIPL++ vs FFTW3 vendor FFT performance.
 - split-complex vs interleaved complex performance

Following the workflow, first determine if any additional benchmarks
or benchmark cases are necessary.

For VSIPL++ FFT, the 'fft' benchmark has cases for by-reference
in-place (estimate 2, measure 12), by-reference out-of-place (1, 11)
and by-value out-of-place (3, 13).  Likewise for FFTW3 vendor FFT, the
'fftw3/fft' benchmark has cases for interleaved out-of-place (estimate
1, measure 11), interleaved in-place (2, 12), split out-of-place (51,
61), and split in-place (52, 62).

There are no VSIPL++ benchmark cases that distinguish between
interleaved and split complex.  However, since the FFTW3 FFT BE
only supports the configured complex format, adding those cases
would not achieved the desired effect.  Instead it is necessary
to characterizes different library configurations.


Next, determine which benchmark cases to run to collect the necessary
data.

>From above, the cases are:

	benchmark	cases
	fft		1, 2, 3, 11, 12, 13
	fftw3/fft	1, 2, 11, 12

These cases are covered by the following standard entries in char.db::

	# FFT single (with number_of_time => estimate mode for FFTW)
	set: fft-est
	  pgm: fft
	  cases: 1 2 3 5 6 7
	  extra: -stop 20

	# FFT single (with number_of_time => measure mode for FFTW)
	set: fft-measure
	  pgm: fft
	  cases: 11 12 13 15 16 17
	  extra: -stop 20

	set: fftw3-fft-core
	  pgm: fftw3/fft
	  cases: 1 11 51 61
	  extra: -stop 18
	  req: fftw3


Next, run 'char.pl' to collect the appropriate data.

To measure performance for both split versus interleaved complex, and
to determine how the latest SVN library compares against the latest
release (1.3.1), measure performance for the following library
configurations::

 - Recent release, configured with interleaved complex
 - Recent release, configured with split complex
 - SVN, configured with interleaved complex
 - SVN, configured with split complex

In the build directory for each configuration, run the 'char.pl' script::

	$srcdir/scripts/char.pl				\
		-db $srcdir/scripts/char.db		\
		-have fftw3				\
		fft-est fft-measure fftw3-fft-core


Next, organize the generated data in preperation for graphing.  Data
from each library configuration should be kept in its own directory
along with a config file that describes the directories contents.  It
is good practice to further organize directories by system processor
type.

For example, the following directory structure organizes data
collected on a 2GHz PowerPC 970FX:

	ppc970fx-2.0/		Top-level processor directory
		1.3.1-split/	Release (1.3.1), split-complex results
		1.3.1-inter/	Release (1.3.1), inter-complex results
		svn-split/	SVN (rev), split-complex results
		svn-inter/	SVN (rev), inter-complex results

Each subdirectory contains a config file.  The following information
is required:

 - The name of the library configuration (such as "1.3.1 split-complex"),
 - The system type ("ppc970fx-2.0").

The following information is optional:

 - The date,
 - The compiler version used,
 - Any additional notes.

The 'ppc970fx-2.0/1.3.1-split' config file looks like::

	name:     1.3.1 split-complex
	system:   ppc970fx-2.0 
	date:     070510
	compiler: GCC 4.1
	notes:    1.3.1 uses FFTW 3.0.1


Next, create entries in a graph-example.db file and run 'graph.pl' for
each of the comparisons.

The following graph entry compares by-reference, in-place,
by-reference out-of-place, and by-value out-of-place:

	graph: fft
	   title: Fft Performance
	   xaxis: Vector size
	   what:  ops-g
	   line:  fft-11-1     Out-of-place Fwd FFT
	   line:  fft-12-1     In-place Fwd FFT
	   line:  fft-13-1     By-value Fwd FFT

To plot this graph with data from the SVN interleaved complex
configuration, run::

	$srcdir/scripts/graph.pl			\
		-db example-graph.db			\
		-dir ppc970fx-2.0/svn-inter		\
	        -suffix "-svn-inter"			\
		-plotdir my-plotdir			\
		fft

The options are as follows:

	-db <file>
		Use <file> for the graph entries.

	-dir <dir>
		Pull config and .dat files from directory <dir>

	-suffix <suffix>
		Append <suffix> to each graph name.  In the above
		example, the actual graph file name will be
		'fft-svn-inter.png'.  This option is useful when
		multiple configurations will be plotted.

	-plotdir <dir>
		Directory to place the resulting plots.

Finally, the 'fft' option indicates the graph to be plotted.  Multiple
graphs can be given.

This command produces a chart named fft-svn-inter.png in the plotdir.
Out-of-place FFT has the best performance (peaking around 9 GFLOP/s).
By-value FFT performance follows closely.  In-place performance is
signifcantly worse, both in cache (which is expected) and out of cache
(unexpected).

It also produces a comma separated value file fft-svn-inter.csv in the
plotdir::

	,Out-of-place Fwd FFT,In-place Fwd FFT,By-value Fwd FFT
	16,1.61295548,1.48593186,1.30935546
	32,3.370972825,2.220508,2.517632675
	64,5.08193208,2.78311935,4.16608338
	...
	1024,9.0049507,7.23804475,8.8900917
	...

This can be used to see exact values (out-of-place hits 9.0049507
GFLOP/s 1024 points).  This CSV file can be fed to other plotting
tools, like Microsoft Excel.

With the graph-example.db file, you can quickly create charts for the
other configurations.  The generate the same fft graph using data
from the the SVN split-complex configuration, just change the -dir
and -suffix options::

	$srcdir/scripts/graph.pl			\
		-db example-graph.db			\
		-dir ppc970fx-2.0/svn-split		\
	        -suffix "-svn-split"			\
		-plotdir my-plotdir			\
		fft


The following db entries graph some of the other performance comparisons
data was collected for.

To compare the impact of estimate (1) versus measure (11) planning modes
for out-of-place FFT::

	graph: fft-op-planning
	   title: OP Fft Planning Impact
	   xaxis: Vector size
	   what:  ops-g
	   line:  fft-1-1      Estimate (Out-of-place Fwd FFT)
	   line:  fft-11-1     Measure (Out-of-place Fwd FFT)

(fft-op-planning-svn-inter.png)


To compare VSIPL++ versus FFTW3 vendor performance, and to compare
split versus interleaved performance for FFTW3::

	graph: fft-op-vendor
	   title: OP Fft Planning Impact
	   xaxis: Vector size
	   what:  ops-g
	   line:  fft-11-1        VSIPL++ (Out-of-place Fwd FFT)
	   line:  fftw3-fft-11-1  Inter FFTW3 (Out-of-place Fwd FFT)
	   line:  fftw3-fft-61-1  Split FFTW3 (Out-of-place Fwd FFT)

(fft-op-vendor-svn-inter.png)

Some comparisons require extracting data from multiple configurations.
For example, to track FFT performance from 1.3 to current SVN.  
are several ways to do this.

One way to do this is to invoke graph.pl with multiple -dir options.

For OP FFT performance you would create the following entry::

	graph: evo-fft-op
	   title: Fft Performance
	   xaxis: Vector size
	   what:  ops-g
	   line:  fft-11-1     Out-of-place Fwd FFT

And then run graph.pl with multiple -dir options::

	$srcdir/scripts/graph.pl			\
		-db example-graph.db			\
		-dir ppc970fx-2.0/1.3.1-inter		\
		-dir ppc970fx-2.0/svn-inter		\
		-plotdir my-plotdir			\
		-suffix "-1.3-vs-svn"			\
		evo-fft-op

(evo-fft-op-1.3-vs-svn.png)

Likewise to compare split vs interleaved VSIPL++ FFT performance: 

	$srcdir/scripts/graph.pl			\
		-db example-graph.db			\
		-dir ppc970fx-2.0/svn-inter		\
		-dir ppc970fx-2.0/svn-split		\
		-plotdir my-plotdir			\
		-suffix "-split-vs-inter"		\
		evo-fft-op

(evo-fft-op-split-vs-inter.png)
