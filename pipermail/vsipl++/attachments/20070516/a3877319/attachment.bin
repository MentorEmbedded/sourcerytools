Index: benchmarks/expr.cpp
===================================================================
--- benchmarks/expr.cpp	(revision 0)
+++ benchmarks/expr.cpp	(revision 0)
@@ -0,0 +1,194 @@
+/* Copyright (c) 2007 by CodeSourcery.  All rights reserved.
+
+   This file is available for license from CodeSourcery, Inc. under the terms
+   of a commercial license and under the GPL.  It is not part of the VSIPL++
+   reference implementation and is not available under the BSD license.
+*/
+/** @file    benchmarks/expr.cpp
+    @author  Assem Salama
+    @date    2007-05-15
+    @brief   VSIPL++ Library: Benchmark for expression templates
+
+*/
+
+/***********************************************************************
+  Included Files
+***********************************************************************/
+
+#include <vsip/initfin.hpp>
+#include <vsip/core/expr/ternary_block.hpp>
+#include <vsip/core/expr/binary_block.hpp>
+#include <vsip/core/expr/scalar_block.hpp>
+#include <vsip/opt/simd/expr_evaluator.hpp>
+#include <vsip/opt/simd/eval_generic.hpp>
+
+#include "loop.hpp"
+
+using namespace vsip;
+using namespace vsip::impl;
+
+template <typename Block>
+Block const&
+create_expr_block(int size);
+
+struct Normal_tag;
+
+template <typename Tag, dimension_type Dim>
+struct Assign_helper
+{
+  template <typename V1, typename V2>
+  static inline void
+  exec(V1& v1, V2 const& v2) 
+  {
+    Serial_expr_evaluator<Dim, typename V1::block_type,
+                               typename V2::block_type, Tag>::
+      exec(v1.block(), v2.block());
+  }
+};
+
+template <dimension_type Dim>
+struct Assign_helper<Normal_tag,Dim>
+{
+  template <typename V1, typename V2>
+  static inline void
+  exec(V1& v1, V2 const& v2) { v1 = v2; }
+};
+
+
+template <typename Block>
+struct Create_expr_block
+{
+  static Block const&
+  exec(int size) { return *(new Block(size)); }
+};
+
+template <dimension_type D, typename T>
+struct Create_expr_block<Scalar_block<D,T> >
+{
+  typedef Scalar_block<D,T> block_type;
+
+  static block_type const&
+  exec(int size)
+  {
+    return *(new block_type(T(0),size));
+  }
+  
+};
+
+template <dimension_type D,
+          template <typename,typename> class O,
+          typename B1,typename T1,
+          typename B2,typename T2>
+struct Create_expr_block<Binary_expr_block<D,O,B1,T1,B2,T2> const>
+{
+  typedef Binary_expr_block<D,O,B1,T1,B2,T2> block_type;
+
+  static block_type const&
+  exec(int size)
+  {
+    return *(new block_type(create_expr_block<B1>(size),
+                            create_expr_block<B2>(size)));
+  }
+};
+
+template <dimension_type D,
+          template <typename,typename,typename> class O,
+          typename B1,typename T1,
+          typename B2,typename T2,
+          typename B3,typename T3>
+struct Create_expr_block<Ternary_expr_block<D,O,B1,T1,B2,T2,B3,T3> const>
+{
+  typedef Ternary_expr_block<D,O,B1,T1,B2,T2,B3,T3> block_type;
+
+  static block_type const&
+  exec(int size)
+  {
+    return *(new block_type(create_expr_block<B1>(size),
+                            create_expr_block<B2>(size),
+                            create_expr_block<B3>(size)));
+  }
+};
+
+template <typename Block>
+Block const&
+create_expr_block(int size) { return Create_expr_block<Block>::exec(size); }
+
+
+template <typename Tag, typename SrcView, typename DstView, typename T>
+struct t_expr
+{
+  typedef typename SrcView::block_type          block_type;
+
+  t_expr(SrcView const& src) : src_(src.block()) {}
+
+  char* what() { return "t_expr"; }
+  int ops_per_point(length_type)  { return 1; }
+  int riob_per_point(length_type) { return sizeof(T); }
+  int wiob_per_point(length_type) { return 0; }
+  int mem_per_point(length_type)  { return 1*sizeof(T); }
+
+  void operator()(length_type size, length_type loop, float& time)
+  {
+    block_type new_blk = create_expr_block<block_type>(size);
+    DstView dst_view(size);
+    SrcView src_view(new_blk);
+
+    vsip::impl::profile::Timer t1;
+
+    t1.start();
+    for(index_type i=0;i<loop;i++)
+      Assign_helper<Tag,SrcView::dim>::exec(dst_view,src_view);
+    t1.stop();
+
+    time = t1.delta();
+
+  }
+
+  void diag()
+  {
+  }
+
+  block_type const& src_;
+
+};
+
+template <typename Tag,
+          typename SrcView,
+	  typename DstView>
+t_expr<Tag,SrcView,DstView,typename SrcView::value_type>&
+create_t_expr(DstView &dst, SrcView const& view)
+{
+  return *(new t_expr<Tag,SrcView,DstView,typename SrcView::value_type>(view));
+}
+
+void
+defaults(Loop1P&)
+{
+}
+
+
+int
+test(Loop1P& loop, int what)
+{
+  length_type size=16;
+
+  Vector<float> A(size);
+  Vector<float> B(size);
+  Vector<float> Z(size);
+  float k = 0.0;
+
+  switch (what)
+  {
+  case  1: loop(create_t_expr<Normal_tag>          (Z,A*B)); break;
+  case  2: loop(create_t_expr<Simd_builtin_tag>    (Z,A*B)); break;
+  case  3: loop(create_t_expr<Simd_loop_fusion_tag>(Z,A*B)); break;
+  case  4: loop(create_t_expr<Normal_tag>          (Z,ite(A > B, A, k)));break;
+  case  5: loop(create_t_expr<Simd_builtin_tag>    (Z,ite(A > B, A, k)));break;
+  case  6: loop(create_t_expr<Simd_loop_fusion_tag>(Z,ite(A > B, A, k)));break;
+  case  7: loop(create_t_expr<Normal_tag>          (Z,ite(A < B, A, k)));break;
+  case  8: loop(create_t_expr<Simd_builtin_tag>    (Z,ite(A < B, A, k)));break;
+  case  9: loop(create_t_expr<Simd_loop_fusion_tag>(Z,ite(A < B, A, k)));break;
+  default: return 0;
+  }
+  return 1;
+}
