Index: ChangeLog
===================================================================
--- ChangeLog	(revision 150667)
+++ ChangeLog	(working copy)
@@ -1,3 +1,17 @@
+2006-10-04  Stefan Seefeld  <stefan@codesourcery.com>
+
+	* configure.ac: Add --enable-scripting, --with-python, and 
+	--with-boost-prefix flags.
+	* GNUmakefile.in: Fix the use of CXXFLAGS, LDFLAGS, and LIBS,
+	and add the optional subdirectory 'scripting'.
+	* scripting/GNUmakefile.inc.in: New file.
+	* scripting/types.hpp: New file.
+	* scripting/_base.cpp: New file.
+	* scripting/math.cpp: New file.
+	* scripting/signal.cpp: New file.
+	* scripting/png.cpp: New file.
+	* scripting/__init__.py: New file.
+
 2006-10-03  Stefan Seefeld  <stefan@codesourcery.com>
 
 	* configure.ac: Add support for --with-lib-ext.
Index: GNUmakefile.in
===================================================================
--- GNUmakefile.in	(revision 150667)
+++ GNUmakefile.in	(working copy)
@@ -34,6 +34,8 @@
 # perform actions needed by maintainers.
 maintainer_mode := @maintainer_mode@
 
+enable_scripting := @enable_scripting@
+
 ### Installation ###
 
 PACKAGE_TARNAME := @PACKAGE_TARNAME@
@@ -83,6 +85,8 @@
 CXX := @CXX@
 # The dependency generator.
 CXXDEP := @CXXDEP@
+# The DSO linker.
+LDSHARED:= @LDSHARED@
 # C++ include directories.
 CXXINCLUDES := -I src -I $(srcdir)/src
 # C++ macro definitions.
@@ -101,6 +105,10 @@
 OBJEXT := @OBJEXT@
 # The extension for archives.
 LIBEXT := @LIBEXT@
+# The Python interpreter.
+PYTHON	:= @PYTHON@
+# The extension for python extension modules.
+PYTHON_EXT := @PYTHON_EXT@
 # The QMTest command to use for testing.
 QMTEST := @QMTEST@
 
@@ -175,13 +183,18 @@
 
 define link_dso
 @echo linking $@
-$(CXX) /nologo /LD -o $@ $^ $(LIBS)
+$(CXX) /nologo /LD -o $@ $^ \
+  $(subst -L,/libpath:, $(call dir_var,$(dir $<),LDFLAGS))) \
+  $(patsubst -l%,lib%.lib, $(subst -L,/libpath:, \
+    $(call dir_var,$(dir $<),LIBS) $(LIBS)))
 endef
 
 define link_app
 @echo linking $@
 xilink /nologo /out:$@ $< /libpath:lib lib$(SVPP_LIBRARY).lib \
-  $(patsubst -l%,lib%.lib, $(subst -L,/libpath:, $(LIBS)))
+  $(subst -L,/libpath:, $(call dir_var,$(dir $<),LDFLAGS))) \
+  $(patsubst -l%,lib%.lib, \
+    $(subst -L,/libpath:, $(call dir_var,$(dir $<),LIBS) $(LIBS)))
 endef
 
 else # not intel-win
@@ -205,12 +218,15 @@
 
 define link_dso
 @echo linking $@
-$(LDSHARED) $(LDFLAGS) -o $@ $^ $(LIBS)
+$(LDSHARED) $(LDFLAGS) $(call dir_var,$(dir $<),LDFLAGS) -o $@ $^ \
+  $(call dir_var,$(dir $<),LIBS) $(LIBS)
+  strip --strip-unneeded $@
 endef
 
 define link_app
 @echo linking $@
-$(CXX) $(LDFLAGS) -o $@ $< -Llib -l$(SVPP_LIBRARY) $(LIBS)
+$(CXX) $(LDFLAGS) $(call dir_var,$(dir $<),LDFLAGS) -o $@ $< \
+  -Llib -l$(SVPP_LIBRARY) $(call dir_var,$(dir $<),LIBS) $(LIBS)
 endef
 
 endif
@@ -250,6 +266,10 @@
 	tests \
 	examples
 
+ifeq ($(enable_scripting),1)
+subdirs += scripting
+endif
+
 ########################################################################
 # Internal Variables
 ########################################################################
Index: scripting/GNUmakefile.inc.in
===================================================================
--- scripting/GNUmakefile.inc.in	(revision 0)
+++ scripting/GNUmakefile.inc.in	(revision 150668)
@@ -0,0 +1,33 @@
+########################################################################
+#
+# File:   GNUmakefile.inc.in
+# Author: Stefan Seefeld
+# Date:   2006-09-20
+#
+# Contents: Makefile for VSIPL++ Python bindings
+#
+########################################################################
+
+scripting_CXXFLAGS := @BOOST_CPPFLAGS@ @PYTHON_CPP@
+scripting_LDFLAGS := @BOOST_LDFLAGS@
+scripting_LIBS := -Llib -lvsip_csl -lsvpp -lboost_python @PYTHON_LIBS@
+scripting_dir := lib/python/site-packages
+
+scripting_modules := _base math signal png
+scripting_sources := $(patsubst %, $(srcdir)/scripting/%.cpp, $(scripting_modules))
+scripting_targets := $(patsubst %, $(scripting_dir)/vsip/%$(PYTHON_EXT), \
+                       $(scripting_modules))
+cxx_sources += $(scripting_sources)
+
+vpath %.cpp $(srcdir)/scripting
+vpath %.py $(srcdir)/scripting
+
+all:: $(scripting_dir)/vsip/__init__.py $(scripting_targets)
+
+$(scripting_dir)/vsip/%$(PYTHON_EXT): scripting/%.$(OBJEXT)
+	$(link_dso)
+
+$(scripting_dir)/vsip/__init__.py: __init__.py
+	@echo copying $(@F)
+	cp $< $@
+
Index: scripting/png.cpp
===================================================================
--- scripting/png.cpp	(revision 0)
+++ scripting/png.cpp	(revision 150668)
@@ -0,0 +1,60 @@
+/* Copyright (c) 2006 by CodeSourcery, Inc.  All rights reserved. */
+
+/** @file    scripting/png.cpp
+    @author  Stefan Seefeld
+    @date    2006-09-20
+    @brief   VSIPL++ Library: Python bindings.
+
+*/
+#include <boost/python.hpp>
+#include <vsip_csl/png.hpp>
+#include <vsip/vector.hpp>
+#include <vsip/matrix.hpp>
+#include <fstream>
+#include <stdexcept>
+
+namespace bpl = boost::python;
+
+namespace
+{
+struct Pixel 
+{
+  Pixel(char rr, char gg, char bb, char aa) : r(rr), g(gg), b(bb), a(aa) {}
+  char r, g, b, a;
+};
+
+
+void encode_png(std::string const &filename, vsip::Matrix<float> image)
+{
+  vsip_csl::png::info info;
+  info.colortype = vsip_csl::png::rgba;
+  info.depth = 8;
+  info.width = image.size(0);
+  info.height = image.size(1);
+
+  std::ofstream ofs(filename.c_str());
+  vsip_csl::png::encoder encoder(ofs.rdbuf(), info);
+  encoder.encode(reinterpret_cast<unsigned char *>(image.block().impl_data()),
+		 sizeof(Pixel) * info.height * info.rowbytes);
+}
+
+vsip::Matrix<float> decode_png(std::string const &filename)
+{
+  vsip_csl::png::info info;
+  std::ifstream ifs(filename.c_str());
+  vsip_csl::png::decoder decoder(ifs.rdbuf(), info);
+  // Make sure the image uses 32-bit RGBA pixels.
+  if (info.colortype != vsip_csl::png::rgba || info.depth != 8)
+    throw std::invalid_argument("Pixel format not supported.");
+  vsip::Matrix<float> image(info.width, info.height);
+  decoder.decode(reinterpret_cast<unsigned char *>(image.block().impl_data()),
+		 sizeof(Pixel) * info.height * info.width);
+  return image;
+}
+}
+
+BOOST_PYTHON_MODULE(png)
+{
+  bpl::def("encode", encode_png);
+  bpl::def("decode", decode_png);
+}
Index: scripting/__init__.py
===================================================================
--- scripting/__init__.py	(revision 0)
+++ scripting/__init__.py	(revision 150668)
@@ -0,0 +1 @@
+from _base import *
Index: scripting/types.hpp
===================================================================
--- scripting/types.hpp	(revision 0)
+++ scripting/types.hpp	(revision 150668)
@@ -0,0 +1,19 @@
+/* Copyright (c) 2006 by CodeSourcery, Inc.  All rights reserved. */
+
+/** @file    scripting/types.hpp
+    @author  Stefan Seefeld
+    @date    2006-09-20
+    @brief   VSIPL++ Library: Common types for all Python bindings.
+
+*/
+#include <vsip/vector.hpp>
+#include <vsip/matrix.hpp>
+
+typedef std::complex<double> dcomplex;
+
+typedef vsip::Vector<double> Vector;
+typedef vsip::Vector<dcomplex> CVector;
+
+typedef vsip::Matrix<double> Matrix;
+typedef vsip::Matrix<dcomplex> CMatrix;
+
Index: scripting/math.cpp
===================================================================
--- scripting/math.cpp	(revision 0)
+++ scripting/math.cpp	(revision 150668)
@@ -0,0 +1,34 @@
+/* Copyright (c) 2006 by CodeSourcery, Inc.  All rights reserved. */
+
+/** @file    scripting/math.cpp
+    @author  Stefan Seefeld
+    @date    2006-09-20
+    @brief   VSIPL++ Library: Python bindings for math module.
+
+*/
+#include <boost/python.hpp>
+#include <boost/noncopyable.hpp>
+#include <vsip/math.hpp>
+#include <vsip/vector.hpp>
+#include <vsip/matrix.hpp>
+#include "types.hpp"
+
+namespace bpl = boost::python;
+
+namespace
+{
+template <typename T> T cos(T a) { return vsip::cos(a);}
+template <typename T> T mag(T a) { return vsip::mag(a);}
+}
+
+#define DEF_UNARY_FUNCTION(name, func)\
+  bpl::def(name, func<double>);       \
+  bpl::def(name, func<Vector>);       \
+  bpl::def(name, func<Matrix>);
+
+
+BOOST_PYTHON_MODULE(math)
+{
+  DEF_UNARY_FUNCTION("cos", cos)
+  DEF_UNARY_FUNCTION("mag", mag)
+}
Index: scripting/_base.cpp
===================================================================
--- scripting/_base.cpp	(revision 0)
+++ scripting/_base.cpp	(revision 150668)
@@ -0,0 +1,77 @@
+/* Copyright (c) 2006 by CodeSourcery, Inc.  All rights reserved. */
+
+/** @file    scripting/_base.cpp
+    @author  Stefan Seefeld
+    @date    2006-09-20
+    @brief   VSIPL++ Library: Python bindings for common functionality.
+
+*/
+#include <boost/python.hpp>
+#include <boost/noncopyable.hpp>
+#include <vsip/initfin.hpp>
+#include <vsip/support.hpp>
+#include "types.hpp"
+#include <stdexcept>
+
+namespace bpl = boost::python;
+
+namespace
+{
+std::auto_ptr<Vector> construct_vector(bpl::list l)
+{
+  long len = bpl::extract<long>(l.attr("__len__")());
+  std::auto_ptr<Vector> vector(new Vector(len));
+  for (long i = 0; i != len; ++i) vector->put(i, bpl::extract<double>(l[i]));
+  return vector;
+}
+
+void assign_to_vector(Vector &vector, bpl::list l)
+{
+  long len = bpl::extract<long>(l.attr("__len__")());
+  if (vector.size() != len)
+    throw std::runtime_error("Attempting to assign vectors of incompatible sizes.");
+  for (long i = 0; i != len; ++i) vector.put(i, bpl::extract<double>(l[i]));
+}
+}
+
+BOOST_PYTHON_MODULE(_base)
+{
+  // Disambiguate from overload set.
+  double (Vector::*v_get)(vsip::index_type) const = &Vector::get;
+  vsip::length_type (Matrix::*m_size)(vsip::dimension_type) const 
+    = &Matrix::size;
+  double (Matrix::*m_get)(vsip::index_type, vsip::index_type) const 
+    = &Matrix::get;
+
+  dcomplex (CVector::*cv_get)(vsip::index_type) const = &CVector::get;
+  vsip::length_type (CMatrix::*cm_size)(vsip::dimension_type) const
+    = &CMatrix::size;
+  dcomplex (CMatrix::*cm_get)(vsip::index_type, vsip::index_type) const
+    = &CMatrix::get;
+
+  bpl::class_<vsip::vsipl, boost::noncopyable> vsipl("_library");
+
+  bpl::class_<Vector> vector("vector", bpl::init<vsip::length_type>());
+  vector.def("__init__", bpl::make_constructor(construct_vector));
+  vector.def("assign", assign_to_vector);
+  vector.def("length", &Vector::length);
+  vector.def("get", v_get);
+  vector.def("put", &Vector::put);
+
+  bpl::class_<CVector> cvector("cvector", bpl::init<vsip::length_type>());
+  cvector.def("length", &CVector::length);
+  cvector.def("get", cv_get);
+  cvector.def("put", &CVector::put);
+
+  bpl::class_<Matrix> matrix("matrix",
+                             bpl::init<vsip::length_type, vsip::length_type>());
+  matrix.def("size", m_size);
+  matrix.def("get", m_get);
+  matrix.def("put", &Matrix::put);
+
+  bpl::class_<CMatrix> cmatrix("cmatrix",
+                               bpl::init<vsip::length_type, vsip::length_type>());
+  cmatrix.def("size", cm_size);
+  cmatrix.def("get", cm_get);
+  cmatrix.def("put", &CMatrix::put);
+}
Index: scripting/signal.cpp
===================================================================
--- scripting/signal.cpp	(revision 0)
+++ scripting/signal.cpp	(revision 150668)
@@ -0,0 +1,52 @@
+/* Copyright (c) 2006 by CodeSourcery, Inc.  All rights reserved. */
+
+/** @file    scripting/signal.cpp
+    @author  Stefan Seefeld
+    @date    2006-09-20
+    @brief   VSIPL++ Library: Python bindings for signal module.
+
+*/
+#include <boost/python.hpp>
+#include <boost/noncopyable.hpp>
+#include <vsip/signal.hpp>
+#include "types.hpp"
+
+namespace bpl = boost::python;
+
+namespace
+{
+typedef vsip::Fft<vsip::Vector, double, dcomplex, 0, vsip::by_reference> Fft;
+typedef vsip::Fft<vsip::Vector, dcomplex, dcomplex, 0, vsip::by_reference> CFft;
+typedef vsip::Convolution<vsip::Vector,
+                          vsip::nonsym, vsip::support_full, double>
+  Convolution;
+typedef vsip::Convolution<vsip::Vector,
+                          vsip::nonsym, vsip::support_full, dcomplex>
+  CConvolution;
+
+CVector fft_by_ref(Fft &fft, Vector input)
+{
+  CVector output(fft.output_size().length());
+  fft.operator()(input, output);
+  return output;
+}
+
+Vector convolute(Convolution &conv, Vector input)
+{
+  Vector output(conv.output_size().size());
+  conv.operator()(input, output);
+  return output;
+}
+
+}
+
+BOOST_PYTHON_MODULE(signal)
+{
+  bpl::class_<Fft, boost::noncopyable>
+    fft_fwd("fft_fwd", bpl::init<vsip::length_type, double>());
+  fft_fwd.def("__call__", fft_by_ref);
+
+  bpl::class_<Convolution, boost::noncopyable>
+    conv("convolution", bpl::init<Vector, long>());
+  conv.def("__call__", convolute);
+}
Index: configure.ac
===================================================================
--- configure.ac	(revision 150667)
+++ configure.ac	(working copy)
@@ -333,6 +333,28 @@
 
 AC_SUBST(QMTEST, $with_qmtest)
  
+AC_ARG_ENABLE(scripting,
+  [  --enable-scripting         Specify whether or not to build the python bindings.],,
+  [enable_scripting="no"])
+
+AC_ARG_WITH(python, 
+  [  --with-python=PATH      Specify the Python interpreter.],
+  PYTHON="$with_python",
+  PYTHON="python"
+)
+
+AC_ARG_WITH(boost-prefix,
+  [  --with-boost-prefix=PATH      Specify the boost installation prefix.],
+  BOOST_PREFIX="$with_boost_prefix",
+  BOOST_PREFIX="/usr"
+)
+
+AC_ARG_WITH(boost-version,
+  [  --with-boost-version=VERSION      Specify the boost version.],
+  BOOST_VERSION="$with_boost_version",
+  BOOST_VERSION="1.33"
+)
+
 #
 # Put libs directory int INT_LDFLAGS:
 #
@@ -1329,7 +1351,6 @@
 # Copy libg2c into libdir, if requested.
 #
 if test "x$with_g2c_copy" != "x"; then
-  mkdir -p lib
   cp $with_g2c_copy lib
   curdir=`pwd`
   G2C_LDFLAGS="-L$curdir/lib"
@@ -2009,6 +2030,76 @@
 AC_SUBST(INT_CPPFLAGS)
 
 #
+# Python frontend
+#
+echo "PYTHON $PYTHON"
+if test -n "$PYTHON" -a "$PYTHON" != yes; then
+dnl  AC_CHECK_FILE($PYTHON,,AC_MSG_ERROR([Cannot find Python interpreter]))
+dnl else
+  AC_PATH_PROG(PYTHON, python2 python, python)
+fi
+PYTHON_INCLUDE=`$PYTHON -c "from distutils import sysconfig; print sysconfig.get_python_inc()"`
+PYTHON_EXT=`$PYTHON -c "from distutils import sysconfig; print sysconfig.get_config_var('SO')"`
+
+case $build in
+CYGWIN*)
+  if test `$PYTHON -c "import os; print os.name"` = posix; then
+    PYTHON_PREFIX=`$PYTHON -c "import sys; print sys.prefix"`
+    PYTHON_VERSION=`$PYTHON -c "import sys; print '%d.%d'%(sys.version_info[[0]],sys.version_info[[1]])"`
+    PYTHON_LIBS="-L $PYTHON_PREFIX/lib/python$PYTHON_VERSION/config -lpython$PYTHON_VERSION"
+dnl Cygwin doesn't have an -lutil, but some versions of distutils tell us to use it anyway.
+dnl It would be better to check for each library it tells us to use with AC_CHECK_LIB, but
+dnl to do that, we need the name of a function in each one, so we'll just hack -lutil out 
+dnl of the list.
+    PYTHON_DEP_LIBS=`$PYTHON -c "from distutils import sysconfig; import re; print re.sub(r'\\s*-lutil', '', sysconfig.get_config_var('LIBS') or '')"`
+  else dnl this is 'nt'
+    if test "$CXX" = "g++"; then
+      CFLAGS="-mno-cygwin $CFLAGS"
+      CXXFLAGS="-mno-cygwin $CXXFLAGS"
+      LDFLAGS="-mno-cygwin $LDFLAGS"
+      PYTHON_PREFIX=`$PYTHON -c "import sys; print sys.prefix"`
+      PYTHON_VERSION=`$PYTHON -c "import sys; print '%d%d'%(sys.version_info[[0]],sys.version_info[[1]])"`
+      PYTHON_LIBS="-L `cygpath -a $PYTHON_PREFIX`/Libs -lpython$PYTHON_VERSION"
+    fi
+    PYTHON_INCLUDE=`cygpath -a $PYTHON_INCLUDE`
+    PYTHON_DEP_LIBS=`$PYTHON -c "from distutils import sysconfig; print sysconfig.get_config_var('LIBS') or ''"`
+  fi
+  LDSHARED="$CXX -shared"
+  PYTHON_LIBS="$PYTHON_LIBS $PYTHON_DEP_LIBS"
+  ;;
+*)
+  LDSHARED="$CXX -shared"
+  ;;
+esac
+
+PYTHON_LIBS="$PYTHON_LIBS $PYTHON_DEP_LIBS"
+
+AC_SUBST(PYTHON)
+AC_SUBST(PYTHON_CPP, "-I $PYTHON_INCLUDE")
+AC_SUBST(PYTHON_LIBS)
+AC_SUBST(PYTHON_EXT)
+
+AC_SUBST(LDSHARED)
+
+AC_LANG(C++)
+if test "$enable_scripting" == "yes"; then
+  AC_SUBST(enable_scripting, 1)
+  if test -n "$with_boost_prefix"; then
+    BOOST_CPPFLAGS="-I$with_boost_prefix/include"
+    BOOST_LDFLAGS="-L$with_boost_prefix/lib"
+  fi
+  save_CPPFLAGS=$CPPFLAGS
+  CPPFLAGS="$CPPFLAGS $BOOST_CPPFLAGS $PYTHON_CPP"
+  AC_CHECK_HEADER([boost/python.hpp], [], 
+    [AC_MSG_ERROR([boost.python could not be found])])
+  CPPFLAGS="$save_CPPFLAGS"
+dnl save_LIBS=$LIBS
+dnl LIBS="$LIBS $BOOST_LDFLAGS -lboost_wave"
+dnl AC_CHECK_LIB(boost_wave, boost::wave::wave_init)
+  AC_SUBST(BOOST_CPPFLAGS)
+  AC_SUBST(BOOST_LDFLAGS)
+fi
+#
 # Print summary.
 #
 AC_MSG_NOTICE(Summary)
@@ -2032,10 +2123,14 @@
   AC_MSG_RESULT([Complex storage format:                  interleaved])
 fi
 AC_MSG_RESULT([Timer:                                   ${enable_timer}])
+AC_MSG_RESULT([With Python bindings:                    ${enable_scripting}])
 
 #
 # Done.
 #
+mkdir -p bin
+mkdir -p lib
+mkdir -p lib/python/site-packages/vsip
 mkdir -p src/vsip/impl/sal
 mkdir -p src/vsip/impl/ipp
 mkdir -p src/vsip/impl/fftw3
