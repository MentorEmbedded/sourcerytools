Index: src/vsip/core/expr/generator_block.hpp
===================================================================
--- src/vsip/core/expr/generator_block.hpp	(revision 165174)
+++ src/vsip/core/expr/generator_block.hpp	(working copy)
@@ -89,8 +89,79 @@
   map_type    map_;
 };
 
+template <dimension_type Dim>
+Index<Dim>
+convert_index(Index<Dim> idx, Domain<Dim> const& dom)
+{
+  Index<Dim> res_idx;
+  index_type i;
+  for(i=0;i<Dim;i++) {
+    res_idx[i] = dom.first() + idx[i]*dom.stride();
+  }
+  return res_idx;
+}
 
+template <dimension_type Dim,
+	  typename       Generator>
+class Subset_block<Generator_expr_block<Dim, Generator> const>
+  : public Non_assignable
+{
+  // Compile-time values and typedefs.
+public:
+  static dimension_type const dim = Dim;
+  typedef typename Generator::result_type value_type;
 
+  typedef value_type&         reference_type;
+  typedef value_type const&   const_reference_type;
+  typedef Local_map           map_type;
+
+
+  // Constructors.
+public:
+  Subset_block(Domain<Dim> const& dom,
+               Generator_expr_block<Dim, Generator> const& blk) 
+    : blk_(blk),map_(blk.map()),dom_(dom) { }
+
+
+  // Accessors.
+public:
+  length_type size() const VSIP_NOTHROW
+  { return dom_.size(); }
+
+  length_type size(dimension_type block_dim, dimension_type d)
+    const VSIP_NOTHROW
+  { assert(block_dim == Dim); return dom_[d].size(); }
+
+  void increment_count() const VSIP_NOTHROW {}
+  void decrement_count() const VSIP_NOTHROW {}
+  map_type const& map() const VSIP_NOTHROW { return map_;}
+
+  value_type get(index_type i) const
+  {
+    Index<1> idx = convert_index(Index<1>(i), dom_);
+    return blk_.get(idx[0]);
+  };
+  value_type get(index_type i, index_type j) const
+  {
+    Index<2> idx = convert_index(Index<2>(i,j), dom_);
+    return blk_.get(idx[0], idx[1]);
+  };
+  value_type get(index_type i, index_type j, index_type k) const
+  {
+    Index<3> idx = convert_index(Index<3>(i,j,k), dom_);
+    return blk_.get(idx[0], idx[1], idx[2]);
+  };
+
+  // copy-constructor: default is OK.
+
+  // Member data.
+private:
+  Generator_expr_block<Dim,Generator> blk_;
+  map_type                            map_;
+  Domain<Dim>                         dom_;
+};
+
+
 /// Specialize Is_expr_block for generator expr blocks.
 
 template <dimension_type Dim,
@@ -158,7 +229,15 @@
 }
 
 
+template <dimension_type Dim, typename Generator>
+struct Choose_peb<Generator_expr_block<Dim, Generator> const>
+{ typedef Peb_remap_tag type; };
 
+template <dimension_type Dim, typename Generator>
+struct Choose_peb<Generator_expr_block<Dim, Generator> >
+{ typedef Peb_remap_tag type; };
+
+
 template <typename       CombineT,
 	  dimension_type Dim,
 	  typename       Generator>
@@ -166,7 +245,7 @@
 			   Generator_expr_block<Dim, Generator> const>
 {
 #if 1
-  typedef Generator_expr_block<Dim, Generator> const block_type;
+  typedef Generator_expr_block<Dim, Generator> block_type;
   typedef typename CombineT::template return_type<block_type>::type
 		type;
   typedef typename CombineT::template tree_type<block_type>::type
@@ -208,7 +287,7 @@
   Generator_expr_block<Dim, Generator> const& block)
 {
 #if 1
-  return combine.apply_const(block);
+  return combine.apply(block);
 #else
   typedef typename Combine_return_type<
     CombineT,
Index: src/vsip/core/parallel/expr.hpp
===================================================================
--- src/vsip/core/parallel/expr.hpp	(revision 165174)
+++ src/vsip/core/parallel/expr.hpp	(working copy)
@@ -177,8 +177,67 @@
   typename View_block_storage<BlockT>::expr_type blk_;
 };
 
+template <dimension_type Dim,
+	  typename       MapT,
+	  typename       BlockT>
+class Par_expr_block<Dim, MapT, BlockT, Peb_remap_tag> : Non_copyable
+{
+public:
+  static dimension_type const dim = Dim;
 
+  typedef typename BlockT::value_type           value_type;
+  typedef typename BlockT::reference_type       reference_type;
+  typedef typename BlockT::const_reference_type const_reference_type;
+  typedef MapT                                  map_type;
 
+
+  typedef Subset_block<BlockT const>                local_block_type;
+  typedef Distributed_block<BlockT, MapT> dst_block_type;
+
+  typedef typename View_of_dim<Dim, value_type, dst_block_type>::type
+		dst_view_type;
+  typedef typename View_of_dim<Dim, value_type, BlockT>::const_type
+		src_view_type;
+
+
+public:
+  Par_expr_block(MapT const& map, BlockT const& block)
+    : map_ (map),
+      blk_ (const_cast<BlockT&>(block))
+  {}
+
+  ~Par_expr_block() {}
+
+  void exec() {}
+
+  // Accessors.
+public:
+  length_type size() const VSIP_NOTHROW { return blk_.size(); }
+  length_type size(dimension_type blk_dim, dimension_type d) const VSIP_NOTHROW
+  { return blk_.size(blk_dim, d); }
+
+  void increment_count() const VSIP_NOTHROW {}
+  void decrement_count() const VSIP_NOTHROW {}
+
+  // Distributed Accessors
+public:
+  local_block_type get_local_block() const
+    {
+      Domain<Dim> my_local_domain =
+        map_.template impl_global_domain<Dim>(map_.subblock(), 0);
+
+      Subset_block<BlockT const> subblock(my_local_domain,blk_);
+      return subblock;
+    }
+
+
+  // Member data.
+private:
+  MapT const&     map_;
+  BlockT const& blk_;
+};
+
+
 /// 'Combine' functor to construct an expression of Par_expr_blocks from an
 /// expression of distributed blockes.
 
@@ -441,7 +500,7 @@
 	  typename       MapT,
 	  typename       BlockT,
 	  typename       ImplTag>
-typename Par_expr_block<Dim, MapT, BlockT, ImplTag>::local_block_type&
+typename Par_expr_block<Dim, MapT, BlockT, ImplTag>::local_block_type
 get_local_block(
   Par_expr_block<Dim, MapT, BlockT, ImplTag> const& block)
 {
Index: ChangeLog
===================================================================
--- ChangeLog	(revision 167770)
+++ ChangeLog	(working copy)
@@ -1,3 +1,13 @@
+2007-04-02  Assem Salama <assem@codesourcery.com>
+	* src/vsip/core/expr/generator_block.hpp: Added a new specialization of Subset_block
+	  for Generator_expr_block. Also made Choose_peb of Generator_expr_block a
+	  Peb_remap_tag. Changed apply function to call apply instead of apply_const.
+	  Removed const from type of 
+	  Combine_return_type<CombineT, Generator_expr_block<Dim,Generator> const>.
+	* src/vsip/core/parallel/expr.hpp: Added a new implementation of Par_expr_block that
+	  uses the Peb_remap_tag. Also changed return of get_local_block to local_block_type
+	  instead of local_block_type&.
+
 2007-03-28  Don McCoy  <don@codesourcery.com>
 
 	* src/vsip/opt/cbe/ppu/fft.cpp: Use new parameters header.
