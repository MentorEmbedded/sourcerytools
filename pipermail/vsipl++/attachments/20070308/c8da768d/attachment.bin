Index: ChangeLog
===================================================================
--- ChangeLog	(revision 165209)
+++ ChangeLog	(working copy)
@@ -1,3 +1,8 @@
+2007-03-08  Stefan Seefeld  <stefan@codesourcery.com>
+
+	* configure.ac: Add checks for bool and int C-VSIPL views.
+	* src/vsip/core/cvsip/view.hpp: Conditionalize View_traits better.
+
 2007-03-07  Stefan Seefeld  <stefan@codesourcery.com>
 
 	* tests/fft_be.cpp: Add missing vsipl library initializer.
Index: src/vsip/core/cvsip/view.hpp
===================================================================
--- src/vsip/core/cvsip/view.hpp	(revision 165209)
+++ src/vsip/core/cvsip/view.hpp	(working copy)
@@ -40,6 +40,8 @@
 //     below commented out with a '[1]' label are not implemented
 //     in TVCPP.
 
+#if VSIP_IMPL_CVSIP_HAVE_BOOL
+
 template <dimension_type D, typename T> struct View_traits;
 
 template <>
@@ -82,6 +84,51 @@
 };
 
 template <>
+struct View_traits<2, bool>
+{
+  typedef bool value_type;
+  typedef vsip_block_bl block_type;
+  typedef vsip_mview_bl view_type;
+
+  static view_type* create(vsip_length r, vsip_length c, bool row_major)
+  {
+    view_type* v = vsip_mcreate_bl(r, c, row_major ? VSIP_ROW : VSIP_COL,
+                                  VSIP_MEM_NONE);
+    if (!v) VSIP_THROW(std::bad_alloc());
+    return v;
+  }
+  static view_type* bind(block_type const* b, vsip_offset o,
+                         vsip_stride s_r, vsip_length rows,
+                         vsip_stride s_c, vsip_length cols)
+  {
+    view_type* v = vsip_mbind_bl(b, o, s_r, rows, s_c, cols);
+    if (!v) VSIP_THROW(std::bad_alloc());
+    return v;
+  }
+  static view_type* clone(view_type* v)
+  {
+    view_type* c = vsip_mcloneview_bl(v);
+    if (!c) VSIP_THROW(std::bad_alloc());
+    return c;
+  }
+  static void destroy(view_type* v) { vsip_malldestroy_bl(v);}
+  static void copy(view_type* s, view_type* d) { vsip_mcopy_bl_bl(s, d);}
+  static block_type* block(view_type* v) { return vsip_mgetblock_bl(v);}
+  static vsip_offset offset(view_type* v) { return vsip_mgetoffset_bl(v);}
+  static vsip_stride row_stride(view_type* v) { return vsip_mgetrowstride_bl(v);}
+  static vsip_length row_length(view_type* v) { return vsip_mgetrowlength_bl(v);}
+  static vsip_stride col_stride(view_type* v) { return vsip_mgetcolstride_bl(v);}
+  static vsip_length col_length(view_type* v) { return vsip_mgetcollength_bl(v);}
+  static bool get(view_type* v, index_type r, index_type c)
+    { return (bool)vsip_mget_bl(v, r, c); }
+  static void put(view_type* v, index_type r, index_type c, bool value)
+    { vsip_mput_bl(v, r, c, (vsip_scalar_bl)value); }
+};
+
+#endif
+#if VSIP_IMPL_CVSIP_HAVE_INT
+
+template <>
 struct View_traits<1, int>
 {
   typedef int value_type;
@@ -115,6 +162,45 @@
   static vsip_length length(view_type* v) { return vsip_vgetlength_i(v);}
 };
 
+template <>
+struct View_traits<2, int>
+{
+  typedef int value_type;
+  typedef vsip_block_i block_type;
+  typedef vsip_mview_i view_type;
+
+  static view_type* create(vsip_length r, vsip_length c, bool row_major)
+  {
+    view_type* v = vsip_mcreate_i(r, c, row_major ? VSIP_ROW : VSIP_COL,
+                                  VSIP_MEM_NONE);
+    if (!v) VSIP_THROW(std::bad_alloc());
+    return v;
+  }
+  static view_type* bind(block_type const* b, vsip_offset o,
+                         vsip_stride s_r, vsip_length rows,
+                         vsip_stride s_c, vsip_length cols)
+  {
+    view_type* v = vsip_mbind_i(b, o, s_r, rows, s_c, cols);
+    if (!v) VSIP_THROW(std::bad_alloc());
+    return v;
+  }
+  static view_type* clone(view_type* v)
+  {
+    view_type* c = vsip_mcloneview_i(v);
+    if (!c) VSIP_THROW(std::bad_alloc());
+    return c;
+  }
+  static void destroy(view_type* v) { vsip_malldestroy_i(v);}
+  // [1] static void copy(view_type* s, view_type* d) { vsip_mcopy_i_i(s, d);}
+  static block_type* block(view_type* v) { return vsip_mgetblock_i(v);}
+  static vsip_offset offset(view_type* v) { return vsip_mgetoffset_i(v);}
+  static vsip_stride row_stride(view_type* v) { return vsip_mgetrowstride_i(v);}
+  static vsip_length row_length(view_type* v) { return vsip_mgetrowlength_i(v);}
+  static vsip_stride col_stride(view_type* v) { return vsip_mgetcolstride_i(v);}
+  static vsip_length col_length(view_type* v) { return vsip_mgetcollength_i(v);}
+};
+
+#endif
 #if VSIP_IMPL_CVSIP_HAVE_FLOAT
 
 template <>
@@ -190,6 +276,81 @@
   static vsip_length length(view_type *v) { return vsip_cvgetlength_f(v);}
 };
 
+template <>
+struct View_traits<2, float>
+{
+  typedef float value_type;
+  typedef vsip_block_f block_type;
+  typedef vsip_mview_f view_type;
+
+  static view_type *create(vsip_length r, vsip_length c, bool row_major)
+  {
+    view_type *v = vsip_mcreate_f(r, c, row_major ? VSIP_ROW : VSIP_COL,
+                                  VSIP_MEM_NONE);
+    if (!v) VSIP_THROW(std::bad_alloc());
+    return v;
+  }
+  static view_type *bind(block_type const *b, vsip_offset o,
+                         vsip_stride s_r, vsip_length rows,
+                         vsip_stride s_c, vsip_length cols)
+  {
+    view_type *v = vsip_mbind_f(b, o, s_r, rows, s_c, cols);
+    if (!v) VSIP_THROW(std::bad_alloc());
+    return v;
+  }
+  static view_type *clone(view_type *v)
+  {
+    view_type *c = vsip_mcloneview_f(v);
+    if (!c) VSIP_THROW(std::bad_alloc());
+    return c;
+  }
+  static void destroy(view_type *v) { vsip_malldestroy_f(v);}
+  static void copy(view_type *s, view_type *d) { vsip_mcopy_f_f(s, d);}
+  static block_type *block(view_type *v) { return vsip_mgetblock_f(v);}
+  static vsip_offset offset(view_type *v) { return vsip_mgetoffset_f(v);}
+  static vsip_stride row_stride(view_type *v) { return vsip_mgetrowstride_f(v);}
+  static vsip_length row_length(view_type *v) { return vsip_mgetrowlength_f(v);}
+  static vsip_stride col_stride(view_type *v) { return vsip_mgetcolstride_f(v);}
+  static vsip_length col_length(view_type *v) { return vsip_mgetcollength_f(v);}
+};
+
+template <>
+struct View_traits<2, std::complex<float> >
+{
+  typedef std::complex<float> value_type;
+  typedef vsip_cblock_f block_type;
+  typedef vsip_cmview_f view_type;
+
+  static view_type *create(vsip_length r, vsip_length c, bool row_major)
+  {
+    view_type *v = vsip_cmcreate_f(r, c, row_major ? VSIP_ROW : VSIP_COL, VSIP_MEM_NONE);
+    if (!v) VSIP_THROW(std::bad_alloc());
+    return v;
+  }
+  static view_type *bind(block_type const *b, vsip_offset o,
+                         vsip_stride s_r, vsip_length rows,
+                         vsip_stride s_c, vsip_length cols)
+  {
+    view_type *v = vsip_cmbind_f(b, o, s_r, rows, s_c, cols);
+    if (!v) VSIP_THROW(std::bad_alloc());
+    return v;
+  }
+  static view_type *clone(view_type *v)
+  {
+    view_type *c = vsip_cmcloneview_f(v);
+    if (!c) VSIP_THROW(std::bad_alloc());
+    return c;
+  }
+  static void destroy(view_type *v) { vsip_cmalldestroy_f(v);}
+  static void copy(view_type *s, view_type *d) { vsip_cmcopy_f_f(s, d);}
+  static block_type *block(view_type *v) { return vsip_cmgetblock_f(v);}
+  static vsip_offset offset(view_type *v) { return vsip_cmgetoffset_f(v);}
+  static vsip_stride row_stride(view_type *v) { return vsip_cmgetrowstride_f(v);}
+  static vsip_length row_length(view_type *v) { return vsip_cmgetrowlength_f(v);}
+  static vsip_stride col_stride(view_type *v) { return vsip_cmgetcolstride_f(v);}
+  static vsip_length col_length(view_type *v) { return vsip_cmgetcollength_f(v);}
+};
+
 #endif
 #if VSIP_IMPL_CVSIP_HAVE_DOUBLE
 
@@ -266,164 +427,7 @@
   static vsip_length length(view_type *v) { return vsip_cvgetlength_d(v);}
 };
 
-
-
 template <>
-struct View_traits<2, bool>
-{
-  typedef bool value_type;
-  typedef vsip_block_bl block_type;
-  typedef vsip_mview_bl view_type;
-
-  static view_type* create(vsip_length r, vsip_length c, bool row_major)
-  {
-    view_type* v = vsip_mcreate_bl(r, c, row_major ? VSIP_ROW : VSIP_COL,
-                                  VSIP_MEM_NONE);
-    if (!v) VSIP_THROW(std::bad_alloc());
-    return v;
-  }
-  static view_type* bind(block_type const* b, vsip_offset o,
-                         vsip_stride s_r, vsip_length rows,
-                         vsip_stride s_c, vsip_length cols)
-  {
-    view_type* v = vsip_mbind_bl(b, o, s_r, rows, s_c, cols);
-    if (!v) VSIP_THROW(std::bad_alloc());
-    return v;
-  }
-  static view_type* clone(view_type* v)
-  {
-    view_type* c = vsip_mcloneview_bl(v);
-    if (!c) VSIP_THROW(std::bad_alloc());
-    return c;
-  }
-  static void destroy(view_type* v) { vsip_malldestroy_bl(v);}
-  static void copy(view_type* s, view_type* d) { vsip_mcopy_bl_bl(s, d);}
-  static block_type* block(view_type* v) { return vsip_mgetblock_bl(v);}
-  static vsip_offset offset(view_type* v) { return vsip_mgetoffset_bl(v);}
-  static vsip_stride row_stride(view_type* v) { return vsip_mgetrowstride_bl(v);}
-  static vsip_length row_length(view_type* v) { return vsip_mgetrowlength_bl(v);}
-  static vsip_stride col_stride(view_type* v) { return vsip_mgetcolstride_bl(v);}
-  static vsip_length col_length(view_type* v) { return vsip_mgetcollength_bl(v);}
-  static bool get(view_type* v, index_type r, index_type c)
-    { return (bool)vsip_mget_bl(v, r, c); }
-  static void put(view_type* v, index_type r, index_type c, bool value)
-    { vsip_mput_bl(v, r, c, (vsip_scalar_bl)value); }
-};
-
-template <>
-struct View_traits<2, int>
-{
-  typedef int value_type;
-  typedef vsip_block_i block_type;
-  typedef vsip_mview_i view_type;
-
-  static view_type* create(vsip_length r, vsip_length c, bool row_major)
-  {
-    view_type* v = vsip_mcreate_i(r, c, row_major ? VSIP_ROW : VSIP_COL,
-                                  VSIP_MEM_NONE);
-    if (!v) VSIP_THROW(std::bad_alloc());
-    return v;
-  }
-  static view_type* bind(block_type const* b, vsip_offset o,
-                         vsip_stride s_r, vsip_length rows,
-                         vsip_stride s_c, vsip_length cols)
-  {
-    view_type* v = vsip_mbind_i(b, o, s_r, rows, s_c, cols);
-    if (!v) VSIP_THROW(std::bad_alloc());
-    return v;
-  }
-  static view_type* clone(view_type* v)
-  {
-    view_type* c = vsip_mcloneview_i(v);
-    if (!c) VSIP_THROW(std::bad_alloc());
-    return c;
-  }
-  static void destroy(view_type* v) { vsip_malldestroy_i(v);}
-  // [1] static void copy(view_type* s, view_type* d) { vsip_mcopy_i_i(s, d);}
-  static block_type* block(view_type* v) { return vsip_mgetblock_i(v);}
-  static vsip_offset offset(view_type* v) { return vsip_mgetoffset_i(v);}
-  static vsip_stride row_stride(view_type* v) { return vsip_mgetrowstride_i(v);}
-  static vsip_length row_length(view_type* v) { return vsip_mgetrowlength_i(v);}
-  static vsip_stride col_stride(view_type* v) { return vsip_mgetcolstride_i(v);}
-  static vsip_length col_length(view_type* v) { return vsip_mgetcollength_i(v);}
-};
-
-template <>
-struct View_traits<2, float>
-{
-  typedef float value_type;
-  typedef vsip_block_f block_type;
-  typedef vsip_mview_f view_type;
-
-  static view_type *create(vsip_length r, vsip_length c, bool row_major)
-  {
-    view_type *v = vsip_mcreate_f(r, c, row_major ? VSIP_ROW : VSIP_COL,
-                                  VSIP_MEM_NONE);
-    if (!v) VSIP_THROW(std::bad_alloc());
-    return v;
-  }
-  static view_type *bind(block_type const *b, vsip_offset o,
-                         vsip_stride s_r, vsip_length rows,
-                         vsip_stride s_c, vsip_length cols)
-  {
-    view_type *v = vsip_mbind_f(b, o, s_r, rows, s_c, cols);
-    if (!v) VSIP_THROW(std::bad_alloc());
-    return v;
-  }
-  static view_type *clone(view_type *v)
-  {
-    view_type *c = vsip_mcloneview_f(v);
-    if (!c) VSIP_THROW(std::bad_alloc());
-    return c;
-  }
-  static void destroy(view_type *v) { vsip_malldestroy_f(v);}
-  static void copy(view_type *s, view_type *d) { vsip_mcopy_f_f(s, d);}
-  static block_type *block(view_type *v) { return vsip_mgetblock_f(v);}
-  static vsip_offset offset(view_type *v) { return vsip_mgetoffset_f(v);}
-  static vsip_stride row_stride(view_type *v) { return vsip_mgetrowstride_f(v);}
-  static vsip_length row_length(view_type *v) { return vsip_mgetrowlength_f(v);}
-  static vsip_stride col_stride(view_type *v) { return vsip_mgetcolstride_f(v);}
-  static vsip_length col_length(view_type *v) { return vsip_mgetcollength_f(v);}
-};
-
-template <>
-struct View_traits<2, std::complex<float> >
-{
-  typedef std::complex<float> value_type;
-  typedef vsip_cblock_f block_type;
-  typedef vsip_cmview_f view_type;
-
-  static view_type *create(vsip_length r, vsip_length c, bool row_major)
-  {
-    view_type *v = vsip_cmcreate_f(r, c, row_major ? VSIP_ROW : VSIP_COL, VSIP_MEM_NONE);
-    if (!v) VSIP_THROW(std::bad_alloc());
-    return v;
-  }
-  static view_type *bind(block_type const *b, vsip_offset o,
-                         vsip_stride s_r, vsip_length rows,
-                         vsip_stride s_c, vsip_length cols)
-  {
-    view_type *v = vsip_cmbind_f(b, o, s_r, rows, s_c, cols);
-    if (!v) VSIP_THROW(std::bad_alloc());
-    return v;
-  }
-  static view_type *clone(view_type *v)
-  {
-    view_type *c = vsip_cmcloneview_f(v);
-    if (!c) VSIP_THROW(std::bad_alloc());
-    return c;
-  }
-  static void destroy(view_type *v) { vsip_cmalldestroy_f(v);}
-  static void copy(view_type *s, view_type *d) { vsip_cmcopy_f_f(s, d);}
-  static block_type *block(view_type *v) { return vsip_cmgetblock_f(v);}
-  static vsip_offset offset(view_type *v) { return vsip_cmgetoffset_f(v);}
-  static vsip_stride row_stride(view_type *v) { return vsip_cmgetrowstride_f(v);}
-  static vsip_length row_length(view_type *v) { return vsip_cmgetrowlength_f(v);}
-  static vsip_stride col_stride(view_type *v) { return vsip_cmgetcolstride_f(v);}
-  static vsip_length col_length(view_type *v) { return vsip_cmgetcollength_f(v);}
-};
-
-template <>
 struct View_traits<2, double>
 {
   typedef double value_type;
Index: configure.ac
===================================================================
--- configure.ac	(revision 165209)
+++ configure.ac	(working copy)
@@ -1634,6 +1634,8 @@
   CPPFLAGS="$CPPFLAGS $CVSIP_CPPFLAGS"
   AC_CHECK_HEADER([vsip.h])
   LDFLAGS="$LDFLAGS $CVSIP_LDFLAGS"
+  AC_CHECK_LIB(vsip, vsip_vcreate_bl,[ cvsip_have_bool=1])
+  AC_CHECK_LIB(vsip, vsip_vcreate_i,[ cvsip_have_int=1])
   AC_CHECK_LIB(vsip, vsip_ccfftop_create_f,[ cvsip_have_float=1])
   AC_CHECK_LIB(vsip, vsip_ccfftop_create_d,[ cvsip_have_double=1])
   if test -n "$cvsip_have_float" -o -n "$cvsip_have_double"; then
@@ -1643,16 +1645,24 @@
                     vsip_corr1d_create_f vsip_corr1d_create_d\
                     vsip_corr2d_create_f vsip_corr2d_create_d],,,
       [#include <vsip.h>])
+    AC_SUBST(VSIP_IMPL_CVSIP_HAVE_BOOL, $cvsip_have_bool)
+    AC_SUBST(VSIP_IMPL_CVSIP_HAVE_INT, $cvsip_have_int)
     AC_SUBST(VSIP_IMPL_CVSIP_HAVE_FLOAT, $cvsip_have_float)
     AC_SUBST(VSIP_IMPL_CVSIP_HAVE_DOUBLE, $cvsip_have_double)
     AC_SUBST(VSIP_IMPL_HAVE_CVSIP, 1)
     if test "$neutral_acconfig" = 'y'; then
       CPPFLAGS="$CPPFLAGS -DVSIP_IMPL_HAVE_CVSIP=1"
+      CPPFLAGS="$CPPFLAGS -DVSIP_IMPL_CVSIP_HAVE_BOOL=$cvsip_have_bool"
+      CPPFLAGS="$CPPFLAGS -DVSIP_IMPL_CVSIP_HAVE_INT=$cvsip_have_int"
       CPPFLAGS="$CPPFLAGS -DVSIP_IMPL_CVSIP_HAVE_FLOAT=$cvsip_have_float"
       CPPFLAGS="$CPPFLAGS -DVSIP_IMPL_CVSIP_HAVE_DOUBLE=$cvsip_have_double"
     else
       AC_DEFINE_UNQUOTED(VSIP_IMPL_HAVE_CVSIP, 1,
         [Define to use C-VSIPL library.])
+      AC_DEFINE_UNQUOTED(VSIP_IMPL_CVSIP_HAVE_BOOL, $cvsip_have_bool,
+        [Define if C-VSIPL supports bool views.])
+      AC_DEFINE_UNQUOTED(VSIP_IMPL_CVSIP_HAVE_INT, $cvsip_have_int,
+        [Define if C-VSIPL supports int views.])
       AC_DEFINE_UNQUOTED(VSIP_IMPL_CVSIP_HAVE_FLOAT, $cvsip_have_float,
         [Define if C-VSIPL supports float operations.])
       AC_DEFINE_UNQUOTED(VSIP_IMPL_CVSIP_HAVE_DOUBLE, $cvsip_have_double,
