From martin at herrman.nl  Wed Sep 28 16:22:40 2011
From: martin at herrman.nl (Martin Herrman)
Date: Wed, 28 Sep 2011 18:22:40 +0200
Subject: [mips-gnu-discuss] IEEE math support
Message-ID: <CADR1r6jWBQ2oGCCLnagSjaRasTggwUowGdUf3_aHqxXhoYVepg@mail.gmail.com>

Dear Sourcery users,

I'm cross-compiling on my Gentoo Linux AMD64 system using Sourcery G++
Lite 4.3-154 to a target MIPS EL 32r2 system.

I want to compile the rrdtool software
(http://oss.oetiker.ch/rrdtool/) which requires that the compiler
supports IEEE math. In the documentation I found that when the target
is an i386 system, the -mieee-fp argument supports it. For MIPS target
architecture, such an option is not documented.

Is that correct, or do I misunderstand the documentation?
Is there any solution available (without a total rewrite of the
rrdtool source code)?

Much thanks in advance,

Martin

From joseph at codesourcery.com  Wed Sep 28 16:51:28 2011
From: joseph at codesourcery.com (Joseph S. Myers)
Date: Wed, 28 Sep 2011 16:51:28 +0000 (UTC)
Subject: [mips-gnu-discuss] IEEE math support
In-Reply-To: <CADR1r6jWBQ2oGCCLnagSjaRasTggwUowGdUf3_aHqxXhoYVepg@mail.gmail.com>
References: <CADR1r6jWBQ2oGCCLnagSjaRasTggwUowGdUf3_aHqxXhoYVepg@mail.gmail.com>
Message-ID: <Pine.LNX.4.64.1109281642460.4509@digraph.polyomino.org.uk>

On Wed, 28 Sep 2011, Martin Herrman wrote:

> I want to compile the rrdtool software
> (http://oss.oetiker.ch/rrdtool/) which requires that the compiler
> supports IEEE math. In the documentation I found that when the target

"supports IEEE math" can have many possible meanings; it's difficult to 
give a meaningful answer without a detailed explanation of the 
requirements of the particular code, but in general the support levels on 
i386 and MIPS are similar.

> is an i386 system, the -mieee-fp argument supports it. For MIPS target
> architecture, such an option is not documented.
> 
> Is that correct, or do I misunderstand the documentation?

The -mieee-fp option does very little on i386.  Within the compiler it's 
enabled by default, so the only effect is to link with -lieee at link 
time, and in turn what that does is disable setting errno for various 
mathematical library functions (but probably not consistently) while 
leaving them setting the exceptions they would do anyway.  Code using 
-mieee-fp on i386 is probably using it based on some vague idea that it 
sounds good, rather than because of any need for its actual, limited, 
effects.

> Is there any solution available (without a total rewrite of the
> rrdtool source code)?

You can always link with -lieee if the effects of that are genuinely 
required.  If your MIPS processor has hardware floating point support then 
you will have exceptions and rounding modes working (subject to all the 
same compiler limitations as apply on all targets, not just MIPS), 
although some exceptional cases may rely on kernel emulation.

-- 
Joseph S. Myers
joseph at codesourcery.com

From martin at herrman.nl  Fri Sep 30 14:52:10 2011
From: martin at herrman.nl (Martin Herrman)
Date: Fri, 30 Sep 2011 16:52:10 +0200
Subject: [mips-gnu-discuss] IEEE math support
In-Reply-To: <Pine.LNX.4.64.1109281642460.4509@digraph.polyomino.org.uk>
References: <CADR1r6jWBQ2oGCCLnagSjaRasTggwUowGdUf3_aHqxXhoYVepg@mail.gmail.com>
	<Pine.LNX.4.64.1109281642460.4509@digraph.polyomino.org.uk>
Message-ID: <CADR1r6hoQX-F4q6KQY8za_y+sB1qarOjTzNWH3otw2X+WtGpsw@mail.gmail.com>

2011/9/28 Joseph S. Myers <joseph at codesourcery.com>:

Hi Joseph,

thanks for your quick response.

> "supports IEEE math" can have many possible meanings; it's difficult to
> give a meaningful answer without a detailed explanation of the
> requirements of the particular code, but in general the support levels on
> i386 and MIPS are similar.

I think that I cannot be more specific than the test done in the
configure script:

int main(void){
    double rrdnan,rrdinf,rrdc,rrdzero;
    ;
    /* some math to see if we get a floating point exception */
    rrdzero=sin(0.0); /* don't let the compiler optimize us away */
    rrdnan=0.0/rrdzero; /* especially here */
    rrdinf=1.0/rrdzero; /* and here. I want to know if it can do the magic */
                  /* at run time without sig fpe */
    rrdc = rrdinf + rrdnan;
    rrdc = rrdinf / rrdnan;
    if (! isnan(rrdnan)) {printf ("not isnan(NaN) ... "); return 1;}
    if (rrdnan == rrdnan) {printf ("nan == nan ... "); return 1;}
    if (! isinf(rrdinf)) {printf ("not isinf(oo) ... "); return 1;}
    if (! isinf(-rrdinf)) {printf ("not isinf(-oo) ... "); return 1;}
    if (! rrdinf > 0) {printf ("not inf > 0 ... "); return 1;}
    if (! -rrdinf < 0) {printf ("not -inf < 0 ... "); return 1;}
    return 0;
 }

I could fake it by setting rc_cv_ieee_works before running configure:

if test x${rd_cv_ieee_works} = "xyes"; then
 { $as_echo "$as_me:$LINENO: result: yes" >&5
$as_echo "yes" >&6; }

but I guess that this likely ends up in problems..

> The -mieee-fp option does very little on i386. ?Within the compiler it's
> enabled by default, so the only effect is to link with -lieee at link
> time, and in turn what that does is disable setting errno for various
> mathematical library functions (but probably not consistently) while
> leaving them setting the exceptions they would do anyway. ?Code using
> -mieee-fp on i386 is probably using it based on some vague idea that it
> sounds good, rather than because of any need for its actual, limited,
> effects.

Ah, I see, but don't understand the use of disable the setting of an
errno but still set an exception.

> You can always link with -lieee if the effects of that are genuinely
> required. ?If your MIPS processor has hardware floating point support then
> you will have exceptions and rounding modes working (subject to all the
> same compiler limitations as apply on all targets, not just MIPS),
> although some exceptional cases may rely on kernel emulation.

This is the target platform CPU:

http://opensource.eminent-online.com/wiki/index.php/EM7075_Tech

I don't understand what you mean with "rounding modes". Although I do
have some basic knowledge on math and CPU architecture, I'm not an
expert at all in these fields.

Do you have any tips/solutions to get this source compiled?

Thanks a lot,

Martin

From joseph at codesourcery.com  Fri Sep 30 19:27:07 2011
From: joseph at codesourcery.com (Joseph S. Myers)
Date: Fri, 30 Sep 2011 19:27:07 +0000 (UTC)
Subject: [mips-gnu-discuss] IEEE math support
In-Reply-To: <CADR1r6hoQX-F4q6KQY8za_y+sB1qarOjTzNWH3otw2X+WtGpsw@mail.gmail.com>
References: <CADR1r6jWBQ2oGCCLnagSjaRasTggwUowGdUf3_aHqxXhoYVepg@mail.gmail.com>
	<Pine.LNX.4.64.1109281642460.4509@digraph.polyomino.org.uk>
	<CADR1r6hoQX-F4q6KQY8za_y+sB1qarOjTzNWH3otw2X+WtGpsw@mail.gmail.com>
Message-ID: <Pine.LNX.4.64.1109301924110.22013@digraph.polyomino.org.uk>

On Fri, 30 Sep 2011, Martin Herrman wrote:

> I think that I cannot be more specific than the test done in the
> configure script:
> 
> int main(void){

(This code has undefined behavior unless you include <math.h> and 
<stdio.h> first for declarations of the various functions used.)

>     double rrdnan,rrdinf,rrdc,rrdzero;
>     ;
>     /* some math to see if we get a floating point exception */
>     rrdzero=sin(0.0); /* don't let the compiler optimize us away */
>     rrdnan=0.0/rrdzero; /* especially here */
>     rrdinf=1.0/rrdzero; /* and here. I want to know if it can do the magic */
>                   /* at run time without sig fpe */
>     rrdc = rrdinf + rrdnan;
>     rrdc = rrdinf / rrdnan;
>     if (! isnan(rrdnan)) {printf ("not isnan(NaN) ... "); return 1;}
>     if (rrdnan == rrdnan) {printf ("nan == nan ... "); return 1;}
>     if (! isinf(rrdinf)) {printf ("not isinf(oo) ... "); return 1;}
>     if (! isinf(-rrdinf)) {printf ("not isinf(-oo) ... "); return 1;}
>     if (! rrdinf > 0) {printf ("not inf > 0 ... "); return 1;}
>     if (! -rrdinf < 0) {printf ("not -inf < 0 ... "); return 1;}
>     return 0;
>  }

At least with those declarations added, this test works fine with our 
tools, both big and little endian, hard and soft float.

These tools are of course cross compilers, and configure can't generally 
run tests on the target when cross compiling, so you'll need to look in 
more detail at what the configure script does when cross compiling.

-- 
Joseph S. Myers
joseph at codesourcery.com

